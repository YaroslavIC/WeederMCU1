
WeederMCU1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e7c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800901c  0800901c  0000a01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009110  08009110  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  08009110  08009110  0000a110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009118  08009118  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009118  08009118  0000a118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800911c  0800911c  0000a11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009120  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e6c  20000060  08009180  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ecc  08009180  0000becc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d079  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d2c  00000000  00000000  00028109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  0002be38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001379  00000000  00000000  0002d738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000743c  00000000  00000000  0002eab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001caa1  00000000  00000000  00035eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab32b  00000000  00000000  0005298e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fdcb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007168  00000000  00000000  000fdcfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00104e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009004 	.word	0x08009004

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08009004 	.word	0x08009004

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b96a 	b.w	8000e18 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	460c      	mov	r4, r1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d14e      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b68:	4694      	mov	ip, r2
 8000b6a:	458c      	cmp	ip, r1
 8000b6c:	4686      	mov	lr, r0
 8000b6e:	fab2 f282 	clz	r2, r2
 8000b72:	d962      	bls.n	8000c3a <__udivmoddi4+0xde>
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	4091      	lsls	r1, r2
 8000b7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	4319      	orrs	r1, r3
 8000b86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8e:	fa1f f68c 	uxth.w	r6, ip
 8000b92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b9a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb04 f106 	mul.w	r1, r4, r6
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bb2:	f080 8112 	bcs.w	8000dda <__udivmoddi4+0x27e>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 810f 	bls.w	8000dda <__udivmoddi4+0x27e>
 8000bbc:	3c02      	subs	r4, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	fa1f f38e 	uxth.w	r3, lr
 8000bc6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bca:	fb07 1110 	mls	r1, r7, r0, r1
 8000bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd2:	fb00 f606 	mul.w	r6, r0, r6
 8000bd6:	429e      	cmp	r6, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x94>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be2:	f080 80fc 	bcs.w	8000dde <__udivmoddi4+0x282>
 8000be6:	429e      	cmp	r6, r3
 8000be8:	f240 80f9 	bls.w	8000dde <__udivmoddi4+0x282>
 8000bec:	4463      	add	r3, ip
 8000bee:	3802      	subs	r0, #2
 8000bf0:	1b9b      	subs	r3, r3, r6
 8000bf2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	b11d      	cbz	r5, 8000c02 <__udivmoddi4+0xa6>
 8000bfa:	40d3      	lsrs	r3, r2
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	e9c5 3200 	strd	r3, r2, [r5]
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d905      	bls.n	8000c16 <__udivmoddi4+0xba>
 8000c0a:	b10d      	cbz	r5, 8000c10 <__udivmoddi4+0xb4>
 8000c0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c10:	2100      	movs	r1, #0
 8000c12:	4608      	mov	r0, r1
 8000c14:	e7f5      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c16:	fab3 f183 	clz	r1, r3
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d146      	bne.n	8000cac <__udivmoddi4+0x150>
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xcc>
 8000c22:	4290      	cmp	r0, r2
 8000c24:	f0c0 80f0 	bcc.w	8000e08 <__udivmoddi4+0x2ac>
 8000c28:	1a86      	subs	r6, r0, r2
 8000c2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	2d00      	cmp	r5, #0
 8000c32:	d0e6      	beq.n	8000c02 <__udivmoddi4+0xa6>
 8000c34:	e9c5 6300 	strd	r6, r3, [r5]
 8000c38:	e7e3      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	f040 8090 	bne.w	8000d60 <__udivmoddi4+0x204>
 8000c40:	eba1 040c 	sub.w	r4, r1, ip
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	fa1f f78c 	uxth.w	r7, ip
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb08 4416 	mls	r4, r8, r6, r4
 8000c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5e:	fb07 f006 	mul.w	r0, r7, r6
 8000c62:	4298      	cmp	r0, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x11c>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x11a>
 8000c70:	4298      	cmp	r0, r3
 8000c72:	f200 80cd 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c76:	4626      	mov	r6, r4
 8000c78:	1a1c      	subs	r4, r3, r0
 8000c7a:	fa1f f38e 	uxth.w	r3, lr
 8000c7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c82:	fb08 4410 	mls	r4, r8, r0, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb00 f707 	mul.w	r7, r0, r7
 8000c8e:	429f      	cmp	r7, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x148>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x146>
 8000c9c:	429f      	cmp	r7, r3
 8000c9e:	f200 80b0 	bhi.w	8000e02 <__udivmoddi4+0x2a6>
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	1bdb      	subs	r3, r3, r7
 8000ca6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000caa:	e7a5      	b.n	8000bf8 <__udivmoddi4+0x9c>
 8000cac:	f1c1 0620 	rsb	r6, r1, #32
 8000cb0:	408b      	lsls	r3, r1
 8000cb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cbc:	fa04 f301 	lsl.w	r3, r4, r1
 8000cc0:	ea43 030c 	orr.w	r3, r3, ip
 8000cc4:	40f4      	lsrs	r4, r6
 8000cc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cca:	0c38      	lsrs	r0, r7, #16
 8000ccc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cd4:	fa1f fc87 	uxth.w	ip, r7
 8000cd8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cdc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ce4:	45a1      	cmp	r9, r4
 8000ce6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x1a6>
 8000cec:	193c      	adds	r4, r7, r4
 8000cee:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cf2:	f080 8084 	bcs.w	8000dfe <__udivmoddi4+0x2a2>
 8000cf6:	45a1      	cmp	r9, r4
 8000cf8:	f240 8081 	bls.w	8000dfe <__udivmoddi4+0x2a2>
 8000cfc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	eba4 0409 	sub.w	r4, r4, r9
 8000d06:	fa1f f983 	uxth.w	r9, r3
 8000d0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	d907      	bls.n	8000d2e <__udivmoddi4+0x1d2>
 8000d1e:	193c      	adds	r4, r7, r4
 8000d20:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d24:	d267      	bcs.n	8000df6 <__udivmoddi4+0x29a>
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d965      	bls.n	8000df6 <__udivmoddi4+0x29a>
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d32:	fba0 9302 	umull	r9, r3, r0, r2
 8000d36:	eba4 040c 	sub.w	r4, r4, ip
 8000d3a:	429c      	cmp	r4, r3
 8000d3c:	46ce      	mov	lr, r9
 8000d3e:	469c      	mov	ip, r3
 8000d40:	d351      	bcc.n	8000de6 <__udivmoddi4+0x28a>
 8000d42:	d04e      	beq.n	8000de2 <__udivmoddi4+0x286>
 8000d44:	b155      	cbz	r5, 8000d5c <__udivmoddi4+0x200>
 8000d46:	ebb8 030e 	subs.w	r3, r8, lr
 8000d4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d52:	40cb      	lsrs	r3, r1
 8000d54:	431e      	orrs	r6, r3
 8000d56:	40cc      	lsrs	r4, r1
 8000d58:	e9c5 6400 	strd	r6, r4, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e750      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000d60:	f1c2 0320 	rsb	r3, r2, #32
 8000d64:	fa20 f103 	lsr.w	r1, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d70:	4094      	lsls	r4, r2
 8000d72:	430c      	orrs	r4, r1
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d7c:	fa1f f78c 	uxth.w	r7, ip
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3110 	mls	r1, r8, r0, r3
 8000d88:	0c23      	lsrs	r3, r4, #16
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f107 	mul.w	r1, r0, r7
 8000d92:	4299      	cmp	r1, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x24c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d9e:	d22c      	bcs.n	8000dfa <__udivmoddi4+0x29e>
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d92a      	bls.n	8000dfa <__udivmoddi4+0x29e>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000db0:	fb08 3311 	mls	r3, r8, r1, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb01 f307 	mul.w	r3, r1, r7
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x276>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dc8:	d213      	bcs.n	8000df2 <__udivmoddi4+0x296>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d911      	bls.n	8000df2 <__udivmoddi4+0x296>
 8000dce:	3902      	subs	r1, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	1ae4      	subs	r4, r4, r3
 8000dd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd8:	e739      	b.n	8000c4e <__udivmoddi4+0xf2>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	e6f0      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e706      	b.n	8000bf0 <__udivmoddi4+0x94>
 8000de2:	45c8      	cmp	r8, r9
 8000de4:	d2ae      	bcs.n	8000d44 <__udivmoddi4+0x1e8>
 8000de6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dee:	3801      	subs	r0, #1
 8000df0:	e7a8      	b.n	8000d44 <__udivmoddi4+0x1e8>
 8000df2:	4631      	mov	r1, r6
 8000df4:	e7ed      	b.n	8000dd2 <__udivmoddi4+0x276>
 8000df6:	4603      	mov	r3, r0
 8000df8:	e799      	b.n	8000d2e <__udivmoddi4+0x1d2>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e7d4      	b.n	8000da8 <__udivmoddi4+0x24c>
 8000dfe:	46d6      	mov	lr, sl
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1a6>
 8000e02:	4463      	add	r3, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	e74d      	b.n	8000ca4 <__udivmoddi4+0x148>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e70f      	b.n	8000c30 <__udivmoddi4+0xd4>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	4463      	add	r3, ip
 8000e14:	e730      	b.n	8000c78 <__udivmoddi4+0x11c>
 8000e16:	bf00      	nop

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
WheelData::WheelData(
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	f107 0014 	add.w	r0, r7, #20
 8000e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		WheelSide WS_)

{

	hi2c = hi2c_;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	334c      	adds	r3, #76	@ 0x4c
 8000e32:	f107 0114 	add.w	r1, r7, #20
 8000e36:	2254      	movs	r2, #84	@ 0x54
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f008 f88b 	bl	8008f54 <memcpy>

	htim = htim_;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3304      	adds	r3, #4
 8000e42:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8000e46:	2248      	movs	r2, #72	@ 0x48
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f008 f883 	bl	8008f54 <memcpy>

	PWM_Channel = PWM_Channel_;
 8000e4e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f8c3 2248 	str.w	r2, [r3, #584]	@ 0x248

	GPIOx_INA = GPIOx_INA_;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8000e5e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	GPIO_Pin_INA = GPIO_Pin_INA_;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8000e68:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	PinState_INA = PinState_INA_;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f897 20bc 	ldrb.w	r2, [r7, #188]	@ 0xbc
 8000e72:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6

	GPIOx_INB = GPIOx_INB_;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8000e7c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	GPIO_Pin_INB = GPIO_Pin_INB_;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	@ 0xc4
 8000e86:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	PinState_INB = PinState_INB_;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f897 20c8 	ldrb.w	r2, [r7, #200]	@ 0xc8
 8000e90:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae

	ws = WS_;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f897 20cc 	ldrb.w	r2, [r7, #204]	@ 0xcc
 8000e9a:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf

	HAL_TIM_PWM_Start(&htim, PWM_Channel);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	1d1a      	adds	r2, r3, #4
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4610      	mov	r0, r2
 8000eac:	f004 f9a8 	bl	8005200 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim, PWM_Channel, 0);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d104      	bne.n	8000ec4 <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide+0xa8>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ec2:	e017      	b.n	8000ef4 <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide+0xd8>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d104      	bne.n	8000ed8 <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide+0xbc>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ed6:	e00d      	b.n	8000ef4 <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide+0xd8>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d104      	bne.n	8000eec <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide+0xd0>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000eea:	e003      	b.n	8000ef4 <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide+0xd8>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	641a      	str	r2, [r3, #64]	@ 0x40

	PID_P = 0.01;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f34 <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide+0x118>)
 8000ef8:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
	PID_I = 0;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
	PID_D = 0;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	Target_Speed = 0;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	Current_Speed = 0;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

}
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f30:	b004      	add	sp, #16
 8000f32:	4770      	bx	lr
 8000f34:	3c23d70a 	.word	0x3c23d70a

08000f38 <_ZN9WheelData10ReadAS5600Ev>:

void WheelData::ReadAS5600(void) // pulling 0.5 ms
		{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b08e      	sub	sp, #56	@ 0x38
 8000f3c:	af04      	add	r7, sp, #16
 8000f3e:	6078      	str	r0, [r7, #4]
	uint8_t regData[2];

	HAL_I2C_Mem_Read(&hi2c, (I2C_AS5600 << 1), AS5600_ANGLE_H,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8000f46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f4a:	9302      	str	r3, [sp, #8]
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2301      	movs	r3, #1
 8000f58:	220e      	movs	r2, #14
 8000f5a:	216c      	movs	r1, #108	@ 0x6c
 8000f5c:	f002 fe2a 	bl	8003bb4 <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, (uint8_t*) &regData, 2, 0x10000);

	float tmpangle = ((float) (((uint16_t) regData[0] << 8
 8000f60:	7b3b      	ldrb	r3, [r7, #12]
 8000f62:	021b      	lsls	r3, r3, #8
			| (uint16_t) regData[1]) & (uint16_t) 0xFFF)) / 4096 * 360;
 8000f64:	7b7a      	ldrb	r2, [r7, #13]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
	float tmpangle = ((float) (((uint16_t) regData[0] << 8
 8000f6c:	ee07 3a90 	vmov	s15, r3
 8000f70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			| (uint16_t) regData[1]) & (uint16_t) 0xFFF)) / 4096 * 360;
 8000f74:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8001174 <_ZN9WheelData10ReadAS5600Ev+0x23c>
 8000f78:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float tmpangle = ((float) (((uint16_t) regData[0] << 8
 8000f7c:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8001178 <_ZN9WheelData10ReadAS5600Ev+0x240>
 8000f80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f84:	edc7 7a06 	vstr	s15, [r7, #24]

	uint32_t tmpmsec = HAL_GetTick();
 8000f88:	f001 fad2 	bl	8002530 <HAL_GetTick>
 8000f8c:	6178      	str	r0, [r7, #20]




	float tmpCurrent_Speed = fabsf(
			(1000 * (tmpangle - angle[MAX_ANGLE_WHEEL_ARRAY - 1]))
 8000f8e:	69b8      	ldr	r0, [r7, #24]
 8000f90:	f7ff fa8a 	bl	80004a8 <__aeabi_f2d>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	@ 0x1a0
 8000f9a:	f7ff f925 	bl	80001e8 <__aeabi_dsub>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	4b74      	ldr	r3, [pc, #464]	@ (800117c <_ZN9WheelData10ReadAS5600Ev+0x244>)
 8000fac:	f7ff fad4 	bl	8000558 <__aeabi_dmul>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4614      	mov	r4, r2
 8000fb6:	461d      	mov	r5, r3
					/ (tmpmsec - time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1]))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fa4e 	bl	8000464 <__aeabi_ui2d>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4620      	mov	r0, r4
 8000fce:	4629      	mov	r1, r5
 8000fd0:	f7ff fbec 	bl	80007ac <__aeabi_ddiv>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fd56 	bl	8000a8c <__aeabi_d2f>
 8000fe0:	ee07 0a90 	vmov	s15, r0
	float tmpCurrent_Speed = fabsf(
 8000fe4:	eeb0 7ae7 	vabs.f32	s14, s15
			/ 360 * 60;
 8000fe8:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8001178 <_ZN9WheelData10ReadAS5600Ev+0x240>
 8000fec:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float tmpCurrent_Speed = fabsf(
 8000ff0:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001180 <_ZN9WheelData10ReadAS5600Ev+0x248>
 8000ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff8:	edc7 7a04 	vstr	s15, [r7, #16]

	// сдвигаем в массиве все в сторону 0, в последнюю ячейку запишим новые данные
	for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001002:	e040      	b.n	8001086 <_ZN9WheelData10ReadAS5600Ev+0x14e>
		angle[i - 1] = angle[i];
 8001004:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001008:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800100c:	1e51      	subs	r1, r2, #1
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	3321      	adds	r3, #33	@ 0x21
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	3121      	adds	r1, #33	@ 0x21
 800101e:	00c9      	lsls	r1, r1, #3
 8001020:	4401      	add	r1, r0
 8001022:	e9c1 2300 	strd	r2, r3, [r1]
		time_ms_wheel[i - 1] = time_ms_wheel[i];
 8001026:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800102a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800102e:	1e5a      	subs	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	312e      	adds	r1, #46	@ 0x2e
 8001034:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	322e      	adds	r2, #46	@ 0x2e
 800103c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		speed[i - 1] = speed[i];
 8001040:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001048:	3b01      	subs	r3, #1
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	326a      	adds	r2, #106	@ 0x6a
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	440a      	add	r2, r1
 8001052:	6812      	ldr	r2, [r2, #0]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	336a      	adds	r3, #106	@ 0x6a
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	601a      	str	r2, [r3, #0]
		Disired_Target_diff[i - 1] = Disired_Target_diff[i];
 800105e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001062:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001066:	3b01      	subs	r3, #1
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	327e      	adds	r2, #126	@ 0x7e
 800106c:	0092      	lsls	r2, r2, #2
 800106e:	440a      	add	r2, r1
 8001070:	6812      	ldr	r2, [r2, #0]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	337e      	adds	r3, #126	@ 0x7e
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 800107c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001080:	3301      	adds	r3, #1
 8001082:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001086:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800108a:	2b13      	cmp	r3, #19
 800108c:	d9ba      	bls.n	8001004 <_ZN9WheelData10ReadAS5600Ev+0xcc>
	};

    // текущая  скорость будт обновлена только если нет перехода угла через ноль

	if (((tmpangle-angle[MAX_ANGLE_WHEEL_ARRAY - 1])*(angle[MAX_ANGLE_WHEEL_ARRAY - 1]-angle[MAX_ANGLE_WHEEL_ARRAY - 2]))<0) {
 800108e:	69b8      	ldr	r0, [r7, #24]
 8001090:	f7ff fa0a 	bl	80004a8 <__aeabi_f2d>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	@ 0x1a0
 800109a:	f7ff f8a5 	bl	80001e8 <__aeabi_dsub>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4614      	mov	r4, r2
 80010a4:	461d      	mov	r5, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	e9d3 0168 	ldrd	r0, r1, [r3, #416]	@ 0x1a0
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	e9d3 2366 	ldrd	r2, r3, [r3, #408]	@ 0x198
 80010b2:	f7ff f899 	bl	80001e8 <__aeabi_dsub>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4620      	mov	r0, r4
 80010bc:	4629      	mov	r1, r5
 80010be:	f7ff fa4b 	bl	8000558 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	f7ff fcb3 	bl	8000a3c <__aeabi_dcmplt>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00c      	beq.n	80010f6 <_ZN9WheelData10ReadAS5600Ev+0x1be>
		angle[MAX_ANGLE_WHEEL_ARRAY - 1] = tmpangle;
 80010dc:	69b8      	ldr	r0, [r7, #24]
 80010de:	f7ff f9e3 	bl	80004a8 <__aeabi_f2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0
		time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1] = tmpmsec;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 80010f4:	e03a      	b.n	800116c <_ZN9WheelData10ReadAS5600Ev+0x234>
		return;
	} else {
		angle[MAX_ANGLE_WHEEL_ARRAY - 1] = tmpangle;
 80010f6:	69b8      	ldr	r0, [r7, #24]
 80010f8:	f7ff f9d6 	bl	80004a8 <__aeabi_f2d>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0
		time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1] = tmpmsec;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
		speed[MAX_ANGLE_WHEEL_ARRAY - 1] = tmpCurrent_Speed;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4

		Disired_Target_diff[MAX_ANGLE_WHEEL_ARRAY - 1] = Target_Speed - tmpCurrent_Speed;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	ed93 7a2d 	vldr	s14, [r3, #180]	@ 0xb4
 800111c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	edc3 7a91 	vstr	s15, [r3, #580]	@ 0x244

		float tmpPID_sum_I = 0;
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
		for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8001130:	2301      	movs	r3, #1
 8001132:	77fb      	strb	r3, [r7, #31]
 8001134:	e00f      	b.n	8001156 <_ZN9WheelData10ReadAS5600Ev+0x21e>
			tmpPID_sum_I = tmpPID_sum_I + Disired_Target_diff[i];
 8001136:	7ffb      	ldrb	r3, [r7, #31]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	337e      	adds	r3, #126	@ 0x7e
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ed97 7a08 	vldr	s14, [r7, #32]
 8001148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800114c:	edc7 7a08 	vstr	s15, [r7, #32]
		for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8001150:	7ffb      	ldrb	r3, [r7, #31]
 8001152:	3301      	adds	r3, #1
 8001154:	77fb      	strb	r3, [r7, #31]
 8001156:	7ffb      	ldrb	r3, [r7, #31]
 8001158:	2b13      	cmp	r3, #19
 800115a:	d9ec      	bls.n	8001136 <_ZN9WheelData10ReadAS5600Ev+0x1fe>
		}
		PID_sum_I = tmpPID_sum_I;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a3a      	ldr	r2, [r7, #32]
 8001160:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264

		Current_Speed = tmpCurrent_Speed;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

	}



}
 800116c:	3728      	adds	r7, #40	@ 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bdb0      	pop	{r4, r5, r7, pc}
 8001172:	bf00      	nop
 8001174:	45800000 	.word	0x45800000
 8001178:	43b40000 	.word	0x43b40000
 800117c:	408f4000 	.word	0x408f4000
 8001180:	42700000 	.word	0x42700000

08001184 <_ZN9WheelData9Set_SpeedEf>:



void WheelData::Set_Speed(float Speed_) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	ed87 0a00 	vstr	s0, [r7]

	Target_Speed = fabsf(Speed_);
 8001190:	edd7 7a00 	vldr	s15, [r7]
 8001194:	eef0 7ae7 	vabs.f32	s15, s15
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4

	if (ws == wsLeft) {
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d135      	bne.n	8001214 <_ZN9WheelData9Set_SpeedEf+0x90>

		if (Speed_ > 0) {
 80011a8:	edd7 7a00 	vldr	s15, [r7]
 80011ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b4:	dd0a      	ble.n	80011cc <_ZN9WheelData9Set_SpeedEf+0x48>
			PinState_INA = GPIO_PIN_RESET;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
			PinState_INB = GPIO_PIN_SET;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			Direction = WH_CW;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
		};
		if (Speed_ < 0) {
 80011cc:	edd7 7a00 	vldr	s15, [r7]
 80011d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	d50a      	bpl.n	80011f0 <_ZN9WheelData9Set_SpeedEf+0x6c>
			PinState_INA = GPIO_PIN_SET;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
			PinState_INB = GPIO_PIN_RESET;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			Direction = WH_CCW;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
		};

		if (Speed_  == 0) {
 80011f0:	edd7 7a00 	vldr	s15, [r7]
 80011f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	d10a      	bne.n	8001214 <_ZN9WheelData9Set_SpeedEf+0x90>
			PinState_INA = GPIO_PIN_RESET;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
			PinState_INB = GPIO_PIN_RESET;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			Direction = WH_STOP;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2202      	movs	r2, #2
 8001212:	701a      	strb	r2, [r3, #0]
		};
	}

	if (ws == wsRight) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 800121a:	2b01      	cmp	r3, #1
 800121c:	d135      	bne.n	800128a <_ZN9WheelData9Set_SpeedEf+0x106>

		if (Speed_  < 0) {
 800121e:	edd7 7a00 	vldr	s15, [r7]
 8001222:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122a:	d50a      	bpl.n	8001242 <_ZN9WheelData9Set_SpeedEf+0xbe>
			PinState_INA = GPIO_PIN_RESET;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
			PinState_INB = GPIO_PIN_SET;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			Direction = WH_CW;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
		};
		if (Speed_  > 0) {
 8001242:	edd7 7a00 	vldr	s15, [r7]
 8001246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	dd0a      	ble.n	8001266 <_ZN9WheelData9Set_SpeedEf+0xe2>
			PinState_INA = GPIO_PIN_SET;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
			PinState_INB = GPIO_PIN_RESET;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			Direction = WH_CCW;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
		};

		if (Speed_  == 0) {
 8001266:	edd7 7a00 	vldr	s15, [r7]
 800126a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	d10a      	bne.n	800128a <_ZN9WheelData9Set_SpeedEf+0x106>
			PinState_INA = GPIO_PIN_RESET;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
			PinState_INB = GPIO_PIN_RESET;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			Direction = WH_STOP;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2202      	movs	r2, #2
 8001288:	701a      	strb	r2, [r3, #0]
		};
	}

	HAL_GPIO_WritePin(GPIOx_INA, GPIO_Pin_INA, PinState_INA);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	@ 0xa4
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 800129c:	461a      	mov	r2, r3
 800129e:	f002 fb11 	bl	80038c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx_INB, GPIO_Pin_INB, PinState_INB);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f8b3 10ac 	ldrh.w	r1, [r3, #172]	@ 0xac
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 80012b4:	461a      	mov	r2, r3
 80012b6:	f002 fb05 	bl	80038c4 <HAL_GPIO_WritePin>

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <_ZN9WheelData11CalculationEv>:


void WheelData::Calculation(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	if (fabsf(Target_Speed) > 0) {
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 80012d2:	eef0 7ae7 	vabs.f32	s15, s15
 80012d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012de:	dd79      	ble.n	80013d4 <_ZN9WheelData11CalculationEv+0x110>
		PID_value_P =  PID_P * (Target_Speed - Current_Speed);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	ed93 7a96 	vldr	s14, [r3, #600]	@ 0x258
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	edd3 6a2d 	vldr	s13, [r3, #180]	@ 0xb4
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 80012f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edc3 7a94 	vstr	s15, [r3, #592]	@ 0x250

		if (PID_value_P > 20)  { PID_value_P = 20;  };
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a94 	vldr	s15, [r3, #592]	@ 0x250
 8001306:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800130a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	dd03      	ble.n	800131c <_ZN9WheelData11CalculationEv+0x58>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a52      	ldr	r2, [pc, #328]	@ (8001460 <_ZN9WheelData11CalculationEv+0x19c>)
 8001318:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
		if (PID_value_P < -20) { PID_value_P = -20;	};
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edd3 7a94 	vldr	s15, [r3, #592]	@ 0x250
 8001322:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8001326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	d503      	bpl.n	8001338 <_ZN9WheelData11CalculationEv+0x74>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a4c      	ldr	r2, [pc, #304]	@ (8001464 <_ZN9WheelData11CalculationEv+0x1a0>)
 8001334:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250

		PID_sum_I = 0;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
		for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8001342:	2301      	movs	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	e011      	b.n	800136c <_ZN9WheelData11CalculationEv+0xa8>
			PID_sum_I = PID_sum_I + Disired_Target_diff[i];
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	ed93 7a99 	vldr	s14, [r3, #612]	@ 0x264
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	337e      	adds	r3, #126	@ 0x7e
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	edc3 7a99 	vstr	s15, [r3, #612]	@ 0x264
		for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	3301      	adds	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2b13      	cmp	r3, #19
 8001370:	d9ea      	bls.n	8001348 <_ZN9WheelData11CalculationEv+0x84>
		}

		PWM_Value = PWM_Value + PID_value_P  + PID_I * PID_sum_I;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	ed93 7a93 	vldr	s14, [r3, #588]	@ 0x24c
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	edd3 7a94 	vldr	s15, [r3, #592]	@ 0x250
 800137e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 6a97 	vldr	s13, [r3, #604]	@ 0x25c
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	edd3 7a99 	vldr	s15, [r3, #612]	@ 0x264
 800138e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edc3 7a93 	vstr	s15, [r3, #588]	@ 0x24c

		if (PWM_Value < 0)     {PWM_Value = 0;	};
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 80013a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d504      	bpl.n	80013b6 <_ZN9WheelData11CalculationEv+0xf2>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
		if (PWM_Value > 50000) {PWM_Value = 50000; };
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 80013bc:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001468 <_ZN9WheelData11CalculationEv+0x1a4>
 80013c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	dd09      	ble.n	80013de <_ZN9WheelData11CalculationEv+0x11a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a27      	ldr	r2, [pc, #156]	@ (800146c <_ZN9WheelData11CalculationEv+0x1a8>)
 80013ce:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
 80013d2:	e004      	b.n	80013de <_ZN9WheelData11CalculationEv+0x11a>


	} else {

		PWM_Value = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c

	}

	__HAL_TIM_SET_COMPARE(&htim, PWM_Channel,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10a      	bne.n	80013fe <_ZN9WheelData11CalculationEv+0x13a>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f6:	ee17 2a90 	vmov	r2, s15
 80013fa:	635a      	str	r2, [r3, #52]	@ 0x34
			(uint32_t) PWM_Value);
}
 80013fc:	e029      	b.n	8001452 <_ZN9WheelData11CalculationEv+0x18e>
	__HAL_TIM_SET_COMPARE(&htim, PWM_Channel,
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8001404:	2b04      	cmp	r3, #4
 8001406:	d10a      	bne.n	800141e <_ZN9WheelData11CalculationEv+0x15a>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001416:	ee17 2a90 	vmov	r2, s15
 800141a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800141c:	e019      	b.n	8001452 <_ZN9WheelData11CalculationEv+0x18e>
	__HAL_TIM_SET_COMPARE(&htim, PWM_Channel,
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8001424:	2b08      	cmp	r3, #8
 8001426:	d10a      	bne.n	800143e <_ZN9WheelData11CalculationEv+0x17a>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001436:	ee17 2a90 	vmov	r2, s15
 800143a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800143c:	e009      	b.n	8001452 <_ZN9WheelData11CalculationEv+0x18e>
	__HAL_TIM_SET_COMPARE(&htim, PWM_Channel,
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144c:	ee17 2a90 	vmov	r2, s15
 8001450:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	41a00000 	.word	0x41a00000
 8001464:	c1a00000 	.word	0xc1a00000
 8001468:	47435000 	.word	0x47435000
 800146c:	47435000 	.word	0x47435000

08001470 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a1c      	ldr	r2, [pc, #112]	@ (80014f0 <HAL_ADC_ConvCpltCallback+0x80>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d129      	bne.n	80014d6 <HAL_ADC_ConvCpltCallback+0x66>
  {
    for (uint8_t i = 0; i < ADC_CHANNELS_NUM; i++)
 8001482:	2300      	movs	r3, #0
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	e023      	b.n	80014d0 <HAL_ADC_ConvCpltCallback+0x60>
    {
      adcVoltage[i] = adcData[i] * 3.3 / 4095;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	4a1a      	ldr	r2, [pc, #104]	@ (80014f4 <HAL_ADC_ConvCpltCallback+0x84>)
 800148c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe fff7 	bl	8000484 <__aeabi_i2d>
 8001496:	a312      	add	r3, pc, #72	@ (adr r3, 80014e0 <HAL_ADC_ConvCpltCallback+0x70>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff f85c 	bl	8000558 <__aeabi_dmul>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	a30f      	add	r3, pc, #60	@ (adr r3, 80014e8 <HAL_ADC_ConvCpltCallback+0x78>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7ff f97d 	bl	80007ac <__aeabi_ddiv>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	7bfc      	ldrb	r4, [r7, #15]
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff fae6 	bl	8000a8c <__aeabi_d2f>
 80014c0:	4602      	mov	r2, r0
 80014c2:	490d      	ldr	r1, [pc, #52]	@ (80014f8 <HAL_ADC_ConvCpltCallback+0x88>)
 80014c4:	00a3      	lsls	r3, r4, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < ADC_CHANNELS_NUM; i++)
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	3301      	adds	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d9d8      	bls.n	8001488 <HAL_ADC_ConvCpltCallback+0x18>
    }
  }
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd90      	pop	{r4, r7, pc}
 80014de:	bf00      	nop
 80014e0:	66666666 	.word	0x66666666
 80014e4:	400a6666 	.word	0x400a6666
 80014e8:	00000000 	.word	0x00000000
 80014ec:	40affe00 	.word	0x40affe00
 80014f0:	40012000 	.word	0x40012000
 80014f4:	200002c4 	.word	0x200002c4
 80014f8:	200002ec 	.word	0x200002ec

080014fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014fc:	b5b0      	push	{r4, r5, r7, lr}
 80014fe:	b0ac      	sub	sp, #176	@ 0xb0
 8001500:	af2c      	add	r7, sp, #176	@ 0xb0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001502:	f000 ffdf 	bl	80024c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001506:	f000 f8c5 	bl	8001694 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150a:	f000 fb8b 	bl	8001c24 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800150e:	f000 fb69 	bl	8001be4 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001512:	f000 f997 	bl	8001844 <_ZL12MX_I2C1_Initv>
  MX_ADC1_Init();
 8001516:	f000 f927 	bl	8001768 <_ZL12MX_ADC1_Initv>
  MX_I2C2_Init();
 800151a:	f000 f9c7 	bl	80018ac <_ZL12MX_I2C2_Initv>
  MX_TIM2_Init();
 800151e:	f000 fb05 	bl	8001b2c <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 8001522:	f000 fa33 	bl	800198c <_ZL12MX_TIM1_Initv>
  MX_SPI2_Init();
 8001526:	f000 f9f5 	bl	8001914 <_ZL12MX_SPI2_Initv>





  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 800152a:	4846      	ldr	r0, [pc, #280]	@ (8001644 <main+0x148>)
 800152c:	f003 fdac 	bl	8005088 <HAL_TIM_Base_Start_IT>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	bf14      	ite	ne
 8001536:	2301      	movne	r3, #1
 8001538:	2300      	moveq	r3, #0
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <main+0x48>
  {
    /* Starting Error */
    Error_Handler();
 8001540:	f000 fc7e 	bl	8001e40 <Error_Handler>
 clLeftW = new WheelData(hi2c2, htim1,
	TIM_CHANNEL_1,
	GPIOB,
	R_INA_Pin, GPIO_PIN_RESET,
	GPIOB,
	R_INB_Pin, GPIO_PIN_RESET, wsLeft);
 8001544:	f44f 701a 	mov.w	r0, #616	@ 0x268
 8001548:	f007 fb4e 	bl	8008be8 <_Znwj>
 800154c:	4603      	mov	r3, r0
 800154e:	461d      	mov	r5, r3
 8001550:	4c3d      	ldr	r4, [pc, #244]	@ (8001648 <main+0x14c>)
 8001552:	2300      	movs	r3, #0
 8001554:	932b      	str	r3, [sp, #172]	@ 0xac
 8001556:	2300      	movs	r3, #0
 8001558:	932a      	str	r3, [sp, #168]	@ 0xa8
 800155a:	2302      	movs	r3, #2
 800155c:	9329      	str	r3, [sp, #164]	@ 0xa4
 800155e:	4b3b      	ldr	r3, [pc, #236]	@ (800164c <main+0x150>)
 8001560:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001562:	2300      	movs	r3, #0
 8001564:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001566:	2301      	movs	r3, #1
 8001568:	9326      	str	r3, [sp, #152]	@ 0x98
 800156a:	4b38      	ldr	r3, [pc, #224]	@ (800164c <main+0x150>)
 800156c:	9325      	str	r3, [sp, #148]	@ 0x94
 800156e:	2300      	movs	r3, #0
 8001570:	9324      	str	r3, [sp, #144]	@ 0x90
 8001572:	4a37      	ldr	r2, [pc, #220]	@ (8001650 <main+0x154>)
 8001574:	ab12      	add	r3, sp, #72	@ 0x48
 8001576:	4611      	mov	r1, r2
 8001578:	2248      	movs	r2, #72	@ 0x48
 800157a:	4618      	mov	r0, r3
 800157c:	f007 fcea 	bl	8008f54 <memcpy>
 8001580:	4668      	mov	r0, sp
 8001582:	f104 030c 	add.w	r3, r4, #12
 8001586:	2248      	movs	r2, #72	@ 0x48
 8001588:	4619      	mov	r1, r3
 800158a:	f007 fce3 	bl	8008f54 <memcpy>
 800158e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001592:	4628      	mov	r0, r5
 8001594:	f7ff fc42 	bl	8000e1c <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide>
 clLeftW = new WheelData(hi2c2, htim1,
 8001598:	4b2e      	ldr	r3, [pc, #184]	@ (8001654 <main+0x158>)
 800159a:	601d      	str	r5, [r3, #0]
	clRightW = new WheelData(hi2c1, htim1,
	TIM_CHANNEL_4,
	GPIOA,
	L_INA_Pin, GPIO_PIN_RESET,
	GPIOA,
	L_INB_Pin, GPIO_PIN_RESET, wsRight);
 800159c:	f44f 701a 	mov.w	r0, #616	@ 0x268
 80015a0:	f007 fb22 	bl	8008be8 <_Znwj>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461d      	mov	r5, r3
 80015a8:	4c2b      	ldr	r4, [pc, #172]	@ (8001658 <main+0x15c>)
 80015aa:	2301      	movs	r3, #1
 80015ac:	932b      	str	r3, [sp, #172]	@ 0xac
 80015ae:	2300      	movs	r3, #0
 80015b0:	932a      	str	r3, [sp, #168]	@ 0xa8
 80015b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80015b8:	4b28      	ldr	r3, [pc, #160]	@ (800165c <main+0x160>)
 80015ba:	9328      	str	r3, [sp, #160]	@ 0xa0
 80015bc:	2300      	movs	r3, #0
 80015be:	9327      	str	r3, [sp, #156]	@ 0x9c
 80015c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015c4:	9326      	str	r3, [sp, #152]	@ 0x98
 80015c6:	4b25      	ldr	r3, [pc, #148]	@ (800165c <main+0x160>)
 80015c8:	9325      	str	r3, [sp, #148]	@ 0x94
 80015ca:	230c      	movs	r3, #12
 80015cc:	9324      	str	r3, [sp, #144]	@ 0x90
 80015ce:	4a20      	ldr	r2, [pc, #128]	@ (8001650 <main+0x154>)
 80015d0:	ab12      	add	r3, sp, #72	@ 0x48
 80015d2:	4611      	mov	r1, r2
 80015d4:	2248      	movs	r2, #72	@ 0x48
 80015d6:	4618      	mov	r0, r3
 80015d8:	f007 fcbc 	bl	8008f54 <memcpy>
 80015dc:	4668      	mov	r0, sp
 80015de:	f104 030c 	add.w	r3, r4, #12
 80015e2:	2248      	movs	r2, #72	@ 0x48
 80015e4:	4619      	mov	r1, r3
 80015e6:	f007 fcb5 	bl	8008f54 <memcpy>
 80015ea:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80015ee:	4628      	mov	r0, r5
 80015f0:	f7ff fc14 	bl	8000e1c <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide>
	clRightW = new WheelData(hi2c1, htim1,
 80015f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <main+0x164>)
 80015f6:	601d      	str	r5, [r3, #0]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015f8:	f004 fd44 	bl	8006084 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015fc:	4a19      	ldr	r2, [pc, #100]	@ (8001664 <main+0x168>)
 80015fe:	2100      	movs	r1, #0
 8001600:	4819      	ldr	r0, [pc, #100]	@ (8001668 <main+0x16c>)
 8001602:	f004 fd89 	bl	8006118 <osThreadNew>
 8001606:	4603      	mov	r3, r0
 8001608:	4a18      	ldr	r2, [pc, #96]	@ (800166c <main+0x170>)
 800160a:	6013      	str	r3, [r2, #0]

  /* creation of Task1ms */
  Task1msHandle = osThreadNew(Task1msHandler, NULL, &Task1ms_attributes);
 800160c:	4a18      	ldr	r2, [pc, #96]	@ (8001670 <main+0x174>)
 800160e:	2100      	movs	r1, #0
 8001610:	4818      	ldr	r0, [pc, #96]	@ (8001674 <main+0x178>)
 8001612:	f004 fd81 	bl	8006118 <osThreadNew>
 8001616:	4603      	mov	r3, r0
 8001618:	4a17      	ldr	r2, [pc, #92]	@ (8001678 <main+0x17c>)
 800161a:	6013      	str	r3, [r2, #0]

  /* creation of Task10ms */
  Task10msHandle = osThreadNew(Task10msHandler, NULL, &Task10ms_attributes);
 800161c:	4a17      	ldr	r2, [pc, #92]	@ (800167c <main+0x180>)
 800161e:	2100      	movs	r1, #0
 8001620:	4817      	ldr	r0, [pc, #92]	@ (8001680 <main+0x184>)
 8001622:	f004 fd79 	bl	8006118 <osThreadNew>
 8001626:	4603      	mov	r3, r0
 8001628:	4a16      	ldr	r2, [pc, #88]	@ (8001684 <main+0x188>)
 800162a:	6013      	str	r3, [r2, #0]

  /* creation of Task100ms */
  Task100msHandle = osThreadNew(Task100msHandler, NULL, &Task100ms_attributes);
 800162c:	4a16      	ldr	r2, [pc, #88]	@ (8001688 <main+0x18c>)
 800162e:	2100      	movs	r1, #0
 8001630:	4816      	ldr	r0, [pc, #88]	@ (800168c <main+0x190>)
 8001632:	f004 fd71 	bl	8006118 <osThreadNew>
 8001636:	4603      	mov	r3, r0
 8001638:	4a15      	ldr	r2, [pc, #84]	@ (8001690 <main+0x194>)
 800163a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800163c:	f004 fd46 	bl	80060cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <main+0x144>
 8001644:	2000026c 	.word	0x2000026c
 8001648:	20000178 	.word	0x20000178
 800164c:	40020400 	.word	0x40020400
 8001650:	20000224 	.word	0x20000224
 8001654:	2000033c 	.word	0x2000033c
 8001658:	20000124 	.word	0x20000124
 800165c:	40020000 	.word	0x40020000
 8001660:	20000340 	.word	0x20000340
 8001664:	08009060 	.word	0x08009060
 8001668:	08001d6d 	.word	0x08001d6d
 800166c:	200002b4 	.word	0x200002b4
 8001670:	08009084 	.word	0x08009084
 8001674:	08001d7d 	.word	0x08001d7d
 8001678:	200002b8 	.word	0x200002b8
 800167c:	080090a8 	.word	0x080090a8
 8001680:	08001d89 	.word	0x08001d89
 8001684:	200002bc 	.word	0x200002bc
 8001688:	080090cc 	.word	0x080090cc
 800168c:	08001db1 	.word	0x08001db1
 8001690:	200002c0 	.word	0x200002c0

08001694 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b094      	sub	sp, #80	@ 0x50
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	f107 0320 	add.w	r3, r7, #32
 800169e:	2230      	movs	r2, #48	@ 0x30
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f007 fb78 	bl	8008d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	4b28      	ldr	r3, [pc, #160]	@ (8001760 <_Z18SystemClock_Configv+0xcc>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	4a27      	ldr	r2, [pc, #156]	@ (8001760 <_Z18SystemClock_Configv+0xcc>)
 80016c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c8:	4b25      	ldr	r3, [pc, #148]	@ (8001760 <_Z18SystemClock_Configv+0xcc>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <_Z18SystemClock_Configv+0xd0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016e0:	4a20      	ldr	r2, [pc, #128]	@ (8001764 <_Z18SystemClock_Configv+0xd0>)
 80016e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <_Z18SystemClock_Configv+0xd0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016f4:	2302      	movs	r3, #2
 80016f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f8:	2301      	movs	r3, #1
 80016fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016fc:	2310      	movs	r3, #16
 80016fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001700:	2300      	movs	r3, #0
 8001702:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001704:	f107 0320 	add.w	r3, r7, #32
 8001708:	4618      	mov	r0, r3
 800170a:	f002 ff5b 	bl	80045c4 <HAL_RCC_OscConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf14      	ite	ne
 8001714:	2301      	movne	r3, #1
 8001716:	2300      	moveq	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800171e:	f000 fb8f 	bl	8001e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001722:	230f      	movs	r3, #15
 8001724:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f003 f9b9 	bl	8004ab4 <HAL_RCC_ClockConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf14      	ite	ne
 8001748:	2301      	movne	r3, #1
 800174a:	2300      	moveq	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8001752:	f000 fb75 	bl	8001e40 <Error_Handler>
  }
}
 8001756:	bf00      	nop
 8001758:	3750      	adds	r7, #80	@ 0x50
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	40007000 	.word	0x40007000

08001768 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800176e:	463b      	mov	r3, r7
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800177a:	4b2f      	ldr	r3, [pc, #188]	@ (8001838 <_ZL12MX_ADC1_Initv+0xd0>)
 800177c:	4a2f      	ldr	r2, [pc, #188]	@ (800183c <_ZL12MX_ADC1_Initv+0xd4>)
 800177e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001780:	4b2d      	ldr	r3, [pc, #180]	@ (8001838 <_ZL12MX_ADC1_Initv+0xd0>)
 8001782:	2200      	movs	r2, #0
 8001784:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001786:	4b2c      	ldr	r3, [pc, #176]	@ (8001838 <_ZL12MX_ADC1_Initv+0xd0>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800178c:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <_ZL12MX_ADC1_Initv+0xd0>)
 800178e:	2201      	movs	r2, #1
 8001790:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001792:	4b29      	ldr	r3, [pc, #164]	@ (8001838 <_ZL12MX_ADC1_Initv+0xd0>)
 8001794:	2200      	movs	r2, #0
 8001796:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <_ZL12MX_ADC1_Initv+0xd0>)
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017a0:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <_ZL12MX_ADC1_Initv+0xd0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017a6:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <_ZL12MX_ADC1_Initv+0xd0>)
 80017a8:	4a25      	ldr	r2, [pc, #148]	@ (8001840 <_ZL12MX_ADC1_Initv+0xd8>)
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ac:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <_ZL12MX_ADC1_Initv+0xd0>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <_ZL12MX_ADC1_Initv+0xd0>)
 80017b4:	2202      	movs	r2, #2
 80017b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <_ZL12MX_ADC1_Initv+0xd0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <_ZL12MX_ADC1_Initv+0xd0>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017c6:	481c      	ldr	r0, [pc, #112]	@ (8001838 <_ZL12MX_ADC1_Initv+0xd0>)
 80017c8:	f000 febe 	bl	8002548 <HAL_ADC_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	bf14      	ite	ne
 80017d2:	2301      	movne	r3, #1
 80017d4:	2300      	moveq	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 80017dc:	f000 fb30 	bl	8001e40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80017e8:	2303      	movs	r3, #3
 80017ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ec:	463b      	mov	r3, r7
 80017ee:	4619      	mov	r1, r3
 80017f0:	4811      	ldr	r0, [pc, #68]	@ (8001838 <_ZL12MX_ADC1_Initv+0xd0>)
 80017f2:	f000 fff1 	bl	80027d8 <HAL_ADC_ConfigChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8001806:	f000 fb1b 	bl	8001e40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800180a:	2301      	movs	r3, #1
 800180c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800180e:	2302      	movs	r3, #2
 8001810:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001812:	463b      	mov	r3, r7
 8001814:	4619      	mov	r1, r3
 8001816:	4808      	ldr	r0, [pc, #32]	@ (8001838 <_ZL12MX_ADC1_Initv+0xd0>)
 8001818:	f000 ffde 	bl	80027d8 <HAL_ADC_ConfigChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <_ZL12MX_ADC1_Initv+0xc8>
  {
    Error_Handler();
 800182c:	f000 fb08 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2000007c 	.word	0x2000007c
 800183c:	40012000 	.word	0x40012000
 8001840:	0f000001 	.word	0x0f000001

08001844 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001848:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800184a:	4a16      	ldr	r2, [pc, #88]	@ (80018a4 <_ZL12MX_I2C1_Initv+0x60>)
 800184c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800184e:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001850:	4a15      	ldr	r2, [pc, #84]	@ (80018a8 <_ZL12MX_I2C1_Initv+0x64>)
 8001852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001860:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001862:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001866:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800186a:	2200      	movs	r2, #0
 800186c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001874:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001880:	4807      	ldr	r0, [pc, #28]	@ (80018a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001882:	f002 f853 	bl	800392c <HAL_I2C_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	bf14      	ite	ne
 800188c:	2301      	movne	r3, #1
 800188e:	2300      	moveq	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001896:	f000 fad3 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000124 	.word	0x20000124
 80018a4:	40005400 	.word	0x40005400
 80018a8:	000186a0 	.word	0x000186a0

080018ac <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018b0:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <_ZL12MX_I2C2_Initv+0x5c>)
 80018b2:	4a16      	ldr	r2, [pc, #88]	@ (800190c <_ZL12MX_I2C2_Initv+0x60>)
 80018b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018b6:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <_ZL12MX_I2C2_Initv+0x5c>)
 80018b8:	4a15      	ldr	r2, [pc, #84]	@ (8001910 <_ZL12MX_I2C2_Initv+0x64>)
 80018ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <_ZL12MX_I2C2_Initv+0x5c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018c2:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <_ZL12MX_I2C2_Initv+0x5c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <_ZL12MX_I2C2_Initv+0x5c>)
 80018ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001908 <_ZL12MX_I2C2_Initv+0x5c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <_ZL12MX_I2C2_Initv+0x5c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <_ZL12MX_I2C2_Initv+0x5c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <_ZL12MX_I2C2_Initv+0x5c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018e8:	4807      	ldr	r0, [pc, #28]	@ (8001908 <_ZL12MX_I2C2_Initv+0x5c>)
 80018ea:	f002 f81f 	bl	800392c <HAL_I2C_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80018fe:	f000 fa9f 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000178 	.word	0x20000178
 800190c:	40005800 	.word	0x40005800
 8001910:	000186a0 	.word	0x000186a0

08001914 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001918:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <_ZL12MX_SPI2_Initv+0x70>)
 800191a:	4a1b      	ldr	r2, [pc, #108]	@ (8001988 <_ZL12MX_SPI2_Initv+0x74>)
 800191c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800191e:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <_ZL12MX_SPI2_Initv+0x70>)
 8001920:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001924:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001926:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <_ZL12MX_SPI2_Initv+0x70>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800192c:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <_ZL12MX_SPI2_Initv+0x70>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001932:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <_ZL12MX_SPI2_Initv+0x70>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <_ZL12MX_SPI2_Initv+0x70>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <_ZL12MX_SPI2_Initv+0x70>)
 8001940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001944:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <_ZL12MX_SPI2_Initv+0x70>)
 8001948:	2200      	movs	r2, #0
 800194a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800194c:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <_ZL12MX_SPI2_Initv+0x70>)
 800194e:	2200      	movs	r2, #0
 8001950:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001952:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <_ZL12MX_SPI2_Initv+0x70>)
 8001954:	2200      	movs	r2, #0
 8001956:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001958:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <_ZL12MX_SPI2_Initv+0x70>)
 800195a:	2200      	movs	r2, #0
 800195c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <_ZL12MX_SPI2_Initv+0x70>)
 8001960:	220a      	movs	r2, #10
 8001962:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001964:	4807      	ldr	r0, [pc, #28]	@ (8001984 <_ZL12MX_SPI2_Initv+0x70>)
 8001966:	f003 fab7 	bl	8004ed8 <HAL_SPI_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 800197a:	f000 fa61 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200001cc 	.word	0x200001cc
 8001988:	40003800 	.word	0x40003800

0800198c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b096      	sub	sp, #88	@ 0x58
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001992:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]
 80019ba:	615a      	str	r2, [r3, #20]
 80019bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2220      	movs	r2, #32
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f007 f9e7 	bl	8008d98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ca:	4b56      	ldr	r3, [pc, #344]	@ (8001b24 <_ZL12MX_TIM1_Initv+0x198>)
 80019cc:	4a56      	ldr	r2, [pc, #344]	@ (8001b28 <_ZL12MX_TIM1_Initv+0x19c>)
 80019ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019d0:	4b54      	ldr	r3, [pc, #336]	@ (8001b24 <_ZL12MX_TIM1_Initv+0x198>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d6:	4b53      	ldr	r3, [pc, #332]	@ (8001b24 <_ZL12MX_TIM1_Initv+0x198>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019dc:	4b51      	ldr	r3, [pc, #324]	@ (8001b24 <_ZL12MX_TIM1_Initv+0x198>)
 80019de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001b24 <_ZL12MX_TIM1_Initv+0x198>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001b24 <_ZL12MX_TIM1_Initv+0x198>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f0:	4b4c      	ldr	r3, [pc, #304]	@ (8001b24 <_ZL12MX_TIM1_Initv+0x198>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019f6:	484b      	ldr	r0, [pc, #300]	@ (8001b24 <_ZL12MX_TIM1_Initv+0x198>)
 80019f8:	f003 faf7 	bl	8004fea <HAL_TIM_Base_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf14      	ite	ne
 8001a02:	2301      	movne	r3, #1
 8001a04:	2300      	moveq	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8001a0c:	f000 fa18 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a14:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a16:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4841      	ldr	r0, [pc, #260]	@ (8001b24 <_ZL12MX_TIM1_Initv+0x198>)
 8001a1e:	f003 fe51 	bl	80056c4 <HAL_TIM_ConfigClockSource>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf14      	ite	ne
 8001a28:	2301      	movne	r3, #1
 8001a2a:	2300      	moveq	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8001a32:	f000 fa05 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a36:	483b      	ldr	r0, [pc, #236]	@ (8001b24 <_ZL12MX_TIM1_Initv+0x198>)
 8001a38:	f003 fb88 	bl	800514c <HAL_TIM_PWM_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8001a4c:	f000 f9f8 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a58:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4831      	ldr	r0, [pc, #196]	@ (8001b24 <_ZL12MX_TIM1_Initv+0x198>)
 8001a60:	f004 f9f8 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf14      	ite	ne
 8001a6a:	2301      	movne	r3, #1
 8001a6c:	2300      	moveq	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8001a74:	f000 f9e4 	bl	8001e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a78:	2360      	movs	r3, #96	@ 0x60
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a84:	2300      	movs	r3, #0
 8001a86:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a98:	2200      	movs	r2, #0
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4821      	ldr	r0, [pc, #132]	@ (8001b24 <_ZL12MX_TIM1_Initv+0x198>)
 8001a9e:	f003 fd4f 	bl	8005540 <HAL_TIM_PWM_ConfigChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf14      	ite	ne
 8001aa8:	2301      	movne	r3, #1
 8001aaa:	2300      	moveq	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8001ab2:	f000 f9c5 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aba:	220c      	movs	r2, #12
 8001abc:	4619      	mov	r1, r3
 8001abe:	4819      	ldr	r0, [pc, #100]	@ (8001b24 <_ZL12MX_TIM1_Initv+0x198>)
 8001ac0:	f003 fd3e 	bl	8005540 <HAL_TIM_PWM_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf14      	ite	ne
 8001aca:	2301      	movne	r3, #1
 8001acc:	2300      	moveq	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8001ad4:	f000 f9b4 	bl	8001e40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001af0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	480a      	ldr	r0, [pc, #40]	@ (8001b24 <_ZL12MX_TIM1_Initv+0x198>)
 8001afc:	f004 fa18 	bl	8005f30 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	bf14      	ite	ne
 8001b06:	2301      	movne	r3, #1
 8001b08:	2300      	moveq	r3, #0
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <_ZL12MX_TIM1_Initv+0x188>
  {
    Error_Handler();
 8001b10:	f000 f996 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b14:	4803      	ldr	r0, [pc, #12]	@ (8001b24 <_ZL12MX_TIM1_Initv+0x198>)
 8001b16:	f000 fb55 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 8001b1a:	bf00      	nop
 8001b1c:	3758      	adds	r7, #88	@ 0x58
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000224 	.word	0x20000224
 8001b28:	40010000 	.word	0x40010000

08001b2c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	463b      	mov	r3, r7
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b48:	4b25      	ldr	r3, [pc, #148]	@ (8001be0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 8001b50:	4b23      	ldr	r3, [pc, #140]	@ (8001be0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b52:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001b56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b58:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001b5e:	4b20      	ldr	r3, [pc, #128]	@ (8001be0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b72:	481b      	ldr	r0, [pc, #108]	@ (8001be0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b74:	f003 fa39 	bl	8004fea <HAL_TIM_Base_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf14      	ite	ne
 8001b7e:	2301      	movne	r3, #1
 8001b80:	2300      	moveq	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8001b88:	f000 f95a 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b92:	f107 0308 	add.w	r3, r7, #8
 8001b96:	4619      	mov	r1, r3
 8001b98:	4811      	ldr	r0, [pc, #68]	@ (8001be0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b9a:	f003 fd93 	bl	80056c4 <HAL_TIM_ConfigClockSource>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf14      	ite	ne
 8001ba4:	2301      	movne	r3, #1
 8001ba6:	2300      	moveq	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8001bae:	f000 f947 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bba:	463b      	mov	r3, r7
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4808      	ldr	r0, [pc, #32]	@ (8001be0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001bc0:	f004 f948 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	bf14      	ite	ne
 8001bca:	2301      	movne	r3, #1
 8001bcc:	2300      	moveq	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8001bd4:	f000 f934 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	2000026c 	.word	0x2000026c

08001be4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <_ZL11MX_DMA_Initv+0x3c>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	@ (8001c20 <_ZL11MX_DMA_Initv+0x3c>)
 8001bf4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <_ZL11MX_DMA_Initv+0x3c>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2105      	movs	r1, #5
 8001c0a:	2038      	movs	r0, #56	@ 0x38
 8001c0c:	f001 f93c 	bl	8002e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c10:	2038      	movs	r0, #56	@ 0x38
 8001c12:	f001 f955 	bl	8002ec0 <HAL_NVIC_EnableIRQ>

}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800

08001c24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	@ 0x28
 8001c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b47      	ldr	r3, [pc, #284]	@ (8001d5c <_ZL12MX_GPIO_Initv+0x138>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	4a46      	ldr	r2, [pc, #280]	@ (8001d5c <_ZL12MX_GPIO_Initv+0x138>)
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4a:	4b44      	ldr	r3, [pc, #272]	@ (8001d5c <_ZL12MX_GPIO_Initv+0x138>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b40      	ldr	r3, [pc, #256]	@ (8001d5c <_ZL12MX_GPIO_Initv+0x138>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d5c <_ZL12MX_GPIO_Initv+0x138>)
 8001c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b3d      	ldr	r3, [pc, #244]	@ (8001d5c <_ZL12MX_GPIO_Initv+0x138>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	4b39      	ldr	r3, [pc, #228]	@ (8001d5c <_ZL12MX_GPIO_Initv+0x138>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a38      	ldr	r2, [pc, #224]	@ (8001d5c <_ZL12MX_GPIO_Initv+0x138>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b36      	ldr	r3, [pc, #216]	@ (8001d5c <_ZL12MX_GPIO_Initv+0x138>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	4b32      	ldr	r3, [pc, #200]	@ (8001d5c <_ZL12MX_GPIO_Initv+0x138>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	4a31      	ldr	r2, [pc, #196]	@ (8001d5c <_ZL12MX_GPIO_Initv+0x138>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d5c <_ZL12MX_GPIO_Initv+0x138>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUELED_GPIO_Port, BLUELED_Pin, GPIO_PIN_RESET);
 8001caa:	2200      	movs	r2, #0
 8001cac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cb0:	482b      	ldr	r0, [pc, #172]	@ (8001d60 <_ZL12MX_GPIO_Initv+0x13c>)
 8001cb2:	f001 fe07 	bl	80038c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_INA_Pin|R_INB_Pin, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2103      	movs	r1, #3
 8001cba:	482a      	ldr	r0, [pc, #168]	@ (8001d64 <_ZL12MX_GPIO_Initv+0x140>)
 8001cbc:	f001 fe02 	bl	80038c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_INB_Pin|L_INA_Pin, GPIO_PIN_RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001cc6:	4828      	ldr	r0, [pc, #160]	@ (8001d68 <_ZL12MX_GPIO_Initv+0x144>)
 8001cc8:	f001 fdfc 	bl	80038c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUELED_Pin */
  GPIO_InitStruct.Pin = BLUELED_Pin;
 8001ccc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUELED_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	481e      	ldr	r0, [pc, #120]	@ (8001d60 <_ZL12MX_GPIO_Initv+0x13c>)
 8001ce6:	f001 fc69 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cea:	2380      	movs	r3, #128	@ 0x80
 8001cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	481a      	ldr	r0, [pc, #104]	@ (8001d68 <_ZL12MX_GPIO_Initv+0x144>)
 8001cfe:	f001 fc5d 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pins : R_INA_Pin R_INB_Pin */
  GPIO_InitStruct.Pin = R_INA_Pin|R_INB_Pin;
 8001d02:	2303      	movs	r3, #3
 8001d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4812      	ldr	r0, [pc, #72]	@ (8001d64 <_ZL12MX_GPIO_Initv+0x140>)
 8001d1a:	f001 fc4f 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pins : L_INB_Pin L_INA_Pin */
  GPIO_InitStruct.Pin = L_INB_Pin|L_INA_Pin;
 8001d1e:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d24:	2301      	movs	r3, #1
 8001d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	480c      	ldr	r0, [pc, #48]	@ (8001d68 <_ZL12MX_GPIO_Initv+0x144>)
 8001d38:	f001 fc40 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d3c:	2310      	movs	r3, #16
 8001d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4805      	ldr	r0, [pc, #20]	@ (8001d64 <_ZL12MX_GPIO_Initv+0x140>)
 8001d50:	f001 fc34 	bl	80035bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d54:	bf00      	nop
 8001d56:	3728      	adds	r7, #40	@ 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40020400 	.word	0x40020400
 8001d68:	40020000 	.word	0x40020000

08001d6c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d74:	2001      	movs	r0, #1
 8001d76:	f004 fa61 	bl	800623c <osDelay>
 8001d7a:	e7fb      	b.n	8001d74 <_Z16StartDefaultTaskPv+0x8>

08001d7c <_Z14Task1msHandlerPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1msHandler */
void Task1msHandler(void *argument)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1msHandler */
  /* Infinite loop */
  for(;;)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <_Z14Task1msHandlerPv+0x8>

08001d88 <_Z15Task10msHandlerPv>:
* @brief Function implementing the Task10ms thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task10msHandler */
void Task10msHandler(void *argument) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task10msHandler */
	/* Infinite loop */
	for (;;) {

		clLeftW->Calculation();
 8001d90:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <_Z15Task10msHandlerPv+0x20>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fa95 	bl	80012c4 <_ZN9WheelData11CalculationEv>
		clRightW->Calculation();
 8001d9a:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <_Z15Task10msHandlerPv+0x24>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fa90 	bl	80012c4 <_ZN9WheelData11CalculationEv>
		clLeftW->Calculation();
 8001da4:	bf00      	nop
 8001da6:	e7f3      	b.n	8001d90 <_Z15Task10msHandlerPv+0x8>
 8001da8:	2000033c 	.word	0x2000033c
 8001dac:	20000340 	.word	0x20000340

08001db0 <_Z16Task100msHandlerPv>:
* @brief Function implementing the Task100ms thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task100msHandler */
void Task100msHandler(void *argument) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task100msHandler */
	/* Infinite loop */
	for (;;) {


		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, ADC_CHANNELS_NUM*10);
 8001db8:	2214      	movs	r2, #20
 8001dba:	490d      	ldr	r1, [pc, #52]	@ (8001df0 <_Z16Task100msHandlerPv+0x40>)
 8001dbc:	480d      	ldr	r0, [pc, #52]	@ (8001df4 <_Z16Task100msHandlerPv+0x44>)
 8001dbe:	f000 fc07 	bl	80025d0 <HAL_ADC_Start_DMA>

		clLeftW->ReadAS5600();
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001df8 <_Z16Task100msHandlerPv+0x48>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f8b6 	bl	8000f38 <_ZN9WheelData10ReadAS5600Ev>
		clRightW->ReadAS5600();
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <_Z16Task100msHandlerPv+0x4c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff f8b1 	bl	8000f38 <_ZN9WheelData10ReadAS5600Ev>

	 	clLeftW->Set_Speed(set_speed);
 8001dd6:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <_Z16Task100msHandlerPv+0x48>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a09      	ldr	r2, [pc, #36]	@ (8001e00 <_Z16Task100msHandlerPv+0x50>)
 8001ddc:	edd2 7a00 	vldr	s15, [r2]
 8001de0:	eeb0 0a67 	vmov.f32	s0, s15
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff f9cd 	bl	8001184 <_ZN9WheelData9Set_SpeedEf>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, ADC_CHANNELS_NUM*10);
 8001dea:	bf00      	nop
 8001dec:	e7e4      	b.n	8001db8 <_Z16Task100msHandlerPv+0x8>
 8001dee:	bf00      	nop
 8001df0:	200002c4 	.word	0x200002c4
 8001df4:	2000007c 	.word	0x2000007c
 8001df8:	2000033c 	.word	0x2000033c
 8001dfc:	20000340 	.word	0x20000340
 8001e00:	20000344 	.word	0x20000344

08001e04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a09      	ldr	r2, [pc, #36]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e16:	f000 fb77 	bl	8002508 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2) {
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e22:	d104      	bne.n	8001e2e <HAL_TIM_PeriodElapsedCallback+0x2a>

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);  // мигаем светодиодом
 8001e24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e28:	4804      	ldr	r0, [pc, #16]	@ (8001e3c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001e2a:	f001 fd64 	bl	80038f6 <HAL_GPIO_TogglePin>


	} // end of TIM2
  /* USER CODE END Callback 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40014800 	.word	0x40014800
 8001e3c:	40020800 	.word	0x40020800

08001e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e44:	b672      	cpsid	i
}
 8001e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <Error_Handler+0x8>

08001e4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <HAL_MspInit+0x54>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5a:	4a11      	ldr	r2, [pc, #68]	@ (8001ea0 <HAL_MspInit+0x54>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <HAL_MspInit+0x54>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <HAL_MspInit+0x54>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea0 <HAL_MspInit+0x54>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <HAL_MspInit+0x54>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	210f      	movs	r1, #15
 8001e8e:	f06f 0001 	mvn.w	r0, #1
 8001e92:	f000 fff9 	bl	8002e88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	@ 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2e      	ldr	r2, [pc, #184]	@ (8001f7c <HAL_ADC_MspInit+0xd8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d156      	bne.n	8001f74 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b2d      	ldr	r3, [pc, #180]	@ (8001f80 <HAL_ADC_MspInit+0xdc>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ece:	4a2c      	ldr	r2, [pc, #176]	@ (8001f80 <HAL_ADC_MspInit+0xdc>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f80 <HAL_ADC_MspInit+0xdc>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b26      	ldr	r3, [pc, #152]	@ (8001f80 <HAL_ADC_MspInit+0xdc>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	4a25      	ldr	r2, [pc, #148]	@ (8001f80 <HAL_ADC_MspInit+0xdc>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef2:	4b23      	ldr	r3, [pc, #140]	@ (8001f80 <HAL_ADC_MspInit+0xdc>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001efe:	2303      	movs	r3, #3
 8001f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f02:	2303      	movs	r3, #3
 8001f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	481c      	ldr	r0, [pc, #112]	@ (8001f84 <HAL_ADC_MspInit+0xe0>)
 8001f12:	f001 fb53 	bl	80035bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f16:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <HAL_ADC_MspInit+0xe4>)
 8001f18:	4a1c      	ldr	r2, [pc, #112]	@ (8001f8c <HAL_ADC_MspInit+0xe8>)
 8001f1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <HAL_ADC_MspInit+0xe4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f22:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <HAL_ADC_MspInit+0xe4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f28:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <HAL_ADC_MspInit+0xe4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f2e:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <HAL_ADC_MspInit+0xe4>)
 8001f30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f36:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <HAL_ADC_MspInit+0xe4>)
 8001f38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f3e:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <HAL_ADC_MspInit+0xe4>)
 8001f40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f46:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <HAL_ADC_MspInit+0xe4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <HAL_ADC_MspInit+0xe4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f52:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <HAL_ADC_MspInit+0xe4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f58:	480b      	ldr	r0, [pc, #44]	@ (8001f88 <HAL_ADC_MspInit+0xe4>)
 8001f5a:	f000 ffbf 	bl	8002edc <HAL_DMA_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001f64:	f7ff ff6c 	bl	8001e40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a07      	ldr	r2, [pc, #28]	@ (8001f88 <HAL_ADC_MspInit+0xe4>)
 8001f6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f6e:	4a06      	ldr	r2, [pc, #24]	@ (8001f88 <HAL_ADC_MspInit+0xe4>)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	@ 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40012000 	.word	0x40012000
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020000 	.word	0x40020000
 8001f88:	200000c4 	.word	0x200000c4
 8001f8c:	40026410 	.word	0x40026410

08001f90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08c      	sub	sp, #48	@ 0x30
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a3b      	ldr	r2, [pc, #236]	@ (800209c <HAL_I2C_MspInit+0x10c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d12d      	bne.n	800200e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80020a0 <HAL_I2C_MspInit+0x110>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a39      	ldr	r2, [pc, #228]	@ (80020a0 <HAL_I2C_MspInit+0x110>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b37      	ldr	r3, [pc, #220]	@ (80020a0 <HAL_I2C_MspInit+0x110>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001fce:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd4:	2312      	movs	r3, #18
 8001fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	4619      	mov	r1, r3
 8001fea:	482e      	ldr	r0, [pc, #184]	@ (80020a4 <HAL_I2C_MspInit+0x114>)
 8001fec:	f001 fae6 	bl	80035bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80020a0 <HAL_I2C_MspInit+0x110>)
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	4a29      	ldr	r2, [pc, #164]	@ (80020a0 <HAL_I2C_MspInit+0x110>)
 8001ffa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ffe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002000:	4b27      	ldr	r3, [pc, #156]	@ (80020a0 <HAL_I2C_MspInit+0x110>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800200c:	e041      	b.n	8002092 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a25      	ldr	r2, [pc, #148]	@ (80020a8 <HAL_I2C_MspInit+0x118>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d13c      	bne.n	8002092 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	4b20      	ldr	r3, [pc, #128]	@ (80020a0 <HAL_I2C_MspInit+0x110>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002020:	4a1f      	ldr	r2, [pc, #124]	@ (80020a0 <HAL_I2C_MspInit+0x110>)
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	6313      	str	r3, [r2, #48]	@ 0x30
 8002028:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <HAL_I2C_MspInit+0x110>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002034:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800203a:	2312      	movs	r3, #18
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002046:	2304      	movs	r3, #4
 8002048:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204a:	f107 031c 	add.w	r3, r7, #28
 800204e:	4619      	mov	r1, r3
 8002050:	4814      	ldr	r0, [pc, #80]	@ (80020a4 <HAL_I2C_MspInit+0x114>)
 8002052:	f001 fab3 	bl	80035bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002056:	2308      	movs	r3, #8
 8002058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800205a:	2312      	movs	r3, #18
 800205c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002066:	2309      	movs	r3, #9
 8002068:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206a:	f107 031c 	add.w	r3, r7, #28
 800206e:	4619      	mov	r1, r3
 8002070:	480c      	ldr	r0, [pc, #48]	@ (80020a4 <HAL_I2C_MspInit+0x114>)
 8002072:	f001 faa3 	bl	80035bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <HAL_I2C_MspInit+0x110>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	4a08      	ldr	r2, [pc, #32]	@ (80020a0 <HAL_I2C_MspInit+0x110>)
 8002080:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002084:	6413      	str	r3, [r2, #64]	@ 0x40
 8002086:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <HAL_I2C_MspInit+0x110>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
}
 8002092:	bf00      	nop
 8002094:	3730      	adds	r7, #48	@ 0x30
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40005400 	.word	0x40005400
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020400 	.word	0x40020400
 80020a8:	40005800 	.word	0x40005800

080020ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	@ 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	@ (8002130 <HAL_SPI_MspInit+0x84>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d12c      	bne.n	8002128 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	4b18      	ldr	r3, [pc, #96]	@ (8002134 <HAL_SPI_MspInit+0x88>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	4a17      	ldr	r2, [pc, #92]	@ (8002134 <HAL_SPI_MspInit+0x88>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020de:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <HAL_SPI_MspInit+0x88>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <HAL_SPI_MspInit+0x88>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	4a10      	ldr	r2, [pc, #64]	@ (8002134 <HAL_SPI_MspInit+0x88>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002134 <HAL_SPI_MspInit+0x88>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002106:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800210a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002118:	2305      	movs	r3, #5
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4619      	mov	r1, r3
 8002122:	4805      	ldr	r0, [pc, #20]	@ (8002138 <HAL_SPI_MspInit+0x8c>)
 8002124:	f001 fa4a 	bl	80035bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002128:	bf00      	nop
 800212a:	3728      	adds	r7, #40	@ 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40003800 	.word	0x40003800
 8002134:	40023800 	.word	0x40023800
 8002138:	40020400 	.word	0x40020400

0800213c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1c      	ldr	r2, [pc, #112]	@ (80021bc <HAL_TIM_Base_MspInit+0x80>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d116      	bne.n	800217c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b1b      	ldr	r3, [pc, #108]	@ (80021c0 <HAL_TIM_Base_MspInit+0x84>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	4a1a      	ldr	r2, [pc, #104]	@ (80021c0 <HAL_TIM_Base_MspInit+0x84>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6453      	str	r3, [r2, #68]	@ 0x44
 800215e:	4b18      	ldr	r3, [pc, #96]	@ (80021c0 <HAL_TIM_Base_MspInit+0x84>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	210f      	movs	r1, #15
 800216e:	201a      	movs	r0, #26
 8002170:	f000 fe8a 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002174:	201a      	movs	r0, #26
 8002176:	f000 fea3 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800217a:	e01a      	b.n	80021b2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002184:	d115      	bne.n	80021b2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	4b0d      	ldr	r3, [pc, #52]	@ (80021c0 <HAL_TIM_Base_MspInit+0x84>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	4a0c      	ldr	r2, [pc, #48]	@ (80021c0 <HAL_TIM_Base_MspInit+0x84>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6413      	str	r3, [r2, #64]	@ 0x40
 8002196:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <HAL_TIM_Base_MspInit+0x84>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2105      	movs	r1, #5
 80021a6:	201c      	movs	r0, #28
 80021a8:	f000 fe6e 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021ac:	201c      	movs	r0, #28
 80021ae:	f000 fe87 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40010000 	.word	0x40010000
 80021c0:	40023800 	.word	0x40023800

080021c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a12      	ldr	r2, [pc, #72]	@ (800222c <HAL_TIM_MspPostInit+0x68>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d11e      	bne.n	8002224 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <HAL_TIM_MspPostInit+0x6c>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	4a10      	ldr	r2, [pc, #64]	@ (8002230 <HAL_TIM_MspPostInit+0x6c>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <HAL_TIM_MspPostInit+0x6c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8002202:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8002206:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002210:	2302      	movs	r3, #2
 8002212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002214:	2301      	movs	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	4619      	mov	r1, r3
 800221e:	4805      	ldr	r0, [pc, #20]	@ (8002234 <HAL_TIM_MspPostInit+0x70>)
 8002220:	f001 f9cc 	bl	80035bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002224:	bf00      	nop
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40010000 	.word	0x40010000
 8002230:	40023800 	.word	0x40023800
 8002234:	40020000 	.word	0x40020000

08002238 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	@ 0x30
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	4b2e      	ldr	r3, [pc, #184]	@ (8002308 <HAL_InitTick+0xd0>)
 800224e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002250:	4a2d      	ldr	r2, [pc, #180]	@ (8002308 <HAL_InitTick+0xd0>)
 8002252:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002256:	6453      	str	r3, [r2, #68]	@ 0x44
 8002258:	4b2b      	ldr	r3, [pc, #172]	@ (8002308 <HAL_InitTick+0xd0>)
 800225a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002264:	f107 020c 	add.w	r2, r7, #12
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	4611      	mov	r1, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f002 fe00 	bl	8004e74 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002274:	f002 fdea 	bl	8004e4c <HAL_RCC_GetPCLK2Freq>
 8002278:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800227a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227c:	4a23      	ldr	r2, [pc, #140]	@ (800230c <HAL_InitTick+0xd4>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	0c9b      	lsrs	r3, r3, #18
 8002284:	3b01      	subs	r3, #1
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002288:	4b21      	ldr	r3, [pc, #132]	@ (8002310 <HAL_InitTick+0xd8>)
 800228a:	4a22      	ldr	r2, [pc, #136]	@ (8002314 <HAL_InitTick+0xdc>)
 800228c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800228e:	4b20      	ldr	r3, [pc, #128]	@ (8002310 <HAL_InitTick+0xd8>)
 8002290:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002294:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8002296:	4a1e      	ldr	r2, [pc, #120]	@ (8002310 <HAL_InitTick+0xd8>)
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 800229c:	4b1c      	ldr	r3, [pc, #112]	@ (8002310 <HAL_InitTick+0xd8>)
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <HAL_InitTick+0xd8>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a8:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <HAL_InitTick+0xd8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 80022ae:	4818      	ldr	r0, [pc, #96]	@ (8002310 <HAL_InitTick+0xd8>)
 80022b0:	f002 fe9b 	bl	8004fea <HAL_TIM_Base_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80022ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d11b      	bne.n	80022fa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80022c2:	4813      	ldr	r0, [pc, #76]	@ (8002310 <HAL_InitTick+0xd8>)
 80022c4:	f002 fee0 	bl	8005088 <HAL_TIM_Base_Start_IT>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80022ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d111      	bne.n	80022fa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80022d6:	201a      	movs	r0, #26
 80022d8:	f000 fdf2 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b0f      	cmp	r3, #15
 80022e0:	d808      	bhi.n	80022f4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80022e2:	2200      	movs	r2, #0
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	201a      	movs	r0, #26
 80022e8:	f000 fdce 	bl	8002e88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <HAL_InitTick+0xe0>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e002      	b.n	80022fa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80022fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3730      	adds	r7, #48	@ 0x30
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
 800230c:	431bde83 	.word	0x431bde83
 8002310:	20000348 	.word	0x20000348
 8002314:	40014800 	.word	0x40014800
 8002318:	20000004 	.word	0x20000004

0800231c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002320:	bf00      	nop
 8002322:	e7fd      	b.n	8002320 <NMI_Handler+0x4>

08002324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002328:	bf00      	nop
 800232a:	e7fd      	b.n	8002328 <HardFault_Handler+0x4>

0800232c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <MemManage_Handler+0x4>

08002334 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <BusFault_Handler+0x4>

0800233c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <UsageFault_Handler+0x4>

08002344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002358:	4803      	ldr	r0, [pc, #12]	@ (8002368 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800235a:	f003 f801 	bl	8005360 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800235e:	4803      	ldr	r0, [pc, #12]	@ (800236c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002360:	f002 fffe 	bl	8005360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000224 	.word	0x20000224
 800236c:	20000348 	.word	0x20000348

08002370 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002374:	4802      	ldr	r0, [pc, #8]	@ (8002380 <TIM2_IRQHandler+0x10>)
 8002376:	f002 fff3 	bl	8005360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000026c 	.word	0x2000026c

08002384 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002388:	4802      	ldr	r0, [pc, #8]	@ (8002394 <DMA2_Stream0_IRQHandler+0x10>)
 800238a:	f000 fead 	bl	80030e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200000c4 	.word	0x200000c4

08002398 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return 1;
 800239c:	2301      	movs	r3, #1
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <_kill>:

int _kill(int pid, int sig)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023b2:	f006 fda3 	bl	8008efc <__errno>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2216      	movs	r2, #22
 80023ba:	601a      	str	r2, [r3, #0]
  return -1;
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_exit>:

void _exit (int status)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ffe7 	bl	80023a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023da:	bf00      	nop
 80023dc:	e7fd      	b.n	80023da <_exit+0x12>
	...

080023e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e8:	4a14      	ldr	r2, [pc, #80]	@ (800243c <_sbrk+0x5c>)
 80023ea:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <_sbrk+0x60>)
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f4:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023fc:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <_sbrk+0x64>)
 80023fe:	4a12      	ldr	r2, [pc, #72]	@ (8002448 <_sbrk+0x68>)
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002402:	4b10      	ldr	r3, [pc, #64]	@ (8002444 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	429a      	cmp	r2, r3
 800240e:	d207      	bcs.n	8002420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002410:	f006 fd74 	bl	8008efc <__errno>
 8002414:	4603      	mov	r3, r0
 8002416:	220c      	movs	r2, #12
 8002418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	e009      	b.n	8002434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002420:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002426:	4b07      	ldr	r3, [pc, #28]	@ (8002444 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	4a05      	ldr	r2, [pc, #20]	@ (8002444 <_sbrk+0x64>)
 8002430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20010000 	.word	0x20010000
 8002440:	00000400 	.word	0x00000400
 8002444:	20000390 	.word	0x20000390
 8002448:	20004ed0 	.word	0x20004ed0

0800244c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002450:	4b06      	ldr	r3, [pc, #24]	@ (800246c <SystemInit+0x20>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002456:	4a05      	ldr	r2, [pc, #20]	@ (800246c <SystemInit+0x20>)
 8002458:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800245c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002470:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002474:	f7ff ffea 	bl	800244c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002478:	480c      	ldr	r0, [pc, #48]	@ (80024ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800247a:	490d      	ldr	r1, [pc, #52]	@ (80024b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800247c:	4a0d      	ldr	r2, [pc, #52]	@ (80024b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002480:	e002      	b.n	8002488 <LoopCopyDataInit>

08002482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002486:	3304      	adds	r3, #4

08002488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800248c:	d3f9      	bcc.n	8002482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248e:	4a0a      	ldr	r2, [pc, #40]	@ (80024b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002490:	4c0a      	ldr	r4, [pc, #40]	@ (80024bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002494:	e001      	b.n	800249a <LoopFillZerobss>

08002496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002498:	3204      	adds	r2, #4

0800249a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800249c:	d3fb      	bcc.n	8002496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800249e:	f006 fd33 	bl	8008f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a2:	f7ff f82b 	bl	80014fc <main>
  bx  lr    
 80024a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80024b4:	08009120 	.word	0x08009120
  ldr r2, =_sbss
 80024b8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80024bc:	20004ecc 	.word	0x20004ecc

080024c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC_IRQHandler>
	...

080024c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <HAL_Init+0x40>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002504 <HAL_Init+0x40>)
 80024ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_Init+0x40>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002504 <HAL_Init+0x40>)
 80024da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e0:	4b08      	ldr	r3, [pc, #32]	@ (8002504 <HAL_Init+0x40>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a07      	ldr	r2, [pc, #28]	@ (8002504 <HAL_Init+0x40>)
 80024e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ec:	2003      	movs	r0, #3
 80024ee:	f000 fcc0 	bl	8002e72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024f2:	200f      	movs	r0, #15
 80024f4:	f7ff fea0 	bl	8002238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f8:	f7ff fca8 	bl	8001e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023c00 	.word	0x40023c00

08002508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800250c:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <HAL_IncTick+0x20>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	4b06      	ldr	r3, [pc, #24]	@ (800252c <HAL_IncTick+0x24>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4413      	add	r3, r2
 8002518:	4a04      	ldr	r2, [pc, #16]	@ (800252c <HAL_IncTick+0x24>)
 800251a:	6013      	str	r3, [r2, #0]
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000008 	.word	0x20000008
 800252c:	20000394 	.word	0x20000394

08002530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return uwTick;
 8002534:	4b03      	ldr	r3, [pc, #12]	@ (8002544 <HAL_GetTick+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000394 	.word	0x20000394

08002548 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e033      	b.n	80025c6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff fc9c 	bl	8001ea4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b00      	cmp	r3, #0
 8002584:	d118      	bne.n	80025b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800258e:	f023 0302 	bic.w	r3, r3, #2
 8002592:	f043 0202 	orr.w	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fa3e 	bl	8002a1c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f023 0303 	bic.w	r3, r3, #3
 80025ae:	f043 0201 	orr.w	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80025b6:	e001      	b.n	80025bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_Start_DMA+0x1e>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e0ce      	b.n	800278c <HAL_ADC_Start_DMA+0x1bc>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d018      	beq.n	8002636 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002614:	4b5f      	ldr	r3, [pc, #380]	@ (8002794 <HAL_ADC_Start_DMA+0x1c4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a5f      	ldr	r2, [pc, #380]	@ (8002798 <HAL_ADC_Start_DMA+0x1c8>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	0c9a      	lsrs	r2, r3, #18
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002628:	e002      	b.n	8002630 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	3b01      	subs	r3, #1
 800262e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f9      	bne.n	800262a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002644:	d107      	bne.n	8002656 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002654:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	f040 8086 	bne.w	8002772 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002690:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026a4:	d106      	bne.n	80026b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f023 0206 	bic.w	r2, r3, #6
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80026b2:	e002      	b.n	80026ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c2:	4b36      	ldr	r3, [pc, #216]	@ (800279c <HAL_ADC_Start_DMA+0x1cc>)
 80026c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ca:	4a35      	ldr	r2, [pc, #212]	@ (80027a0 <HAL_ADC_Start_DMA+0x1d0>)
 80026cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d2:	4a34      	ldr	r2, [pc, #208]	@ (80027a4 <HAL_ADC_Start_DMA+0x1d4>)
 80026d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026da:	4a33      	ldr	r2, [pc, #204]	@ (80027a8 <HAL_ADC_Start_DMA+0x1d8>)
 80026dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80026e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80026f6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002706:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	334c      	adds	r3, #76	@ 0x4c
 8002712:	4619      	mov	r1, r3
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f000 fc8e 	bl	8003038 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10f      	bne.n	8002748 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d129      	bne.n	800278a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	e020      	b.n	800278a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a17      	ldr	r2, [pc, #92]	@ (80027ac <HAL_ADC_Start_DMA+0x1dc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d11b      	bne.n	800278a <HAL_ADC_Start_DMA+0x1ba>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d114      	bne.n	800278a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	e00b      	b.n	800278a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f043 0210 	orr.w	r2, r3, #16
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002782:	f043 0201 	orr.w	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000000 	.word	0x20000000
 8002798:	431bde83 	.word	0x431bde83
 800279c:	40012300 	.word	0x40012300
 80027a0:	08002c15 	.word	0x08002c15
 80027a4:	08002ccf 	.word	0x08002ccf
 80027a8:	08002ceb 	.word	0x08002ceb
 80027ac:	40012000 	.word	0x40012000

080027b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x1c>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e105      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x228>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b09      	cmp	r3, #9
 8002802:	d925      	bls.n	8002850 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68d9      	ldr	r1, [r3, #12]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	3b1e      	subs	r3, #30
 800281a:	2207      	movs	r2, #7
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43da      	mvns	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	400a      	ands	r2, r1
 8002828:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68d9      	ldr	r1, [r3, #12]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	4618      	mov	r0, r3
 800283c:	4603      	mov	r3, r0
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4403      	add	r3, r0
 8002842:	3b1e      	subs	r3, #30
 8002844:	409a      	lsls	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	e022      	b.n	8002896 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6919      	ldr	r1, [r3, #16]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	2207      	movs	r2, #7
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	400a      	ands	r2, r1
 8002872:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6919      	ldr	r1, [r3, #16]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	b29b      	uxth	r3, r3
 8002884:	4618      	mov	r0, r3
 8002886:	4603      	mov	r3, r0
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4403      	add	r3, r0
 800288c:	409a      	lsls	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b06      	cmp	r3, #6
 800289c:	d824      	bhi.n	80028e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	3b05      	subs	r3, #5
 80028b0:	221f      	movs	r2, #31
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43da      	mvns	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	400a      	ands	r2, r1
 80028be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	4618      	mov	r0, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	3b05      	subs	r3, #5
 80028da:	fa00 f203 	lsl.w	r2, r0, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80028e6:	e04c      	b.n	8002982 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b0c      	cmp	r3, #12
 80028ee:	d824      	bhi.n	800293a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	3b23      	subs	r3, #35	@ 0x23
 8002902:	221f      	movs	r2, #31
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43da      	mvns	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	400a      	ands	r2, r1
 8002910:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	4618      	mov	r0, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	3b23      	subs	r3, #35	@ 0x23
 800292c:	fa00 f203 	lsl.w	r2, r0, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	631a      	str	r2, [r3, #48]	@ 0x30
 8002938:	e023      	b.n	8002982 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	3b41      	subs	r3, #65	@ 0x41
 800294c:	221f      	movs	r2, #31
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43da      	mvns	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	400a      	ands	r2, r1
 800295a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	4618      	mov	r0, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	3b41      	subs	r3, #65	@ 0x41
 8002976:	fa00 f203 	lsl.w	r2, r0, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002982:	4b22      	ldr	r3, [pc, #136]	@ (8002a0c <HAL_ADC_ConfigChannel+0x234>)
 8002984:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a21      	ldr	r2, [pc, #132]	@ (8002a10 <HAL_ADC_ConfigChannel+0x238>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d109      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x1cc>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b12      	cmp	r3, #18
 8002996:	d105      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a19      	ldr	r2, [pc, #100]	@ (8002a10 <HAL_ADC_ConfigChannel+0x238>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d123      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x21e>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b10      	cmp	r3, #16
 80029b4:	d003      	beq.n	80029be <HAL_ADC_ConfigChannel+0x1e6>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b11      	cmp	r3, #17
 80029bc:	d11b      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d111      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029d2:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <HAL_ADC_ConfigChannel+0x23c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a10      	ldr	r2, [pc, #64]	@ (8002a18 <HAL_ADC_ConfigChannel+0x240>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	0c9a      	lsrs	r2, r3, #18
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029e8:	e002      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f9      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	40012300 	.word	0x40012300
 8002a10:	40012000 	.word	0x40012000
 8002a14:	20000000 	.word	0x20000000
 8002a18:	431bde83 	.word	0x431bde83

08002a1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a24:	4b79      	ldr	r3, [pc, #484]	@ (8002c0c <ADC_Init+0x1f0>)
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	021a      	lsls	r2, r3, #8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6899      	ldr	r1, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aae:	4a58      	ldr	r2, [pc, #352]	@ (8002c10 <ADC_Init+0x1f4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d022      	beq.n	8002afa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ac2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	e00f      	b.n	8002b1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b18:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0202 	bic.w	r2, r2, #2
 8002b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6899      	ldr	r1, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	7e1b      	ldrb	r3, [r3, #24]
 8002b34:	005a      	lsls	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01b      	beq.n	8002b80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b56:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6859      	ldr	r1, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	3b01      	subs	r3, #1
 8002b74:	035a      	lsls	r2, r3, #13
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	e007      	b.n	8002b90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b8e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	051a      	lsls	r2, r3, #20
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6899      	ldr	r1, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bd2:	025a      	lsls	r2, r3, #9
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6899      	ldr	r1, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	029a      	lsls	r2, r3, #10
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	609a      	str	r2, [r3, #8]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40012300 	.word	0x40012300
 8002c10:	0f000001 	.word	0x0f000001

08002c14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d13c      	bne.n	8002ca8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d12b      	bne.n	8002ca0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d127      	bne.n	8002ca0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c56:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d006      	beq.n	8002c6c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d119      	bne.n	8002ca0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0220 	bic.w	r2, r2, #32
 8002c7a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	f043 0201 	orr.w	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7fe fbe5 	bl	8001470 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ca6:	e00e      	b.n	8002cc6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f7ff fd85 	bl	80027c4 <HAL_ADC_ErrorCallback>
}
 8002cba:	e004      	b.n	8002cc6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4798      	blx	r3
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cda:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7ff fd67 	bl	80027b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2240      	movs	r2, #64	@ 0x40
 8002cfc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	f043 0204 	orr.w	r2, r3, #4
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f7ff fd5a 	bl	80027c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d10:	bf00      	nop
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d28:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d34:	4013      	ands	r3, r2
 8002d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d4a:	4a04      	ldr	r2, [pc, #16]	@ (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	60d3      	str	r3, [r2, #12]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d64:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <__NVIC_GetPriorityGrouping+0x18>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	f003 0307 	and.w	r3, r3, #7
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	db0b      	blt.n	8002da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	f003 021f 	and.w	r2, r3, #31
 8002d94:	4907      	ldr	r1, [pc, #28]	@ (8002db4 <__NVIC_EnableIRQ+0x38>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000e100 	.word	0xe000e100

08002db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	db0a      	blt.n	8002de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	490c      	ldr	r1, [pc, #48]	@ (8002e04 <__NVIC_SetPriority+0x4c>)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	0112      	lsls	r2, r2, #4
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	440b      	add	r3, r1
 8002ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de0:	e00a      	b.n	8002df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4908      	ldr	r1, [pc, #32]	@ (8002e08 <__NVIC_SetPriority+0x50>)
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	3b04      	subs	r3, #4
 8002df0:	0112      	lsls	r2, r2, #4
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	440b      	add	r3, r1
 8002df6:	761a      	strb	r2, [r3, #24]
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000e100 	.word	0xe000e100
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	@ 0x24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f1c3 0307 	rsb	r3, r3, #7
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	bf28      	it	cs
 8002e2a:	2304      	movcs	r3, #4
 8002e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3304      	adds	r3, #4
 8002e32:	2b06      	cmp	r3, #6
 8002e34:	d902      	bls.n	8002e3c <NVIC_EncodePriority+0x30>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3b03      	subs	r3, #3
 8002e3a:	e000      	b.n	8002e3e <NVIC_EncodePriority+0x32>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	401a      	ands	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e54:	f04f 31ff 	mov.w	r1, #4294967295
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	43d9      	mvns	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	4313      	orrs	r3, r2
         );
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3724      	adds	r7, #36	@ 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ff4c 	bl	8002d18 <__NVIC_SetPriorityGrouping>
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e9a:	f7ff ff61 	bl	8002d60 <__NVIC_GetPriorityGrouping>
 8002e9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	6978      	ldr	r0, [r7, #20]
 8002ea6:	f7ff ffb1 	bl	8002e0c <NVIC_EncodePriority>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ff80 	bl	8002db8 <__NVIC_SetPriority>
}
 8002eb8:	bf00      	nop
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ff54 	bl	8002d7c <__NVIC_EnableIRQ>
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ee8:	f7ff fb22 	bl	8002530 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e099      	b.n	800302c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f18:	e00f      	b.n	8002f3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f1a:	f7ff fb09 	bl	8002530 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	d908      	bls.n	8002f3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2203      	movs	r2, #3
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e078      	b.n	800302c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e8      	bne.n	8002f1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4b38      	ldr	r3, [pc, #224]	@ (8003034 <HAL_DMA_Init+0x158>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d107      	bne.n	8002fa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f023 0307 	bic.w	r3, r3, #7
 8002fba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d117      	bne.n	8002ffe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00e      	beq.n	8002ffe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fa6f 	bl	80034c4 <DMA_CheckFifoParam>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2240      	movs	r2, #64	@ 0x40
 8002ff0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e016      	b.n	800302c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fa26 	bl	8003458 <DMA_CalcBaseAndBitshift>
 800300c:	4603      	mov	r3, r0
 800300e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003014:	223f      	movs	r2, #63	@ 0x3f
 8003016:	409a      	lsls	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	f010803f 	.word	0xf010803f

08003038 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_DMA_Start_IT+0x26>
 800305a:	2302      	movs	r3, #2
 800305c:	e040      	b.n	80030e0 <HAL_DMA_Start_IT+0xa8>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d12f      	bne.n	80030d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f9b8 	bl	80033fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003090:	223f      	movs	r2, #63	@ 0x3f
 8003092:	409a      	lsls	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0216 	orr.w	r2, r2, #22
 80030a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d007      	beq.n	80030c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0208 	orr.w	r2, r2, #8
 80030be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e005      	b.n	80030de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030da:	2302      	movs	r3, #2
 80030dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030de:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003330 <HAL_DMA_IRQHandler+0x248>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a8e      	ldr	r2, [pc, #568]	@ (8003334 <HAL_DMA_IRQHandler+0x24c>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	0a9b      	lsrs	r3, r3, #10
 8003100:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003106:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003112:	2208      	movs	r2, #8
 8003114:	409a      	lsls	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01a      	beq.n	8003154 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d013      	beq.n	8003154 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0204 	bic.w	r2, r2, #4
 800313a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	2208      	movs	r2, #8
 8003142:	409a      	lsls	r2, r3
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003158:	2201      	movs	r2, #1
 800315a:	409a      	lsls	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d012      	beq.n	800318a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	2201      	movs	r2, #1
 8003178:	409a      	lsls	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003182:	f043 0202 	orr.w	r2, r3, #2
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318e:	2204      	movs	r2, #4
 8003190:	409a      	lsls	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d012      	beq.n	80031c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00b      	beq.n	80031c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ac:	2204      	movs	r2, #4
 80031ae:	409a      	lsls	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b8:	f043 0204 	orr.w	r2, r3, #4
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c4:	2210      	movs	r2, #16
 80031c6:	409a      	lsls	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d043      	beq.n	8003258 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d03c      	beq.n	8003258 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e2:	2210      	movs	r2, #16
 80031e4:	409a      	lsls	r2, r3
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d018      	beq.n	800322a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d108      	bne.n	8003218 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d024      	beq.n	8003258 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	4798      	blx	r3
 8003216:	e01f      	b.n	8003258 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01b      	beq.n	8003258 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
 8003228:	e016      	b.n	8003258 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d107      	bne.n	8003248 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0208 	bic.w	r2, r2, #8
 8003246:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325c:	2220      	movs	r2, #32
 800325e:	409a      	lsls	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4013      	ands	r3, r2
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 808f 	beq.w	8003388 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 8087 	beq.w	8003388 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327e:	2220      	movs	r2, #32
 8003280:	409a      	lsls	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b05      	cmp	r3, #5
 8003290:	d136      	bne.n	8003300 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0216 	bic.w	r2, r2, #22
 80032a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d103      	bne.n	80032c2 <HAL_DMA_IRQHandler+0x1da>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0208 	bic.w	r2, r2, #8
 80032d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d6:	223f      	movs	r2, #63	@ 0x3f
 80032d8:	409a      	lsls	r2, r3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d07e      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	4798      	blx	r3
        }
        return;
 80032fe:	e079      	b.n	80033f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01d      	beq.n	800334a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10d      	bne.n	8003338 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003320:	2b00      	cmp	r3, #0
 8003322:	d031      	beq.n	8003388 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
 800332c:	e02c      	b.n	8003388 <HAL_DMA_IRQHandler+0x2a0>
 800332e:	bf00      	nop
 8003330:	20000000 	.word	0x20000000
 8003334:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d023      	beq.n	8003388 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4798      	blx	r3
 8003348:	e01e      	b.n	8003388 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10f      	bne.n	8003378 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0210 	bic.w	r2, r2, #16
 8003366:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338c:	2b00      	cmp	r3, #0
 800338e:	d032      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d022      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2205      	movs	r2, #5
 80033a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	3301      	adds	r3, #1
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d307      	bcc.n	80033d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f2      	bne.n	80033b4 <HAL_DMA_IRQHandler+0x2cc>
 80033ce:	e000      	b.n	80033d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4798      	blx	r3
 80033f2:	e000      	b.n	80033f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80033f4:	bf00      	nop
    }
  }
}
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003418:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b40      	cmp	r3, #64	@ 0x40
 8003428:	d108      	bne.n	800343c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800343a:	e007      	b.n	800344c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	60da      	str	r2, [r3, #12]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	3b10      	subs	r3, #16
 8003468:	4a14      	ldr	r2, [pc, #80]	@ (80034bc <DMA_CalcBaseAndBitshift+0x64>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	091b      	lsrs	r3, r3, #4
 8003470:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003472:	4a13      	ldr	r2, [pc, #76]	@ (80034c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b03      	cmp	r3, #3
 8003484:	d909      	bls.n	800349a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	1d1a      	adds	r2, r3, #4
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	659a      	str	r2, [r3, #88]	@ 0x58
 8003498:	e007      	b.n	80034aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034a2:	f023 0303 	bic.w	r3, r3, #3
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	aaaaaaab 	.word	0xaaaaaaab
 80034c0:	08009108 	.word	0x08009108

080034c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d11f      	bne.n	800351e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d856      	bhi.n	8003592 <DMA_CheckFifoParam+0xce>
 80034e4:	a201      	add	r2, pc, #4	@ (adr r2, 80034ec <DMA_CheckFifoParam+0x28>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	080034fd 	.word	0x080034fd
 80034f0:	0800350f 	.word	0x0800350f
 80034f4:	080034fd 	.word	0x080034fd
 80034f8:	08003593 	.word	0x08003593
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d046      	beq.n	8003596 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350c:	e043      	b.n	8003596 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003512:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003516:	d140      	bne.n	800359a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800351c:	e03d      	b.n	800359a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003526:	d121      	bne.n	800356c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d837      	bhi.n	800359e <DMA_CheckFifoParam+0xda>
 800352e:	a201      	add	r2, pc, #4	@ (adr r2, 8003534 <DMA_CheckFifoParam+0x70>)
 8003530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003534:	08003545 	.word	0x08003545
 8003538:	0800354b 	.word	0x0800354b
 800353c:	08003545 	.word	0x08003545
 8003540:	0800355d 	.word	0x0800355d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
      break;
 8003548:	e030      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d025      	beq.n	80035a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800355a:	e022      	b.n	80035a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003564:	d11f      	bne.n	80035a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800356a:	e01c      	b.n	80035a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d903      	bls.n	800357a <DMA_CheckFifoParam+0xb6>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d003      	beq.n	8003580 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003578:	e018      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
      break;
 800357e:	e015      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00e      	beq.n	80035aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
      break;
 8003590:	e00b      	b.n	80035aa <DMA_CheckFifoParam+0xe6>
      break;
 8003592:	bf00      	nop
 8003594:	e00a      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      break;
 8003596:	bf00      	nop
 8003598:	e008      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      break;
 800359a:	bf00      	nop
 800359c:	e006      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      break;
 800359e:	bf00      	nop
 80035a0:	e004      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      break;
 80035a2:	bf00      	nop
 80035a4:	e002      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      break;   
 80035a6:	bf00      	nop
 80035a8:	e000      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      break;
 80035aa:	bf00      	nop
    }
  } 
  
  return status; 
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop

080035bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035bc:	b480      	push	{r7}
 80035be:	b089      	sub	sp, #36	@ 0x24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	e159      	b.n	800388c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035d8:	2201      	movs	r2, #1
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	f040 8148 	bne.w	8003886 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d005      	beq.n	800360e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800360a:	2b02      	cmp	r3, #2
 800360c:	d130      	bne.n	8003670 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	2203      	movs	r2, #3
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003644:	2201      	movs	r2, #1
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 0201 	and.w	r2, r3, #1
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	2b03      	cmp	r3, #3
 800367a:	d017      	beq.n	80036ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	2203      	movs	r2, #3
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d123      	bne.n	8003700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	08da      	lsrs	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3208      	adds	r2, #8
 80036c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	220f      	movs	r2, #15
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	08da      	lsrs	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3208      	adds	r2, #8
 80036fa:	69b9      	ldr	r1, [r7, #24]
 80036fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	2203      	movs	r2, #3
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0203 	and.w	r2, r3, #3
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80a2 	beq.w	8003886 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	4b57      	ldr	r3, [pc, #348]	@ (80038a4 <HAL_GPIO_Init+0x2e8>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	4a56      	ldr	r2, [pc, #344]	@ (80038a4 <HAL_GPIO_Init+0x2e8>)
 800374c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003750:	6453      	str	r3, [r2, #68]	@ 0x44
 8003752:	4b54      	ldr	r3, [pc, #336]	@ (80038a4 <HAL_GPIO_Init+0x2e8>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800375e:	4a52      	ldr	r2, [pc, #328]	@ (80038a8 <HAL_GPIO_Init+0x2ec>)
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	089b      	lsrs	r3, r3, #2
 8003764:	3302      	adds	r3, #2
 8003766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	220f      	movs	r2, #15
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a49      	ldr	r2, [pc, #292]	@ (80038ac <HAL_GPIO_Init+0x2f0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d019      	beq.n	80037be <HAL_GPIO_Init+0x202>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a48      	ldr	r2, [pc, #288]	@ (80038b0 <HAL_GPIO_Init+0x2f4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d013      	beq.n	80037ba <HAL_GPIO_Init+0x1fe>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a47      	ldr	r2, [pc, #284]	@ (80038b4 <HAL_GPIO_Init+0x2f8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00d      	beq.n	80037b6 <HAL_GPIO_Init+0x1fa>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a46      	ldr	r2, [pc, #280]	@ (80038b8 <HAL_GPIO_Init+0x2fc>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <HAL_GPIO_Init+0x1f6>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a45      	ldr	r2, [pc, #276]	@ (80038bc <HAL_GPIO_Init+0x300>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_GPIO_Init+0x1f2>
 80037aa:	2304      	movs	r3, #4
 80037ac:	e008      	b.n	80037c0 <HAL_GPIO_Init+0x204>
 80037ae:	2307      	movs	r3, #7
 80037b0:	e006      	b.n	80037c0 <HAL_GPIO_Init+0x204>
 80037b2:	2303      	movs	r3, #3
 80037b4:	e004      	b.n	80037c0 <HAL_GPIO_Init+0x204>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e002      	b.n	80037c0 <HAL_GPIO_Init+0x204>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <HAL_GPIO_Init+0x204>
 80037be:	2300      	movs	r3, #0
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	f002 0203 	and.w	r2, r2, #3
 80037c6:	0092      	lsls	r2, r2, #2
 80037c8:	4093      	lsls	r3, r2
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037d0:	4935      	ldr	r1, [pc, #212]	@ (80038a8 <HAL_GPIO_Init+0x2ec>)
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	089b      	lsrs	r3, r3, #2
 80037d6:	3302      	adds	r3, #2
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037de:	4b38      	ldr	r3, [pc, #224]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003802:	4a2f      	ldr	r2, [pc, #188]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003808:	4b2d      	ldr	r3, [pc, #180]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800382c:	4a24      	ldr	r2, [pc, #144]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003832:	4b23      	ldr	r3, [pc, #140]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003856:	4a1a      	ldr	r2, [pc, #104]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800385c:	4b18      	ldr	r3, [pc, #96]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003880:	4a0f      	ldr	r2, [pc, #60]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3301      	adds	r3, #1
 800388a:	61fb      	str	r3, [r7, #28]
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2b0f      	cmp	r3, #15
 8003890:	f67f aea2 	bls.w	80035d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	3724      	adds	r7, #36	@ 0x24
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40013800 	.word	0x40013800
 80038ac:	40020000 	.word	0x40020000
 80038b0:	40020400 	.word	0x40020400
 80038b4:	40020800 	.word	0x40020800
 80038b8:	40020c00 	.word	0x40020c00
 80038bc:	40021000 	.word	0x40021000
 80038c0:	40013c00 	.word	0x40013c00

080038c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	807b      	strh	r3, [r7, #2]
 80038d0:	4613      	mov	r3, r2
 80038d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038d4:	787b      	ldrb	r3, [r7, #1]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038da:	887a      	ldrh	r2, [r7, #2]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038e0:	e003      	b.n	80038ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038e2:	887b      	ldrh	r3, [r7, #2]
 80038e4:	041a      	lsls	r2, r3, #16
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	619a      	str	r2, [r3, #24]
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003908:	887a      	ldrh	r2, [r7, #2]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4013      	ands	r3, r2
 800390e:	041a      	lsls	r2, r3, #16
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	43d9      	mvns	r1, r3
 8003914:	887b      	ldrh	r3, [r7, #2]
 8003916:	400b      	ands	r3, r1
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	619a      	str	r2, [r3, #24]
}
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e12b      	b.n	8003b96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fe fb1c 	bl	8001f90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2224      	movs	r2, #36	@ 0x24
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800397e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800398e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003990:	f001 fa48 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 8003994:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4a81      	ldr	r2, [pc, #516]	@ (8003ba0 <HAL_I2C_Init+0x274>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d807      	bhi.n	80039b0 <HAL_I2C_Init+0x84>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a80      	ldr	r2, [pc, #512]	@ (8003ba4 <HAL_I2C_Init+0x278>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	bf94      	ite	ls
 80039a8:	2301      	movls	r3, #1
 80039aa:	2300      	movhi	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	e006      	b.n	80039be <HAL_I2C_Init+0x92>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4a7d      	ldr	r2, [pc, #500]	@ (8003ba8 <HAL_I2C_Init+0x27c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	bf94      	ite	ls
 80039b8:	2301      	movls	r3, #1
 80039ba:	2300      	movhi	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e0e7      	b.n	8003b96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4a78      	ldr	r2, [pc, #480]	@ (8003bac <HAL_I2C_Init+0x280>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	0c9b      	lsrs	r3, r3, #18
 80039d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4a6a      	ldr	r2, [pc, #424]	@ (8003ba0 <HAL_I2C_Init+0x274>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d802      	bhi.n	8003a00 <HAL_I2C_Init+0xd4>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	3301      	adds	r3, #1
 80039fe:	e009      	b.n	8003a14 <HAL_I2C_Init+0xe8>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	4a69      	ldr	r2, [pc, #420]	@ (8003bb0 <HAL_I2C_Init+0x284>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	099b      	lsrs	r3, r3, #6
 8003a12:	3301      	adds	r3, #1
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	495c      	ldr	r1, [pc, #368]	@ (8003ba0 <HAL_I2C_Init+0x274>)
 8003a30:	428b      	cmp	r3, r1
 8003a32:	d819      	bhi.n	8003a68 <HAL_I2C_Init+0x13c>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1e59      	subs	r1, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a42:	1c59      	adds	r1, r3, #1
 8003a44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a48:	400b      	ands	r3, r1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_I2C_Init+0x138>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1e59      	subs	r1, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a62:	e051      	b.n	8003b08 <HAL_I2C_Init+0x1dc>
 8003a64:	2304      	movs	r3, #4
 8003a66:	e04f      	b.n	8003b08 <HAL_I2C_Init+0x1dc>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d111      	bne.n	8003a94 <HAL_I2C_Init+0x168>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1e58      	subs	r0, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	440b      	add	r3, r1
 8003a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a82:	3301      	adds	r3, #1
 8003a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e012      	b.n	8003aba <HAL_I2C_Init+0x18e>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1e58      	subs	r0, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6859      	ldr	r1, [r3, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	0099      	lsls	r1, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Init+0x196>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e022      	b.n	8003b08 <HAL_I2C_Init+0x1dc>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10e      	bne.n	8003ae8 <HAL_I2C_Init+0x1bc>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1e58      	subs	r0, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6859      	ldr	r1, [r3, #4]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	440b      	add	r3, r1
 8003ad8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003adc:	3301      	adds	r3, #1
 8003ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ae6:	e00f      	b.n	8003b08 <HAL_I2C_Init+0x1dc>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1e58      	subs	r0, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	0099      	lsls	r1, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afe:	3301      	adds	r3, #1
 8003b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	6809      	ldr	r1, [r1, #0]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6911      	ldr	r1, [r2, #16]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68d2      	ldr	r2, [r2, #12]
 8003b42:	4311      	orrs	r1, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	000186a0 	.word	0x000186a0
 8003ba4:	001e847f 	.word	0x001e847f
 8003ba8:	003d08ff 	.word	0x003d08ff
 8003bac:	431bde83 	.word	0x431bde83
 8003bb0:	10624dd3 	.word	0x10624dd3

08003bb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08c      	sub	sp, #48	@ 0x30
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	817b      	strh	r3, [r7, #10]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	813b      	strh	r3, [r7, #8]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bce:	f7fe fcaf 	bl	8002530 <HAL_GetTick>
 8003bd2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	f040 8214 	bne.w	800400a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	2319      	movs	r3, #25
 8003be8:	2201      	movs	r2, #1
 8003bea:	497b      	ldr	r1, [pc, #492]	@ (8003dd8 <HAL_I2C_Mem_Read+0x224>)
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 fafb 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e207      	b.n	800400c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_I2C_Mem_Read+0x56>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e200      	b.n	800400c <HAL_I2C_Mem_Read+0x458>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d007      	beq.n	8003c30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2222      	movs	r2, #34	@ 0x22
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2240      	movs	r2, #64	@ 0x40
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4a5b      	ldr	r2, [pc, #364]	@ (8003ddc <HAL_I2C_Mem_Read+0x228>)
 8003c70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c72:	88f8      	ldrh	r0, [r7, #6]
 8003c74:	893a      	ldrh	r2, [r7, #8]
 8003c76:	8979      	ldrh	r1, [r7, #10]
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	4603      	mov	r3, r0
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f9c8 	bl	8004018 <I2C_RequestMemoryRead>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e1bc      	b.n	800400c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d113      	bne.n	8003cc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	623b      	str	r3, [r7, #32]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	623b      	str	r3, [r7, #32]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	623b      	str	r3, [r7, #32]
 8003cae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	e190      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d11b      	bne.n	8003d02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e170      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d11b      	bne.n	8003d42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	e150      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d58:	e144      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	f200 80f1 	bhi.w	8003f46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d123      	bne.n	8003db4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fb9b 	bl	80044ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e145      	b.n	800400c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003db2:	e117      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d14e      	bne.n	8003e5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	4906      	ldr	r1, [pc, #24]	@ (8003de0 <HAL_I2C_Mem_Read+0x22c>)
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fa0e 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e11a      	b.n	800400c <HAL_I2C_Mem_Read+0x458>
 8003dd6:	bf00      	nop
 8003dd8:	00100002 	.word	0x00100002
 8003ddc:	ffff0000 	.word	0xffff0000
 8003de0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e58:	e0c4      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e60:	2200      	movs	r2, #0
 8003e62:	496c      	ldr	r1, [pc, #432]	@ (8004014 <HAL_I2C_Mem_Read+0x460>)
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f9bf 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0cb      	b.n	800400c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	4955      	ldr	r1, [pc, #340]	@ (8004014 <HAL_I2C_Mem_Read+0x460>)
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f991 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e09d      	b.n	800400c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ede:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f44:	e04e      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 faae 	bl	80044ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e058      	b.n	800400c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d124      	bne.n	8003fe4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d107      	bne.n	8003fb2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fb0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f47f aeb6 	bne.w	8003d5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	e000      	b.n	800400c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800400a:	2302      	movs	r3, #2
  }
}
 800400c:	4618      	mov	r0, r3
 800400e:	3728      	adds	r7, #40	@ 0x28
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	00010004 	.word	0x00010004

08004018 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	4608      	mov	r0, r1
 8004022:	4611      	mov	r1, r2
 8004024:	461a      	mov	r2, r3
 8004026:	4603      	mov	r3, r0
 8004028:	817b      	strh	r3, [r7, #10]
 800402a:	460b      	mov	r3, r1
 800402c:	813b      	strh	r3, [r7, #8]
 800402e:	4613      	mov	r3, r2
 8004030:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004040:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004050:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	2200      	movs	r2, #0
 800405a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f8c2 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00d      	beq.n	8004086 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004078:	d103      	bne.n	8004082 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004080:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e0aa      	b.n	80041dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004086:	897b      	ldrh	r3, [r7, #10]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004094:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	6a3a      	ldr	r2, [r7, #32]
 800409a:	4952      	ldr	r1, [pc, #328]	@ (80041e4 <I2C_RequestMemoryRead+0x1cc>)
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f91d 	bl	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e097      	b.n	80041dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c4:	6a39      	ldr	r1, [r7, #32]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f9a8 	bl	800441c <I2C_WaitOnTXEFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00d      	beq.n	80040ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d107      	bne.n	80040ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e076      	b.n	80041dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d105      	bne.n	8004100 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040f4:	893b      	ldrh	r3, [r7, #8]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	611a      	str	r2, [r3, #16]
 80040fe:	e021      	b.n	8004144 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004100:	893b      	ldrh	r3, [r7, #8]
 8004102:	0a1b      	lsrs	r3, r3, #8
 8004104:	b29b      	uxth	r3, r3
 8004106:	b2da      	uxtb	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800410e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004110:	6a39      	ldr	r1, [r7, #32]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f982 	bl	800441c <I2C_WaitOnTXEFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	2b04      	cmp	r3, #4
 8004124:	d107      	bne.n	8004136 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004134:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e050      	b.n	80041dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800413a:	893b      	ldrh	r3, [r7, #8]
 800413c:	b2da      	uxtb	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004146:	6a39      	ldr	r1, [r7, #32]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f967 	bl	800441c <I2C_WaitOnTXEFlagUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00d      	beq.n	8004170 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004158:	2b04      	cmp	r3, #4
 800415a:	d107      	bne.n	800416c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e035      	b.n	80041dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800417e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	2200      	movs	r2, #0
 8004188:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f82b 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041a6:	d103      	bne.n	80041b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e013      	b.n	80041dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041b4:	897b      	ldrh	r3, [r7, #10]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	6a3a      	ldr	r2, [r7, #32]
 80041c8:	4906      	ldr	r1, [pc, #24]	@ (80041e4 <I2C_RequestMemoryRead+0x1cc>)
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f886 	bl	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	00010002 	.word	0x00010002

080041e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041f8:	e048      	b.n	800428c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d044      	beq.n	800428c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004202:	f7fe f995 	bl	8002530 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d302      	bcc.n	8004218 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d139      	bne.n	800428c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	0c1b      	lsrs	r3, r3, #16
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	d10d      	bne.n	800423e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	43da      	mvns	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4013      	ands	r3, r2
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	461a      	mov	r2, r3
 800423c:	e00c      	b.n	8004258 <I2C_WaitOnFlagUntilTimeout+0x70>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	43da      	mvns	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4013      	ands	r3, r2
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	429a      	cmp	r2, r3
 800425c:	d116      	bne.n	800428c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e023      	b.n	80042d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	0c1b      	lsrs	r3, r3, #16
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	d10d      	bne.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	43da      	mvns	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4013      	ands	r3, r2
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf0c      	ite	eq
 80042a8:	2301      	moveq	r3, #1
 80042aa:	2300      	movne	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	e00c      	b.n	80042cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	43da      	mvns	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4013      	ands	r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d093      	beq.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042ea:	e071      	b.n	80043d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042fa:	d123      	bne.n	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800430a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004314:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004330:	f043 0204 	orr.w	r2, r3, #4
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e067      	b.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434a:	d041      	beq.n	80043d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434c:	f7fe f8f0 	bl	8002530 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	429a      	cmp	r2, r3
 800435a:	d302      	bcc.n	8004362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d136      	bne.n	80043d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b01      	cmp	r3, #1
 800436a:	d10c      	bne.n	8004386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	43da      	mvns	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4013      	ands	r3, r2
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	bf14      	ite	ne
 800437e:	2301      	movne	r3, #1
 8004380:	2300      	moveq	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	e00b      	b.n	800439e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	43da      	mvns	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4013      	ands	r3, r2
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d016      	beq.n	80043d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043bc:	f043 0220 	orr.w	r2, r3, #32
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e021      	b.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	0c1b      	lsrs	r3, r3, #16
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d10c      	bne.n	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	43da      	mvns	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e00b      	b.n	800440c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	43da      	mvns	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4013      	ands	r3, r2
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	bf14      	ite	ne
 8004406:	2301      	movne	r3, #1
 8004408:	2300      	moveq	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	f47f af6d 	bne.w	80042ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004428:	e034      	b.n	8004494 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f89b 	bl	8004566 <I2C_IsAcknowledgeFailed>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e034      	b.n	80044a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d028      	beq.n	8004494 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004442:	f7fe f875 	bl	8002530 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	429a      	cmp	r2, r3
 8004450:	d302      	bcc.n	8004458 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d11d      	bne.n	8004494 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004462:	2b80      	cmp	r3, #128	@ 0x80
 8004464:	d016      	beq.n	8004494 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004480:	f043 0220 	orr.w	r2, r3, #32
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e007      	b.n	80044a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449e:	2b80      	cmp	r3, #128	@ 0x80
 80044a0:	d1c3      	bne.n	800442a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044b8:	e049      	b.n	800454e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d119      	bne.n	80044fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0210 	mvn.w	r2, #16
 80044d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e030      	b.n	800455e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fc:	f7fe f818 	bl	8002530 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	429a      	cmp	r2, r3
 800450a:	d302      	bcc.n	8004512 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d11d      	bne.n	800454e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451c:	2b40      	cmp	r3, #64	@ 0x40
 800451e:	d016      	beq.n	800454e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	f043 0220 	orr.w	r2, r3, #32
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e007      	b.n	800455e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004558:	2b40      	cmp	r3, #64	@ 0x40
 800455a:	d1ae      	bne.n	80044ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800457c:	d11b      	bne.n	80045b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004586:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	f043 0204 	orr.w	r2, r3, #4
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e267      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d075      	beq.n	80046ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045e2:	4b88      	ldr	r3, [pc, #544]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d00c      	beq.n	8004608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ee:	4b85      	ldr	r3, [pc, #532]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d112      	bne.n	8004620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045fa:	4b82      	ldr	r3, [pc, #520]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004602:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004606:	d10b      	bne.n	8004620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004608:	4b7e      	ldr	r3, [pc, #504]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d05b      	beq.n	80046cc <HAL_RCC_OscConfig+0x108>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d157      	bne.n	80046cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e242      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004628:	d106      	bne.n	8004638 <HAL_RCC_OscConfig+0x74>
 800462a:	4b76      	ldr	r3, [pc, #472]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a75      	ldr	r2, [pc, #468]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e01d      	b.n	8004674 <HAL_RCC_OscConfig+0xb0>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004640:	d10c      	bne.n	800465c <HAL_RCC_OscConfig+0x98>
 8004642:	4b70      	ldr	r3, [pc, #448]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a6f      	ldr	r2, [pc, #444]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004648:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	4b6d      	ldr	r3, [pc, #436]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a6c      	ldr	r2, [pc, #432]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e00b      	b.n	8004674 <HAL_RCC_OscConfig+0xb0>
 800465c:	4b69      	ldr	r3, [pc, #420]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a68      	ldr	r2, [pc, #416]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	4b66      	ldr	r3, [pc, #408]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a65      	ldr	r2, [pc, #404]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 800466e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d013      	beq.n	80046a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7fd ff58 	bl	8002530 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004684:	f7fd ff54 	bl	8002530 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b64      	cmp	r3, #100	@ 0x64
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e207      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004696:	4b5b      	ldr	r3, [pc, #364]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0xc0>
 80046a2:	e014      	b.n	80046ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7fd ff44 	bl	8002530 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ac:	f7fd ff40 	bl	8002530 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	@ 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e1f3      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046be:	4b51      	ldr	r3, [pc, #324]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0xe8>
 80046ca:	e000      	b.n	80046ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d063      	beq.n	80047a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046da:	4b4a      	ldr	r3, [pc, #296]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00b      	beq.n	80046fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046e6:	4b47      	ldr	r3, [pc, #284]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d11c      	bne.n	800472c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046f2:	4b44      	ldr	r3, [pc, #272]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d116      	bne.n	800472c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fe:	4b41      	ldr	r3, [pc, #260]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_RCC_OscConfig+0x152>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d001      	beq.n	8004716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e1c7      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004716:	4b3b      	ldr	r3, [pc, #236]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	4937      	ldr	r1, [pc, #220]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004726:	4313      	orrs	r3, r2
 8004728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800472a:	e03a      	b.n	80047a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d020      	beq.n	8004776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004734:	4b34      	ldr	r3, [pc, #208]	@ (8004808 <HAL_RCC_OscConfig+0x244>)
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473a:	f7fd fef9 	bl	8002530 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004742:	f7fd fef5 	bl	8002530 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e1a8      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004754:	4b2b      	ldr	r3, [pc, #172]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004760:	4b28      	ldr	r3, [pc, #160]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	4925      	ldr	r1, [pc, #148]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004770:	4313      	orrs	r3, r2
 8004772:	600b      	str	r3, [r1, #0]
 8004774:	e015      	b.n	80047a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004776:	4b24      	ldr	r3, [pc, #144]	@ (8004808 <HAL_RCC_OscConfig+0x244>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477c:	f7fd fed8 	bl	8002530 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004784:	f7fd fed4 	bl	8002530 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e187      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004796:	4b1b      	ldr	r3, [pc, #108]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d036      	beq.n	800481c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d016      	beq.n	80047e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047b6:	4b15      	ldr	r3, [pc, #84]	@ (800480c <HAL_RCC_OscConfig+0x248>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047bc:	f7fd feb8 	bl	8002530 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047c4:	f7fd feb4 	bl	8002530 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e167      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004804 <HAL_RCC_OscConfig+0x240>)
 80047d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x200>
 80047e2:	e01b      	b.n	800481c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047e4:	4b09      	ldr	r3, [pc, #36]	@ (800480c <HAL_RCC_OscConfig+0x248>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ea:	f7fd fea1 	bl	8002530 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f0:	e00e      	b.n	8004810 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f2:	f7fd fe9d 	bl	8002530 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d907      	bls.n	8004810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e150      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
 8004804:	40023800 	.word	0x40023800
 8004808:	42470000 	.word	0x42470000
 800480c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004810:	4b88      	ldr	r3, [pc, #544]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1ea      	bne.n	80047f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8097 	beq.w	8004958 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800482a:	2300      	movs	r3, #0
 800482c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800482e:	4b81      	ldr	r3, [pc, #516]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10f      	bne.n	800485a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	4a7c      	ldr	r2, [pc, #496]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004848:	6413      	str	r3, [r2, #64]	@ 0x40
 800484a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004852:	60bb      	str	r3, [r7, #8]
 8004854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004856:	2301      	movs	r3, #1
 8004858:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800485a:	4b77      	ldr	r3, [pc, #476]	@ (8004a38 <HAL_RCC_OscConfig+0x474>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d118      	bne.n	8004898 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004866:	4b74      	ldr	r3, [pc, #464]	@ (8004a38 <HAL_RCC_OscConfig+0x474>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a73      	ldr	r2, [pc, #460]	@ (8004a38 <HAL_RCC_OscConfig+0x474>)
 800486c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004872:	f7fd fe5d 	bl	8002530 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487a:	f7fd fe59 	bl	8002530 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e10c      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488c:	4b6a      	ldr	r3, [pc, #424]	@ (8004a38 <HAL_RCC_OscConfig+0x474>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d106      	bne.n	80048ae <HAL_RCC_OscConfig+0x2ea>
 80048a0:	4b64      	ldr	r3, [pc, #400]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a4:	4a63      	ldr	r2, [pc, #396]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ac:	e01c      	b.n	80048e8 <HAL_RCC_OscConfig+0x324>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b05      	cmp	r3, #5
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCC_OscConfig+0x30c>
 80048b6:	4b5f      	ldr	r3, [pc, #380]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ba:	4a5e      	ldr	r2, [pc, #376]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048bc:	f043 0304 	orr.w	r3, r3, #4
 80048c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c6:	4a5b      	ldr	r2, [pc, #364]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ce:	e00b      	b.n	80048e8 <HAL_RCC_OscConfig+0x324>
 80048d0:	4b58      	ldr	r3, [pc, #352]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d4:	4a57      	ldr	r2, [pc, #348]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048d6:	f023 0301 	bic.w	r3, r3, #1
 80048da:	6713      	str	r3, [r2, #112]	@ 0x70
 80048dc:	4b55      	ldr	r3, [pc, #340]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e0:	4a54      	ldr	r2, [pc, #336]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80048e2:	f023 0304 	bic.w	r3, r3, #4
 80048e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d015      	beq.n	800491c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f0:	f7fd fe1e 	bl	8002530 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f6:	e00a      	b.n	800490e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048f8:	f7fd fe1a 	bl	8002530 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e0cb      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800490e:	4b49      	ldr	r3, [pc, #292]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0ee      	beq.n	80048f8 <HAL_RCC_OscConfig+0x334>
 800491a:	e014      	b.n	8004946 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491c:	f7fd fe08 	bl	8002530 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004922:	e00a      	b.n	800493a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004924:	f7fd fe04 	bl	8002530 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e0b5      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800493a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1ee      	bne.n	8004924 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004946:	7dfb      	ldrb	r3, [r7, #23]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d105      	bne.n	8004958 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800494c:	4b39      	ldr	r3, [pc, #228]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 800494e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004950:	4a38      	ldr	r2, [pc, #224]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004956:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80a1 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004962:	4b34      	ldr	r3, [pc, #208]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	2b08      	cmp	r3, #8
 800496c:	d05c      	beq.n	8004a28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d141      	bne.n	80049fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004976:	4b31      	ldr	r3, [pc, #196]	@ (8004a3c <HAL_RCC_OscConfig+0x478>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497c:	f7fd fdd8 	bl	8002530 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004984:	f7fd fdd4 	bl	8002530 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e087      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004996:	4b27      	ldr	r3, [pc, #156]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69da      	ldr	r2, [r3, #28]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	019b      	lsls	r3, r3, #6
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	085b      	lsrs	r3, r3, #1
 80049ba:	3b01      	subs	r3, #1
 80049bc:	041b      	lsls	r3, r3, #16
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	061b      	lsls	r3, r3, #24
 80049c6:	491b      	ldr	r1, [pc, #108]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049cc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a3c <HAL_RCC_OscConfig+0x478>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d2:	f7fd fdad 	bl	8002530 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049da:	f7fd fda9 	bl	8002530 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e05c      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ec:	4b11      	ldr	r3, [pc, #68]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <HAL_RCC_OscConfig+0x416>
 80049f8:	e054      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fa:	4b10      	ldr	r3, [pc, #64]	@ (8004a3c <HAL_RCC_OscConfig+0x478>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a00:	f7fd fd96 	bl	8002530 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a08:	f7fd fd92 	bl	8002530 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e045      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1a:	4b06      	ldr	r3, [pc, #24]	@ (8004a34 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0x444>
 8004a26:	e03d      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e038      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
 8004a34:	40023800 	.word	0x40023800
 8004a38:	40007000 	.word	0x40007000
 8004a3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a40:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab0 <HAL_RCC_OscConfig+0x4ec>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d028      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d121      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d11a      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a70:	4013      	ands	r3, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d111      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a86:	085b      	lsrs	r3, r3, #1
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40023800 	.word	0x40023800

08004ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e0cc      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac8:	4b68      	ldr	r3, [pc, #416]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d90c      	bls.n	8004af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad6:	4b65      	ldr	r3, [pc, #404]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b63      	ldr	r3, [pc, #396]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e0b8      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d020      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b08:	4b59      	ldr	r3, [pc, #356]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	4a58      	ldr	r2, [pc, #352]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b20:	4b53      	ldr	r3, [pc, #332]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4a52      	ldr	r2, [pc, #328]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b2c:	4b50      	ldr	r3, [pc, #320]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	494d      	ldr	r1, [pc, #308]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d044      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d107      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b52:	4b47      	ldr	r3, [pc, #284]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d119      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e07f      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d003      	beq.n	8004b72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d107      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b72:	4b3f      	ldr	r3, [pc, #252]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d109      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e06f      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b82:	4b3b      	ldr	r3, [pc, #236]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e067      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b92:	4b37      	ldr	r3, [pc, #220]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f023 0203 	bic.w	r2, r3, #3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	4934      	ldr	r1, [pc, #208]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ba4:	f7fd fcc4 	bl	8002530 <HAL_GetTick>
 8004ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004baa:	e00a      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bac:	f7fd fcc0 	bl	8002530 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e04f      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 020c 	and.w	r2, r3, #12
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d1eb      	bne.n	8004bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd4:	4b25      	ldr	r3, [pc, #148]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d20c      	bcs.n	8004bfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be2:	4b22      	ldr	r3, [pc, #136]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	4b20      	ldr	r3, [pc, #128]	@ (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e032      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c08:	4b19      	ldr	r3, [pc, #100]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4916      	ldr	r1, [pc, #88]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d009      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c26:	4b12      	ldr	r3, [pc, #72]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	490e      	ldr	r1, [pc, #56]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c3a:	f000 f821 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	490a      	ldr	r1, [pc, #40]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c0>)
 8004c4c:	5ccb      	ldrb	r3, [r1, r3]
 8004c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c52:	4a09      	ldr	r2, [pc, #36]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c56:	4b09      	ldr	r3, [pc, #36]	@ (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fd faec 	bl	8002238 <HAL_InitTick>

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40023c00 	.word	0x40023c00
 8004c70:	40023800 	.word	0x40023800
 8004c74:	080090f0 	.word	0x080090f0
 8004c78:	20000000 	.word	0x20000000
 8004c7c:	20000004 	.word	0x20000004

08004c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c84:	b090      	sub	sp, #64	@ 0x40
 8004c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c90:	2300      	movs	r3, #0
 8004c92:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c98:	4b59      	ldr	r3, [pc, #356]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 030c 	and.w	r3, r3, #12
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d00d      	beq.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	f200 80a1 	bhi.w	8004dec <HAL_RCC_GetSysClockFreq+0x16c>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d003      	beq.n	8004cba <HAL_RCC_GetSysClockFreq+0x3a>
 8004cb2:	e09b      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cb4:	4b53      	ldr	r3, [pc, #332]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004cb8:	e09b      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cba:	4b53      	ldr	r3, [pc, #332]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cbe:	e098      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cc0:	4b4f      	ldr	r3, [pc, #316]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cca:	4b4d      	ldr	r3, [pc, #308]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d028      	beq.n	8004d28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	099b      	lsrs	r3, r3, #6
 8004cdc:	2200      	movs	r2, #0
 8004cde:	623b      	str	r3, [r7, #32]
 8004ce0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4b47      	ldr	r3, [pc, #284]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cec:	fb03 f201 	mul.w	r2, r3, r1
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	fb00 f303 	mul.w	r3, r0, r3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	4a43      	ldr	r2, [pc, #268]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cfa:	fba0 1202 	umull	r1, r2, r0, r2
 8004cfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d00:	460a      	mov	r2, r1
 8004d02:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004d04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d06:	4413      	add	r3, r2
 8004d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	61fa      	str	r2, [r7, #28]
 8004d12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004d1a:	f7fb ff07 	bl	8000b2c <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4613      	mov	r3, r2
 8004d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d26:	e053      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d28:	4b35      	ldr	r3, [pc, #212]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	099b      	lsrs	r3, r3, #6
 8004d2e:	2200      	movs	r2, #0
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	617a      	str	r2, [r7, #20]
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d3a:	f04f 0b00 	mov.w	fp, #0
 8004d3e:	4652      	mov	r2, sl
 8004d40:	465b      	mov	r3, fp
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f04f 0100 	mov.w	r1, #0
 8004d4a:	0159      	lsls	r1, r3, #5
 8004d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d50:	0150      	lsls	r0, r2, #5
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	ebb2 080a 	subs.w	r8, r2, sl
 8004d5a:	eb63 090b 	sbc.w	r9, r3, fp
 8004d5e:	f04f 0200 	mov.w	r2, #0
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d72:	ebb2 0408 	subs.w	r4, r2, r8
 8004d76:	eb63 0509 	sbc.w	r5, r3, r9
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	00eb      	lsls	r3, r5, #3
 8004d84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d88:	00e2      	lsls	r2, r4, #3
 8004d8a:	4614      	mov	r4, r2
 8004d8c:	461d      	mov	r5, r3
 8004d8e:	eb14 030a 	adds.w	r3, r4, sl
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	eb45 030b 	adc.w	r3, r5, fp
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004da6:	4629      	mov	r1, r5
 8004da8:	028b      	lsls	r3, r1, #10
 8004daa:	4621      	mov	r1, r4
 8004dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004db0:	4621      	mov	r1, r4
 8004db2:	028a      	lsls	r2, r1, #10
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dba:	2200      	movs	r2, #0
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	60fa      	str	r2, [r7, #12]
 8004dc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dc4:	f7fb feb2 	bl	8000b2c <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4613      	mov	r3, r2
 8004dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	3301      	adds	r3, #1
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004de0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004dea:	e002      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dec:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0x184>)
 8004dee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3740      	adds	r7, #64	@ 0x40
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800
 8004e04:	00f42400 	.word	0x00f42400
 8004e08:	017d7840 	.word	0x017d7840

08004e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e10:	4b03      	ldr	r3, [pc, #12]	@ (8004e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e12:	681b      	ldr	r3, [r3, #0]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20000000 	.word	0x20000000

08004e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e28:	f7ff fff0 	bl	8004e0c <HAL_RCC_GetHCLKFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b05      	ldr	r3, [pc, #20]	@ (8004e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	0a9b      	lsrs	r3, r3, #10
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	4903      	ldr	r1, [pc, #12]	@ (8004e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40023800 	.word	0x40023800
 8004e48:	08009100 	.word	0x08009100

08004e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e50:	f7ff ffdc 	bl	8004e0c <HAL_RCC_GetHCLKFreq>
 8004e54:	4602      	mov	r2, r0
 8004e56:	4b05      	ldr	r3, [pc, #20]	@ (8004e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	0b5b      	lsrs	r3, r3, #13
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	4903      	ldr	r1, [pc, #12]	@ (8004e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e62:	5ccb      	ldrb	r3, [r1, r3]
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	08009100 	.word	0x08009100

08004e74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	220f      	movs	r2, #15
 8004e82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e84:	4b12      	ldr	r3, [pc, #72]	@ (8004ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 0203 	and.w	r2, r3, #3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e90:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ea8:	4b09      	ldr	r3, [pc, #36]	@ (8004ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	08db      	lsrs	r3, r3, #3
 8004eae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004eb6:	4b07      	ldr	r3, [pc, #28]	@ (8004ed4 <HAL_RCC_GetClockConfig+0x60>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0207 	and.w	r2, r3, #7
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	601a      	str	r2, [r3, #0]
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40023c00 	.word	0x40023c00

08004ed8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e07b      	b.n	8004fe2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d108      	bne.n	8004f04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004efa:	d009      	beq.n	8004f10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	61da      	str	r2, [r3, #28]
 8004f02:	e005      	b.n	8004f10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fd f8be 	bl	80020ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f94:	ea42 0103 	orr.w	r1, r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	0c1b      	lsrs	r3, r3, #16
 8004fae:	f003 0104 	and.w	r1, r3, #4
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	f003 0210 	and.w	r2, r3, #16
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e041      	b.n	8005080 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d106      	bne.n	8005016 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7fd f893 	bl	800213c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2202      	movs	r2, #2
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3304      	adds	r3, #4
 8005026:	4619      	mov	r1, r3
 8005028:	4610      	mov	r0, r2
 800502a:	f000 fc3b 	bl	80058a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	d001      	beq.n	80050a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e044      	b.n	800512a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005138 <HAL_TIM_Base_Start_IT+0xb0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d018      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x6c>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ca:	d013      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x6c>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1a      	ldr	r2, [pc, #104]	@ (800513c <HAL_TIM_Base_Start_IT+0xb4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00e      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x6c>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a19      	ldr	r2, [pc, #100]	@ (8005140 <HAL_TIM_Base_Start_IT+0xb8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d009      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x6c>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a17      	ldr	r2, [pc, #92]	@ (8005144 <HAL_TIM_Base_Start_IT+0xbc>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x6c>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a16      	ldr	r2, [pc, #88]	@ (8005148 <HAL_TIM_Base_Start_IT+0xc0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d111      	bne.n	8005118 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b06      	cmp	r3, #6
 8005104:	d010      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0201 	orr.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005116:	e007      	b.n	8005128 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40014000 	.word	0x40014000

0800514c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e041      	b.n	80051e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f839 	bl	80051ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f000 fb8a 	bl	80058a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
	...

08005200 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <HAL_TIM_PWM_Start+0x24>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	bf14      	ite	ne
 800521c:	2301      	movne	r3, #1
 800521e:	2300      	moveq	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	e022      	b.n	800526a <HAL_TIM_PWM_Start+0x6a>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b04      	cmp	r3, #4
 8005228:	d109      	bne.n	800523e <HAL_TIM_PWM_Start+0x3e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	bf14      	ite	ne
 8005236:	2301      	movne	r3, #1
 8005238:	2300      	moveq	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	e015      	b.n	800526a <HAL_TIM_PWM_Start+0x6a>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b08      	cmp	r3, #8
 8005242:	d109      	bne.n	8005258 <HAL_TIM_PWM_Start+0x58>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	bf14      	ite	ne
 8005250:	2301      	movne	r3, #1
 8005252:	2300      	moveq	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	e008      	b.n	800526a <HAL_TIM_PWM_Start+0x6a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	bf14      	ite	ne
 8005264:	2301      	movne	r3, #1
 8005266:	2300      	moveq	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e068      	b.n	8005344 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <HAL_TIM_PWM_Start+0x82>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005280:	e013      	b.n	80052aa <HAL_TIM_PWM_Start+0xaa>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d104      	bne.n	8005292 <HAL_TIM_PWM_Start+0x92>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005290:	e00b      	b.n	80052aa <HAL_TIM_PWM_Start+0xaa>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_PWM_Start+0xa2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052a0:	e003      	b.n	80052aa <HAL_TIM_PWM_Start+0xaa>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2201      	movs	r2, #1
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fda8 	bl	8005e08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a23      	ldr	r2, [pc, #140]	@ (800534c <HAL_TIM_PWM_Start+0x14c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d107      	bne.n	80052d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1d      	ldr	r2, [pc, #116]	@ (800534c <HAL_TIM_PWM_Start+0x14c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d018      	beq.n	800530e <HAL_TIM_PWM_Start+0x10e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052e4:	d013      	beq.n	800530e <HAL_TIM_PWM_Start+0x10e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a19      	ldr	r2, [pc, #100]	@ (8005350 <HAL_TIM_PWM_Start+0x150>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00e      	beq.n	800530e <HAL_TIM_PWM_Start+0x10e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a17      	ldr	r2, [pc, #92]	@ (8005354 <HAL_TIM_PWM_Start+0x154>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <HAL_TIM_PWM_Start+0x10e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a16      	ldr	r2, [pc, #88]	@ (8005358 <HAL_TIM_PWM_Start+0x158>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_TIM_PWM_Start+0x10e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a14      	ldr	r2, [pc, #80]	@ (800535c <HAL_TIM_PWM_Start+0x15c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d111      	bne.n	8005332 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b06      	cmp	r3, #6
 800531e:	d010      	beq.n	8005342 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005330:	e007      	b.n	8005342 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f042 0201 	orr.w	r2, r2, #1
 8005340:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40010000 	.word	0x40010000
 8005350:	40000400 	.word	0x40000400
 8005354:	40000800 	.word	0x40000800
 8005358:	40000c00 	.word	0x40000c00
 800535c:	40014000 	.word	0x40014000

08005360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d020      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01b      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0202 	mvn.w	r2, #2
 8005394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fa5b 	bl	8005866 <HAL_TIM_IC_CaptureCallback>
 80053b0:	e005      	b.n	80053be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fa4d 	bl	8005852 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fa5e 	bl	800587a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d020      	beq.n	8005410 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01b      	beq.n	8005410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0204 	mvn.w	r2, #4
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fa35 	bl	8005866 <HAL_TIM_IC_CaptureCallback>
 80053fc:	e005      	b.n	800540a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fa27 	bl	8005852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fa38 	bl	800587a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d020      	beq.n	800545c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f003 0308 	and.w	r3, r3, #8
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01b      	beq.n	800545c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0208 	mvn.w	r2, #8
 800542c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2204      	movs	r2, #4
 8005432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fa0f 	bl	8005866 <HAL_TIM_IC_CaptureCallback>
 8005448:	e005      	b.n	8005456 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fa01 	bl	8005852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fa12 	bl	800587a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b00      	cmp	r3, #0
 8005464:	d020      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01b      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0210 	mvn.w	r2, #16
 8005478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2208      	movs	r2, #8
 800547e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f9e9 	bl	8005866 <HAL_TIM_IC_CaptureCallback>
 8005494:	e005      	b.n	80054a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f9db 	bl	8005852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f9ec 	bl	800587a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00c      	beq.n	80054cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0201 	mvn.w	r2, #1
 80054c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fc fc9c 	bl	8001e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00c      	beq.n	80054f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d007      	beq.n	80054f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fd7c 	bl	8005fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00c      	beq.n	8005514 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	d007      	beq.n	8005514 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800550c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f9bd 	bl	800588e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00c      	beq.n	8005538 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b00      	cmp	r3, #0
 8005526:	d007      	beq.n	8005538 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0220 	mvn.w	r2, #32
 8005530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fd4e 	bl	8005fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005538:	bf00      	nop
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800555a:	2302      	movs	r3, #2
 800555c:	e0ae      	b.n	80056bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b0c      	cmp	r3, #12
 800556a:	f200 809f 	bhi.w	80056ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800556e:	a201      	add	r2, pc, #4	@ (adr r2, 8005574 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005574:	080055a9 	.word	0x080055a9
 8005578:	080056ad 	.word	0x080056ad
 800557c:	080056ad 	.word	0x080056ad
 8005580:	080056ad 	.word	0x080056ad
 8005584:	080055e9 	.word	0x080055e9
 8005588:	080056ad 	.word	0x080056ad
 800558c:	080056ad 	.word	0x080056ad
 8005590:	080056ad 	.word	0x080056ad
 8005594:	0800562b 	.word	0x0800562b
 8005598:	080056ad 	.word	0x080056ad
 800559c:	080056ad 	.word	0x080056ad
 80055a0:	080056ad 	.word	0x080056ad
 80055a4:	0800566b 	.word	0x0800566b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68b9      	ldr	r1, [r7, #8]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fa04 	bl	80059bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0208 	orr.w	r2, r2, #8
 80055c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0204 	bic.w	r2, r2, #4
 80055d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6999      	ldr	r1, [r3, #24]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	619a      	str	r2, [r3, #24]
      break;
 80055e6:	e064      	b.n	80056b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fa4a 	bl	8005a88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6999      	ldr	r1, [r3, #24]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	021a      	lsls	r2, r3, #8
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	619a      	str	r2, [r3, #24]
      break;
 8005628:	e043      	b.n	80056b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fa95 	bl	8005b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f042 0208 	orr.w	r2, r2, #8
 8005644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0204 	bic.w	r2, r2, #4
 8005654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69d9      	ldr	r1, [r3, #28]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	61da      	str	r2, [r3, #28]
      break;
 8005668:	e023      	b.n	80056b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fadf 	bl	8005c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69da      	ldr	r2, [r3, #28]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69d9      	ldr	r1, [r3, #28]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	021a      	lsls	r2, r3, #8
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	61da      	str	r2, [r3, #28]
      break;
 80056aa:	e002      	b.n	80056b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	75fb      	strb	r3, [r7, #23]
      break;
 80056b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <HAL_TIM_ConfigClockSource+0x1c>
 80056dc:	2302      	movs	r3, #2
 80056de:	e0b4      	b.n	800584a <HAL_TIM_ConfigClockSource+0x186>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005706:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005718:	d03e      	beq.n	8005798 <HAL_TIM_ConfigClockSource+0xd4>
 800571a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800571e:	f200 8087 	bhi.w	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005726:	f000 8086 	beq.w	8005836 <HAL_TIM_ConfigClockSource+0x172>
 800572a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800572e:	d87f      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005730:	2b70      	cmp	r3, #112	@ 0x70
 8005732:	d01a      	beq.n	800576a <HAL_TIM_ConfigClockSource+0xa6>
 8005734:	2b70      	cmp	r3, #112	@ 0x70
 8005736:	d87b      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005738:	2b60      	cmp	r3, #96	@ 0x60
 800573a:	d050      	beq.n	80057de <HAL_TIM_ConfigClockSource+0x11a>
 800573c:	2b60      	cmp	r3, #96	@ 0x60
 800573e:	d877      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005740:	2b50      	cmp	r3, #80	@ 0x50
 8005742:	d03c      	beq.n	80057be <HAL_TIM_ConfigClockSource+0xfa>
 8005744:	2b50      	cmp	r3, #80	@ 0x50
 8005746:	d873      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005748:	2b40      	cmp	r3, #64	@ 0x40
 800574a:	d058      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0x13a>
 800574c:	2b40      	cmp	r3, #64	@ 0x40
 800574e:	d86f      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005750:	2b30      	cmp	r3, #48	@ 0x30
 8005752:	d064      	beq.n	800581e <HAL_TIM_ConfigClockSource+0x15a>
 8005754:	2b30      	cmp	r3, #48	@ 0x30
 8005756:	d86b      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005758:	2b20      	cmp	r3, #32
 800575a:	d060      	beq.n	800581e <HAL_TIM_ConfigClockSource+0x15a>
 800575c:	2b20      	cmp	r3, #32
 800575e:	d867      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d05c      	beq.n	800581e <HAL_TIM_ConfigClockSource+0x15a>
 8005764:	2b10      	cmp	r3, #16
 8005766:	d05a      	beq.n	800581e <HAL_TIM_ConfigClockSource+0x15a>
 8005768:	e062      	b.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800577a:	f000 fb25 	bl	8005dc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800578c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	609a      	str	r2, [r3, #8]
      break;
 8005796:	e04f      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057a8:	f000 fb0e 	bl	8005dc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057ba:	609a      	str	r2, [r3, #8]
      break;
 80057bc:	e03c      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ca:	461a      	mov	r2, r3
 80057cc:	f000 fa82 	bl	8005cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2150      	movs	r1, #80	@ 0x50
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fadb 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 80057dc:	e02c      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ea:	461a      	mov	r2, r3
 80057ec:	f000 faa1 	bl	8005d32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2160      	movs	r1, #96	@ 0x60
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 facb 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 80057fc:	e01c      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800580a:	461a      	mov	r2, r3
 800580c:	f000 fa62 	bl	8005cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2140      	movs	r1, #64	@ 0x40
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fabb 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 800581c:	e00c      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4619      	mov	r1, r3
 8005828:	4610      	mov	r0, r2
 800582a:	f000 fab2 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 800582e:	e003      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
      break;
 8005834:	e000      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005836:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005848:	7bfb      	ldrb	r3, [r7, #15]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
	...

080058a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a3a      	ldr	r2, [pc, #232]	@ (80059a0 <TIM_Base_SetConfig+0xfc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00f      	beq.n	80058dc <TIM_Base_SetConfig+0x38>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c2:	d00b      	beq.n	80058dc <TIM_Base_SetConfig+0x38>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a37      	ldr	r2, [pc, #220]	@ (80059a4 <TIM_Base_SetConfig+0x100>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d007      	beq.n	80058dc <TIM_Base_SetConfig+0x38>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a36      	ldr	r2, [pc, #216]	@ (80059a8 <TIM_Base_SetConfig+0x104>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_Base_SetConfig+0x38>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a35      	ldr	r2, [pc, #212]	@ (80059ac <TIM_Base_SetConfig+0x108>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d108      	bne.n	80058ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2b      	ldr	r2, [pc, #172]	@ (80059a0 <TIM_Base_SetConfig+0xfc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d01b      	beq.n	800592e <TIM_Base_SetConfig+0x8a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058fc:	d017      	beq.n	800592e <TIM_Base_SetConfig+0x8a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a28      	ldr	r2, [pc, #160]	@ (80059a4 <TIM_Base_SetConfig+0x100>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d013      	beq.n	800592e <TIM_Base_SetConfig+0x8a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a27      	ldr	r2, [pc, #156]	@ (80059a8 <TIM_Base_SetConfig+0x104>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00f      	beq.n	800592e <TIM_Base_SetConfig+0x8a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a26      	ldr	r2, [pc, #152]	@ (80059ac <TIM_Base_SetConfig+0x108>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00b      	beq.n	800592e <TIM_Base_SetConfig+0x8a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a25      	ldr	r2, [pc, #148]	@ (80059b0 <TIM_Base_SetConfig+0x10c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d007      	beq.n	800592e <TIM_Base_SetConfig+0x8a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a24      	ldr	r2, [pc, #144]	@ (80059b4 <TIM_Base_SetConfig+0x110>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d003      	beq.n	800592e <TIM_Base_SetConfig+0x8a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a23      	ldr	r2, [pc, #140]	@ (80059b8 <TIM_Base_SetConfig+0x114>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d108      	bne.n	8005940 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a0e      	ldr	r2, [pc, #56]	@ (80059a0 <TIM_Base_SetConfig+0xfc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d103      	bne.n	8005974 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b01      	cmp	r3, #1
 8005984:	d105      	bne.n	8005992 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f023 0201 	bic.w	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	611a      	str	r2, [r3, #16]
  }
}
 8005992:	bf00      	nop
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40000c00 	.word	0x40000c00
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40014400 	.word	0x40014400
 80059b8:	40014800 	.word	0x40014800

080059bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f023 0201 	bic.w	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0303 	bic.w	r3, r3, #3
 80059f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f023 0302 	bic.w	r3, r3, #2
 8005a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a1c      	ldr	r2, [pc, #112]	@ (8005a84 <TIM_OC1_SetConfig+0xc8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d10c      	bne.n	8005a32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f023 0308 	bic.w	r3, r3, #8
 8005a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f023 0304 	bic.w	r3, r3, #4
 8005a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a13      	ldr	r2, [pc, #76]	@ (8005a84 <TIM_OC1_SetConfig+0xc8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d111      	bne.n	8005a5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	621a      	str	r2, [r3, #32]
}
 8005a78:	bf00      	nop
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	40010000 	.word	0x40010000

08005a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	f023 0210 	bic.w	r2, r3, #16
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f023 0320 	bic.w	r3, r3, #32
 8005ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b5c <TIM_OC2_SetConfig+0xd4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d10d      	bne.n	8005b04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a15      	ldr	r2, [pc, #84]	@ (8005b5c <TIM_OC2_SetConfig+0xd4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d113      	bne.n	8005b34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	621a      	str	r2, [r3, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40010000 	.word	0x40010000

08005b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0303 	bic.w	r3, r3, #3
 8005b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c30 <TIM_OC3_SetConfig+0xd0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d10d      	bne.n	8005bda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	021b      	lsls	r3, r3, #8
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a14      	ldr	r2, [pc, #80]	@ (8005c30 <TIM_OC3_SetConfig+0xd0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d113      	bne.n	8005c0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	621a      	str	r2, [r3, #32]
}
 8005c24:	bf00      	nop
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	40010000 	.word	0x40010000

08005c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	031b      	lsls	r3, r3, #12
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a10      	ldr	r2, [pc, #64]	@ (8005cd0 <TIM_OC4_SetConfig+0x9c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d109      	bne.n	8005ca8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	019b      	lsls	r3, r3, #6
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	621a      	str	r2, [r3, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40010000 	.word	0x40010000

08005cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f023 0201 	bic.w	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f023 030a 	bic.w	r3, r3, #10
 8005d10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b087      	sub	sp, #28
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	f023 0210 	bic.w	r2, r3, #16
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	031b      	lsls	r3, r3, #12
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	621a      	str	r2, [r3, #32]
}
 8005d86:	bf00      	nop
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b085      	sub	sp, #20
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f043 0307 	orr.w	r3, r3, #7
 8005db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	609a      	str	r2, [r3, #8]
}
 8005dbc:	bf00      	nop
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005de2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	021a      	lsls	r2, r3, #8
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	609a      	str	r2, [r3, #8]
}
 8005dfc:	bf00      	nop
 8005dfe:	371c      	adds	r7, #28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f003 031f 	and.w	r3, r3, #31
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1a      	ldr	r2, [r3, #32]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	401a      	ands	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a1a      	ldr	r2, [r3, #32]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e40:	431a      	orrs	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e050      	b.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d018      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb8:	d013      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a18      	ldr	r2, [pc, #96]	@ (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00e      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a16      	ldr	r2, [pc, #88]	@ (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d009      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a15      	ldr	r2, [pc, #84]	@ (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d004      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a13      	ldr	r2, [pc, #76]	@ (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d10c      	bne.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ee8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40000c00 	.word	0x40000c00
 8005f2c:	40014000 	.word	0x40014000

08005f30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e03d      	b.n	8005fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <__NVIC_SetPriority>:
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	4603      	mov	r3, r0
 8006004:	6039      	str	r1, [r7, #0]
 8006006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800600c:	2b00      	cmp	r3, #0
 800600e:	db0a      	blt.n	8006026 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	b2da      	uxtb	r2, r3
 8006014:	490c      	ldr	r1, [pc, #48]	@ (8006048 <__NVIC_SetPriority+0x4c>)
 8006016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800601a:	0112      	lsls	r2, r2, #4
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	440b      	add	r3, r1
 8006020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006024:	e00a      	b.n	800603c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	4908      	ldr	r1, [pc, #32]	@ (800604c <__NVIC_SetPriority+0x50>)
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	f003 030f 	and.w	r3, r3, #15
 8006032:	3b04      	subs	r3, #4
 8006034:	0112      	lsls	r2, r2, #4
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	440b      	add	r3, r1
 800603a:	761a      	strb	r2, [r3, #24]
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	e000e100 	.word	0xe000e100
 800604c:	e000ed00 	.word	0xe000ed00

08006050 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006054:	4b05      	ldr	r3, [pc, #20]	@ (800606c <SysTick_Handler+0x1c>)
 8006056:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006058:	f001 fd46 	bl	8007ae8 <xTaskGetSchedulerState>
 800605c:	4603      	mov	r3, r0
 800605e:	2b01      	cmp	r3, #1
 8006060:	d001      	beq.n	8006066 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006062:	f002 fb41 	bl	80086e8 <xPortSysTickHandler>
  }
}
 8006066:	bf00      	nop
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	e000e010 	.word	0xe000e010

08006070 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006074:	2100      	movs	r1, #0
 8006076:	f06f 0004 	mvn.w	r0, #4
 800607a:	f7ff ffbf 	bl	8005ffc <__NVIC_SetPriority>
#endif
}
 800607e:	bf00      	nop
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800608a:	f3ef 8305 	mrs	r3, IPSR
 800608e:	603b      	str	r3, [r7, #0]
  return(result);
 8006090:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006096:	f06f 0305 	mvn.w	r3, #5
 800609a:	607b      	str	r3, [r7, #4]
 800609c:	e00c      	b.n	80060b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800609e:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <osKernelInitialize+0x44>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d105      	bne.n	80060b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80060a6:	4b08      	ldr	r3, [pc, #32]	@ (80060c8 <osKernelInitialize+0x44>)
 80060a8:	2201      	movs	r2, #1
 80060aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	607b      	str	r3, [r7, #4]
 80060b0:	e002      	b.n	80060b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80060b2:	f04f 33ff 	mov.w	r3, #4294967295
 80060b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060b8:	687b      	ldr	r3, [r7, #4]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	20000398 	.word	0x20000398

080060cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060d2:	f3ef 8305 	mrs	r3, IPSR
 80060d6:	603b      	str	r3, [r7, #0]
  return(result);
 80060d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80060de:	f06f 0305 	mvn.w	r3, #5
 80060e2:	607b      	str	r3, [r7, #4]
 80060e4:	e010      	b.n	8006108 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80060e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006114 <osKernelStart+0x48>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d109      	bne.n	8006102 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80060ee:	f7ff ffbf 	bl	8006070 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80060f2:	4b08      	ldr	r3, [pc, #32]	@ (8006114 <osKernelStart+0x48>)
 80060f4:	2202      	movs	r2, #2
 80060f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80060f8:	f001 f892 	bl	8007220 <vTaskStartScheduler>
      stat = osOK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	607b      	str	r3, [r7, #4]
 8006100:	e002      	b.n	8006108 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006102:	f04f 33ff 	mov.w	r3, #4294967295
 8006106:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006108:	687b      	ldr	r3, [r7, #4]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20000398 	.word	0x20000398

08006118 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006118:	b580      	push	{r7, lr}
 800611a:	b08e      	sub	sp, #56	@ 0x38
 800611c:	af04      	add	r7, sp, #16
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006124:	2300      	movs	r3, #0
 8006126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006128:	f3ef 8305 	mrs	r3, IPSR
 800612c:	617b      	str	r3, [r7, #20]
  return(result);
 800612e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006130:	2b00      	cmp	r3, #0
 8006132:	d17e      	bne.n	8006232 <osThreadNew+0x11a>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d07b      	beq.n	8006232 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800613a:	2380      	movs	r3, #128	@ 0x80
 800613c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800613e:	2318      	movs	r3, #24
 8006140:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006142:	2300      	movs	r3, #0
 8006144:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006146:	f04f 33ff 	mov.w	r3, #4294967295
 800614a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d045      	beq.n	80061de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <osThreadNew+0x48>
        name = attr->name;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <osThreadNew+0x6e>
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	2b38      	cmp	r3, #56	@ 0x38
 8006178:	d805      	bhi.n	8006186 <osThreadNew+0x6e>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <osThreadNew+0x72>
        return (NULL);
 8006186:	2300      	movs	r3, #0
 8006188:	e054      	b.n	8006234 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	089b      	lsrs	r3, r3, #2
 8006198:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00e      	beq.n	80061c0 <osThreadNew+0xa8>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	2ba7      	cmp	r3, #167	@ 0xa7
 80061a8:	d90a      	bls.n	80061c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d006      	beq.n	80061c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <osThreadNew+0xa8>
        mem = 1;
 80061ba:	2301      	movs	r3, #1
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	e010      	b.n	80061e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10c      	bne.n	80061e2 <osThreadNew+0xca>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d108      	bne.n	80061e2 <osThreadNew+0xca>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <osThreadNew+0xca>
          mem = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	61bb      	str	r3, [r7, #24]
 80061dc:	e001      	b.n	80061e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d110      	bne.n	800620a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061f0:	9202      	str	r2, [sp, #8]
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	6a3a      	ldr	r2, [r7, #32]
 80061fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 fe1a 	bl	8006e38 <xTaskCreateStatic>
 8006204:	4603      	mov	r3, r0
 8006206:	613b      	str	r3, [r7, #16]
 8006208:	e013      	b.n	8006232 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d110      	bne.n	8006232 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	b29a      	uxth	r2, r3
 8006214:	f107 0310 	add.w	r3, r7, #16
 8006218:	9301      	str	r3, [sp, #4]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fe68 	bl	8006ef8 <xTaskCreate>
 8006228:	4603      	mov	r3, r0
 800622a:	2b01      	cmp	r3, #1
 800622c:	d001      	beq.n	8006232 <osThreadNew+0x11a>
            hTask = NULL;
 800622e:	2300      	movs	r3, #0
 8006230:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006232:	693b      	ldr	r3, [r7, #16]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3728      	adds	r7, #40	@ 0x28
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006244:	f3ef 8305 	mrs	r3, IPSR
 8006248:	60bb      	str	r3, [r7, #8]
  return(result);
 800624a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <osDelay+0x1c>
    stat = osErrorISR;
 8006250:	f06f 0305 	mvn.w	r3, #5
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	e007      	b.n	8006268 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 ffa6 	bl	80071b4 <vTaskDelay>
    }
  }

  return (stat);
 8006268:	68fb      	ldr	r3, [r7, #12]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4a07      	ldr	r2, [pc, #28]	@ (80062a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006284:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	4a06      	ldr	r2, [pc, #24]	@ (80062a4 <vApplicationGetIdleTaskMemory+0x30>)
 800628a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2280      	movs	r2, #128	@ 0x80
 8006290:	601a      	str	r2, [r3, #0]
}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	2000039c 	.word	0x2000039c
 80062a4:	20000444 	.word	0x20000444

080062a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4a07      	ldr	r2, [pc, #28]	@ (80062d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80062b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	4a06      	ldr	r2, [pc, #24]	@ (80062d8 <vApplicationGetTimerTaskMemory+0x30>)
 80062be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80062c6:	601a      	str	r2, [r3, #0]
}
 80062c8:	bf00      	nop
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	20000644 	.word	0x20000644
 80062d8:	200006ec 	.word	0x200006ec

080062dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f103 0208 	add.w	r2, r3, #8
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f04f 32ff 	mov.w	r2, #4294967295
 80062f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f103 0208 	add.w	r2, r3, #8
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f103 0208 	add.w	r2, r3, #8
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	601a      	str	r2, [r3, #0]
}
 8006372:	bf00      	nop
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800637e:	b480      	push	{r7}
 8006380:	b085      	sub	sp, #20
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006394:	d103      	bne.n	800639e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	e00c      	b.n	80063b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3308      	adds	r3, #8
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	e002      	b.n	80063ac <vListInsert+0x2e>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d2f6      	bcs.n	80063a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	601a      	str	r2, [r3, #0]
}
 80063e4:	bf00      	nop
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6892      	ldr	r2, [r2, #8]
 8006406:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6852      	ldr	r2, [r2, #4]
 8006410:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	429a      	cmp	r2, r3
 800641a:	d103      	bne.n	8006424 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	1e5a      	subs	r2, r3, #1
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10b      	bne.n	8006470 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800646a:	bf00      	nop
 800646c:	bf00      	nop
 800646e:	e7fd      	b.n	800646c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006470:	f002 f8aa 	bl	80085c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647c:	68f9      	ldr	r1, [r7, #12]
 800647e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006480:	fb01 f303 	mul.w	r3, r1, r3
 8006484:	441a      	add	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a0:	3b01      	subs	r3, #1
 80064a2:	68f9      	ldr	r1, [r7, #12]
 80064a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80064a6:	fb01 f303 	mul.w	r3, r1, r3
 80064aa:	441a      	add	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	22ff      	movs	r2, #255	@ 0xff
 80064b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	22ff      	movs	r2, #255	@ 0xff
 80064bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d114      	bne.n	80064f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d01a      	beq.n	8006504 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3310      	adds	r3, #16
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 f942 	bl	800775c <xTaskRemoveFromEventList>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d012      	beq.n	8006504 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80064de:	4b0d      	ldr	r3, [pc, #52]	@ (8006514 <xQueueGenericReset+0xd0>)
 80064e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	e009      	b.n	8006504 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3310      	adds	r3, #16
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff fef1 	bl	80062dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3324      	adds	r3, #36	@ 0x24
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff feec 	bl	80062dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006504:	f002 f892 	bl	800862c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006508:	2301      	movs	r3, #1
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	e000ed04 	.word	0xe000ed04

08006518 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08e      	sub	sp, #56	@ 0x38
 800651c:	af02      	add	r7, sp, #8
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10b      	bne.n	8006544 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800653e:	bf00      	nop
 8006540:	bf00      	nop
 8006542:	e7fd      	b.n	8006540 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	e7fd      	b.n	800655e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <xQueueGenericCreateStatic+0x56>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <xQueueGenericCreateStatic+0x5a>
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <xQueueGenericCreateStatic+0x5c>
 8006572:	2300      	movs	r3, #0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10b      	bne.n	8006590 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	623b      	str	r3, [r7, #32]
}
 800658a:	bf00      	nop
 800658c:	bf00      	nop
 800658e:	e7fd      	b.n	800658c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d102      	bne.n	800659c <xQueueGenericCreateStatic+0x84>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <xQueueGenericCreateStatic+0x88>
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <xQueueGenericCreateStatic+0x8a>
 80065a0:	2300      	movs	r3, #0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10b      	bne.n	80065be <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	61fb      	str	r3, [r7, #28]
}
 80065b8:	bf00      	nop
 80065ba:	bf00      	nop
 80065bc:	e7fd      	b.n	80065ba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80065be:	2350      	movs	r3, #80	@ 0x50
 80065c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2b50      	cmp	r3, #80	@ 0x50
 80065c6:	d00b      	beq.n	80065e0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	61bb      	str	r3, [r7, #24]
}
 80065da:	bf00      	nop
 80065dc:	bf00      	nop
 80065de:	e7fd      	b.n	80065dc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80065e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80065e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00d      	beq.n	8006608 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80065ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065f4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80065f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	4613      	mov	r3, r2
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f805 	bl	8006612 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800660a:	4618      	mov	r0, r3
 800660c:	3730      	adds	r7, #48	@ 0x30
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	607a      	str	r2, [r7, #4]
 800661e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d103      	bne.n	800662e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	e002      	b.n	8006634 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006640:	2101      	movs	r1, #1
 8006642:	69b8      	ldr	r0, [r7, #24]
 8006644:	f7ff fefe 	bl	8006444 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	78fa      	ldrb	r2, [r7, #3]
 800664c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006650:	bf00      	nop
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08e      	sub	sp, #56	@ 0x38
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006666:	2300      	movs	r3, #0
 8006668:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800666e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10b      	bne.n	800668c <xQueueGenericSend+0x34>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006686:	bf00      	nop
 8006688:	bf00      	nop
 800668a:	e7fd      	b.n	8006688 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d103      	bne.n	800669a <xQueueGenericSend+0x42>
 8006692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <xQueueGenericSend+0x46>
 800669a:	2301      	movs	r3, #1
 800669c:	e000      	b.n	80066a0 <xQueueGenericSend+0x48>
 800669e:	2300      	movs	r3, #0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10b      	bne.n	80066bc <xQueueGenericSend+0x64>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066b6:	bf00      	nop
 80066b8:	bf00      	nop
 80066ba:	e7fd      	b.n	80066b8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d103      	bne.n	80066ca <xQueueGenericSend+0x72>
 80066c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <xQueueGenericSend+0x76>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e000      	b.n	80066d0 <xQueueGenericSend+0x78>
 80066ce:	2300      	movs	r3, #0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10b      	bne.n	80066ec <xQueueGenericSend+0x94>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	623b      	str	r3, [r7, #32]
}
 80066e6:	bf00      	nop
 80066e8:	bf00      	nop
 80066ea:	e7fd      	b.n	80066e8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066ec:	f001 f9fc 	bl	8007ae8 <xTaskGetSchedulerState>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d102      	bne.n	80066fc <xQueueGenericSend+0xa4>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <xQueueGenericSend+0xa8>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e000      	b.n	8006702 <xQueueGenericSend+0xaa>
 8006700:	2300      	movs	r3, #0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10b      	bne.n	800671e <xQueueGenericSend+0xc6>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	61fb      	str	r3, [r7, #28]
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	e7fd      	b.n	800671a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800671e:	f001 ff53 	bl	80085c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800672a:	429a      	cmp	r2, r3
 800672c:	d302      	bcc.n	8006734 <xQueueGenericSend+0xdc>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b02      	cmp	r3, #2
 8006732:	d129      	bne.n	8006788 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	68b9      	ldr	r1, [r7, #8]
 8006738:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800673a:	f000 fa0f 	bl	8006b5c <prvCopyDataToQueue>
 800673e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006744:	2b00      	cmp	r3, #0
 8006746:	d010      	beq.n	800676a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674a:	3324      	adds	r3, #36	@ 0x24
 800674c:	4618      	mov	r0, r3
 800674e:	f001 f805 	bl	800775c <xTaskRemoveFromEventList>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d013      	beq.n	8006780 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006758:	4b3f      	ldr	r3, [pc, #252]	@ (8006858 <xQueueGenericSend+0x200>)
 800675a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	e00a      	b.n	8006780 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800676a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d007      	beq.n	8006780 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006770:	4b39      	ldr	r3, [pc, #228]	@ (8006858 <xQueueGenericSend+0x200>)
 8006772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006780:	f001 ff54 	bl	800862c <vPortExitCritical>
				return pdPASS;
 8006784:	2301      	movs	r3, #1
 8006786:	e063      	b.n	8006850 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d103      	bne.n	8006796 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800678e:	f001 ff4d 	bl	800862c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006792:	2300      	movs	r3, #0
 8006794:	e05c      	b.n	8006850 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006798:	2b00      	cmp	r3, #0
 800679a:	d106      	bne.n	80067aa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800679c:	f107 0314 	add.w	r3, r7, #20
 80067a0:	4618      	mov	r0, r3
 80067a2:	f001 f83f 	bl	8007824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067a6:	2301      	movs	r3, #1
 80067a8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067aa:	f001 ff3f 	bl	800862c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067ae:	f000 fda7 	bl	8007300 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067b2:	f001 ff09 	bl	80085c8 <vPortEnterCritical>
 80067b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067bc:	b25b      	sxtb	r3, r3
 80067be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c2:	d103      	bne.n	80067cc <xQueueGenericSend+0x174>
 80067c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067d2:	b25b      	sxtb	r3, r3
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d103      	bne.n	80067e2 <xQueueGenericSend+0x18a>
 80067da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067e2:	f001 ff23 	bl	800862c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067e6:	1d3a      	adds	r2, r7, #4
 80067e8:	f107 0314 	add.w	r3, r7, #20
 80067ec:	4611      	mov	r1, r2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f001 f82e 	bl	8007850 <xTaskCheckForTimeOut>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d124      	bne.n	8006844 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067fc:	f000 faa6 	bl	8006d4c <prvIsQueueFull>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d018      	beq.n	8006838 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	3310      	adds	r3, #16
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	4611      	mov	r1, r2
 800680e:	4618      	mov	r0, r3
 8006810:	f000 ff52 	bl	80076b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006814:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006816:	f000 fa31 	bl	8006c7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800681a:	f000 fd7f 	bl	800731c <xTaskResumeAll>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	f47f af7c 	bne.w	800671e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006826:	4b0c      	ldr	r3, [pc, #48]	@ (8006858 <xQueueGenericSend+0x200>)
 8006828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	e772      	b.n	800671e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006838:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800683a:	f000 fa1f 	bl	8006c7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800683e:	f000 fd6d 	bl	800731c <xTaskResumeAll>
 8006842:	e76c      	b.n	800671e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006844:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006846:	f000 fa19 	bl	8006c7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800684a:	f000 fd67 	bl	800731c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800684e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006850:	4618      	mov	r0, r3
 8006852:	3738      	adds	r7, #56	@ 0x38
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	e000ed04 	.word	0xe000ed04

0800685c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b090      	sub	sp, #64	@ 0x40
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800686e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10b      	bne.n	800688c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006886:	bf00      	nop
 8006888:	bf00      	nop
 800688a:	e7fd      	b.n	8006888 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d103      	bne.n	800689a <xQueueGenericSendFromISR+0x3e>
 8006892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <xQueueGenericSendFromISR+0x42>
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <xQueueGenericSendFromISR+0x44>
 800689e:	2300      	movs	r3, #0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10b      	bne.n	80068bc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80068b6:	bf00      	nop
 80068b8:	bf00      	nop
 80068ba:	e7fd      	b.n	80068b8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d103      	bne.n	80068ca <xQueueGenericSendFromISR+0x6e>
 80068c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d101      	bne.n	80068ce <xQueueGenericSendFromISR+0x72>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e000      	b.n	80068d0 <xQueueGenericSendFromISR+0x74>
 80068ce:	2300      	movs	r3, #0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10b      	bne.n	80068ec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	623b      	str	r3, [r7, #32]
}
 80068e6:	bf00      	nop
 80068e8:	bf00      	nop
 80068ea:	e7fd      	b.n	80068e8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068ec:	f001 ff4c 	bl	8008788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80068f0:	f3ef 8211 	mrs	r2, BASEPRI
 80068f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	61fa      	str	r2, [r7, #28]
 8006906:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006908:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800690a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800690c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006914:	429a      	cmp	r2, r3
 8006916:	d302      	bcc.n	800691e <xQueueGenericSendFromISR+0xc2>
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d12f      	bne.n	800697e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800691e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006920:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006924:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	68b9      	ldr	r1, [r7, #8]
 8006932:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006934:	f000 f912 	bl	8006b5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006938:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006940:	d112      	bne.n	8006968 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d016      	beq.n	8006978 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800694a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694c:	3324      	adds	r3, #36	@ 0x24
 800694e:	4618      	mov	r0, r3
 8006950:	f000 ff04 	bl	800775c <xTaskRemoveFromEventList>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00e      	beq.n	8006978 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	e007      	b.n	8006978 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006968:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800696c:	3301      	adds	r3, #1
 800696e:	b2db      	uxtb	r3, r3
 8006970:	b25a      	sxtb	r2, r3
 8006972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006978:	2301      	movs	r3, #1
 800697a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800697c:	e001      	b.n	8006982 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800697e:	2300      	movs	r3, #0
 8006980:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006984:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800698c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800698e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006990:	4618      	mov	r0, r3
 8006992:	3740      	adds	r7, #64	@ 0x40
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08c      	sub	sp, #48	@ 0x30
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069a4:	2300      	movs	r3, #0
 80069a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10b      	bne.n	80069ca <xQueueReceive+0x32>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	623b      	str	r3, [r7, #32]
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop
 80069c8:	e7fd      	b.n	80069c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d103      	bne.n	80069d8 <xQueueReceive+0x40>
 80069d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <xQueueReceive+0x44>
 80069d8:	2301      	movs	r3, #1
 80069da:	e000      	b.n	80069de <xQueueReceive+0x46>
 80069dc:	2300      	movs	r3, #0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10b      	bne.n	80069fa <xQueueReceive+0x62>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	61fb      	str	r3, [r7, #28]
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop
 80069f8:	e7fd      	b.n	80069f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069fa:	f001 f875 	bl	8007ae8 <xTaskGetSchedulerState>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <xQueueReceive+0x72>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <xQueueReceive+0x76>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <xQueueReceive+0x78>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10b      	bne.n	8006a2c <xQueueReceive+0x94>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	61bb      	str	r3, [r7, #24]
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	e7fd      	b.n	8006a28 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a2c:	f001 fdcc 	bl	80085c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a34:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01f      	beq.n	8006a7c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a40:	f000 f8f6 	bl	8006c30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a46:	1e5a      	subs	r2, r3, #1
 8006a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00f      	beq.n	8006a74 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a56:	3310      	adds	r3, #16
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fe7f 	bl	800775c <xTaskRemoveFromEventList>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d007      	beq.n	8006a74 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a64:	4b3c      	ldr	r3, [pc, #240]	@ (8006b58 <xQueueReceive+0x1c0>)
 8006a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a74:	f001 fdda 	bl	800862c <vPortExitCritical>
				return pdPASS;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e069      	b.n	8006b50 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d103      	bne.n	8006a8a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a82:	f001 fdd3 	bl	800862c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a86:	2300      	movs	r3, #0
 8006a88:	e062      	b.n	8006b50 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d106      	bne.n	8006a9e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a90:	f107 0310 	add.w	r3, r7, #16
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 fec5 	bl	8007824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a9e:	f001 fdc5 	bl	800862c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aa2:	f000 fc2d 	bl	8007300 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006aa6:	f001 fd8f 	bl	80085c8 <vPortEnterCritical>
 8006aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ab0:	b25b      	sxtb	r3, r3
 8006ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab6:	d103      	bne.n	8006ac0 <xQueueReceive+0x128>
 8006ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ac6:	b25b      	sxtb	r3, r3
 8006ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006acc:	d103      	bne.n	8006ad6 <xQueueReceive+0x13e>
 8006ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ad6:	f001 fda9 	bl	800862c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ada:	1d3a      	adds	r2, r7, #4
 8006adc:	f107 0310 	add.w	r3, r7, #16
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 feb4 	bl	8007850 <xTaskCheckForTimeOut>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d123      	bne.n	8006b36 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006af0:	f000 f916 	bl	8006d20 <prvIsQueueEmpty>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d017      	beq.n	8006b2a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afc:	3324      	adds	r3, #36	@ 0x24
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	4611      	mov	r1, r2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fdd8 	bl	80076b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b0a:	f000 f8b7 	bl	8006c7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b0e:	f000 fc05 	bl	800731c <xTaskResumeAll>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d189      	bne.n	8006a2c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006b18:	4b0f      	ldr	r3, [pc, #60]	@ (8006b58 <xQueueReceive+0x1c0>)
 8006b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	e780      	b.n	8006a2c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b2c:	f000 f8a6 	bl	8006c7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b30:	f000 fbf4 	bl	800731c <xTaskResumeAll>
 8006b34:	e77a      	b.n	8006a2c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b38:	f000 f8a0 	bl	8006c7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b3c:	f000 fbee 	bl	800731c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b42:	f000 f8ed 	bl	8006d20 <prvIsQueueEmpty>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f43f af6f 	beq.w	8006a2c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3730      	adds	r7, #48	@ 0x30
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	e000ed04 	.word	0xe000ed04

08006b5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10d      	bne.n	8006b96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d14d      	bne.n	8006c1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 ffcc 	bl	8007b24 <xTaskPriorityDisinherit>
 8006b8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	609a      	str	r2, [r3, #8]
 8006b94:	e043      	b.n	8006c1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d119      	bne.n	8006bd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6858      	ldr	r0, [r3, #4]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	f002 f9d4 	bl	8008f54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb4:	441a      	add	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d32b      	bcc.n	8006c1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	605a      	str	r2, [r3, #4]
 8006bce:	e026      	b.n	8006c1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	68d8      	ldr	r0, [r3, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd8:	461a      	mov	r2, r3
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	f002 f9ba 	bl	8008f54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be8:	425b      	negs	r3, r3
 8006bea:	441a      	add	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d207      	bcs.n	8006c0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c04:	425b      	negs	r3, r3
 8006c06:	441a      	add	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d105      	bne.n	8006c1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006c26:	697b      	ldr	r3, [r7, #20]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d018      	beq.n	8006c74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4a:	441a      	add	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d303      	bcc.n	8006c64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68d9      	ldr	r1, [r3, #12]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	6838      	ldr	r0, [r7, #0]
 8006c70:	f002 f970 	bl	8008f54 <memcpy>
	}
}
 8006c74:	bf00      	nop
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c84:	f001 fca0 	bl	80085c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c90:	e011      	b.n	8006cb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d012      	beq.n	8006cc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3324      	adds	r3, #36	@ 0x24
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fd5c 	bl	800775c <xTaskRemoveFromEventList>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006caa:	f000 fe35 	bl	8007918 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	dce9      	bgt.n	8006c92 <prvUnlockQueue+0x16>
 8006cbe:	e000      	b.n	8006cc2 <prvUnlockQueue+0x46>
					break;
 8006cc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	22ff      	movs	r2, #255	@ 0xff
 8006cc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006cca:	f001 fcaf 	bl	800862c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006cce:	f001 fc7b 	bl	80085c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cda:	e011      	b.n	8006d00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d012      	beq.n	8006d0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3310      	adds	r3, #16
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 fd37 	bl	800775c <xTaskRemoveFromEventList>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006cf4:	f000 fe10 	bl	8007918 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006cf8:	7bbb      	ldrb	r3, [r7, #14]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	dce9      	bgt.n	8006cdc <prvUnlockQueue+0x60>
 8006d08:	e000      	b.n	8006d0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	22ff      	movs	r2, #255	@ 0xff
 8006d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006d14:	f001 fc8a 	bl	800862c <vPortExitCritical>
}
 8006d18:	bf00      	nop
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d28:	f001 fc4e 	bl	80085c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d34:	2301      	movs	r3, #1
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	e001      	b.n	8006d3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d3e:	f001 fc75 	bl	800862c <vPortExitCritical>

	return xReturn;
 8006d42:	68fb      	ldr	r3, [r7, #12]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d54:	f001 fc38 	bl	80085c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d102      	bne.n	8006d6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d64:	2301      	movs	r3, #1
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	e001      	b.n	8006d6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d6e:	f001 fc5d 	bl	800862c <vPortExitCritical>

	return xReturn;
 8006d72:	68fb      	ldr	r3, [r7, #12]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	e014      	b.n	8006db6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d8c:	4a0f      	ldr	r2, [pc, #60]	@ (8006dcc <vQueueAddToRegistry+0x50>)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10b      	bne.n	8006db0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d98:	490c      	ldr	r1, [pc, #48]	@ (8006dcc <vQueueAddToRegistry+0x50>)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006da2:	4a0a      	ldr	r2, [pc, #40]	@ (8006dcc <vQueueAddToRegistry+0x50>)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	4413      	add	r3, r2
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006dae:	e006      	b.n	8006dbe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3301      	adds	r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b07      	cmp	r3, #7
 8006dba:	d9e7      	bls.n	8006d8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006dbc:	bf00      	nop
 8006dbe:	bf00      	nop
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	20000aec 	.word	0x20000aec

08006dd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006de0:	f001 fbf2 	bl	80085c8 <vPortEnterCritical>
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dea:	b25b      	sxtb	r3, r3
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df0:	d103      	bne.n	8006dfa <vQueueWaitForMessageRestricted+0x2a>
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e00:	b25b      	sxtb	r3, r3
 8006e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e06:	d103      	bne.n	8006e10 <vQueueWaitForMessageRestricted+0x40>
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e10:	f001 fc0c 	bl	800862c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	3324      	adds	r3, #36	@ 0x24
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	68b9      	ldr	r1, [r7, #8]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 fc6d 	bl	8007704 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e2a:	6978      	ldr	r0, [r7, #20]
 8006e2c:	f7ff ff26 	bl	8006c7c <prvUnlockQueue>
	}
 8006e30:	bf00      	nop
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08e      	sub	sp, #56	@ 0x38
 8006e3c:	af04      	add	r7, sp, #16
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10b      	bne.n	8006e64 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	623b      	str	r3, [r7, #32]
}
 8006e5e:	bf00      	nop
 8006e60:	bf00      	nop
 8006e62:	e7fd      	b.n	8006e60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10b      	bne.n	8006e82 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	61fb      	str	r3, [r7, #28]
}
 8006e7c:	bf00      	nop
 8006e7e:	bf00      	nop
 8006e80:	e7fd      	b.n	8006e7e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e82:	23a8      	movs	r3, #168	@ 0xa8
 8006e84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	2ba8      	cmp	r3, #168	@ 0xa8
 8006e8a:	d00b      	beq.n	8006ea4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	61bb      	str	r3, [r7, #24]
}
 8006e9e:	bf00      	nop
 8006ea0:	bf00      	nop
 8006ea2:	e7fd      	b.n	8006ea0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ea4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01e      	beq.n	8006eea <xTaskCreateStatic+0xb2>
 8006eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d01b      	beq.n	8006eea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006eba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	9303      	str	r3, [sp, #12]
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eca:	9302      	str	r3, [sp, #8]
 8006ecc:	f107 0314 	add.w	r3, r7, #20
 8006ed0:	9301      	str	r3, [sp, #4]
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	68b9      	ldr	r1, [r7, #8]
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 f851 	bl	8006f84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ee2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ee4:	f000 f8f6 	bl	80070d4 <prvAddNewTaskToReadyList>
 8006ee8:	e001      	b.n	8006eee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006eee:	697b      	ldr	r3, [r7, #20]
	}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3728      	adds	r7, #40	@ 0x28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08c      	sub	sp, #48	@ 0x30
 8006efc:	af04      	add	r7, sp, #16
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	4613      	mov	r3, r2
 8006f06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f08:	88fb      	ldrh	r3, [r7, #6]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f001 fc7d 	bl	800880c <pvPortMalloc>
 8006f12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00e      	beq.n	8006f38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f1a:	20a8      	movs	r0, #168	@ 0xa8
 8006f1c:	f001 fc76 	bl	800880c <pvPortMalloc>
 8006f20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f2e:	e005      	b.n	8006f3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f30:	6978      	ldr	r0, [r7, #20]
 8006f32:	f001 fd39 	bl	80089a8 <vPortFree>
 8006f36:	e001      	b.n	8006f3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d017      	beq.n	8006f72 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f4a:	88fa      	ldrh	r2, [r7, #6]
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	9303      	str	r3, [sp, #12]
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	9302      	str	r3, [sp, #8]
 8006f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 f80f 	bl	8006f84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f66:	69f8      	ldr	r0, [r7, #28]
 8006f68:	f000 f8b4 	bl	80070d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	61bb      	str	r3, [r7, #24]
 8006f70:	e002      	b.n	8006f78 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f72:	f04f 33ff 	mov.w	r3, #4294967295
 8006f76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f78:	69bb      	ldr	r3, [r7, #24]
	}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3720      	adds	r7, #32
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b088      	sub	sp, #32
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
 8006f90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f94:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	21a5      	movs	r1, #165	@ 0xa5
 8006f9e:	f001 fefb 	bl	8008d98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fac:	3b01      	subs	r3, #1
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	f023 0307 	bic.w	r3, r3, #7
 8006fba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	617b      	str	r3, [r7, #20]
}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	e7fd      	b.n	8006fda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d01f      	beq.n	8007024 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	61fb      	str	r3, [r7, #28]
 8006fe8:	e012      	b.n	8007010 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	4413      	add	r3, r2
 8006ff0:	7819      	ldrb	r1, [r3, #0]
 8006ff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	3334      	adds	r3, #52	@ 0x34
 8006ffa:	460a      	mov	r2, r1
 8006ffc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	4413      	add	r3, r2
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d006      	beq.n	8007018 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	3301      	adds	r3, #1
 800700e:	61fb      	str	r3, [r7, #28]
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	2b0f      	cmp	r3, #15
 8007014:	d9e9      	bls.n	8006fea <prvInitialiseNewTask+0x66>
 8007016:	e000      	b.n	800701a <prvInitialiseNewTask+0x96>
			{
				break;
 8007018:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007022:	e003      	b.n	800702c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800702c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702e:	2b37      	cmp	r3, #55	@ 0x37
 8007030:	d901      	bls.n	8007036 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007032:	2337      	movs	r3, #55	@ 0x37
 8007034:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007038:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800703a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800703c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007040:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	2200      	movs	r2, #0
 8007046:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	3304      	adds	r3, #4
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff f965 	bl	800631c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007054:	3318      	adds	r3, #24
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff f960 	bl	800631c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007060:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007064:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800706c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007070:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007074:	2200      	movs	r2, #0
 8007076:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	2200      	movs	r2, #0
 800707e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007084:	3354      	adds	r3, #84	@ 0x54
 8007086:	224c      	movs	r2, #76	@ 0x4c
 8007088:	2100      	movs	r1, #0
 800708a:	4618      	mov	r0, r3
 800708c:	f001 fe84 	bl	8008d98 <memset>
 8007090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007092:	4a0d      	ldr	r2, [pc, #52]	@ (80070c8 <prvInitialiseNewTask+0x144>)
 8007094:	659a      	str	r2, [r3, #88]	@ 0x58
 8007096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007098:	4a0c      	ldr	r2, [pc, #48]	@ (80070cc <prvInitialiseNewTask+0x148>)
 800709a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800709c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709e:	4a0c      	ldr	r2, [pc, #48]	@ (80070d0 <prvInitialiseNewTask+0x14c>)
 80070a0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	68f9      	ldr	r1, [r7, #12]
 80070a6:	69b8      	ldr	r0, [r7, #24]
 80070a8:	f001 f95a 	bl	8008360 <pxPortInitialiseStack>
 80070ac:	4602      	mov	r2, r0
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070be:	bf00      	nop
 80070c0:	3720      	adds	r7, #32
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20004d8c 	.word	0x20004d8c
 80070cc:	20004df4 	.word	0x20004df4
 80070d0:	20004e5c 	.word	0x20004e5c

080070d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070dc:	f001 fa74 	bl	80085c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070e0:	4b2d      	ldr	r3, [pc, #180]	@ (8007198 <prvAddNewTaskToReadyList+0xc4>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3301      	adds	r3, #1
 80070e6:	4a2c      	ldr	r2, [pc, #176]	@ (8007198 <prvAddNewTaskToReadyList+0xc4>)
 80070e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070ea:	4b2c      	ldr	r3, [pc, #176]	@ (800719c <prvAddNewTaskToReadyList+0xc8>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070f2:	4a2a      	ldr	r2, [pc, #168]	@ (800719c <prvAddNewTaskToReadyList+0xc8>)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070f8:	4b27      	ldr	r3, [pc, #156]	@ (8007198 <prvAddNewTaskToReadyList+0xc4>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d110      	bne.n	8007122 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007100:	f000 fc2e 	bl	8007960 <prvInitialiseTaskLists>
 8007104:	e00d      	b.n	8007122 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007106:	4b26      	ldr	r3, [pc, #152]	@ (80071a0 <prvAddNewTaskToReadyList+0xcc>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800710e:	4b23      	ldr	r3, [pc, #140]	@ (800719c <prvAddNewTaskToReadyList+0xc8>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007118:	429a      	cmp	r2, r3
 800711a:	d802      	bhi.n	8007122 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800711c:	4a1f      	ldr	r2, [pc, #124]	@ (800719c <prvAddNewTaskToReadyList+0xc8>)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007122:	4b20      	ldr	r3, [pc, #128]	@ (80071a4 <prvAddNewTaskToReadyList+0xd0>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3301      	adds	r3, #1
 8007128:	4a1e      	ldr	r2, [pc, #120]	@ (80071a4 <prvAddNewTaskToReadyList+0xd0>)
 800712a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800712c:	4b1d      	ldr	r3, [pc, #116]	@ (80071a4 <prvAddNewTaskToReadyList+0xd0>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007138:	4b1b      	ldr	r3, [pc, #108]	@ (80071a8 <prvAddNewTaskToReadyList+0xd4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	429a      	cmp	r2, r3
 800713e:	d903      	bls.n	8007148 <prvAddNewTaskToReadyList+0x74>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007144:	4a18      	ldr	r2, [pc, #96]	@ (80071a8 <prvAddNewTaskToReadyList+0xd4>)
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4a15      	ldr	r2, [pc, #84]	@ (80071ac <prvAddNewTaskToReadyList+0xd8>)
 8007156:	441a      	add	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3304      	adds	r3, #4
 800715c:	4619      	mov	r1, r3
 800715e:	4610      	mov	r0, r2
 8007160:	f7ff f8e9 	bl	8006336 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007164:	f001 fa62 	bl	800862c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007168:	4b0d      	ldr	r3, [pc, #52]	@ (80071a0 <prvAddNewTaskToReadyList+0xcc>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00e      	beq.n	800718e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007170:	4b0a      	ldr	r3, [pc, #40]	@ (800719c <prvAddNewTaskToReadyList+0xc8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717a:	429a      	cmp	r2, r3
 800717c:	d207      	bcs.n	800718e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800717e:	4b0c      	ldr	r3, [pc, #48]	@ (80071b0 <prvAddNewTaskToReadyList+0xdc>)
 8007180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20001000 	.word	0x20001000
 800719c:	20000b2c 	.word	0x20000b2c
 80071a0:	2000100c 	.word	0x2000100c
 80071a4:	2000101c 	.word	0x2000101c
 80071a8:	20001008 	.word	0x20001008
 80071ac:	20000b30 	.word	0x20000b30
 80071b0:	e000ed04 	.word	0xe000ed04

080071b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d018      	beq.n	80071f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80071c6:	4b14      	ldr	r3, [pc, #80]	@ (8007218 <vTaskDelay+0x64>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <vTaskDelay+0x32>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	60bb      	str	r3, [r7, #8]
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	e7fd      	b.n	80071e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80071e6:	f000 f88b 	bl	8007300 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80071ea:	2100      	movs	r1, #0
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fd09 	bl	8007c04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80071f2:	f000 f893 	bl	800731c <xTaskResumeAll>
 80071f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d107      	bne.n	800720e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80071fe:	4b07      	ldr	r3, [pc, #28]	@ (800721c <vTaskDelay+0x68>)
 8007200:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800720e:	bf00      	nop
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20001028 	.word	0x20001028
 800721c:	e000ed04 	.word	0xe000ed04

08007220 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08a      	sub	sp, #40	@ 0x28
 8007224:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007226:	2300      	movs	r3, #0
 8007228:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800722e:	463a      	mov	r2, r7
 8007230:	1d39      	adds	r1, r7, #4
 8007232:	f107 0308 	add.w	r3, r7, #8
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff f81c 	bl	8006274 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	9202      	str	r2, [sp, #8]
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	2300      	movs	r3, #0
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	2300      	movs	r3, #0
 800724c:	460a      	mov	r2, r1
 800724e:	4924      	ldr	r1, [pc, #144]	@ (80072e0 <vTaskStartScheduler+0xc0>)
 8007250:	4824      	ldr	r0, [pc, #144]	@ (80072e4 <vTaskStartScheduler+0xc4>)
 8007252:	f7ff fdf1 	bl	8006e38 <xTaskCreateStatic>
 8007256:	4603      	mov	r3, r0
 8007258:	4a23      	ldr	r2, [pc, #140]	@ (80072e8 <vTaskStartScheduler+0xc8>)
 800725a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800725c:	4b22      	ldr	r3, [pc, #136]	@ (80072e8 <vTaskStartScheduler+0xc8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007264:	2301      	movs	r3, #1
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	e001      	b.n	800726e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800726a:	2300      	movs	r3, #0
 800726c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d102      	bne.n	800727a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007274:	f000 fd1a 	bl	8007cac <xTimerCreateTimerTask>
 8007278:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d11b      	bne.n	80072b8 <vTaskStartScheduler+0x98>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	613b      	str	r3, [r7, #16]
}
 8007292:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007294:	4b15      	ldr	r3, [pc, #84]	@ (80072ec <vTaskStartScheduler+0xcc>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3354      	adds	r3, #84	@ 0x54
 800729a:	4a15      	ldr	r2, [pc, #84]	@ (80072f0 <vTaskStartScheduler+0xd0>)
 800729c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800729e:	4b15      	ldr	r3, [pc, #84]	@ (80072f4 <vTaskStartScheduler+0xd4>)
 80072a0:	f04f 32ff 	mov.w	r2, #4294967295
 80072a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80072a6:	4b14      	ldr	r3, [pc, #80]	@ (80072f8 <vTaskStartScheduler+0xd8>)
 80072a8:	2201      	movs	r2, #1
 80072aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072ac:	4b13      	ldr	r3, [pc, #76]	@ (80072fc <vTaskStartScheduler+0xdc>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072b2:	f001 f8e5 	bl	8008480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072b6:	e00f      	b.n	80072d8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072be:	d10b      	bne.n	80072d8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	60fb      	str	r3, [r7, #12]
}
 80072d2:	bf00      	nop
 80072d4:	bf00      	nop
 80072d6:	e7fd      	b.n	80072d4 <vTaskStartScheduler+0xb4>
}
 80072d8:	bf00      	nop
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	08009048 	.word	0x08009048
 80072e4:	08007931 	.word	0x08007931
 80072e8:	20001024 	.word	0x20001024
 80072ec:	20000b2c 	.word	0x20000b2c
 80072f0:	20000010 	.word	0x20000010
 80072f4:	20001020 	.word	0x20001020
 80072f8:	2000100c 	.word	0x2000100c
 80072fc:	20001004 	.word	0x20001004

08007300 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007300:	b480      	push	{r7}
 8007302:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007304:	4b04      	ldr	r3, [pc, #16]	@ (8007318 <vTaskSuspendAll+0x18>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3301      	adds	r3, #1
 800730a:	4a03      	ldr	r2, [pc, #12]	@ (8007318 <vTaskSuspendAll+0x18>)
 800730c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800730e:	bf00      	nop
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	20001028 	.word	0x20001028

0800731c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007326:	2300      	movs	r3, #0
 8007328:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800732a:	4b42      	ldr	r3, [pc, #264]	@ (8007434 <xTaskResumeAll+0x118>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10b      	bne.n	800734a <xTaskResumeAll+0x2e>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	603b      	str	r3, [r7, #0]
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	e7fd      	b.n	8007346 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800734a:	f001 f93d 	bl	80085c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800734e:	4b39      	ldr	r3, [pc, #228]	@ (8007434 <xTaskResumeAll+0x118>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3b01      	subs	r3, #1
 8007354:	4a37      	ldr	r2, [pc, #220]	@ (8007434 <xTaskResumeAll+0x118>)
 8007356:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007358:	4b36      	ldr	r3, [pc, #216]	@ (8007434 <xTaskResumeAll+0x118>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d162      	bne.n	8007426 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007360:	4b35      	ldr	r3, [pc, #212]	@ (8007438 <xTaskResumeAll+0x11c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d05e      	beq.n	8007426 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007368:	e02f      	b.n	80073ca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800736a:	4b34      	ldr	r3, [pc, #208]	@ (800743c <xTaskResumeAll+0x120>)
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3318      	adds	r3, #24
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff f83a 	bl	80063f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3304      	adds	r3, #4
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff f835 	bl	80063f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800738a:	4b2d      	ldr	r3, [pc, #180]	@ (8007440 <xTaskResumeAll+0x124>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	d903      	bls.n	800739a <xTaskResumeAll+0x7e>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007396:	4a2a      	ldr	r2, [pc, #168]	@ (8007440 <xTaskResumeAll+0x124>)
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800739e:	4613      	mov	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4a27      	ldr	r2, [pc, #156]	@ (8007444 <xTaskResumeAll+0x128>)
 80073a8:	441a      	add	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4619      	mov	r1, r3
 80073b0:	4610      	mov	r0, r2
 80073b2:	f7fe ffc0 	bl	8006336 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ba:	4b23      	ldr	r3, [pc, #140]	@ (8007448 <xTaskResumeAll+0x12c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d302      	bcc.n	80073ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80073c4:	4b21      	ldr	r3, [pc, #132]	@ (800744c <xTaskResumeAll+0x130>)
 80073c6:	2201      	movs	r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073ca:	4b1c      	ldr	r3, [pc, #112]	@ (800743c <xTaskResumeAll+0x120>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1cb      	bne.n	800736a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80073d8:	f000 fb66 	bl	8007aa8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80073dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007450 <xTaskResumeAll+0x134>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d010      	beq.n	800740a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80073e8:	f000 f846 	bl	8007478 <xTaskIncrementTick>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80073f2:	4b16      	ldr	r3, [pc, #88]	@ (800744c <xTaskResumeAll+0x130>)
 80073f4:	2201      	movs	r2, #1
 80073f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1f1      	bne.n	80073e8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007404:	4b12      	ldr	r3, [pc, #72]	@ (8007450 <xTaskResumeAll+0x134>)
 8007406:	2200      	movs	r2, #0
 8007408:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800740a:	4b10      	ldr	r3, [pc, #64]	@ (800744c <xTaskResumeAll+0x130>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d009      	beq.n	8007426 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007412:	2301      	movs	r3, #1
 8007414:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007416:	4b0f      	ldr	r3, [pc, #60]	@ (8007454 <xTaskResumeAll+0x138>)
 8007418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007426:	f001 f901 	bl	800862c <vPortExitCritical>

	return xAlreadyYielded;
 800742a:	68bb      	ldr	r3, [r7, #8]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	20001028 	.word	0x20001028
 8007438:	20001000 	.word	0x20001000
 800743c:	20000fc0 	.word	0x20000fc0
 8007440:	20001008 	.word	0x20001008
 8007444:	20000b30 	.word	0x20000b30
 8007448:	20000b2c 	.word	0x20000b2c
 800744c:	20001014 	.word	0x20001014
 8007450:	20001010 	.word	0x20001010
 8007454:	e000ed04 	.word	0xe000ed04

08007458 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800745e:	4b05      	ldr	r3, [pc, #20]	@ (8007474 <xTaskGetTickCount+0x1c>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007464:	687b      	ldr	r3, [r7, #4]
}
 8007466:	4618      	mov	r0, r3
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	20001004 	.word	0x20001004

08007478 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007482:	4b4f      	ldr	r3, [pc, #316]	@ (80075c0 <xTaskIncrementTick+0x148>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	f040 8090 	bne.w	80075ac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800748c:	4b4d      	ldr	r3, [pc, #308]	@ (80075c4 <xTaskIncrementTick+0x14c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3301      	adds	r3, #1
 8007492:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007494:	4a4b      	ldr	r2, [pc, #300]	@ (80075c4 <xTaskIncrementTick+0x14c>)
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d121      	bne.n	80074e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80074a0:	4b49      	ldr	r3, [pc, #292]	@ (80075c8 <xTaskIncrementTick+0x150>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00b      	beq.n	80074c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	603b      	str	r3, [r7, #0]
}
 80074bc:	bf00      	nop
 80074be:	bf00      	nop
 80074c0:	e7fd      	b.n	80074be <xTaskIncrementTick+0x46>
 80074c2:	4b41      	ldr	r3, [pc, #260]	@ (80075c8 <xTaskIncrementTick+0x150>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	4b40      	ldr	r3, [pc, #256]	@ (80075cc <xTaskIncrementTick+0x154>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a3e      	ldr	r2, [pc, #248]	@ (80075c8 <xTaskIncrementTick+0x150>)
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	4a3e      	ldr	r2, [pc, #248]	@ (80075cc <xTaskIncrementTick+0x154>)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6013      	str	r3, [r2, #0]
 80074d6:	4b3e      	ldr	r3, [pc, #248]	@ (80075d0 <xTaskIncrementTick+0x158>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3301      	adds	r3, #1
 80074dc:	4a3c      	ldr	r2, [pc, #240]	@ (80075d0 <xTaskIncrementTick+0x158>)
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	f000 fae2 	bl	8007aa8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80074e4:	4b3b      	ldr	r3, [pc, #236]	@ (80075d4 <xTaskIncrementTick+0x15c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d349      	bcc.n	8007582 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074ee:	4b36      	ldr	r3, [pc, #216]	@ (80075c8 <xTaskIncrementTick+0x150>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d104      	bne.n	8007502 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f8:	4b36      	ldr	r3, [pc, #216]	@ (80075d4 <xTaskIncrementTick+0x15c>)
 80074fa:	f04f 32ff 	mov.w	r2, #4294967295
 80074fe:	601a      	str	r2, [r3, #0]
					break;
 8007500:	e03f      	b.n	8007582 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007502:	4b31      	ldr	r3, [pc, #196]	@ (80075c8 <xTaskIncrementTick+0x150>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	429a      	cmp	r2, r3
 8007518:	d203      	bcs.n	8007522 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800751a:	4a2e      	ldr	r2, [pc, #184]	@ (80075d4 <xTaskIncrementTick+0x15c>)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007520:	e02f      	b.n	8007582 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	3304      	adds	r3, #4
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe ff62 	bl	80063f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007530:	2b00      	cmp	r3, #0
 8007532:	d004      	beq.n	800753e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	3318      	adds	r3, #24
 8007538:	4618      	mov	r0, r3
 800753a:	f7fe ff59 	bl	80063f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007542:	4b25      	ldr	r3, [pc, #148]	@ (80075d8 <xTaskIncrementTick+0x160>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d903      	bls.n	8007552 <xTaskIncrementTick+0xda>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754e:	4a22      	ldr	r2, [pc, #136]	@ (80075d8 <xTaskIncrementTick+0x160>)
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4a1f      	ldr	r2, [pc, #124]	@ (80075dc <xTaskIncrementTick+0x164>)
 8007560:	441a      	add	r2, r3
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	3304      	adds	r3, #4
 8007566:	4619      	mov	r1, r3
 8007568:	4610      	mov	r0, r2
 800756a:	f7fe fee4 	bl	8006336 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007572:	4b1b      	ldr	r3, [pc, #108]	@ (80075e0 <xTaskIncrementTick+0x168>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007578:	429a      	cmp	r2, r3
 800757a:	d3b8      	bcc.n	80074ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800757c:	2301      	movs	r3, #1
 800757e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007580:	e7b5      	b.n	80074ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007582:	4b17      	ldr	r3, [pc, #92]	@ (80075e0 <xTaskIncrementTick+0x168>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007588:	4914      	ldr	r1, [pc, #80]	@ (80075dc <xTaskIncrementTick+0x164>)
 800758a:	4613      	mov	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	440b      	add	r3, r1
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d901      	bls.n	800759e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800759a:	2301      	movs	r3, #1
 800759c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800759e:	4b11      	ldr	r3, [pc, #68]	@ (80075e4 <xTaskIncrementTick+0x16c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d007      	beq.n	80075b6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80075a6:	2301      	movs	r3, #1
 80075a8:	617b      	str	r3, [r7, #20]
 80075aa:	e004      	b.n	80075b6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80075ac:	4b0e      	ldr	r3, [pc, #56]	@ (80075e8 <xTaskIncrementTick+0x170>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3301      	adds	r3, #1
 80075b2:	4a0d      	ldr	r2, [pc, #52]	@ (80075e8 <xTaskIncrementTick+0x170>)
 80075b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80075b6:	697b      	ldr	r3, [r7, #20]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3718      	adds	r7, #24
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	20001028 	.word	0x20001028
 80075c4:	20001004 	.word	0x20001004
 80075c8:	20000fb8 	.word	0x20000fb8
 80075cc:	20000fbc 	.word	0x20000fbc
 80075d0:	20001018 	.word	0x20001018
 80075d4:	20001020 	.word	0x20001020
 80075d8:	20001008 	.word	0x20001008
 80075dc:	20000b30 	.word	0x20000b30
 80075e0:	20000b2c 	.word	0x20000b2c
 80075e4:	20001014 	.word	0x20001014
 80075e8:	20001010 	.word	0x20001010

080075ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80075f2:	4b2b      	ldr	r3, [pc, #172]	@ (80076a0 <vTaskSwitchContext+0xb4>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80075fa:	4b2a      	ldr	r3, [pc, #168]	@ (80076a4 <vTaskSwitchContext+0xb8>)
 80075fc:	2201      	movs	r2, #1
 80075fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007600:	e047      	b.n	8007692 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007602:	4b28      	ldr	r3, [pc, #160]	@ (80076a4 <vTaskSwitchContext+0xb8>)
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007608:	4b27      	ldr	r3, [pc, #156]	@ (80076a8 <vTaskSwitchContext+0xbc>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	e011      	b.n	8007634 <vTaskSwitchContext+0x48>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10b      	bne.n	800762e <vTaskSwitchContext+0x42>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	607b      	str	r3, [r7, #4]
}
 8007628:	bf00      	nop
 800762a:	bf00      	nop
 800762c:	e7fd      	b.n	800762a <vTaskSwitchContext+0x3e>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3b01      	subs	r3, #1
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	491d      	ldr	r1, [pc, #116]	@ (80076ac <vTaskSwitchContext+0xc0>)
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4613      	mov	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	440b      	add	r3, r1
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0e3      	beq.n	8007610 <vTaskSwitchContext+0x24>
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	4613      	mov	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4a16      	ldr	r2, [pc, #88]	@ (80076ac <vTaskSwitchContext+0xc0>)
 8007654:	4413      	add	r3, r2
 8007656:	60bb      	str	r3, [r7, #8]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	605a      	str	r2, [r3, #4]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	3308      	adds	r3, #8
 800766a:	429a      	cmp	r2, r3
 800766c:	d104      	bne.n	8007678 <vTaskSwitchContext+0x8c>
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	605a      	str	r2, [r3, #4]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	4a0c      	ldr	r2, [pc, #48]	@ (80076b0 <vTaskSwitchContext+0xc4>)
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	4a09      	ldr	r2, [pc, #36]	@ (80076a8 <vTaskSwitchContext+0xbc>)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007688:	4b09      	ldr	r3, [pc, #36]	@ (80076b0 <vTaskSwitchContext+0xc4>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3354      	adds	r3, #84	@ 0x54
 800768e:	4a09      	ldr	r2, [pc, #36]	@ (80076b4 <vTaskSwitchContext+0xc8>)
 8007690:	6013      	str	r3, [r2, #0]
}
 8007692:	bf00      	nop
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	20001028 	.word	0x20001028
 80076a4:	20001014 	.word	0x20001014
 80076a8:	20001008 	.word	0x20001008
 80076ac:	20000b30 	.word	0x20000b30
 80076b0:	20000b2c 	.word	0x20000b2c
 80076b4:	20000010 	.word	0x20000010

080076b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10b      	bne.n	80076e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	60fb      	str	r3, [r7, #12]
}
 80076da:	bf00      	nop
 80076dc:	bf00      	nop
 80076de:	e7fd      	b.n	80076dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076e0:	4b07      	ldr	r3, [pc, #28]	@ (8007700 <vTaskPlaceOnEventList+0x48>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3318      	adds	r3, #24
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7fe fe48 	bl	800637e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80076ee:	2101      	movs	r1, #1
 80076f0:	6838      	ldr	r0, [r7, #0]
 80076f2:	f000 fa87 	bl	8007c04 <prvAddCurrentTaskToDelayedList>
}
 80076f6:	bf00      	nop
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000b2c 	.word	0x20000b2c

08007704 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10b      	bne.n	800772e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	617b      	str	r3, [r7, #20]
}
 8007728:	bf00      	nop
 800772a:	bf00      	nop
 800772c:	e7fd      	b.n	800772a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800772e:	4b0a      	ldr	r3, [pc, #40]	@ (8007758 <vTaskPlaceOnEventListRestricted+0x54>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3318      	adds	r3, #24
 8007734:	4619      	mov	r1, r3
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f7fe fdfd 	bl	8006336 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007742:	f04f 33ff 	mov.w	r3, #4294967295
 8007746:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007748:	6879      	ldr	r1, [r7, #4]
 800774a:	68b8      	ldr	r0, [r7, #8]
 800774c:	f000 fa5a 	bl	8007c04 <prvAddCurrentTaskToDelayedList>
	}
 8007750:	bf00      	nop
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	20000b2c 	.word	0x20000b2c

0800775c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10b      	bne.n	800778a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	60fb      	str	r3, [r7, #12]
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop
 8007788:	e7fd      	b.n	8007786 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	3318      	adds	r3, #24
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fe2e 	bl	80063f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007794:	4b1d      	ldr	r3, [pc, #116]	@ (800780c <xTaskRemoveFromEventList+0xb0>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d11d      	bne.n	80077d8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	3304      	adds	r3, #4
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fe fe25 	bl	80063f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077aa:	4b19      	ldr	r3, [pc, #100]	@ (8007810 <xTaskRemoveFromEventList+0xb4>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d903      	bls.n	80077ba <xTaskRemoveFromEventList+0x5e>
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b6:	4a16      	ldr	r2, [pc, #88]	@ (8007810 <xTaskRemoveFromEventList+0xb4>)
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4a13      	ldr	r2, [pc, #76]	@ (8007814 <xTaskRemoveFromEventList+0xb8>)
 80077c8:	441a      	add	r2, r3
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	3304      	adds	r3, #4
 80077ce:	4619      	mov	r1, r3
 80077d0:	4610      	mov	r0, r2
 80077d2:	f7fe fdb0 	bl	8006336 <vListInsertEnd>
 80077d6:	e005      	b.n	80077e4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	3318      	adds	r3, #24
 80077dc:	4619      	mov	r1, r3
 80077de:	480e      	ldr	r0, [pc, #56]	@ (8007818 <xTaskRemoveFromEventList+0xbc>)
 80077e0:	f7fe fda9 	bl	8006336 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e8:	4b0c      	ldr	r3, [pc, #48]	@ (800781c <xTaskRemoveFromEventList+0xc0>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d905      	bls.n	80077fe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80077f2:	2301      	movs	r3, #1
 80077f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80077f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007820 <xTaskRemoveFromEventList+0xc4>)
 80077f8:	2201      	movs	r2, #1
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	e001      	b.n	8007802 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80077fe:	2300      	movs	r3, #0
 8007800:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007802:	697b      	ldr	r3, [r7, #20]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3718      	adds	r7, #24
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	20001028 	.word	0x20001028
 8007810:	20001008 	.word	0x20001008
 8007814:	20000b30 	.word	0x20000b30
 8007818:	20000fc0 	.word	0x20000fc0
 800781c:	20000b2c 	.word	0x20000b2c
 8007820:	20001014 	.word	0x20001014

08007824 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800782c:	4b06      	ldr	r3, [pc, #24]	@ (8007848 <vTaskInternalSetTimeOutState+0x24>)
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007834:	4b05      	ldr	r3, [pc, #20]	@ (800784c <vTaskInternalSetTimeOutState+0x28>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	605a      	str	r2, [r3, #4]
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	20001018 	.word	0x20001018
 800784c:	20001004 	.word	0x20001004

08007850 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10b      	bne.n	8007878 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	613b      	str	r3, [r7, #16]
}
 8007872:	bf00      	nop
 8007874:	bf00      	nop
 8007876:	e7fd      	b.n	8007874 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10b      	bne.n	8007896 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	60fb      	str	r3, [r7, #12]
}
 8007890:	bf00      	nop
 8007892:	bf00      	nop
 8007894:	e7fd      	b.n	8007892 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007896:	f000 fe97 	bl	80085c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800789a:	4b1d      	ldr	r3, [pc, #116]	@ (8007910 <xTaskCheckForTimeOut+0xc0>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b2:	d102      	bne.n	80078ba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80078b4:	2300      	movs	r3, #0
 80078b6:	61fb      	str	r3, [r7, #28]
 80078b8:	e023      	b.n	8007902 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4b15      	ldr	r3, [pc, #84]	@ (8007914 <xTaskCheckForTimeOut+0xc4>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d007      	beq.n	80078d6 <xTaskCheckForTimeOut+0x86>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d302      	bcc.n	80078d6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80078d0:	2301      	movs	r3, #1
 80078d2:	61fb      	str	r3, [r7, #28]
 80078d4:	e015      	b.n	8007902 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d20b      	bcs.n	80078f8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	1ad2      	subs	r2, r2, r3
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7ff ff99 	bl	8007824 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80078f2:	2300      	movs	r3, #0
 80078f4:	61fb      	str	r3, [r7, #28]
 80078f6:	e004      	b.n	8007902 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80078fe:	2301      	movs	r3, #1
 8007900:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007902:	f000 fe93 	bl	800862c <vPortExitCritical>

	return xReturn;
 8007906:	69fb      	ldr	r3, [r7, #28]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3720      	adds	r7, #32
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20001004 	.word	0x20001004
 8007914:	20001018 	.word	0x20001018

08007918 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800791c:	4b03      	ldr	r3, [pc, #12]	@ (800792c <vTaskMissedYield+0x14>)
 800791e:	2201      	movs	r2, #1
 8007920:	601a      	str	r2, [r3, #0]
}
 8007922:	bf00      	nop
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	20001014 	.word	0x20001014

08007930 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007938:	f000 f852 	bl	80079e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800793c:	4b06      	ldr	r3, [pc, #24]	@ (8007958 <prvIdleTask+0x28>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d9f9      	bls.n	8007938 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007944:	4b05      	ldr	r3, [pc, #20]	@ (800795c <prvIdleTask+0x2c>)
 8007946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007954:	e7f0      	b.n	8007938 <prvIdleTask+0x8>
 8007956:	bf00      	nop
 8007958:	20000b30 	.word	0x20000b30
 800795c:	e000ed04 	.word	0xe000ed04

08007960 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007966:	2300      	movs	r3, #0
 8007968:	607b      	str	r3, [r7, #4]
 800796a:	e00c      	b.n	8007986 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	4613      	mov	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4a12      	ldr	r2, [pc, #72]	@ (80079c0 <prvInitialiseTaskLists+0x60>)
 8007978:	4413      	add	r3, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe fcae 	bl	80062dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	3301      	adds	r3, #1
 8007984:	607b      	str	r3, [r7, #4]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b37      	cmp	r3, #55	@ 0x37
 800798a:	d9ef      	bls.n	800796c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800798c:	480d      	ldr	r0, [pc, #52]	@ (80079c4 <prvInitialiseTaskLists+0x64>)
 800798e:	f7fe fca5 	bl	80062dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007992:	480d      	ldr	r0, [pc, #52]	@ (80079c8 <prvInitialiseTaskLists+0x68>)
 8007994:	f7fe fca2 	bl	80062dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007998:	480c      	ldr	r0, [pc, #48]	@ (80079cc <prvInitialiseTaskLists+0x6c>)
 800799a:	f7fe fc9f 	bl	80062dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800799e:	480c      	ldr	r0, [pc, #48]	@ (80079d0 <prvInitialiseTaskLists+0x70>)
 80079a0:	f7fe fc9c 	bl	80062dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079a4:	480b      	ldr	r0, [pc, #44]	@ (80079d4 <prvInitialiseTaskLists+0x74>)
 80079a6:	f7fe fc99 	bl	80062dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079aa:	4b0b      	ldr	r3, [pc, #44]	@ (80079d8 <prvInitialiseTaskLists+0x78>)
 80079ac:	4a05      	ldr	r2, [pc, #20]	@ (80079c4 <prvInitialiseTaskLists+0x64>)
 80079ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079b0:	4b0a      	ldr	r3, [pc, #40]	@ (80079dc <prvInitialiseTaskLists+0x7c>)
 80079b2:	4a05      	ldr	r2, [pc, #20]	@ (80079c8 <prvInitialiseTaskLists+0x68>)
 80079b4:	601a      	str	r2, [r3, #0]
}
 80079b6:	bf00      	nop
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	20000b30 	.word	0x20000b30
 80079c4:	20000f90 	.word	0x20000f90
 80079c8:	20000fa4 	.word	0x20000fa4
 80079cc:	20000fc0 	.word	0x20000fc0
 80079d0:	20000fd4 	.word	0x20000fd4
 80079d4:	20000fec 	.word	0x20000fec
 80079d8:	20000fb8 	.word	0x20000fb8
 80079dc:	20000fbc 	.word	0x20000fbc

080079e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079e6:	e019      	b.n	8007a1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079e8:	f000 fdee 	bl	80085c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ec:	4b10      	ldr	r3, [pc, #64]	@ (8007a30 <prvCheckTasksWaitingTermination+0x50>)
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fe fcf9 	bl	80063f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007a34 <prvCheckTasksWaitingTermination+0x54>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	4a0b      	ldr	r2, [pc, #44]	@ (8007a34 <prvCheckTasksWaitingTermination+0x54>)
 8007a06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a08:	4b0b      	ldr	r3, [pc, #44]	@ (8007a38 <prvCheckTasksWaitingTermination+0x58>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a38 <prvCheckTasksWaitingTermination+0x58>)
 8007a10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a12:	f000 fe0b 	bl	800862c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f810 	bl	8007a3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a1c:	4b06      	ldr	r3, [pc, #24]	@ (8007a38 <prvCheckTasksWaitingTermination+0x58>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e1      	bne.n	80079e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000fd4 	.word	0x20000fd4
 8007a34:	20001000 	.word	0x20001000
 8007a38:	20000fe8 	.word	0x20000fe8

08007a3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3354      	adds	r3, #84	@ 0x54
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f001 f9dd 	bl	8008e08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d108      	bne.n	8007a6a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 ffa3 	bl	80089a8 <vPortFree>
				vPortFree( pxTCB );
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 ffa0 	bl	80089a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a68:	e019      	b.n	8007a9e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d103      	bne.n	8007a7c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 ff97 	bl	80089a8 <vPortFree>
	}
 8007a7a:	e010      	b.n	8007a9e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d00b      	beq.n	8007a9e <prvDeleteTCB+0x62>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	60fb      	str	r3, [r7, #12]
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	e7fd      	b.n	8007a9a <prvDeleteTCB+0x5e>
	}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aae:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae0 <prvResetNextTaskUnblockTime+0x38>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d104      	bne.n	8007ac2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae4 <prvResetNextTaskUnblockTime+0x3c>)
 8007aba:	f04f 32ff 	mov.w	r2, #4294967295
 8007abe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ac0:	e008      	b.n	8007ad4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ac2:	4b07      	ldr	r3, [pc, #28]	@ (8007ae0 <prvResetNextTaskUnblockTime+0x38>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	4a04      	ldr	r2, [pc, #16]	@ (8007ae4 <prvResetNextTaskUnblockTime+0x3c>)
 8007ad2:	6013      	str	r3, [r2, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	20000fb8 	.word	0x20000fb8
 8007ae4:	20001020 	.word	0x20001020

08007ae8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007aee:	4b0b      	ldr	r3, [pc, #44]	@ (8007b1c <xTaskGetSchedulerState+0x34>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d102      	bne.n	8007afc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007af6:	2301      	movs	r3, #1
 8007af8:	607b      	str	r3, [r7, #4]
 8007afa:	e008      	b.n	8007b0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007afc:	4b08      	ldr	r3, [pc, #32]	@ (8007b20 <xTaskGetSchedulerState+0x38>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d102      	bne.n	8007b0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b04:	2302      	movs	r3, #2
 8007b06:	607b      	str	r3, [r7, #4]
 8007b08:	e001      	b.n	8007b0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b0e:	687b      	ldr	r3, [r7, #4]
	}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	2000100c 	.word	0x2000100c
 8007b20:	20001028 	.word	0x20001028

08007b24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b30:	2300      	movs	r3, #0
 8007b32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d058      	beq.n	8007bec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8007bf8 <xTaskPriorityDisinherit+0xd4>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d00b      	beq.n	8007b5c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	60fb      	str	r3, [r7, #12]
}
 8007b56:	bf00      	nop
 8007b58:	bf00      	nop
 8007b5a:	e7fd      	b.n	8007b58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10b      	bne.n	8007b7c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	60bb      	str	r3, [r7, #8]
}
 8007b76:	bf00      	nop
 8007b78:	bf00      	nop
 8007b7a:	e7fd      	b.n	8007b78 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b80:	1e5a      	subs	r2, r3, #1
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d02c      	beq.n	8007bec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d128      	bne.n	8007bec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fc26 	bl	80063f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8007bfc <xTaskPriorityDisinherit+0xd8>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d903      	bls.n	8007bcc <xTaskPriorityDisinherit+0xa8>
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8007bfc <xTaskPriorityDisinherit+0xd8>)
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4a09      	ldr	r2, [pc, #36]	@ (8007c00 <xTaskPriorityDisinherit+0xdc>)
 8007bda:	441a      	add	r2, r3
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	3304      	adds	r3, #4
 8007be0:	4619      	mov	r1, r3
 8007be2:	4610      	mov	r0, r2
 8007be4:	f7fe fba7 	bl	8006336 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007be8:	2301      	movs	r3, #1
 8007bea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007bec:	697b      	ldr	r3, [r7, #20]
	}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20000b2c 	.word	0x20000b2c
 8007bfc:	20001008 	.word	0x20001008
 8007c00:	20000b30 	.word	0x20000b30

08007c04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c0e:	4b21      	ldr	r3, [pc, #132]	@ (8007c94 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c14:	4b20      	ldr	r3, [pc, #128]	@ (8007c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe fbe8 	bl	80063f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c26:	d10a      	bne.n	8007c3e <prvAddCurrentTaskToDelayedList+0x3a>
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d007      	beq.n	8007c3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8007c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4619      	mov	r1, r3
 8007c36:	4819      	ldr	r0, [pc, #100]	@ (8007c9c <prvAddCurrentTaskToDelayedList+0x98>)
 8007c38:	f7fe fb7d 	bl	8006336 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c3c:	e026      	b.n	8007c8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4413      	add	r3, r2
 8007c44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c46:	4b14      	ldr	r3, [pc, #80]	@ (8007c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d209      	bcs.n	8007c6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c56:	4b12      	ldr	r3, [pc, #72]	@ (8007ca0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4619      	mov	r1, r3
 8007c62:	4610      	mov	r0, r2
 8007c64:	f7fe fb8b 	bl	800637e <vListInsert>
}
 8007c68:	e010      	b.n	8007c8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8007ca4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3304      	adds	r3, #4
 8007c74:	4619      	mov	r1, r3
 8007c76:	4610      	mov	r0, r2
 8007c78:	f7fe fb81 	bl	800637e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ca8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d202      	bcs.n	8007c8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c86:	4a08      	ldr	r2, [pc, #32]	@ (8007ca8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	6013      	str	r3, [r2, #0]
}
 8007c8c:	bf00      	nop
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	20001004 	.word	0x20001004
 8007c98:	20000b2c 	.word	0x20000b2c
 8007c9c:	20000fec 	.word	0x20000fec
 8007ca0:	20000fbc 	.word	0x20000fbc
 8007ca4:	20000fb8 	.word	0x20000fb8
 8007ca8:	20001020 	.word	0x20001020

08007cac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b08a      	sub	sp, #40	@ 0x28
 8007cb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007cb6:	f000 fb13 	bl	80082e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007cba:	4b1d      	ldr	r3, [pc, #116]	@ (8007d30 <xTimerCreateTimerTask+0x84>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d021      	beq.n	8007d06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007cca:	1d3a      	adds	r2, r7, #4
 8007ccc:	f107 0108 	add.w	r1, r7, #8
 8007cd0:	f107 030c 	add.w	r3, r7, #12
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fe fae7 	bl	80062a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	9202      	str	r2, [sp, #8]
 8007ce2:	9301      	str	r3, [sp, #4]
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	460a      	mov	r2, r1
 8007cec:	4911      	ldr	r1, [pc, #68]	@ (8007d34 <xTimerCreateTimerTask+0x88>)
 8007cee:	4812      	ldr	r0, [pc, #72]	@ (8007d38 <xTimerCreateTimerTask+0x8c>)
 8007cf0:	f7ff f8a2 	bl	8006e38 <xTaskCreateStatic>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	4a11      	ldr	r2, [pc, #68]	@ (8007d3c <xTimerCreateTimerTask+0x90>)
 8007cf8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007cfa:	4b10      	ldr	r3, [pc, #64]	@ (8007d3c <xTimerCreateTimerTask+0x90>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d02:	2301      	movs	r3, #1
 8007d04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10b      	bne.n	8007d24 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d10:	f383 8811 	msr	BASEPRI, r3
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	613b      	str	r3, [r7, #16]
}
 8007d1e:	bf00      	nop
 8007d20:	bf00      	nop
 8007d22:	e7fd      	b.n	8007d20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d24:	697b      	ldr	r3, [r7, #20]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	2000105c 	.word	0x2000105c
 8007d34:	08009050 	.word	0x08009050
 8007d38:	08007e79 	.word	0x08007e79
 8007d3c:	20001060 	.word	0x20001060

08007d40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08a      	sub	sp, #40	@ 0x28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10b      	bne.n	8007d70 <xTimerGenericCommand+0x30>
	__asm volatile
 8007d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	623b      	str	r3, [r7, #32]
}
 8007d6a:	bf00      	nop
 8007d6c:	bf00      	nop
 8007d6e:	e7fd      	b.n	8007d6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d70:	4b19      	ldr	r3, [pc, #100]	@ (8007dd8 <xTimerGenericCommand+0x98>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d02a      	beq.n	8007dce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2b05      	cmp	r3, #5
 8007d88:	dc18      	bgt.n	8007dbc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d8a:	f7ff fead 	bl	8007ae8 <xTaskGetSchedulerState>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d109      	bne.n	8007da8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d94:	4b10      	ldr	r3, [pc, #64]	@ (8007dd8 <xTimerGenericCommand+0x98>)
 8007d96:	6818      	ldr	r0, [r3, #0]
 8007d98:	f107 0110 	add.w	r1, r7, #16
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007da0:	f7fe fc5a 	bl	8006658 <xQueueGenericSend>
 8007da4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007da6:	e012      	b.n	8007dce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007da8:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd8 <xTimerGenericCommand+0x98>)
 8007daa:	6818      	ldr	r0, [r3, #0]
 8007dac:	f107 0110 	add.w	r1, r7, #16
 8007db0:	2300      	movs	r3, #0
 8007db2:	2200      	movs	r2, #0
 8007db4:	f7fe fc50 	bl	8006658 <xQueueGenericSend>
 8007db8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007dba:	e008      	b.n	8007dce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007dbc:	4b06      	ldr	r3, [pc, #24]	@ (8007dd8 <xTimerGenericCommand+0x98>)
 8007dbe:	6818      	ldr	r0, [r3, #0]
 8007dc0:	f107 0110 	add.w	r1, r7, #16
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	f7fe fd48 	bl	800685c <xQueueGenericSendFromISR>
 8007dcc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3728      	adds	r7, #40	@ 0x28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	2000105c 	.word	0x2000105c

08007ddc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af02      	add	r7, sp, #8
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007de6:	4b23      	ldr	r3, [pc, #140]	@ (8007e74 <prvProcessExpiredTimer+0x98>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	3304      	adds	r3, #4
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fe fafb 	bl	80063f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e00:	f003 0304 	and.w	r3, r3, #4
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d023      	beq.n	8007e50 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	699a      	ldr	r2, [r3, #24]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	18d1      	adds	r1, r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	6978      	ldr	r0, [r7, #20]
 8007e16:	f000 f8d5 	bl	8007fc4 <prvInsertTimerInActiveList>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d020      	beq.n	8007e62 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e20:	2300      	movs	r3, #0
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	2300      	movs	r3, #0
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	2100      	movs	r1, #0
 8007e2a:	6978      	ldr	r0, [r7, #20]
 8007e2c:	f7ff ff88 	bl	8007d40 <xTimerGenericCommand>
 8007e30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d114      	bne.n	8007e62 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	60fb      	str	r3, [r7, #12]
}
 8007e4a:	bf00      	nop
 8007e4c:	bf00      	nop
 8007e4e:	e7fd      	b.n	8007e4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e56:	f023 0301 	bic.w	r3, r3, #1
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	6978      	ldr	r0, [r7, #20]
 8007e68:	4798      	blx	r3
}
 8007e6a:	bf00      	nop
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20001054 	.word	0x20001054

08007e78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e80:	f107 0308 	add.w	r3, r7, #8
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 f859 	bl	8007f3c <prvGetNextExpireTime>
 8007e8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 f805 	bl	8007ea0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e96:	f000 f8d7 	bl	8008048 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e9a:	bf00      	nop
 8007e9c:	e7f0      	b.n	8007e80 <prvTimerTask+0x8>
	...

08007ea0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007eaa:	f7ff fa29 	bl	8007300 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007eae:	f107 0308 	add.w	r3, r7, #8
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 f866 	bl	8007f84 <prvSampleTimeNow>
 8007eb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d130      	bne.n	8007f22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10a      	bne.n	8007edc <prvProcessTimerOrBlockTask+0x3c>
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d806      	bhi.n	8007edc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007ece:	f7ff fa25 	bl	800731c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ed2:	68f9      	ldr	r1, [r7, #12]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7ff ff81 	bl	8007ddc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007eda:	e024      	b.n	8007f26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d008      	beq.n	8007ef4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ee2:	4b13      	ldr	r3, [pc, #76]	@ (8007f30 <prvProcessTimerOrBlockTask+0x90>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <prvProcessTimerOrBlockTask+0x50>
 8007eec:	2301      	movs	r3, #1
 8007eee:	e000      	b.n	8007ef2 <prvProcessTimerOrBlockTask+0x52>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8007f34 <prvProcessTimerOrBlockTask+0x94>)
 8007ef6:	6818      	ldr	r0, [r3, #0]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	4619      	mov	r1, r3
 8007f02:	f7fe ff65 	bl	8006dd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f06:	f7ff fa09 	bl	800731c <xTaskResumeAll>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10a      	bne.n	8007f26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f10:	4b09      	ldr	r3, [pc, #36]	@ (8007f38 <prvProcessTimerOrBlockTask+0x98>)
 8007f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	f3bf 8f6f 	isb	sy
}
 8007f20:	e001      	b.n	8007f26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f22:	f7ff f9fb 	bl	800731c <xTaskResumeAll>
}
 8007f26:	bf00      	nop
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	20001058 	.word	0x20001058
 8007f34:	2000105c 	.word	0x2000105c
 8007f38:	e000ed04 	.word	0xe000ed04

08007f3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f44:	4b0e      	ldr	r3, [pc, #56]	@ (8007f80 <prvGetNextExpireTime+0x44>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <prvGetNextExpireTime+0x16>
 8007f4e:	2201      	movs	r2, #1
 8007f50:	e000      	b.n	8007f54 <prvGetNextExpireTime+0x18>
 8007f52:	2200      	movs	r2, #0
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d105      	bne.n	8007f6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f60:	4b07      	ldr	r3, [pc, #28]	@ (8007f80 <prvGetNextExpireTime+0x44>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	e001      	b.n	8007f70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f70:	68fb      	ldr	r3, [r7, #12]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	20001054 	.word	0x20001054

08007f84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f8c:	f7ff fa64 	bl	8007458 <xTaskGetTickCount>
 8007f90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f92:	4b0b      	ldr	r3, [pc, #44]	@ (8007fc0 <prvSampleTimeNow+0x3c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d205      	bcs.n	8007fa8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f9c:	f000 f93a 	bl	8008214 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	e002      	b.n	8007fae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007fae:	4a04      	ldr	r2, [pc, #16]	@ (8007fc0 <prvSampleTimeNow+0x3c>)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20001064 	.word	0x20001064

08007fc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
 8007fd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d812      	bhi.n	8008010 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	1ad2      	subs	r2, r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d302      	bcc.n	8007ffe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	e01b      	b.n	8008036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ffe:	4b10      	ldr	r3, [pc, #64]	@ (8008040 <prvInsertTimerInActiveList+0x7c>)
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3304      	adds	r3, #4
 8008006:	4619      	mov	r1, r3
 8008008:	4610      	mov	r0, r2
 800800a:	f7fe f9b8 	bl	800637e <vListInsert>
 800800e:	e012      	b.n	8008036 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	429a      	cmp	r2, r3
 8008016:	d206      	bcs.n	8008026 <prvInsertTimerInActiveList+0x62>
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	429a      	cmp	r2, r3
 800801e:	d302      	bcc.n	8008026 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008020:	2301      	movs	r3, #1
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	e007      	b.n	8008036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008026:	4b07      	ldr	r3, [pc, #28]	@ (8008044 <prvInsertTimerInActiveList+0x80>)
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	3304      	adds	r3, #4
 800802e:	4619      	mov	r1, r3
 8008030:	4610      	mov	r0, r2
 8008032:	f7fe f9a4 	bl	800637e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008036:	697b      	ldr	r3, [r7, #20]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3718      	adds	r7, #24
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	20001058 	.word	0x20001058
 8008044:	20001054 	.word	0x20001054

08008048 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08e      	sub	sp, #56	@ 0x38
 800804c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800804e:	e0ce      	b.n	80081ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	da19      	bge.n	800808a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008056:	1d3b      	adds	r3, r7, #4
 8008058:	3304      	adds	r3, #4
 800805a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800805c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10b      	bne.n	800807a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	61fb      	str	r3, [r7, #28]
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop
 8008078:	e7fd      	b.n	8008076 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800807a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008080:	6850      	ldr	r0, [r2, #4]
 8008082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008084:	6892      	ldr	r2, [r2, #8]
 8008086:	4611      	mov	r1, r2
 8008088:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	f2c0 80ae 	blt.w	80081ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d004      	beq.n	80080a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800809e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a0:	3304      	adds	r3, #4
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe f9a4 	bl	80063f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080a8:	463b      	mov	r3, r7
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7ff ff6a 	bl	8007f84 <prvSampleTimeNow>
 80080b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b09      	cmp	r3, #9
 80080b6:	f200 8097 	bhi.w	80081e8 <prvProcessReceivedCommands+0x1a0>
 80080ba:	a201      	add	r2, pc, #4	@ (adr r2, 80080c0 <prvProcessReceivedCommands+0x78>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	080080e9 	.word	0x080080e9
 80080c4:	080080e9 	.word	0x080080e9
 80080c8:	080080e9 	.word	0x080080e9
 80080cc:	0800815f 	.word	0x0800815f
 80080d0:	08008173 	.word	0x08008173
 80080d4:	080081bf 	.word	0x080081bf
 80080d8:	080080e9 	.word	0x080080e9
 80080dc:	080080e9 	.word	0x080080e9
 80080e0:	0800815f 	.word	0x0800815f
 80080e4:	08008173 	.word	0x08008173
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080ee:	f043 0301 	orr.w	r3, r3, #1
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	18d1      	adds	r1, r2, r3
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008106:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008108:	f7ff ff5c 	bl	8007fc4 <prvInsertTimerInActiveList>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d06c      	beq.n	80081ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008118:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800811a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b00      	cmp	r3, #0
 8008126:	d061      	beq.n	80081ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	441a      	add	r2, r3
 8008130:	2300      	movs	r3, #0
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	2300      	movs	r3, #0
 8008136:	2100      	movs	r1, #0
 8008138:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800813a:	f7ff fe01 	bl	8007d40 <xTimerGenericCommand>
 800813e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d152      	bne.n	80081ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	61bb      	str	r3, [r7, #24]
}
 8008158:	bf00      	nop
 800815a:	bf00      	nop
 800815c:	e7fd      	b.n	800815a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800815e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008160:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008164:	f023 0301 	bic.w	r3, r3, #1
 8008168:	b2da      	uxtb	r2, r3
 800816a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008170:	e03d      	b.n	80081ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008178:	f043 0301 	orr.w	r3, r3, #1
 800817c:	b2da      	uxtb	r2, r3
 800817e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008180:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008188:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800818a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10b      	bne.n	80081aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	617b      	str	r3, [r7, #20]
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop
 80081a8:	e7fd      	b.n	80081a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80081aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ac:	699a      	ldr	r2, [r3, #24]
 80081ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b0:	18d1      	adds	r1, r2, r3
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081b8:	f7ff ff04 	bl	8007fc4 <prvInsertTimerInActiveList>
					break;
 80081bc:	e017      	b.n	80081ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80081be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d103      	bne.n	80081d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80081cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081ce:	f000 fbeb 	bl	80089a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081d2:	e00c      	b.n	80081ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081da:	f023 0301 	bic.w	r3, r3, #1
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80081e6:	e002      	b.n	80081ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80081e8:	bf00      	nop
 80081ea:	e000      	b.n	80081ee <prvProcessReceivedCommands+0x1a6>
					break;
 80081ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081ee:	4b08      	ldr	r3, [pc, #32]	@ (8008210 <prvProcessReceivedCommands+0x1c8>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	1d39      	adds	r1, r7, #4
 80081f4:	2200      	movs	r2, #0
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe fbce 	bl	8006998 <xQueueReceive>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f47f af26 	bne.w	8008050 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop
 8008208:	3730      	adds	r7, #48	@ 0x30
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	2000105c 	.word	0x2000105c

08008214 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800821a:	e049      	b.n	80082b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800821c:	4b2e      	ldr	r3, [pc, #184]	@ (80082d8 <prvSwitchTimerLists+0xc4>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008226:	4b2c      	ldr	r3, [pc, #176]	@ (80082d8 <prvSwitchTimerLists+0xc4>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3304      	adds	r3, #4
 8008234:	4618      	mov	r0, r3
 8008236:	f7fe f8db 	bl	80063f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008248:	f003 0304 	and.w	r3, r3, #4
 800824c:	2b00      	cmp	r3, #0
 800824e:	d02f      	beq.n	80082b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	4413      	add	r3, r2
 8008258:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	429a      	cmp	r2, r3
 8008260:	d90e      	bls.n	8008280 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800826e:	4b1a      	ldr	r3, [pc, #104]	@ (80082d8 <prvSwitchTimerLists+0xc4>)
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	3304      	adds	r3, #4
 8008276:	4619      	mov	r1, r3
 8008278:	4610      	mov	r0, r2
 800827a:	f7fe f880 	bl	800637e <vListInsert>
 800827e:	e017      	b.n	80082b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008280:	2300      	movs	r3, #0
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	2300      	movs	r3, #0
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	2100      	movs	r1, #0
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7ff fd58 	bl	8007d40 <xTimerGenericCommand>
 8008290:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10b      	bne.n	80082b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	603b      	str	r3, [r7, #0]
}
 80082aa:	bf00      	nop
 80082ac:	bf00      	nop
 80082ae:	e7fd      	b.n	80082ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082b0:	4b09      	ldr	r3, [pc, #36]	@ (80082d8 <prvSwitchTimerLists+0xc4>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1b0      	bne.n	800821c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80082ba:	4b07      	ldr	r3, [pc, #28]	@ (80082d8 <prvSwitchTimerLists+0xc4>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80082c0:	4b06      	ldr	r3, [pc, #24]	@ (80082dc <prvSwitchTimerLists+0xc8>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a04      	ldr	r2, [pc, #16]	@ (80082d8 <prvSwitchTimerLists+0xc4>)
 80082c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80082c8:	4a04      	ldr	r2, [pc, #16]	@ (80082dc <prvSwitchTimerLists+0xc8>)
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	6013      	str	r3, [r2, #0]
}
 80082ce:	bf00      	nop
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20001054 	.word	0x20001054
 80082dc:	20001058 	.word	0x20001058

080082e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80082e6:	f000 f96f 	bl	80085c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80082ea:	4b15      	ldr	r3, [pc, #84]	@ (8008340 <prvCheckForValidListAndQueue+0x60>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d120      	bne.n	8008334 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80082f2:	4814      	ldr	r0, [pc, #80]	@ (8008344 <prvCheckForValidListAndQueue+0x64>)
 80082f4:	f7fd fff2 	bl	80062dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80082f8:	4813      	ldr	r0, [pc, #76]	@ (8008348 <prvCheckForValidListAndQueue+0x68>)
 80082fa:	f7fd ffef 	bl	80062dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80082fe:	4b13      	ldr	r3, [pc, #76]	@ (800834c <prvCheckForValidListAndQueue+0x6c>)
 8008300:	4a10      	ldr	r2, [pc, #64]	@ (8008344 <prvCheckForValidListAndQueue+0x64>)
 8008302:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008304:	4b12      	ldr	r3, [pc, #72]	@ (8008350 <prvCheckForValidListAndQueue+0x70>)
 8008306:	4a10      	ldr	r2, [pc, #64]	@ (8008348 <prvCheckForValidListAndQueue+0x68>)
 8008308:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800830a:	2300      	movs	r3, #0
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	4b11      	ldr	r3, [pc, #68]	@ (8008354 <prvCheckForValidListAndQueue+0x74>)
 8008310:	4a11      	ldr	r2, [pc, #68]	@ (8008358 <prvCheckForValidListAndQueue+0x78>)
 8008312:	2110      	movs	r1, #16
 8008314:	200a      	movs	r0, #10
 8008316:	f7fe f8ff 	bl	8006518 <xQueueGenericCreateStatic>
 800831a:	4603      	mov	r3, r0
 800831c:	4a08      	ldr	r2, [pc, #32]	@ (8008340 <prvCheckForValidListAndQueue+0x60>)
 800831e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008320:	4b07      	ldr	r3, [pc, #28]	@ (8008340 <prvCheckForValidListAndQueue+0x60>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d005      	beq.n	8008334 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008328:	4b05      	ldr	r3, [pc, #20]	@ (8008340 <prvCheckForValidListAndQueue+0x60>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	490b      	ldr	r1, [pc, #44]	@ (800835c <prvCheckForValidListAndQueue+0x7c>)
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe fd24 	bl	8006d7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008334:	f000 f97a 	bl	800862c <vPortExitCritical>
}
 8008338:	bf00      	nop
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	2000105c 	.word	0x2000105c
 8008344:	2000102c 	.word	0x2000102c
 8008348:	20001040 	.word	0x20001040
 800834c:	20001054 	.word	0x20001054
 8008350:	20001058 	.word	0x20001058
 8008354:	20001108 	.word	0x20001108
 8008358:	20001068 	.word	0x20001068
 800835c:	08009058 	.word	0x08009058

08008360 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3b04      	subs	r3, #4
 8008370:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3b04      	subs	r3, #4
 800837e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	f023 0201 	bic.w	r2, r3, #1
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3b04      	subs	r3, #4
 800838e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008390:	4a0c      	ldr	r2, [pc, #48]	@ (80083c4 <pxPortInitialiseStack+0x64>)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3b14      	subs	r3, #20
 800839a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3b04      	subs	r3, #4
 80083a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f06f 0202 	mvn.w	r2, #2
 80083ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3b20      	subs	r3, #32
 80083b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083b6:	68fb      	ldr	r3, [r7, #12]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	080083c9 	.word	0x080083c9

080083c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083d2:	4b13      	ldr	r3, [pc, #76]	@ (8008420 <prvTaskExitError+0x58>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083da:	d00b      	beq.n	80083f4 <prvTaskExitError+0x2c>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	60fb      	str	r3, [r7, #12]
}
 80083ee:	bf00      	nop
 80083f0:	bf00      	nop
 80083f2:	e7fd      	b.n	80083f0 <prvTaskExitError+0x28>
	__asm volatile
 80083f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	60bb      	str	r3, [r7, #8]
}
 8008406:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008408:	bf00      	nop
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0fc      	beq.n	800840a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008410:	bf00      	nop
 8008412:	bf00      	nop
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	2000000c 	.word	0x2000000c
	...

08008430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008430:	4b07      	ldr	r3, [pc, #28]	@ (8008450 <pxCurrentTCBConst2>)
 8008432:	6819      	ldr	r1, [r3, #0]
 8008434:	6808      	ldr	r0, [r1, #0]
 8008436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843a:	f380 8809 	msr	PSP, r0
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f04f 0000 	mov.w	r0, #0
 8008446:	f380 8811 	msr	BASEPRI, r0
 800844a:	4770      	bx	lr
 800844c:	f3af 8000 	nop.w

08008450 <pxCurrentTCBConst2>:
 8008450:	20000b2c 	.word	0x20000b2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop

08008458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008458:	4808      	ldr	r0, [pc, #32]	@ (800847c <prvPortStartFirstTask+0x24>)
 800845a:	6800      	ldr	r0, [r0, #0]
 800845c:	6800      	ldr	r0, [r0, #0]
 800845e:	f380 8808 	msr	MSP, r0
 8008462:	f04f 0000 	mov.w	r0, #0
 8008466:	f380 8814 	msr	CONTROL, r0
 800846a:	b662      	cpsie	i
 800846c:	b661      	cpsie	f
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	df00      	svc	0
 8008478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800847a:	bf00      	nop
 800847c:	e000ed08 	.word	0xe000ed08

08008480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008486:	4b47      	ldr	r3, [pc, #284]	@ (80085a4 <xPortStartScheduler+0x124>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a47      	ldr	r2, [pc, #284]	@ (80085a8 <xPortStartScheduler+0x128>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d10b      	bne.n	80084a8 <xPortStartScheduler+0x28>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	613b      	str	r3, [r7, #16]
}
 80084a2:	bf00      	nop
 80084a4:	bf00      	nop
 80084a6:	e7fd      	b.n	80084a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084a8:	4b3e      	ldr	r3, [pc, #248]	@ (80085a4 <xPortStartScheduler+0x124>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a3f      	ldr	r2, [pc, #252]	@ (80085ac <xPortStartScheduler+0x12c>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d10b      	bne.n	80084ca <xPortStartScheduler+0x4a>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	60fb      	str	r3, [r7, #12]
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop
 80084c8:	e7fd      	b.n	80084c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084ca:	4b39      	ldr	r3, [pc, #228]	@ (80085b0 <xPortStartScheduler+0x130>)
 80084cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	22ff      	movs	r2, #255	@ 0xff
 80084da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084e4:	78fb      	ldrb	r3, [r7, #3]
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	4b31      	ldr	r3, [pc, #196]	@ (80085b4 <xPortStartScheduler+0x134>)
 80084f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084f2:	4b31      	ldr	r3, [pc, #196]	@ (80085b8 <xPortStartScheduler+0x138>)
 80084f4:	2207      	movs	r2, #7
 80084f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084f8:	e009      	b.n	800850e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80084fa:	4b2f      	ldr	r3, [pc, #188]	@ (80085b8 <xPortStartScheduler+0x138>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3b01      	subs	r3, #1
 8008500:	4a2d      	ldr	r2, [pc, #180]	@ (80085b8 <xPortStartScheduler+0x138>)
 8008502:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008504:	78fb      	ldrb	r3, [r7, #3]
 8008506:	b2db      	uxtb	r3, r3
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	b2db      	uxtb	r3, r3
 800850c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	b2db      	uxtb	r3, r3
 8008512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008516:	2b80      	cmp	r3, #128	@ 0x80
 8008518:	d0ef      	beq.n	80084fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800851a:	4b27      	ldr	r3, [pc, #156]	@ (80085b8 <xPortStartScheduler+0x138>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f1c3 0307 	rsb	r3, r3, #7
 8008522:	2b04      	cmp	r3, #4
 8008524:	d00b      	beq.n	800853e <xPortStartScheduler+0xbe>
	__asm volatile
 8008526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	60bb      	str	r3, [r7, #8]
}
 8008538:	bf00      	nop
 800853a:	bf00      	nop
 800853c:	e7fd      	b.n	800853a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800853e:	4b1e      	ldr	r3, [pc, #120]	@ (80085b8 <xPortStartScheduler+0x138>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	021b      	lsls	r3, r3, #8
 8008544:	4a1c      	ldr	r2, [pc, #112]	@ (80085b8 <xPortStartScheduler+0x138>)
 8008546:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008548:	4b1b      	ldr	r3, [pc, #108]	@ (80085b8 <xPortStartScheduler+0x138>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008550:	4a19      	ldr	r2, [pc, #100]	@ (80085b8 <xPortStartScheduler+0x138>)
 8008552:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	b2da      	uxtb	r2, r3
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800855c:	4b17      	ldr	r3, [pc, #92]	@ (80085bc <xPortStartScheduler+0x13c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a16      	ldr	r2, [pc, #88]	@ (80085bc <xPortStartScheduler+0x13c>)
 8008562:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008566:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008568:	4b14      	ldr	r3, [pc, #80]	@ (80085bc <xPortStartScheduler+0x13c>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a13      	ldr	r2, [pc, #76]	@ (80085bc <xPortStartScheduler+0x13c>)
 800856e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008572:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008574:	f000 f8da 	bl	800872c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008578:	4b11      	ldr	r3, [pc, #68]	@ (80085c0 <xPortStartScheduler+0x140>)
 800857a:	2200      	movs	r2, #0
 800857c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800857e:	f000 f8f9 	bl	8008774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008582:	4b10      	ldr	r3, [pc, #64]	@ (80085c4 <xPortStartScheduler+0x144>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a0f      	ldr	r2, [pc, #60]	@ (80085c4 <xPortStartScheduler+0x144>)
 8008588:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800858c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800858e:	f7ff ff63 	bl	8008458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008592:	f7ff f82b 	bl	80075ec <vTaskSwitchContext>
	prvTaskExitError();
 8008596:	f7ff ff17 	bl	80083c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	e000ed00 	.word	0xe000ed00
 80085a8:	410fc271 	.word	0x410fc271
 80085ac:	410fc270 	.word	0x410fc270
 80085b0:	e000e400 	.word	0xe000e400
 80085b4:	20001158 	.word	0x20001158
 80085b8:	2000115c 	.word	0x2000115c
 80085bc:	e000ed20 	.word	0xe000ed20
 80085c0:	2000000c 	.word	0x2000000c
 80085c4:	e000ef34 	.word	0xe000ef34

080085c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	607b      	str	r3, [r7, #4]
}
 80085e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085e2:	4b10      	ldr	r3, [pc, #64]	@ (8008624 <vPortEnterCritical+0x5c>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3301      	adds	r3, #1
 80085e8:	4a0e      	ldr	r2, [pc, #56]	@ (8008624 <vPortEnterCritical+0x5c>)
 80085ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008624 <vPortEnterCritical+0x5c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d110      	bne.n	8008616 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008628 <vPortEnterCritical+0x60>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00b      	beq.n	8008616 <vPortEnterCritical+0x4e>
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	603b      	str	r3, [r7, #0]
}
 8008610:	bf00      	nop
 8008612:	bf00      	nop
 8008614:	e7fd      	b.n	8008612 <vPortEnterCritical+0x4a>
	}
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	2000000c 	.word	0x2000000c
 8008628:	e000ed04 	.word	0xe000ed04

0800862c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008632:	4b12      	ldr	r3, [pc, #72]	@ (800867c <vPortExitCritical+0x50>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10b      	bne.n	8008652 <vPortExitCritical+0x26>
	__asm volatile
 800863a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	607b      	str	r3, [r7, #4]
}
 800864c:	bf00      	nop
 800864e:	bf00      	nop
 8008650:	e7fd      	b.n	800864e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008652:	4b0a      	ldr	r3, [pc, #40]	@ (800867c <vPortExitCritical+0x50>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3b01      	subs	r3, #1
 8008658:	4a08      	ldr	r2, [pc, #32]	@ (800867c <vPortExitCritical+0x50>)
 800865a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800865c:	4b07      	ldr	r3, [pc, #28]	@ (800867c <vPortExitCritical+0x50>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d105      	bne.n	8008670 <vPortExitCritical+0x44>
 8008664:	2300      	movs	r3, #0
 8008666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	f383 8811 	msr	BASEPRI, r3
}
 800866e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	2000000c 	.word	0x2000000c

08008680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008680:	f3ef 8009 	mrs	r0, PSP
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	4b15      	ldr	r3, [pc, #84]	@ (80086e0 <pxCurrentTCBConst>)
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	f01e 0f10 	tst.w	lr, #16
 8008690:	bf08      	it	eq
 8008692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869a:	6010      	str	r0, [r2, #0]
 800869c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80086a4:	f380 8811 	msr	BASEPRI, r0
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f7fe ff9c 	bl	80075ec <vTaskSwitchContext>
 80086b4:	f04f 0000 	mov.w	r0, #0
 80086b8:	f380 8811 	msr	BASEPRI, r0
 80086bc:	bc09      	pop	{r0, r3}
 80086be:	6819      	ldr	r1, [r3, #0]
 80086c0:	6808      	ldr	r0, [r1, #0]
 80086c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c6:	f01e 0f10 	tst.w	lr, #16
 80086ca:	bf08      	it	eq
 80086cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086d0:	f380 8809 	msr	PSP, r0
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	f3af 8000 	nop.w

080086e0 <pxCurrentTCBConst>:
 80086e0:	20000b2c 	.word	0x20000b2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop

080086e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	607b      	str	r3, [r7, #4]
}
 8008700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008702:	f7fe feb9 	bl	8007478 <xTaskIncrementTick>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800870c:	4b06      	ldr	r3, [pc, #24]	@ (8008728 <xPortSysTickHandler+0x40>)
 800870e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	2300      	movs	r3, #0
 8008716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	f383 8811 	msr	BASEPRI, r3
}
 800871e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	e000ed04 	.word	0xe000ed04

0800872c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008730:	4b0b      	ldr	r3, [pc, #44]	@ (8008760 <vPortSetupTimerInterrupt+0x34>)
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008736:	4b0b      	ldr	r3, [pc, #44]	@ (8008764 <vPortSetupTimerInterrupt+0x38>)
 8008738:	2200      	movs	r2, #0
 800873a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800873c:	4b0a      	ldr	r3, [pc, #40]	@ (8008768 <vPortSetupTimerInterrupt+0x3c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a0a      	ldr	r2, [pc, #40]	@ (800876c <vPortSetupTimerInterrupt+0x40>)
 8008742:	fba2 2303 	umull	r2, r3, r2, r3
 8008746:	099b      	lsrs	r3, r3, #6
 8008748:	4a09      	ldr	r2, [pc, #36]	@ (8008770 <vPortSetupTimerInterrupt+0x44>)
 800874a:	3b01      	subs	r3, #1
 800874c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800874e:	4b04      	ldr	r3, [pc, #16]	@ (8008760 <vPortSetupTimerInterrupt+0x34>)
 8008750:	2207      	movs	r2, #7
 8008752:	601a      	str	r2, [r3, #0]
}
 8008754:	bf00      	nop
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	e000e010 	.word	0xe000e010
 8008764:	e000e018 	.word	0xe000e018
 8008768:	20000000 	.word	0x20000000
 800876c:	10624dd3 	.word	0x10624dd3
 8008770:	e000e014 	.word	0xe000e014

08008774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008774:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008784 <vPortEnableVFP+0x10>
 8008778:	6801      	ldr	r1, [r0, #0]
 800877a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800877e:	6001      	str	r1, [r0, #0]
 8008780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008782:	bf00      	nop
 8008784:	e000ed88 	.word	0xe000ed88

08008788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800878e:	f3ef 8305 	mrs	r3, IPSR
 8008792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b0f      	cmp	r3, #15
 8008798:	d915      	bls.n	80087c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800879a:	4a18      	ldr	r2, [pc, #96]	@ (80087fc <vPortValidateInterruptPriority+0x74>)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	4413      	add	r3, r2
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087a4:	4b16      	ldr	r3, [pc, #88]	@ (8008800 <vPortValidateInterruptPriority+0x78>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	7afa      	ldrb	r2, [r7, #11]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d20b      	bcs.n	80087c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	607b      	str	r3, [r7, #4]
}
 80087c0:	bf00      	nop
 80087c2:	bf00      	nop
 80087c4:	e7fd      	b.n	80087c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008804 <vPortValidateInterruptPriority+0x7c>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80087ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008808 <vPortValidateInterruptPriority+0x80>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d90b      	bls.n	80087ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	603b      	str	r3, [r7, #0]
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <vPortValidateInterruptPriority+0x62>
	}
 80087ee:	bf00      	nop
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	e000e3f0 	.word	0xe000e3f0
 8008800:	20001158 	.word	0x20001158
 8008804:	e000ed0c 	.word	0xe000ed0c
 8008808:	2000115c 	.word	0x2000115c

0800880c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08a      	sub	sp, #40	@ 0x28
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008814:	2300      	movs	r3, #0
 8008816:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008818:	f7fe fd72 	bl	8007300 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800881c:	4b5c      	ldr	r3, [pc, #368]	@ (8008990 <pvPortMalloc+0x184>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008824:	f000 f924 	bl	8008a70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008828:	4b5a      	ldr	r3, [pc, #360]	@ (8008994 <pvPortMalloc+0x188>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4013      	ands	r3, r2
 8008830:	2b00      	cmp	r3, #0
 8008832:	f040 8095 	bne.w	8008960 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01e      	beq.n	800887a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800883c:	2208      	movs	r2, #8
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4413      	add	r3, r2
 8008842:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f003 0307 	and.w	r3, r3, #7
 800884a:	2b00      	cmp	r3, #0
 800884c:	d015      	beq.n	800887a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f023 0307 	bic.w	r3, r3, #7
 8008854:	3308      	adds	r3, #8
 8008856:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f003 0307 	and.w	r3, r3, #7
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <pvPortMalloc+0x6e>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	617b      	str	r3, [r7, #20]
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop
 8008878:	e7fd      	b.n	8008876 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d06f      	beq.n	8008960 <pvPortMalloc+0x154>
 8008880:	4b45      	ldr	r3, [pc, #276]	@ (8008998 <pvPortMalloc+0x18c>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	429a      	cmp	r2, r3
 8008888:	d86a      	bhi.n	8008960 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800888a:	4b44      	ldr	r3, [pc, #272]	@ (800899c <pvPortMalloc+0x190>)
 800888c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800888e:	4b43      	ldr	r3, [pc, #268]	@ (800899c <pvPortMalloc+0x190>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008894:	e004      	b.n	80088a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008898:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800889a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d903      	bls.n	80088b2 <pvPortMalloc+0xa6>
 80088aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1f1      	bne.n	8008896 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088b2:	4b37      	ldr	r3, [pc, #220]	@ (8008990 <pvPortMalloc+0x184>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d051      	beq.n	8008960 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2208      	movs	r2, #8
 80088c2:	4413      	add	r3, r2
 80088c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	1ad2      	subs	r2, r2, r3
 80088d6:	2308      	movs	r3, #8
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	429a      	cmp	r2, r3
 80088dc:	d920      	bls.n	8008920 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4413      	add	r3, r2
 80088e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	f003 0307 	and.w	r3, r3, #7
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00b      	beq.n	8008908 <pvPortMalloc+0xfc>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	613b      	str	r3, [r7, #16]
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	e7fd      	b.n	8008904 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	1ad2      	subs	r2, r2, r3
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800891a:	69b8      	ldr	r0, [r7, #24]
 800891c:	f000 f90a 	bl	8008b34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008920:	4b1d      	ldr	r3, [pc, #116]	@ (8008998 <pvPortMalloc+0x18c>)
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	4a1b      	ldr	r2, [pc, #108]	@ (8008998 <pvPortMalloc+0x18c>)
 800892c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800892e:	4b1a      	ldr	r3, [pc, #104]	@ (8008998 <pvPortMalloc+0x18c>)
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	4b1b      	ldr	r3, [pc, #108]	@ (80089a0 <pvPortMalloc+0x194>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	429a      	cmp	r2, r3
 8008938:	d203      	bcs.n	8008942 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800893a:	4b17      	ldr	r3, [pc, #92]	@ (8008998 <pvPortMalloc+0x18c>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a18      	ldr	r2, [pc, #96]	@ (80089a0 <pvPortMalloc+0x194>)
 8008940:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	4b13      	ldr	r3, [pc, #76]	@ (8008994 <pvPortMalloc+0x188>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	431a      	orrs	r2, r3
 800894c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008952:	2200      	movs	r2, #0
 8008954:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008956:	4b13      	ldr	r3, [pc, #76]	@ (80089a4 <pvPortMalloc+0x198>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3301      	adds	r3, #1
 800895c:	4a11      	ldr	r2, [pc, #68]	@ (80089a4 <pvPortMalloc+0x198>)
 800895e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008960:	f7fe fcdc 	bl	800731c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00b      	beq.n	8008986 <pvPortMalloc+0x17a>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	60fb      	str	r3, [r7, #12]
}
 8008980:	bf00      	nop
 8008982:	bf00      	nop
 8008984:	e7fd      	b.n	8008982 <pvPortMalloc+0x176>
	return pvReturn;
 8008986:	69fb      	ldr	r3, [r7, #28]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3728      	adds	r7, #40	@ 0x28
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20004d68 	.word	0x20004d68
 8008994:	20004d7c 	.word	0x20004d7c
 8008998:	20004d6c 	.word	0x20004d6c
 800899c:	20004d60 	.word	0x20004d60
 80089a0:	20004d70 	.word	0x20004d70
 80089a4:	20004d74 	.word	0x20004d74

080089a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d04f      	beq.n	8008a5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089ba:	2308      	movs	r3, #8
 80089bc:	425b      	negs	r3, r3
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	4413      	add	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	4b25      	ldr	r3, [pc, #148]	@ (8008a64 <vPortFree+0xbc>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4013      	ands	r3, r2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10b      	bne.n	80089ee <vPortFree+0x46>
	__asm volatile
 80089d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	60fb      	str	r3, [r7, #12]
}
 80089e8:	bf00      	nop
 80089ea:	bf00      	nop
 80089ec:	e7fd      	b.n	80089ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00b      	beq.n	8008a0e <vPortFree+0x66>
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	60bb      	str	r3, [r7, #8]
}
 8008a08:	bf00      	nop
 8008a0a:	bf00      	nop
 8008a0c:	e7fd      	b.n	8008a0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	4b14      	ldr	r3, [pc, #80]	@ (8008a64 <vPortFree+0xbc>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4013      	ands	r3, r2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01e      	beq.n	8008a5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d11a      	bne.n	8008a5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	4b0e      	ldr	r3, [pc, #56]	@ (8008a64 <vPortFree+0xbc>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	43db      	mvns	r3, r3
 8008a2e:	401a      	ands	r2, r3
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a34:	f7fe fc64 	bl	8007300 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a68 <vPortFree+0xc0>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4413      	add	r3, r2
 8008a42:	4a09      	ldr	r2, [pc, #36]	@ (8008a68 <vPortFree+0xc0>)
 8008a44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a46:	6938      	ldr	r0, [r7, #16]
 8008a48:	f000 f874 	bl	8008b34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a4c:	4b07      	ldr	r3, [pc, #28]	@ (8008a6c <vPortFree+0xc4>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3301      	adds	r3, #1
 8008a52:	4a06      	ldr	r2, [pc, #24]	@ (8008a6c <vPortFree+0xc4>)
 8008a54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a56:	f7fe fc61 	bl	800731c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a5a:	bf00      	nop
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20004d7c 	.word	0x20004d7c
 8008a68:	20004d6c 	.word	0x20004d6c
 8008a6c:	20004d78 	.word	0x20004d78

08008a70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008a7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a7c:	4b27      	ldr	r3, [pc, #156]	@ (8008b1c <prvHeapInit+0xac>)
 8008a7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f003 0307 	and.w	r3, r3, #7
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00c      	beq.n	8008aa4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3307      	adds	r3, #7
 8008a8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f023 0307 	bic.w	r3, r3, #7
 8008a96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8008b1c <prvHeapInit+0xac>)
 8008aa0:	4413      	add	r3, r2
 8008aa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b20 <prvHeapInit+0xb0>)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008aae:	4b1c      	ldr	r3, [pc, #112]	@ (8008b20 <prvHeapInit+0xb0>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	4413      	add	r3, r2
 8008aba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008abc:	2208      	movs	r2, #8
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	1a9b      	subs	r3, r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f023 0307 	bic.w	r3, r3, #7
 8008aca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4a15      	ldr	r2, [pc, #84]	@ (8008b24 <prvHeapInit+0xb4>)
 8008ad0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ad2:	4b14      	ldr	r3, [pc, #80]	@ (8008b24 <prvHeapInit+0xb4>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ada:	4b12      	ldr	r3, [pc, #72]	@ (8008b24 <prvHeapInit+0xb4>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	1ad2      	subs	r2, r2, r3
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008af0:	4b0c      	ldr	r3, [pc, #48]	@ (8008b24 <prvHeapInit+0xb4>)
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	4a0a      	ldr	r2, [pc, #40]	@ (8008b28 <prvHeapInit+0xb8>)
 8008afe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	4a09      	ldr	r2, [pc, #36]	@ (8008b2c <prvHeapInit+0xbc>)
 8008b06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b08:	4b09      	ldr	r3, [pc, #36]	@ (8008b30 <prvHeapInit+0xc0>)
 8008b0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b0e:	601a      	str	r2, [r3, #0]
}
 8008b10:	bf00      	nop
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	20001160 	.word	0x20001160
 8008b20:	20004d60 	.word	0x20004d60
 8008b24:	20004d68 	.word	0x20004d68
 8008b28:	20004d70 	.word	0x20004d70
 8008b2c:	20004d6c 	.word	0x20004d6c
 8008b30:	20004d7c 	.word	0x20004d7c

08008b34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b3c:	4b28      	ldr	r3, [pc, #160]	@ (8008be0 <prvInsertBlockIntoFreeList+0xac>)
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	e002      	b.n	8008b48 <prvInsertBlockIntoFreeList+0x14>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	60fb      	str	r3, [r7, #12]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d8f7      	bhi.n	8008b42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d108      	bne.n	8008b76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	441a      	add	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	441a      	add	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d118      	bne.n	8008bbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	4b15      	ldr	r3, [pc, #84]	@ (8008be4 <prvInsertBlockIntoFreeList+0xb0>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d00d      	beq.n	8008bb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	441a      	add	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	601a      	str	r2, [r3, #0]
 8008bb0:	e008      	b.n	8008bc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8008be4 <prvInsertBlockIntoFreeList+0xb0>)
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	e003      	b.n	8008bc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d002      	beq.n	8008bd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bd2:	bf00      	nop
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	20004d60 	.word	0x20004d60
 8008be4:	20004d68 	.word	0x20004d68

08008be8 <_Znwj>:
 8008be8:	2801      	cmp	r0, #1
 8008bea:	bf38      	it	cc
 8008bec:	2001      	movcc	r0, #1
 8008bee:	b510      	push	{r4, lr}
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 f81a 	bl	8008c2c <malloc>
 8008bf8:	b100      	cbz	r0, 8008bfc <_Znwj+0x14>
 8008bfa:	bd10      	pop	{r4, pc}
 8008bfc:	f000 f806 	bl	8008c0c <_ZSt15get_new_handlerv>
 8008c00:	b908      	cbnz	r0, 8008c06 <_Znwj+0x1e>
 8008c02:	f000 f80b 	bl	8008c1c <abort>
 8008c06:	4780      	blx	r0
 8008c08:	e7f3      	b.n	8008bf2 <_Znwj+0xa>
	...

08008c0c <_ZSt15get_new_handlerv>:
 8008c0c:	4b02      	ldr	r3, [pc, #8]	@ (8008c18 <_ZSt15get_new_handlerv+0xc>)
 8008c0e:	6818      	ldr	r0, [r3, #0]
 8008c10:	f3bf 8f5b 	dmb	ish
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20004d80 	.word	0x20004d80

08008c1c <abort>:
 8008c1c:	b508      	push	{r3, lr}
 8008c1e:	2006      	movs	r0, #6
 8008c20:	f000 f8ea 	bl	8008df8 <raise>
 8008c24:	2001      	movs	r0, #1
 8008c26:	f7f9 fbcf 	bl	80023c8 <_exit>
	...

08008c2c <malloc>:
 8008c2c:	4b02      	ldr	r3, [pc, #8]	@ (8008c38 <malloc+0xc>)
 8008c2e:	4601      	mov	r1, r0
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	f000 b825 	b.w	8008c80 <_malloc_r>
 8008c36:	bf00      	nop
 8008c38:	20000010 	.word	0x20000010

08008c3c <sbrk_aligned>:
 8008c3c:	b570      	push	{r4, r5, r6, lr}
 8008c3e:	4e0f      	ldr	r6, [pc, #60]	@ (8008c7c <sbrk_aligned+0x40>)
 8008c40:	460c      	mov	r4, r1
 8008c42:	6831      	ldr	r1, [r6, #0]
 8008c44:	4605      	mov	r5, r0
 8008c46:	b911      	cbnz	r1, 8008c4e <sbrk_aligned+0x12>
 8008c48:	f000 f948 	bl	8008edc <_sbrk_r>
 8008c4c:	6030      	str	r0, [r6, #0]
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4628      	mov	r0, r5
 8008c52:	f000 f943 	bl	8008edc <_sbrk_r>
 8008c56:	1c43      	adds	r3, r0, #1
 8008c58:	d103      	bne.n	8008c62 <sbrk_aligned+0x26>
 8008c5a:	f04f 34ff 	mov.w	r4, #4294967295
 8008c5e:	4620      	mov	r0, r4
 8008c60:	bd70      	pop	{r4, r5, r6, pc}
 8008c62:	1cc4      	adds	r4, r0, #3
 8008c64:	f024 0403 	bic.w	r4, r4, #3
 8008c68:	42a0      	cmp	r0, r4
 8008c6a:	d0f8      	beq.n	8008c5e <sbrk_aligned+0x22>
 8008c6c:	1a21      	subs	r1, r4, r0
 8008c6e:	4628      	mov	r0, r5
 8008c70:	f000 f934 	bl	8008edc <_sbrk_r>
 8008c74:	3001      	adds	r0, #1
 8008c76:	d1f2      	bne.n	8008c5e <sbrk_aligned+0x22>
 8008c78:	e7ef      	b.n	8008c5a <sbrk_aligned+0x1e>
 8008c7a:	bf00      	nop
 8008c7c:	20004d84 	.word	0x20004d84

08008c80 <_malloc_r>:
 8008c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c84:	1ccd      	adds	r5, r1, #3
 8008c86:	f025 0503 	bic.w	r5, r5, #3
 8008c8a:	3508      	adds	r5, #8
 8008c8c:	2d0c      	cmp	r5, #12
 8008c8e:	bf38      	it	cc
 8008c90:	250c      	movcc	r5, #12
 8008c92:	2d00      	cmp	r5, #0
 8008c94:	4606      	mov	r6, r0
 8008c96:	db01      	blt.n	8008c9c <_malloc_r+0x1c>
 8008c98:	42a9      	cmp	r1, r5
 8008c9a:	d904      	bls.n	8008ca6 <_malloc_r+0x26>
 8008c9c:	230c      	movs	r3, #12
 8008c9e:	6033      	str	r3, [r6, #0]
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d7c <_malloc_r+0xfc>
 8008caa:	f000 f869 	bl	8008d80 <__malloc_lock>
 8008cae:	f8d8 3000 	ldr.w	r3, [r8]
 8008cb2:	461c      	mov	r4, r3
 8008cb4:	bb44      	cbnz	r4, 8008d08 <_malloc_r+0x88>
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f7ff ffbf 	bl	8008c3c <sbrk_aligned>
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	d158      	bne.n	8008d76 <_malloc_r+0xf6>
 8008cc4:	f8d8 4000 	ldr.w	r4, [r8]
 8008cc8:	4627      	mov	r7, r4
 8008cca:	2f00      	cmp	r7, #0
 8008ccc:	d143      	bne.n	8008d56 <_malloc_r+0xd6>
 8008cce:	2c00      	cmp	r4, #0
 8008cd0:	d04b      	beq.n	8008d6a <_malloc_r+0xea>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	4639      	mov	r1, r7
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	eb04 0903 	add.w	r9, r4, r3
 8008cdc:	f000 f8fe 	bl	8008edc <_sbrk_r>
 8008ce0:	4581      	cmp	r9, r0
 8008ce2:	d142      	bne.n	8008d6a <_malloc_r+0xea>
 8008ce4:	6821      	ldr	r1, [r4, #0]
 8008ce6:	1a6d      	subs	r5, r5, r1
 8008ce8:	4629      	mov	r1, r5
 8008cea:	4630      	mov	r0, r6
 8008cec:	f7ff ffa6 	bl	8008c3c <sbrk_aligned>
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d03a      	beq.n	8008d6a <_malloc_r+0xea>
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	442b      	add	r3, r5
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	bb62      	cbnz	r2, 8008d5c <_malloc_r+0xdc>
 8008d02:	f8c8 7000 	str.w	r7, [r8]
 8008d06:	e00f      	b.n	8008d28 <_malloc_r+0xa8>
 8008d08:	6822      	ldr	r2, [r4, #0]
 8008d0a:	1b52      	subs	r2, r2, r5
 8008d0c:	d420      	bmi.n	8008d50 <_malloc_r+0xd0>
 8008d0e:	2a0b      	cmp	r2, #11
 8008d10:	d917      	bls.n	8008d42 <_malloc_r+0xc2>
 8008d12:	1961      	adds	r1, r4, r5
 8008d14:	42a3      	cmp	r3, r4
 8008d16:	6025      	str	r5, [r4, #0]
 8008d18:	bf18      	it	ne
 8008d1a:	6059      	strne	r1, [r3, #4]
 8008d1c:	6863      	ldr	r3, [r4, #4]
 8008d1e:	bf08      	it	eq
 8008d20:	f8c8 1000 	streq.w	r1, [r8]
 8008d24:	5162      	str	r2, [r4, r5]
 8008d26:	604b      	str	r3, [r1, #4]
 8008d28:	4630      	mov	r0, r6
 8008d2a:	f000 f82f 	bl	8008d8c <__malloc_unlock>
 8008d2e:	f104 000b 	add.w	r0, r4, #11
 8008d32:	1d23      	adds	r3, r4, #4
 8008d34:	f020 0007 	bic.w	r0, r0, #7
 8008d38:	1ac2      	subs	r2, r0, r3
 8008d3a:	bf1c      	itt	ne
 8008d3c:	1a1b      	subne	r3, r3, r0
 8008d3e:	50a3      	strne	r3, [r4, r2]
 8008d40:	e7af      	b.n	8008ca2 <_malloc_r+0x22>
 8008d42:	6862      	ldr	r2, [r4, #4]
 8008d44:	42a3      	cmp	r3, r4
 8008d46:	bf0c      	ite	eq
 8008d48:	f8c8 2000 	streq.w	r2, [r8]
 8008d4c:	605a      	strne	r2, [r3, #4]
 8008d4e:	e7eb      	b.n	8008d28 <_malloc_r+0xa8>
 8008d50:	4623      	mov	r3, r4
 8008d52:	6864      	ldr	r4, [r4, #4]
 8008d54:	e7ae      	b.n	8008cb4 <_malloc_r+0x34>
 8008d56:	463c      	mov	r4, r7
 8008d58:	687f      	ldr	r7, [r7, #4]
 8008d5a:	e7b6      	b.n	8008cca <_malloc_r+0x4a>
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	42a3      	cmp	r3, r4
 8008d62:	d1fb      	bne.n	8008d5c <_malloc_r+0xdc>
 8008d64:	2300      	movs	r3, #0
 8008d66:	6053      	str	r3, [r2, #4]
 8008d68:	e7de      	b.n	8008d28 <_malloc_r+0xa8>
 8008d6a:	230c      	movs	r3, #12
 8008d6c:	6033      	str	r3, [r6, #0]
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f000 f80c 	bl	8008d8c <__malloc_unlock>
 8008d74:	e794      	b.n	8008ca0 <_malloc_r+0x20>
 8008d76:	6005      	str	r5, [r0, #0]
 8008d78:	e7d6      	b.n	8008d28 <_malloc_r+0xa8>
 8008d7a:	bf00      	nop
 8008d7c:	20004d88 	.word	0x20004d88

08008d80 <__malloc_lock>:
 8008d80:	4801      	ldr	r0, [pc, #4]	@ (8008d88 <__malloc_lock+0x8>)
 8008d82:	f000 b8e5 	b.w	8008f50 <__retarget_lock_acquire_recursive>
 8008d86:	bf00      	nop
 8008d88:	20004ec8 	.word	0x20004ec8

08008d8c <__malloc_unlock>:
 8008d8c:	4801      	ldr	r0, [pc, #4]	@ (8008d94 <__malloc_unlock+0x8>)
 8008d8e:	f000 b8e0 	b.w	8008f52 <__retarget_lock_release_recursive>
 8008d92:	bf00      	nop
 8008d94:	20004ec8 	.word	0x20004ec8

08008d98 <memset>:
 8008d98:	4402      	add	r2, r0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d100      	bne.n	8008da2 <memset+0xa>
 8008da0:	4770      	bx	lr
 8008da2:	f803 1b01 	strb.w	r1, [r3], #1
 8008da6:	e7f9      	b.n	8008d9c <memset+0x4>

08008da8 <_raise_r>:
 8008da8:	291f      	cmp	r1, #31
 8008daa:	b538      	push	{r3, r4, r5, lr}
 8008dac:	4605      	mov	r5, r0
 8008dae:	460c      	mov	r4, r1
 8008db0:	d904      	bls.n	8008dbc <_raise_r+0x14>
 8008db2:	2316      	movs	r3, #22
 8008db4:	6003      	str	r3, [r0, #0]
 8008db6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008dbe:	b112      	cbz	r2, 8008dc6 <_raise_r+0x1e>
 8008dc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008dc4:	b94b      	cbnz	r3, 8008dda <_raise_r+0x32>
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f000 f886 	bl	8008ed8 <_getpid_r>
 8008dcc:	4622      	mov	r2, r4
 8008dce:	4601      	mov	r1, r0
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dd6:	f000 b86d 	b.w	8008eb4 <_kill_r>
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d00a      	beq.n	8008df4 <_raise_r+0x4c>
 8008dde:	1c59      	adds	r1, r3, #1
 8008de0:	d103      	bne.n	8008dea <_raise_r+0x42>
 8008de2:	2316      	movs	r3, #22
 8008de4:	6003      	str	r3, [r0, #0]
 8008de6:	2001      	movs	r0, #1
 8008de8:	e7e7      	b.n	8008dba <_raise_r+0x12>
 8008dea:	2100      	movs	r1, #0
 8008dec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008df0:	4620      	mov	r0, r4
 8008df2:	4798      	blx	r3
 8008df4:	2000      	movs	r0, #0
 8008df6:	e7e0      	b.n	8008dba <_raise_r+0x12>

08008df8 <raise>:
 8008df8:	4b02      	ldr	r3, [pc, #8]	@ (8008e04 <raise+0xc>)
 8008dfa:	4601      	mov	r1, r0
 8008dfc:	6818      	ldr	r0, [r3, #0]
 8008dfe:	f7ff bfd3 	b.w	8008da8 <_raise_r>
 8008e02:	bf00      	nop
 8008e04:	20000010 	.word	0x20000010

08008e08 <_reclaim_reent>:
 8008e08:	4b29      	ldr	r3, [pc, #164]	@ (8008eb0 <_reclaim_reent+0xa8>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4283      	cmp	r3, r0
 8008e0e:	b570      	push	{r4, r5, r6, lr}
 8008e10:	4604      	mov	r4, r0
 8008e12:	d04b      	beq.n	8008eac <_reclaim_reent+0xa4>
 8008e14:	69c3      	ldr	r3, [r0, #28]
 8008e16:	b1ab      	cbz	r3, 8008e44 <_reclaim_reent+0x3c>
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	b16b      	cbz	r3, 8008e38 <_reclaim_reent+0x30>
 8008e1c:	2500      	movs	r5, #0
 8008e1e:	69e3      	ldr	r3, [r4, #28]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	5959      	ldr	r1, [r3, r5]
 8008e24:	2900      	cmp	r1, #0
 8008e26:	d13b      	bne.n	8008ea0 <_reclaim_reent+0x98>
 8008e28:	3504      	adds	r5, #4
 8008e2a:	2d80      	cmp	r5, #128	@ 0x80
 8008e2c:	d1f7      	bne.n	8008e1e <_reclaim_reent+0x16>
 8008e2e:	69e3      	ldr	r3, [r4, #28]
 8008e30:	4620      	mov	r0, r4
 8008e32:	68d9      	ldr	r1, [r3, #12]
 8008e34:	f000 f89c 	bl	8008f70 <_free_r>
 8008e38:	69e3      	ldr	r3, [r4, #28]
 8008e3a:	6819      	ldr	r1, [r3, #0]
 8008e3c:	b111      	cbz	r1, 8008e44 <_reclaim_reent+0x3c>
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f000 f896 	bl	8008f70 <_free_r>
 8008e44:	6961      	ldr	r1, [r4, #20]
 8008e46:	b111      	cbz	r1, 8008e4e <_reclaim_reent+0x46>
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 f891 	bl	8008f70 <_free_r>
 8008e4e:	69e1      	ldr	r1, [r4, #28]
 8008e50:	b111      	cbz	r1, 8008e58 <_reclaim_reent+0x50>
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 f88c 	bl	8008f70 <_free_r>
 8008e58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008e5a:	b111      	cbz	r1, 8008e62 <_reclaim_reent+0x5a>
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f000 f887 	bl	8008f70 <_free_r>
 8008e62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e64:	b111      	cbz	r1, 8008e6c <_reclaim_reent+0x64>
 8008e66:	4620      	mov	r0, r4
 8008e68:	f000 f882 	bl	8008f70 <_free_r>
 8008e6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008e6e:	b111      	cbz	r1, 8008e76 <_reclaim_reent+0x6e>
 8008e70:	4620      	mov	r0, r4
 8008e72:	f000 f87d 	bl	8008f70 <_free_r>
 8008e76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008e78:	b111      	cbz	r1, 8008e80 <_reclaim_reent+0x78>
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 f878 	bl	8008f70 <_free_r>
 8008e80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008e82:	b111      	cbz	r1, 8008e8a <_reclaim_reent+0x82>
 8008e84:	4620      	mov	r0, r4
 8008e86:	f000 f873 	bl	8008f70 <_free_r>
 8008e8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008e8c:	b111      	cbz	r1, 8008e94 <_reclaim_reent+0x8c>
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 f86e 	bl	8008f70 <_free_r>
 8008e94:	6a23      	ldr	r3, [r4, #32]
 8008e96:	b14b      	cbz	r3, 8008eac <_reclaim_reent+0xa4>
 8008e98:	4620      	mov	r0, r4
 8008e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e9e:	4718      	bx	r3
 8008ea0:	680e      	ldr	r6, [r1, #0]
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 f864 	bl	8008f70 <_free_r>
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	e7bb      	b.n	8008e24 <_reclaim_reent+0x1c>
 8008eac:	bd70      	pop	{r4, r5, r6, pc}
 8008eae:	bf00      	nop
 8008eb0:	20000010 	.word	0x20000010

08008eb4 <_kill_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4d07      	ldr	r5, [pc, #28]	@ (8008ed4 <_kill_r+0x20>)
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	602b      	str	r3, [r5, #0]
 8008ec2:	f7f9 fa71 	bl	80023a8 <_kill>
 8008ec6:	1c43      	adds	r3, r0, #1
 8008ec8:	d102      	bne.n	8008ed0 <_kill_r+0x1c>
 8008eca:	682b      	ldr	r3, [r5, #0]
 8008ecc:	b103      	cbz	r3, 8008ed0 <_kill_r+0x1c>
 8008ece:	6023      	str	r3, [r4, #0]
 8008ed0:	bd38      	pop	{r3, r4, r5, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20004ec4 	.word	0x20004ec4

08008ed8 <_getpid_r>:
 8008ed8:	f7f9 ba5e 	b.w	8002398 <_getpid>

08008edc <_sbrk_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4d06      	ldr	r5, [pc, #24]	@ (8008ef8 <_sbrk_r+0x1c>)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	4608      	mov	r0, r1
 8008ee6:	602b      	str	r3, [r5, #0]
 8008ee8:	f7f9 fa7a 	bl	80023e0 <_sbrk>
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	d102      	bne.n	8008ef6 <_sbrk_r+0x1a>
 8008ef0:	682b      	ldr	r3, [r5, #0]
 8008ef2:	b103      	cbz	r3, 8008ef6 <_sbrk_r+0x1a>
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	20004ec4 	.word	0x20004ec4

08008efc <__errno>:
 8008efc:	4b01      	ldr	r3, [pc, #4]	@ (8008f04 <__errno+0x8>)
 8008efe:	6818      	ldr	r0, [r3, #0]
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	20000010 	.word	0x20000010

08008f08 <__libc_init_array>:
 8008f08:	b570      	push	{r4, r5, r6, lr}
 8008f0a:	4d0d      	ldr	r5, [pc, #52]	@ (8008f40 <__libc_init_array+0x38>)
 8008f0c:	4c0d      	ldr	r4, [pc, #52]	@ (8008f44 <__libc_init_array+0x3c>)
 8008f0e:	1b64      	subs	r4, r4, r5
 8008f10:	10a4      	asrs	r4, r4, #2
 8008f12:	2600      	movs	r6, #0
 8008f14:	42a6      	cmp	r6, r4
 8008f16:	d109      	bne.n	8008f2c <__libc_init_array+0x24>
 8008f18:	4d0b      	ldr	r5, [pc, #44]	@ (8008f48 <__libc_init_array+0x40>)
 8008f1a:	4c0c      	ldr	r4, [pc, #48]	@ (8008f4c <__libc_init_array+0x44>)
 8008f1c:	f000 f872 	bl	8009004 <_init>
 8008f20:	1b64      	subs	r4, r4, r5
 8008f22:	10a4      	asrs	r4, r4, #2
 8008f24:	2600      	movs	r6, #0
 8008f26:	42a6      	cmp	r6, r4
 8008f28:	d105      	bne.n	8008f36 <__libc_init_array+0x2e>
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
 8008f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f30:	4798      	blx	r3
 8008f32:	3601      	adds	r6, #1
 8008f34:	e7ee      	b.n	8008f14 <__libc_init_array+0xc>
 8008f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f3a:	4798      	blx	r3
 8008f3c:	3601      	adds	r6, #1
 8008f3e:	e7f2      	b.n	8008f26 <__libc_init_array+0x1e>
 8008f40:	08009118 	.word	0x08009118
 8008f44:	08009118 	.word	0x08009118
 8008f48:	08009118 	.word	0x08009118
 8008f4c:	0800911c 	.word	0x0800911c

08008f50 <__retarget_lock_acquire_recursive>:
 8008f50:	4770      	bx	lr

08008f52 <__retarget_lock_release_recursive>:
 8008f52:	4770      	bx	lr

08008f54 <memcpy>:
 8008f54:	440a      	add	r2, r1
 8008f56:	4291      	cmp	r1, r2
 8008f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f5c:	d100      	bne.n	8008f60 <memcpy+0xc>
 8008f5e:	4770      	bx	lr
 8008f60:	b510      	push	{r4, lr}
 8008f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f6a:	4291      	cmp	r1, r2
 8008f6c:	d1f9      	bne.n	8008f62 <memcpy+0xe>
 8008f6e:	bd10      	pop	{r4, pc}

08008f70 <_free_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4605      	mov	r5, r0
 8008f74:	2900      	cmp	r1, #0
 8008f76:	d041      	beq.n	8008ffc <_free_r+0x8c>
 8008f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f7c:	1f0c      	subs	r4, r1, #4
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	bfb8      	it	lt
 8008f82:	18e4      	addlt	r4, r4, r3
 8008f84:	f7ff fefc 	bl	8008d80 <__malloc_lock>
 8008f88:	4a1d      	ldr	r2, [pc, #116]	@ (8009000 <_free_r+0x90>)
 8008f8a:	6813      	ldr	r3, [r2, #0]
 8008f8c:	b933      	cbnz	r3, 8008f9c <_free_r+0x2c>
 8008f8e:	6063      	str	r3, [r4, #4]
 8008f90:	6014      	str	r4, [r2, #0]
 8008f92:	4628      	mov	r0, r5
 8008f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f98:	f7ff bef8 	b.w	8008d8c <__malloc_unlock>
 8008f9c:	42a3      	cmp	r3, r4
 8008f9e:	d908      	bls.n	8008fb2 <_free_r+0x42>
 8008fa0:	6820      	ldr	r0, [r4, #0]
 8008fa2:	1821      	adds	r1, r4, r0
 8008fa4:	428b      	cmp	r3, r1
 8008fa6:	bf01      	itttt	eq
 8008fa8:	6819      	ldreq	r1, [r3, #0]
 8008faa:	685b      	ldreq	r3, [r3, #4]
 8008fac:	1809      	addeq	r1, r1, r0
 8008fae:	6021      	streq	r1, [r4, #0]
 8008fb0:	e7ed      	b.n	8008f8e <_free_r+0x1e>
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	b10b      	cbz	r3, 8008fbc <_free_r+0x4c>
 8008fb8:	42a3      	cmp	r3, r4
 8008fba:	d9fa      	bls.n	8008fb2 <_free_r+0x42>
 8008fbc:	6811      	ldr	r1, [r2, #0]
 8008fbe:	1850      	adds	r0, r2, r1
 8008fc0:	42a0      	cmp	r0, r4
 8008fc2:	d10b      	bne.n	8008fdc <_free_r+0x6c>
 8008fc4:	6820      	ldr	r0, [r4, #0]
 8008fc6:	4401      	add	r1, r0
 8008fc8:	1850      	adds	r0, r2, r1
 8008fca:	4283      	cmp	r3, r0
 8008fcc:	6011      	str	r1, [r2, #0]
 8008fce:	d1e0      	bne.n	8008f92 <_free_r+0x22>
 8008fd0:	6818      	ldr	r0, [r3, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	6053      	str	r3, [r2, #4]
 8008fd6:	4408      	add	r0, r1
 8008fd8:	6010      	str	r0, [r2, #0]
 8008fda:	e7da      	b.n	8008f92 <_free_r+0x22>
 8008fdc:	d902      	bls.n	8008fe4 <_free_r+0x74>
 8008fde:	230c      	movs	r3, #12
 8008fe0:	602b      	str	r3, [r5, #0]
 8008fe2:	e7d6      	b.n	8008f92 <_free_r+0x22>
 8008fe4:	6820      	ldr	r0, [r4, #0]
 8008fe6:	1821      	adds	r1, r4, r0
 8008fe8:	428b      	cmp	r3, r1
 8008fea:	bf04      	itt	eq
 8008fec:	6819      	ldreq	r1, [r3, #0]
 8008fee:	685b      	ldreq	r3, [r3, #4]
 8008ff0:	6063      	str	r3, [r4, #4]
 8008ff2:	bf04      	itt	eq
 8008ff4:	1809      	addeq	r1, r1, r0
 8008ff6:	6021      	streq	r1, [r4, #0]
 8008ff8:	6054      	str	r4, [r2, #4]
 8008ffa:	e7ca      	b.n	8008f92 <_free_r+0x22>
 8008ffc:	bd38      	pop	{r3, r4, r5, pc}
 8008ffe:	bf00      	nop
 8009000:	20004d88 	.word	0x20004d88

08009004 <_init>:
 8009004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009006:	bf00      	nop
 8009008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800900a:	bc08      	pop	{r3}
 800900c:	469e      	mov	lr, r3
 800900e:	4770      	bx	lr

08009010 <_fini>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	bf00      	nop
 8009014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009016:	bc08      	pop	{r3}
 8009018:	469e      	mov	lr, r3
 800901a:	4770      	bx	lr
