
WeederMCU1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800904c  0800904c  0000a04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009140  08009140  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  08009140  08009140  0000a140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009148  08009148  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009148  08009148  0000a148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800914c  0800914c  0000a14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009150  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e6c  20000060  080091b0  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ecc  080091b0  0000becc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d09a  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d3d  00000000  00000000  0002812a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  0002be68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001379  00000000  00000000  0002d768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000743c  00000000  00000000  0002eae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c9ee  00000000  00000000  00035f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab340  00000000  00000000  0005290b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fdc4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007168  00000000  00000000  000fdc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00104df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009034 	.word	0x08009034

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08009034 	.word	0x08009034

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b96a 	b.w	8000e18 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	460c      	mov	r4, r1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d14e      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b68:	4694      	mov	ip, r2
 8000b6a:	458c      	cmp	ip, r1
 8000b6c:	4686      	mov	lr, r0
 8000b6e:	fab2 f282 	clz	r2, r2
 8000b72:	d962      	bls.n	8000c3a <__udivmoddi4+0xde>
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	4091      	lsls	r1, r2
 8000b7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	4319      	orrs	r1, r3
 8000b86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8e:	fa1f f68c 	uxth.w	r6, ip
 8000b92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b9a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb04 f106 	mul.w	r1, r4, r6
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bb2:	f080 8112 	bcs.w	8000dda <__udivmoddi4+0x27e>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 810f 	bls.w	8000dda <__udivmoddi4+0x27e>
 8000bbc:	3c02      	subs	r4, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	fa1f f38e 	uxth.w	r3, lr
 8000bc6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bca:	fb07 1110 	mls	r1, r7, r0, r1
 8000bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd2:	fb00 f606 	mul.w	r6, r0, r6
 8000bd6:	429e      	cmp	r6, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x94>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be2:	f080 80fc 	bcs.w	8000dde <__udivmoddi4+0x282>
 8000be6:	429e      	cmp	r6, r3
 8000be8:	f240 80f9 	bls.w	8000dde <__udivmoddi4+0x282>
 8000bec:	4463      	add	r3, ip
 8000bee:	3802      	subs	r0, #2
 8000bf0:	1b9b      	subs	r3, r3, r6
 8000bf2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	b11d      	cbz	r5, 8000c02 <__udivmoddi4+0xa6>
 8000bfa:	40d3      	lsrs	r3, r2
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	e9c5 3200 	strd	r3, r2, [r5]
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d905      	bls.n	8000c16 <__udivmoddi4+0xba>
 8000c0a:	b10d      	cbz	r5, 8000c10 <__udivmoddi4+0xb4>
 8000c0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c10:	2100      	movs	r1, #0
 8000c12:	4608      	mov	r0, r1
 8000c14:	e7f5      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c16:	fab3 f183 	clz	r1, r3
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d146      	bne.n	8000cac <__udivmoddi4+0x150>
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xcc>
 8000c22:	4290      	cmp	r0, r2
 8000c24:	f0c0 80f0 	bcc.w	8000e08 <__udivmoddi4+0x2ac>
 8000c28:	1a86      	subs	r6, r0, r2
 8000c2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	2d00      	cmp	r5, #0
 8000c32:	d0e6      	beq.n	8000c02 <__udivmoddi4+0xa6>
 8000c34:	e9c5 6300 	strd	r6, r3, [r5]
 8000c38:	e7e3      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	f040 8090 	bne.w	8000d60 <__udivmoddi4+0x204>
 8000c40:	eba1 040c 	sub.w	r4, r1, ip
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	fa1f f78c 	uxth.w	r7, ip
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb08 4416 	mls	r4, r8, r6, r4
 8000c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5e:	fb07 f006 	mul.w	r0, r7, r6
 8000c62:	4298      	cmp	r0, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x11c>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x11a>
 8000c70:	4298      	cmp	r0, r3
 8000c72:	f200 80cd 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c76:	4626      	mov	r6, r4
 8000c78:	1a1c      	subs	r4, r3, r0
 8000c7a:	fa1f f38e 	uxth.w	r3, lr
 8000c7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c82:	fb08 4410 	mls	r4, r8, r0, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb00 f707 	mul.w	r7, r0, r7
 8000c8e:	429f      	cmp	r7, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x148>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x146>
 8000c9c:	429f      	cmp	r7, r3
 8000c9e:	f200 80b0 	bhi.w	8000e02 <__udivmoddi4+0x2a6>
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	1bdb      	subs	r3, r3, r7
 8000ca6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000caa:	e7a5      	b.n	8000bf8 <__udivmoddi4+0x9c>
 8000cac:	f1c1 0620 	rsb	r6, r1, #32
 8000cb0:	408b      	lsls	r3, r1
 8000cb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cbc:	fa04 f301 	lsl.w	r3, r4, r1
 8000cc0:	ea43 030c 	orr.w	r3, r3, ip
 8000cc4:	40f4      	lsrs	r4, r6
 8000cc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cca:	0c38      	lsrs	r0, r7, #16
 8000ccc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cd4:	fa1f fc87 	uxth.w	ip, r7
 8000cd8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cdc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ce4:	45a1      	cmp	r9, r4
 8000ce6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x1a6>
 8000cec:	193c      	adds	r4, r7, r4
 8000cee:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cf2:	f080 8084 	bcs.w	8000dfe <__udivmoddi4+0x2a2>
 8000cf6:	45a1      	cmp	r9, r4
 8000cf8:	f240 8081 	bls.w	8000dfe <__udivmoddi4+0x2a2>
 8000cfc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	eba4 0409 	sub.w	r4, r4, r9
 8000d06:	fa1f f983 	uxth.w	r9, r3
 8000d0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	d907      	bls.n	8000d2e <__udivmoddi4+0x1d2>
 8000d1e:	193c      	adds	r4, r7, r4
 8000d20:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d24:	d267      	bcs.n	8000df6 <__udivmoddi4+0x29a>
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d965      	bls.n	8000df6 <__udivmoddi4+0x29a>
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d32:	fba0 9302 	umull	r9, r3, r0, r2
 8000d36:	eba4 040c 	sub.w	r4, r4, ip
 8000d3a:	429c      	cmp	r4, r3
 8000d3c:	46ce      	mov	lr, r9
 8000d3e:	469c      	mov	ip, r3
 8000d40:	d351      	bcc.n	8000de6 <__udivmoddi4+0x28a>
 8000d42:	d04e      	beq.n	8000de2 <__udivmoddi4+0x286>
 8000d44:	b155      	cbz	r5, 8000d5c <__udivmoddi4+0x200>
 8000d46:	ebb8 030e 	subs.w	r3, r8, lr
 8000d4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d52:	40cb      	lsrs	r3, r1
 8000d54:	431e      	orrs	r6, r3
 8000d56:	40cc      	lsrs	r4, r1
 8000d58:	e9c5 6400 	strd	r6, r4, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e750      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000d60:	f1c2 0320 	rsb	r3, r2, #32
 8000d64:	fa20 f103 	lsr.w	r1, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d70:	4094      	lsls	r4, r2
 8000d72:	430c      	orrs	r4, r1
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d7c:	fa1f f78c 	uxth.w	r7, ip
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3110 	mls	r1, r8, r0, r3
 8000d88:	0c23      	lsrs	r3, r4, #16
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f107 	mul.w	r1, r0, r7
 8000d92:	4299      	cmp	r1, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x24c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d9e:	d22c      	bcs.n	8000dfa <__udivmoddi4+0x29e>
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d92a      	bls.n	8000dfa <__udivmoddi4+0x29e>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000db0:	fb08 3311 	mls	r3, r8, r1, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb01 f307 	mul.w	r3, r1, r7
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x276>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dc8:	d213      	bcs.n	8000df2 <__udivmoddi4+0x296>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d911      	bls.n	8000df2 <__udivmoddi4+0x296>
 8000dce:	3902      	subs	r1, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	1ae4      	subs	r4, r4, r3
 8000dd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd8:	e739      	b.n	8000c4e <__udivmoddi4+0xf2>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	e6f0      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e706      	b.n	8000bf0 <__udivmoddi4+0x94>
 8000de2:	45c8      	cmp	r8, r9
 8000de4:	d2ae      	bcs.n	8000d44 <__udivmoddi4+0x1e8>
 8000de6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dee:	3801      	subs	r0, #1
 8000df0:	e7a8      	b.n	8000d44 <__udivmoddi4+0x1e8>
 8000df2:	4631      	mov	r1, r6
 8000df4:	e7ed      	b.n	8000dd2 <__udivmoddi4+0x276>
 8000df6:	4603      	mov	r3, r0
 8000df8:	e799      	b.n	8000d2e <__udivmoddi4+0x1d2>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e7d4      	b.n	8000da8 <__udivmoddi4+0x24c>
 8000dfe:	46d6      	mov	lr, sl
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1a6>
 8000e02:	4463      	add	r3, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	e74d      	b.n	8000ca4 <__udivmoddi4+0x148>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e70f      	b.n	8000c30 <__udivmoddi4+0xd4>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	4463      	add	r3, ip
 8000e14:	e730      	b.n	8000c78 <__udivmoddi4+0x11c>
 8000e16:	bf00      	nop

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
WheelData::WheelData(
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	f107 0014 	add.w	r0, r7, #20
 8000e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		WheelSide WS_)

{

	hi2c = hi2c_;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	334c      	adds	r3, #76	@ 0x4c
 8000e32:	f107 0114 	add.w	r1, r7, #20
 8000e36:	2254      	movs	r2, #84	@ 0x54
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f008 f8a3 	bl	8008f84 <memcpy>

	htim = htim_;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3304      	adds	r3, #4
 8000e42:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8000e46:	2248      	movs	r2, #72	@ 0x48
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f008 f89b 	bl	8008f84 <memcpy>

	PWM_Channel = PWM_Channel_;
 8000e4e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

	GPIOx_INA = GPIOx_INA_;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8000e5e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	GPIO_Pin_INA = GPIO_Pin_INA_;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8000e68:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	PinState_INA = PinState_INA_;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f897 20bc 	ldrb.w	r2, [r7, #188]	@ 0xbc
 8000e72:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6

	GPIOx_INB = GPIOx_INB_;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8000e7c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	GPIO_Pin_INB = GPIO_Pin_INB_;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	@ 0xc4
 8000e86:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	PinState_INB = PinState_INB_;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f897 20c8 	ldrb.w	r2, [r7, #200]	@ 0xc8
 8000e90:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae

	ws = WS_;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f897 20cc 	ldrb.w	r2, [r7, #204]	@ 0xcc
 8000e9a:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf

	HAL_TIM_PWM_Start(&htim, PWM_Channel);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	1d1a      	adds	r2, r3, #4
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4610      	mov	r0, r2
 8000eac:	f004 f9c6 	bl	800523c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim, PWM_Channel, 0);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d104      	bne.n	8000ec4 <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide+0xa8>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ec2:	e017      	b.n	8000ef4 <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide+0xd8>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d104      	bne.n	8000ed8 <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide+0xbc>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ed6:	e00d      	b.n	8000ef4 <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide+0xd8>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d104      	bne.n	8000eec <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide+0xd0>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000eea:	e003      	b.n	8000ef4 <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide+0xd8>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	641a      	str	r2, [r3, #64]	@ 0x40

	PID_P = 0.01;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f34 <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide+0x118>)
 8000ef8:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
	PID_I = 0;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	f8c3 22ac 	str.w	r2, [r3, #684]	@ 0x2ac
	PID_D = 0;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0

	Target_Speed = 0;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	Current_Speed = 0;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

}
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f30:	b004      	add	sp, #16
 8000f32:	4770      	bx	lr
 8000f34:	3c23d70a 	.word	0x3c23d70a

08000f38 <_ZN9WheelData15ReadAS5600_CurrEf>:

void WheelData::ReadAS5600_Curr(float curr_) // pulling 0.5 ms
		{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b08e      	sub	sp, #56	@ 0x38
 8000f3c:	af04      	add	r7, sp, #16
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	ed87 0a00 	vstr	s0, [r7]
	uint8_t regData[2];

	HAL_I2C_Mem_Read(&hi2c, (I2C_AS5600 << 1), AS5600_ANGLE_H,
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8000f4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	2302      	movs	r3, #2
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	220e      	movs	r2, #14
 8000f5e:	216c      	movs	r1, #108	@ 0x6c
 8000f60:	f002 fe46 	bl	8003bf0 <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, (uint8_t*) &regData, 2, 0x10000);

	float tmpangle = ((float) (((uint16_t) regData[0] << 8
 8000f64:	7b3b      	ldrb	r3, [r7, #12]
 8000f66:	021b      	lsls	r3, r3, #8
			| (uint16_t) regData[1]) & (uint16_t) 0xFFF)) / 4096 * 360;
 8000f68:	7b7a      	ldrb	r2, [r7, #13]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
	float tmpangle = ((float) (((uint16_t) regData[0] << 8
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			| (uint16_t) regData[1]) & (uint16_t) 0xFFF)) / 4096 * 360;
 8000f78:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 80011a4 <_ZN9WheelData15ReadAS5600_CurrEf+0x26c>
 8000f7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float tmpangle = ((float) (((uint16_t) regData[0] << 8
 8000f80:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 80011a8 <_ZN9WheelData15ReadAS5600_CurrEf+0x270>
 8000f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f88:	edc7 7a06 	vstr	s15, [r7, #24]

	uint32_t tmpmsec = HAL_GetTick();
 8000f8c:	f001 faee 	bl	800256c <HAL_GetTick>
 8000f90:	6178      	str	r0, [r7, #20]




	float tmpCurrent_Speed = fabsf(
			(1000 * (tmpangle - angle[MAX_ANGLE_WHEEL_ARRAY - 1]))
 8000f92:	69b8      	ldr	r0, [r7, #24]
 8000f94:	f7ff fa88 	bl	80004a8 <__aeabi_f2d>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	@ 0x1a0
 8000f9e:	f7ff f923 	bl	80001e8 <__aeabi_dsub>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	4b7f      	ldr	r3, [pc, #508]	@ (80011ac <_ZN9WheelData15ReadAS5600_CurrEf+0x274>)
 8000fb0:	f7ff fad2 	bl	8000558 <__aeabi_dmul>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4614      	mov	r4, r2
 8000fba:	461d      	mov	r5, r3
					/ (tmpmsec - time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1]))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fa4c 	bl	8000464 <__aeabi_ui2d>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	4629      	mov	r1, r5
 8000fd4:	f7ff fbea 	bl	80007ac <__aeabi_ddiv>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fd54 	bl	8000a8c <__aeabi_d2f>
 8000fe4:	ee07 0a90 	vmov	s15, r0
	float tmpCurrent_Speed = fabsf(
 8000fe8:	eeb0 7ae7 	vabs.f32	s14, s15
			/ 360 * 60;
 8000fec:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80011a8 <_ZN9WheelData15ReadAS5600_CurrEf+0x270>
 8000ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float tmpCurrent_Speed = fabsf(
 8000ff4:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 80011b0 <_ZN9WheelData15ReadAS5600_CurrEf+0x278>
 8000ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffc:	edc7 7a04 	vstr	s15, [r7, #16]

	// сдвигаем в массиве все в сторону 0, в последнюю ячейку запишим новые данные
	for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8001000:	2301      	movs	r3, #1
 8001002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001006:	e04f      	b.n	80010a8 <_ZN9WheelData15ReadAS5600_CurrEf+0x170>
		angle[i - 1] = angle[i];
 8001008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800100c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001010:	1e51      	subs	r1, r2, #1
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	3321      	adds	r3, #33	@ 0x21
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	4413      	add	r3, r2
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	3121      	adds	r1, #33	@ 0x21
 8001022:	00c9      	lsls	r1, r1, #3
 8001024:	4401      	add	r1, r0
 8001026:	e9c1 2300 	strd	r2, r3, [r1]
		time_ms_wheel[i - 1] = time_ms_wheel[i];
 800102a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800102e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001032:	1e5a      	subs	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	312e      	adds	r1, #46	@ 0x2e
 8001038:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	322e      	adds	r2, #46	@ 0x2e
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		speed[i - 1] = speed[i];
 8001044:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800104c:	3b01      	subs	r3, #1
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	326a      	adds	r2, #106	@ 0x6a
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	440a      	add	r2, r1
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	336a      	adds	r3, #106	@ 0x6a
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	601a      	str	r2, [r3, #0]
		Disired_Target_diff[i - 1] = Disired_Target_diff[i];
 8001062:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001066:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800106a:	3b01      	subs	r3, #1
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	327e      	adds	r2, #126	@ 0x7e
 8001070:	0092      	lsls	r2, r2, #2
 8001072:	440a      	add	r2, r1
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	337e      	adds	r3, #126	@ 0x7e
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	601a      	str	r2, [r3, #0]
		curr[i - 1] = curr[i];
 8001080:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001088:	3b01      	subs	r3, #1
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	3292      	adds	r2, #146	@ 0x92
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	440a      	add	r2, r1
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	3392      	adds	r3, #146	@ 0x92
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 800109e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010a2:	3301      	adds	r3, #1
 80010a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80010a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010ac:	2b13      	cmp	r3, #19
 80010ae:	d9ab      	bls.n	8001008 <_ZN9WheelData15ReadAS5600_CurrEf+0xd0>
	};

    // текущая  скорость будт обновлена только если нет перехода угла через ноль

	if (((tmpangle-angle[MAX_ANGLE_WHEEL_ARRAY - 1])*(angle[MAX_ANGLE_WHEEL_ARRAY - 1]-angle[MAX_ANGLE_WHEEL_ARRAY - 2]))<0) {
 80010b0:	69b8      	ldr	r0, [r7, #24]
 80010b2:	f7ff f9f9 	bl	80004a8 <__aeabi_f2d>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	@ 0x1a0
 80010bc:	f7ff f894 	bl	80001e8 <__aeabi_dsub>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4614      	mov	r4, r2
 80010c6:	461d      	mov	r5, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	e9d3 0168 	ldrd	r0, r1, [r3, #416]	@ 0x1a0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	e9d3 2366 	ldrd	r2, r3, [r3, #408]	@ 0x198
 80010d4:	f7ff f888 	bl	80001e8 <__aeabi_dsub>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4620      	mov	r0, r4
 80010de:	4629      	mov	r1, r5
 80010e0:	f7ff fa3a 	bl	8000558 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	f7ff fca2 	bl	8000a3c <__aeabi_dcmplt>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d010      	beq.n	8001120 <_ZN9WheelData15ReadAS5600_CurrEf+0x1e8>
		angle[MAX_ANGLE_WHEEL_ARRAY - 1] = tmpangle;
 80010fe:	69b8      	ldr	r0, [r7, #24]
 8001100:	f7ff f9d2 	bl	80004a8 <__aeabi_f2d>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0
		time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1] = tmpmsec;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
		curr[MAX_ANGLE_WHEEL_ARRAY - 1] = curr_;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800111e:	e03e      	b.n	800119e <_ZN9WheelData15ReadAS5600_CurrEf+0x266>
		return;
	} else {
		angle[MAX_ANGLE_WHEEL_ARRAY - 1] = tmpangle;
 8001120:	69b8      	ldr	r0, [r7, #24]
 8001122:	f7ff f9c1 	bl	80004a8 <__aeabi_f2d>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0
		time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1] = tmpmsec;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
		speed[MAX_ANGLE_WHEEL_ARRAY - 1] = tmpCurrent_Speed;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4

		Disired_Target_diff[MAX_ANGLE_WHEEL_ARRAY - 1] = Target_Speed - tmpCurrent_Speed;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	ed93 7a2d 	vldr	s14, [r3, #180]	@ 0xb4
 8001146:	edd7 7a04 	vldr	s15, [r7, #16]
 800114a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	edc3 7a91 	vstr	s15, [r3, #580]	@ 0x244

		float tmpPID_sum_I = 0;
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
		for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 800115a:	2301      	movs	r3, #1
 800115c:	77fb      	strb	r3, [r7, #31]
 800115e:	e00f      	b.n	8001180 <_ZN9WheelData15ReadAS5600_CurrEf+0x248>
			tmpPID_sum_I = tmpPID_sum_I + Disired_Target_diff[i];
 8001160:	7ffb      	ldrb	r3, [r7, #31]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	337e      	adds	r3, #126	@ 0x7e
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001176:	edc7 7a08 	vstr	s15, [r7, #32]
		for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 800117a:	7ffb      	ldrb	r3, [r7, #31]
 800117c:	3301      	adds	r3, #1
 800117e:	77fb      	strb	r3, [r7, #31]
 8001180:	7ffb      	ldrb	r3, [r7, #31]
 8001182:	2b13      	cmp	r3, #19
 8001184:	d9ec      	bls.n	8001160 <_ZN9WheelData15ReadAS5600_CurrEf+0x228>
		}
		PID_sum_I = tmpPID_sum_I;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a3a      	ldr	r2, [r7, #32]
 800118a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4

		Current_Speed = tmpCurrent_Speed;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

		curr[MAX_ANGLE_WHEEL_ARRAY - 1] = curr_;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

	}



}
 800119e:	3728      	adds	r7, #40	@ 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}
 80011a4:	45800000 	.word	0x45800000
 80011a8:	43b40000 	.word	0x43b40000
 80011ac:	408f4000 	.word	0x408f4000
 80011b0:	42700000 	.word	0x42700000

080011b4 <_ZN9WheelData9Set_SpeedEf>:



void WheelData::Set_Speed(float Speed_) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	ed87 0a00 	vstr	s0, [r7]

	Target_Speed = fabsf(Speed_);
 80011c0:	edd7 7a00 	vldr	s15, [r7]
 80011c4:	eef0 7ae7 	vabs.f32	s15, s15
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4

	if (ws == wsLeft) {
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d135      	bne.n	8001244 <_ZN9WheelData9Set_SpeedEf+0x90>

		if (Speed_ > 0) {
 80011d8:	edd7 7a00 	vldr	s15, [r7]
 80011dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e4:	dd0a      	ble.n	80011fc <_ZN9WheelData9Set_SpeedEf+0x48>
			PinState_INA = GPIO_PIN_RESET;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
			PinState_INB = GPIO_PIN_SET;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			Direction = WH_CW;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
		};
		if (Speed_ < 0) {
 80011fc:	edd7 7a00 	vldr	s15, [r7]
 8001200:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	d50a      	bpl.n	8001220 <_ZN9WheelData9Set_SpeedEf+0x6c>
			PinState_INA = GPIO_PIN_SET;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
			PinState_INB = GPIO_PIN_RESET;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			Direction = WH_CCW;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
		};

		if (Speed_  == 0) {
 8001220:	edd7 7a00 	vldr	s15, [r7]
 8001224:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122c:	d10a      	bne.n	8001244 <_ZN9WheelData9Set_SpeedEf+0x90>
			PinState_INA = GPIO_PIN_RESET;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
			PinState_INB = GPIO_PIN_RESET;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			Direction = WH_STOP;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2202      	movs	r2, #2
 8001242:	701a      	strb	r2, [r3, #0]
		};
	}

	if (ws == wsRight) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 800124a:	2b01      	cmp	r3, #1
 800124c:	d135      	bne.n	80012ba <_ZN9WheelData9Set_SpeedEf+0x106>

		if (Speed_  < 0) {
 800124e:	edd7 7a00 	vldr	s15, [r7]
 8001252:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	d50a      	bpl.n	8001272 <_ZN9WheelData9Set_SpeedEf+0xbe>
			PinState_INA = GPIO_PIN_RESET;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
			PinState_INB = GPIO_PIN_SET;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			Direction = WH_CW;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
		};
		if (Speed_  > 0) {
 8001272:	edd7 7a00 	vldr	s15, [r7]
 8001276:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127e:	dd0a      	ble.n	8001296 <_ZN9WheelData9Set_SpeedEf+0xe2>
			PinState_INA = GPIO_PIN_SET;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
			PinState_INB = GPIO_PIN_RESET;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			Direction = WH_CCW;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
		};

		if (Speed_  == 0) {
 8001296:	edd7 7a00 	vldr	s15, [r7]
 800129a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	d10a      	bne.n	80012ba <_ZN9WheelData9Set_SpeedEf+0x106>
			PinState_INA = GPIO_PIN_RESET;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
			PinState_INB = GPIO_PIN_RESET;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			Direction = WH_STOP;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2202      	movs	r2, #2
 80012b8:	701a      	strb	r2, [r3, #0]
		};
	}

	HAL_GPIO_WritePin(GPIOx_INA, GPIO_Pin_INA, PinState_INA);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	@ 0xa4
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 80012cc:	461a      	mov	r2, r3
 80012ce:	f002 fb17 	bl	8003900 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx_INB, GPIO_Pin_INB, PinState_INB);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f8b3 10ac 	ldrh.w	r1, [r3, #172]	@ 0xac
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 80012e4:	461a      	mov	r2, r3
 80012e6:	f002 fb0b 	bl	8003900 <HAL_GPIO_WritePin>

}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <_ZN9WheelData11CalculationEv>:


void WheelData::Calculation(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	if (fabsf(Target_Speed) > 0) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8001302:	eef0 7ae7 	vabs.f32	s15, s15
 8001306:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800130a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130e:	dd79      	ble.n	8001404 <_ZN9WheelData11CalculationEv+0x110>
		PID_value_P =  PID_P * (Target_Speed - Current_Speed);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	ed93 7aaa 	vldr	s14, [r3, #680]	@ 0x2a8
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	edd3 6a2d 	vldr	s13, [r3, #180]	@ 0xb4
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8001322:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	edc3 7aa8 	vstr	s15, [r3, #672]	@ 0x2a0

		if (PID_value_P > 20)  { PID_value_P = 20;  };
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	edd3 7aa8 	vldr	s15, [r3, #672]	@ 0x2a0
 8001336:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800133a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	dd03      	ble.n	800134c <_ZN9WheelData11CalculationEv+0x58>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a52      	ldr	r2, [pc, #328]	@ (8001490 <_ZN9WheelData11CalculationEv+0x19c>)
 8001348:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0
		if (PID_value_P < -20) { PID_value_P = -20;	};
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	edd3 7aa8 	vldr	s15, [r3, #672]	@ 0x2a0
 8001352:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8001356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135e:	d503      	bpl.n	8001368 <_ZN9WheelData11CalculationEv+0x74>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a4c      	ldr	r2, [pc, #304]	@ (8001494 <_ZN9WheelData11CalculationEv+0x1a0>)
 8001364:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0

		PID_sum_I = 0;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
		for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8001372:	2301      	movs	r3, #1
 8001374:	73fb      	strb	r3, [r7, #15]
 8001376:	e011      	b.n	800139c <_ZN9WheelData11CalculationEv+0xa8>
			PID_sum_I = PID_sum_I + Disired_Target_diff[i];
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	ed93 7aad 	vldr	s14, [r3, #692]	@ 0x2b4
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	337e      	adds	r3, #126	@ 0x7e
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edc3 7aad 	vstr	s15, [r3, #692]	@ 0x2b4
		for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	3301      	adds	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	2b13      	cmp	r3, #19
 80013a0:	d9ea      	bls.n	8001378 <_ZN9WheelData11CalculationEv+0x84>
		}

		PWM_Value = PWM_Value + PID_value_P  + PID_I * PID_sum_I;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	ed93 7aa7 	vldr	s14, [r3, #668]	@ 0x29c
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	edd3 7aa8 	vldr	s15, [r3, #672]	@ 0x2a0
 80013ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	edd3 6aab 	vldr	s13, [r3, #684]	@ 0x2ac
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	edd3 7aad 	vldr	s15, [r3, #692]	@ 0x2b4
 80013be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edc3 7aa7 	vstr	s15, [r3, #668]	@ 0x29c

		if (PWM_Value < 0)     {PWM_Value = 0;	};
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 80013d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	d504      	bpl.n	80013e6 <_ZN9WheelData11CalculationEv+0xf2>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	f8c3 229c 	str.w	r2, [r3, #668]	@ 0x29c
		if (PWM_Value > 50000) {PWM_Value = 50000; };
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 80013ec:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001498 <_ZN9WheelData11CalculationEv+0x1a4>
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd09      	ble.n	800140e <_ZN9WheelData11CalculationEv+0x11a>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a27      	ldr	r2, [pc, #156]	@ (800149c <_ZN9WheelData11CalculationEv+0x1a8>)
 80013fe:	f8c3 229c 	str.w	r2, [r3, #668]	@ 0x29c
 8001402:	e004      	b.n	800140e <_ZN9WheelData11CalculationEv+0x11a>


	} else {

		PWM_Value = 0;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	f8c3 229c 	str.w	r2, [r3, #668]	@ 0x29c

	}

	__HAL_TIM_SET_COMPARE(&htim, PWM_Channel,
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10a      	bne.n	800142e <_ZN9WheelData11CalculationEv+0x13a>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001426:	ee17 2a90 	vmov	r2, s15
 800142a:	635a      	str	r2, [r3, #52]	@ 0x34
			(uint32_t) PWM_Value);
}
 800142c:	e029      	b.n	8001482 <_ZN9WheelData11CalculationEv+0x18e>
	__HAL_TIM_SET_COMPARE(&htim, PWM_Channel,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
 8001434:	2b04      	cmp	r3, #4
 8001436:	d10a      	bne.n	800144e <_ZN9WheelData11CalculationEv+0x15a>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001446:	ee17 2a90 	vmov	r2, s15
 800144a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800144c:	e019      	b.n	8001482 <_ZN9WheelData11CalculationEv+0x18e>
	__HAL_TIM_SET_COMPARE(&htim, PWM_Channel,
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
 8001454:	2b08      	cmp	r3, #8
 8001456:	d10a      	bne.n	800146e <_ZN9WheelData11CalculationEv+0x17a>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001466:	ee17 2a90 	vmov	r2, s15
 800146a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800146c:	e009      	b.n	8001482 <_ZN9WheelData11CalculationEv+0x18e>
	__HAL_TIM_SET_COMPARE(&htim, PWM_Channel,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800147c:	ee17 2a90 	vmov	r2, s15
 8001480:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	41a00000 	.word	0x41a00000
 8001494:	c1a00000 	.word	0xc1a00000
 8001498:	47435000 	.word	0x47435000
 800149c:	47435000 	.word	0x47435000

080014a0 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001520 <HAL_ADC_ConvCpltCallback+0x80>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d129      	bne.n	8001506 <HAL_ADC_ConvCpltCallback+0x66>
  {
    for (uint8_t i = 0; i < ADC_CHANNELS_NUM; i++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	e023      	b.n	8001500 <HAL_ADC_ConvCpltCallback+0x60>
    {
      adcVoltage[i] = adcData[i] * 3.3 / 4095;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001524 <HAL_ADC_ConvCpltCallback+0x84>)
 80014bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ffdf 	bl	8000484 <__aeabi_i2d>
 80014c6:	a312      	add	r3, pc, #72	@ (adr r3, 8001510 <HAL_ADC_ConvCpltCallback+0x70>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7ff f844 	bl	8000558 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	a30f      	add	r3, pc, #60	@ (adr r3, 8001518 <HAL_ADC_ConvCpltCallback+0x78>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f965 	bl	80007ac <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	7bfc      	ldrb	r4, [r7, #15]
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff face 	bl	8000a8c <__aeabi_d2f>
 80014f0:	4602      	mov	r2, r0
 80014f2:	490d      	ldr	r1, [pc, #52]	@ (8001528 <HAL_ADC_ConvCpltCallback+0x88>)
 80014f4:	00a3      	lsls	r3, r4, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < ADC_CHANNELS_NUM; i++)
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	3301      	adds	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d9d8      	bls.n	80014b8 <HAL_ADC_ConvCpltCallback+0x18>
    }
  }
}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	bf00      	nop
 8001510:	66666666 	.word	0x66666666
 8001514:	400a6666 	.word	0x400a6666
 8001518:	00000000 	.word	0x00000000
 800151c:	40affe00 	.word	0x40affe00
 8001520:	40012000 	.word	0x40012000
 8001524:	200002c4 	.word	0x200002c4
 8001528:	200002ec 	.word	0x200002ec

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	b5b0      	push	{r4, r5, r7, lr}
 800152e:	b0ac      	sub	sp, #176	@ 0xb0
 8001530:	af2c      	add	r7, sp, #176	@ 0xb0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001532:	f000 ffe5 	bl	8002500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001536:	f000 f8c5 	bl	80016c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153a:	f000 fb8b 	bl	8001c54 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800153e:	f000 fb69 	bl	8001c14 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001542:	f000 f997 	bl	8001874 <_ZL12MX_I2C1_Initv>
  MX_ADC1_Init();
 8001546:	f000 f927 	bl	8001798 <_ZL12MX_ADC1_Initv>
  MX_I2C2_Init();
 800154a:	f000 f9c7 	bl	80018dc <_ZL12MX_I2C2_Initv>
  MX_TIM2_Init();
 800154e:	f000 fb05 	bl	8001b5c <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 8001552:	f000 fa33 	bl	80019bc <_ZL12MX_TIM1_Initv>
  MX_SPI2_Init();
 8001556:	f000 f9f5 	bl	8001944 <_ZL12MX_SPI2_Initv>





  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 800155a:	4846      	ldr	r0, [pc, #280]	@ (8001674 <main+0x148>)
 800155c:	f003 fdb2 	bl	80050c4 <HAL_TIM_Base_Start_IT>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	bf14      	ite	ne
 8001566:	2301      	movne	r3, #1
 8001568:	2300      	moveq	r3, #0
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <main+0x48>
  {
    /* Starting Error */
    Error_Handler();
 8001570:	f000 fc84 	bl	8001e7c <Error_Handler>
 clLeftW = new WheelData(hi2c2, htim1,
	TIM_CHANNEL_1,
	GPIOB,
	R_INA_Pin, GPIO_PIN_RESET,
	GPIOB,
	R_INB_Pin, GPIO_PIN_RESET, wsLeft);
 8001574:	f44f 702e 	mov.w	r0, #696	@ 0x2b8
 8001578:	f007 fb4e 	bl	8008c18 <_Znwj>
 800157c:	4603      	mov	r3, r0
 800157e:	461d      	mov	r5, r3
 8001580:	4c3d      	ldr	r4, [pc, #244]	@ (8001678 <main+0x14c>)
 8001582:	2300      	movs	r3, #0
 8001584:	932b      	str	r3, [sp, #172]	@ 0xac
 8001586:	2300      	movs	r3, #0
 8001588:	932a      	str	r3, [sp, #168]	@ 0xa8
 800158a:	2302      	movs	r3, #2
 800158c:	9329      	str	r3, [sp, #164]	@ 0xa4
 800158e:	4b3b      	ldr	r3, [pc, #236]	@ (800167c <main+0x150>)
 8001590:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001592:	2300      	movs	r3, #0
 8001594:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001596:	2301      	movs	r3, #1
 8001598:	9326      	str	r3, [sp, #152]	@ 0x98
 800159a:	4b38      	ldr	r3, [pc, #224]	@ (800167c <main+0x150>)
 800159c:	9325      	str	r3, [sp, #148]	@ 0x94
 800159e:	2300      	movs	r3, #0
 80015a0:	9324      	str	r3, [sp, #144]	@ 0x90
 80015a2:	4a37      	ldr	r2, [pc, #220]	@ (8001680 <main+0x154>)
 80015a4:	ab12      	add	r3, sp, #72	@ 0x48
 80015a6:	4611      	mov	r1, r2
 80015a8:	2248      	movs	r2, #72	@ 0x48
 80015aa:	4618      	mov	r0, r3
 80015ac:	f007 fcea 	bl	8008f84 <memcpy>
 80015b0:	4668      	mov	r0, sp
 80015b2:	f104 030c 	add.w	r3, r4, #12
 80015b6:	2248      	movs	r2, #72	@ 0x48
 80015b8:	4619      	mov	r1, r3
 80015ba:	f007 fce3 	bl	8008f84 <memcpy>
 80015be:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80015c2:	4628      	mov	r0, r5
 80015c4:	f7ff fc2a 	bl	8000e1c <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide>
 clLeftW = new WheelData(hi2c2, htim1,
 80015c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001684 <main+0x158>)
 80015ca:	601d      	str	r5, [r3, #0]
	clRightW = new WheelData(hi2c1, htim1,
	TIM_CHANNEL_4,
	GPIOA,
	L_INA_Pin, GPIO_PIN_RESET,
	GPIOA,
	L_INB_Pin, GPIO_PIN_RESET, wsRight);
 80015cc:	f44f 702e 	mov.w	r0, #696	@ 0x2b8
 80015d0:	f007 fb22 	bl	8008c18 <_Znwj>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461d      	mov	r5, r3
 80015d8:	4c2b      	ldr	r4, [pc, #172]	@ (8001688 <main+0x15c>)
 80015da:	2301      	movs	r3, #1
 80015dc:	932b      	str	r3, [sp, #172]	@ 0xac
 80015de:	2300      	movs	r3, #0
 80015e0:	932a      	str	r3, [sp, #168]	@ 0xa8
 80015e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015e6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80015e8:	4b28      	ldr	r3, [pc, #160]	@ (800168c <main+0x160>)
 80015ea:	9328      	str	r3, [sp, #160]	@ 0xa0
 80015ec:	2300      	movs	r3, #0
 80015ee:	9327      	str	r3, [sp, #156]	@ 0x9c
 80015f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015f4:	9326      	str	r3, [sp, #152]	@ 0x98
 80015f6:	4b25      	ldr	r3, [pc, #148]	@ (800168c <main+0x160>)
 80015f8:	9325      	str	r3, [sp, #148]	@ 0x94
 80015fa:	230c      	movs	r3, #12
 80015fc:	9324      	str	r3, [sp, #144]	@ 0x90
 80015fe:	4a20      	ldr	r2, [pc, #128]	@ (8001680 <main+0x154>)
 8001600:	ab12      	add	r3, sp, #72	@ 0x48
 8001602:	4611      	mov	r1, r2
 8001604:	2248      	movs	r2, #72	@ 0x48
 8001606:	4618      	mov	r0, r3
 8001608:	f007 fcbc 	bl	8008f84 <memcpy>
 800160c:	4668      	mov	r0, sp
 800160e:	f104 030c 	add.w	r3, r4, #12
 8001612:	2248      	movs	r2, #72	@ 0x48
 8001614:	4619      	mov	r1, r3
 8001616:	f007 fcb5 	bl	8008f84 <memcpy>
 800161a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800161e:	4628      	mov	r0, r5
 8001620:	f7ff fbfc 	bl	8000e1c <_ZN9WheelDataC1E17I2C_HandleTypeDef17TIM_HandleTypeDeftP12GPIO_TypeDeft13GPIO_PinStateS3_tS4_9WheelSide>
	clRightW = new WheelData(hi2c1, htim1,
 8001624:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <main+0x164>)
 8001626:	601d      	str	r5, [r3, #0]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001628:	f004 fd4a 	bl	80060c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800162c:	4a19      	ldr	r2, [pc, #100]	@ (8001694 <main+0x168>)
 800162e:	2100      	movs	r1, #0
 8001630:	4819      	ldr	r0, [pc, #100]	@ (8001698 <main+0x16c>)
 8001632:	f004 fd8f 	bl	8006154 <osThreadNew>
 8001636:	4603      	mov	r3, r0
 8001638:	4a18      	ldr	r2, [pc, #96]	@ (800169c <main+0x170>)
 800163a:	6013      	str	r3, [r2, #0]

  /* creation of Task1ms */
  Task1msHandle = osThreadNew(Task1msHandler, NULL, &Task1ms_attributes);
 800163c:	4a18      	ldr	r2, [pc, #96]	@ (80016a0 <main+0x174>)
 800163e:	2100      	movs	r1, #0
 8001640:	4818      	ldr	r0, [pc, #96]	@ (80016a4 <main+0x178>)
 8001642:	f004 fd87 	bl	8006154 <osThreadNew>
 8001646:	4603      	mov	r3, r0
 8001648:	4a17      	ldr	r2, [pc, #92]	@ (80016a8 <main+0x17c>)
 800164a:	6013      	str	r3, [r2, #0]

  /* creation of Task10ms */
  Task10msHandle = osThreadNew(Task10msHandler, NULL, &Task10ms_attributes);
 800164c:	4a17      	ldr	r2, [pc, #92]	@ (80016ac <main+0x180>)
 800164e:	2100      	movs	r1, #0
 8001650:	4817      	ldr	r0, [pc, #92]	@ (80016b0 <main+0x184>)
 8001652:	f004 fd7f 	bl	8006154 <osThreadNew>
 8001656:	4603      	mov	r3, r0
 8001658:	4a16      	ldr	r2, [pc, #88]	@ (80016b4 <main+0x188>)
 800165a:	6013      	str	r3, [r2, #0]

  /* creation of Task100ms */
  Task100msHandle = osThreadNew(Task100msHandler, NULL, &Task100ms_attributes);
 800165c:	4a16      	ldr	r2, [pc, #88]	@ (80016b8 <main+0x18c>)
 800165e:	2100      	movs	r1, #0
 8001660:	4816      	ldr	r0, [pc, #88]	@ (80016bc <main+0x190>)
 8001662:	f004 fd77 	bl	8006154 <osThreadNew>
 8001666:	4603      	mov	r3, r0
 8001668:	4a15      	ldr	r2, [pc, #84]	@ (80016c0 <main+0x194>)
 800166a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800166c:	f004 fd4c 	bl	8006108 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <main+0x144>
 8001674:	2000026c 	.word	0x2000026c
 8001678:	20000178 	.word	0x20000178
 800167c:	40020400 	.word	0x40020400
 8001680:	20000224 	.word	0x20000224
 8001684:	2000033c 	.word	0x2000033c
 8001688:	20000124 	.word	0x20000124
 800168c:	40020000 	.word	0x40020000
 8001690:	20000340 	.word	0x20000340
 8001694:	08009090 	.word	0x08009090
 8001698:	08001d9d 	.word	0x08001d9d
 800169c:	200002b4 	.word	0x200002b4
 80016a0:	080090b4 	.word	0x080090b4
 80016a4:	08001dad 	.word	0x08001dad
 80016a8:	200002b8 	.word	0x200002b8
 80016ac:	080090d8 	.word	0x080090d8
 80016b0:	08001db9 	.word	0x08001db9
 80016b4:	200002bc 	.word	0x200002bc
 80016b8:	080090fc 	.word	0x080090fc
 80016bc:	08001de1 	.word	0x08001de1
 80016c0:	200002c0 	.word	0x200002c0

080016c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b094      	sub	sp, #80	@ 0x50
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	2230      	movs	r2, #48	@ 0x30
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f007 fb78 	bl	8008dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	4b28      	ldr	r3, [pc, #160]	@ (8001790 <_Z18SystemClock_Configv+0xcc>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f0:	4a27      	ldr	r2, [pc, #156]	@ (8001790 <_Z18SystemClock_Configv+0xcc>)
 80016f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f8:	4b25      	ldr	r3, [pc, #148]	@ (8001790 <_Z18SystemClock_Configv+0xcc>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <_Z18SystemClock_Configv+0xd0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001710:	4a20      	ldr	r2, [pc, #128]	@ (8001794 <_Z18SystemClock_Configv+0xd0>)
 8001712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <_Z18SystemClock_Configv+0xd0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001724:	2302      	movs	r3, #2
 8001726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001728:	2301      	movs	r3, #1
 800172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800172c:	2310      	movs	r3, #16
 800172e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001730:	2300      	movs	r3, #0
 8001732:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001734:	f107 0320 	add.w	r3, r7, #32
 8001738:	4618      	mov	r0, r3
 800173a:	f002 ff61 	bl	8004600 <HAL_RCC_OscConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf14      	ite	ne
 8001744:	2301      	movne	r3, #1
 8001746:	2300      	moveq	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800174e:	f000 fb95 	bl	8001e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f003 f9bf 	bl	8004af0 <HAL_RCC_ClockConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	bf14      	ite	ne
 8001778:	2301      	movne	r3, #1
 800177a:	2300      	moveq	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8001782:	f000 fb7b 	bl	8001e7c <Error_Handler>
  }
}
 8001786:	bf00      	nop
 8001788:	3750      	adds	r7, #80	@ 0x50
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000

08001798 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800179e:	463b      	mov	r3, r7
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <_ZL12MX_ADC1_Initv+0xd0>)
 80017ac:	4a2f      	ldr	r2, [pc, #188]	@ (800186c <_ZL12MX_ADC1_Initv+0xd4>)
 80017ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001868 <_ZL12MX_ADC1_Initv+0xd0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001868 <_ZL12MX_ADC1_Initv+0xd0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80017bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001868 <_ZL12MX_ADC1_Initv+0xd0>)
 80017be:	2201      	movs	r2, #1
 80017c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017c2:	4b29      	ldr	r3, [pc, #164]	@ (8001868 <_ZL12MX_ADC1_Initv+0xd0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017c8:	4b27      	ldr	r3, [pc, #156]	@ (8001868 <_ZL12MX_ADC1_Initv+0xd0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017d0:	4b25      	ldr	r3, [pc, #148]	@ (8001868 <_ZL12MX_ADC1_Initv+0xd0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017d6:	4b24      	ldr	r3, [pc, #144]	@ (8001868 <_ZL12MX_ADC1_Initv+0xd0>)
 80017d8:	4a25      	ldr	r2, [pc, #148]	@ (8001870 <_ZL12MX_ADC1_Initv+0xd8>)
 80017da:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017dc:	4b22      	ldr	r3, [pc, #136]	@ (8001868 <_ZL12MX_ADC1_Initv+0xd0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80017e2:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <_ZL12MX_ADC1_Initv+0xd0>)
 80017e4:	2202      	movs	r2, #2
 80017e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001868 <_ZL12MX_ADC1_Initv+0xd0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001868 <_ZL12MX_ADC1_Initv+0xd0>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017f6:	481c      	ldr	r0, [pc, #112]	@ (8001868 <_ZL12MX_ADC1_Initv+0xd0>)
 80017f8:	f000 fec4 	bl	8002584 <HAL_ADC_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	bf14      	ite	ne
 8001802:	2301      	movne	r3, #1
 8001804:	2300      	moveq	r3, #0
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 800180c:	f000 fb36 	bl	8001e7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001810:	2300      	movs	r3, #0
 8001812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001814:	2301      	movs	r3, #1
 8001816:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001818:	2303      	movs	r3, #3
 800181a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800181c:	463b      	mov	r3, r7
 800181e:	4619      	mov	r1, r3
 8001820:	4811      	ldr	r0, [pc, #68]	@ (8001868 <_ZL12MX_ADC1_Initv+0xd0>)
 8001822:	f000 fff7 	bl	8002814 <HAL_ADC_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf14      	ite	ne
 800182c:	2301      	movne	r3, #1
 800182e:	2300      	moveq	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8001836:	f000 fb21 	bl	8001e7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800183a:	2301      	movs	r3, #1
 800183c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800183e:	2302      	movs	r3, #2
 8001840:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001842:	463b      	mov	r3, r7
 8001844:	4619      	mov	r1, r3
 8001846:	4808      	ldr	r0, [pc, #32]	@ (8001868 <_ZL12MX_ADC1_Initv+0xd0>)
 8001848:	f000 ffe4 	bl	8002814 <HAL_ADC_ConfigChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	bf14      	ite	ne
 8001852:	2301      	movne	r3, #1
 8001854:	2300      	moveq	r3, #0
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <_ZL12MX_ADC1_Initv+0xc8>
  {
    Error_Handler();
 800185c:	f000 fb0e 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2000007c 	.word	0x2000007c
 800186c:	40012000 	.word	0x40012000
 8001870:	0f000001 	.word	0x0f000001

08001874 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001878:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <_ZL12MX_I2C1_Initv+0x5c>)
 800187a:	4a16      	ldr	r2, [pc, #88]	@ (80018d4 <_ZL12MX_I2C1_Initv+0x60>)
 800187c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800187e:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001880:	4a15      	ldr	r2, [pc, #84]	@ (80018d8 <_ZL12MX_I2C1_Initv+0x64>)
 8001882:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <_ZL12MX_I2C1_Initv+0x5c>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001890:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001892:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001896:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001898:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <_ZL12MX_I2C1_Initv+0x5c>)
 800189a:	2200      	movs	r2, #0
 800189c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800189e:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <_ZL12MX_I2C1_Initv+0x5c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <_ZL12MX_I2C1_Initv+0x5c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <_ZL12MX_I2C1_Initv+0x5c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018b0:	4807      	ldr	r0, [pc, #28]	@ (80018d0 <_ZL12MX_I2C1_Initv+0x5c>)
 80018b2:	f002 f859 	bl	8003968 <HAL_I2C_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf14      	ite	ne
 80018bc:	2301      	movne	r3, #1
 80018be:	2300      	moveq	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80018c6:	f000 fad9 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000124 	.word	0x20000124
 80018d4:	40005400 	.word	0x40005400
 80018d8:	000186a0 	.word	0x000186a0

080018dc <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018e0:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <_ZL12MX_I2C2_Initv+0x5c>)
 80018e2:	4a16      	ldr	r2, [pc, #88]	@ (800193c <_ZL12MX_I2C2_Initv+0x60>)
 80018e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <_ZL12MX_I2C2_Initv+0x5c>)
 80018e8:	4a15      	ldr	r2, [pc, #84]	@ (8001940 <_ZL12MX_I2C2_Initv+0x64>)
 80018ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <_ZL12MX_I2C2_Initv+0x5c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <_ZL12MX_I2C2_Initv+0x5c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <_ZL12MX_I2C2_Initv+0x5c>)
 80018fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001900:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <_ZL12MX_I2C2_Initv+0x5c>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <_ZL12MX_I2C2_Initv+0x5c>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800190c:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <_ZL12MX_I2C2_Initv+0x5c>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001912:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <_ZL12MX_I2C2_Initv+0x5c>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001918:	4807      	ldr	r0, [pc, #28]	@ (8001938 <_ZL12MX_I2C2_Initv+0x5c>)
 800191a:	f002 f825 	bl	8003968 <HAL_I2C_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf14      	ite	ne
 8001924:	2301      	movne	r3, #1
 8001926:	2300      	moveq	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 800192e:	f000 faa5 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000178 	.word	0x20000178
 800193c:	40005800 	.word	0x40005800
 8001940:	000186a0 	.word	0x000186a0

08001944 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001948:	4b1a      	ldr	r3, [pc, #104]	@ (80019b4 <_ZL12MX_SPI2_Initv+0x70>)
 800194a:	4a1b      	ldr	r2, [pc, #108]	@ (80019b8 <_ZL12MX_SPI2_Initv+0x74>)
 800194c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800194e:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <_ZL12MX_SPI2_Initv+0x70>)
 8001950:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001954:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001956:	4b17      	ldr	r3, [pc, #92]	@ (80019b4 <_ZL12MX_SPI2_Initv+0x70>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800195c:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <_ZL12MX_SPI2_Initv+0x70>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001962:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <_ZL12MX_SPI2_Initv+0x70>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <_ZL12MX_SPI2_Initv+0x70>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <_ZL12MX_SPI2_Initv+0x70>)
 8001970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001974:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001976:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <_ZL12MX_SPI2_Initv+0x70>)
 8001978:	2200      	movs	r2, #0
 800197a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800197c:	4b0d      	ldr	r3, [pc, #52]	@ (80019b4 <_ZL12MX_SPI2_Initv+0x70>)
 800197e:	2200      	movs	r2, #0
 8001980:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001982:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <_ZL12MX_SPI2_Initv+0x70>)
 8001984:	2200      	movs	r2, #0
 8001986:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001988:	4b0a      	ldr	r3, [pc, #40]	@ (80019b4 <_ZL12MX_SPI2_Initv+0x70>)
 800198a:	2200      	movs	r2, #0
 800198c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <_ZL12MX_SPI2_Initv+0x70>)
 8001990:	220a      	movs	r2, #10
 8001992:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001994:	4807      	ldr	r0, [pc, #28]	@ (80019b4 <_ZL12MX_SPI2_Initv+0x70>)
 8001996:	f003 fabd 	bl	8004f14 <HAL_SPI_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf14      	ite	ne
 80019a0:	2301      	movne	r3, #1
 80019a2:	2300      	moveq	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 80019aa:	f000 fa67 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200001cc 	.word	0x200001cc
 80019b8:	40003800 	.word	0x40003800

080019bc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b096      	sub	sp, #88	@ 0x58
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2220      	movs	r2, #32
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f007 f9e7 	bl	8008dc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019fa:	4b56      	ldr	r3, [pc, #344]	@ (8001b54 <_ZL12MX_TIM1_Initv+0x198>)
 80019fc:	4a56      	ldr	r2, [pc, #344]	@ (8001b58 <_ZL12MX_TIM1_Initv+0x19c>)
 80019fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a00:	4b54      	ldr	r3, [pc, #336]	@ (8001b54 <_ZL12MX_TIM1_Initv+0x198>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	4b53      	ldr	r3, [pc, #332]	@ (8001b54 <_ZL12MX_TIM1_Initv+0x198>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a0c:	4b51      	ldr	r3, [pc, #324]	@ (8001b54 <_ZL12MX_TIM1_Initv+0x198>)
 8001a0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a14:	4b4f      	ldr	r3, [pc, #316]	@ (8001b54 <_ZL12MX_TIM1_Initv+0x198>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8001b54 <_ZL12MX_TIM1_Initv+0x198>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a20:	4b4c      	ldr	r3, [pc, #304]	@ (8001b54 <_ZL12MX_TIM1_Initv+0x198>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a26:	484b      	ldr	r0, [pc, #300]	@ (8001b54 <_ZL12MX_TIM1_Initv+0x198>)
 8001a28:	f003 fafd 	bl	8005026 <HAL_TIM_Base_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bf14      	ite	ne
 8001a32:	2301      	movne	r3, #1
 8001a34:	2300      	moveq	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8001a3c:	f000 fa1e 	bl	8001e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a44:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a46:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4841      	ldr	r0, [pc, #260]	@ (8001b54 <_ZL12MX_TIM1_Initv+0x198>)
 8001a4e:	f003 fe57 	bl	8005700 <HAL_TIM_ConfigClockSource>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf14      	ite	ne
 8001a58:	2301      	movne	r3, #1
 8001a5a:	2300      	moveq	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8001a62:	f000 fa0b 	bl	8001e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a66:	483b      	ldr	r0, [pc, #236]	@ (8001b54 <_ZL12MX_TIM1_Initv+0x198>)
 8001a68:	f003 fb8e 	bl	8005188 <HAL_TIM_PWM_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8001a7c:	f000 f9fe 	bl	8001e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a88:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4831      	ldr	r0, [pc, #196]	@ (8001b54 <_ZL12MX_TIM1_Initv+0x198>)
 8001a90:	f004 f9fe 	bl	8005e90 <HAL_TIMEx_MasterConfigSynchronization>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bf14      	ite	ne
 8001a9a:	2301      	movne	r3, #1
 8001a9c:	2300      	moveq	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8001aa4:	f000 f9ea 	bl	8001e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa8:	2360      	movs	r3, #96	@ 0x60
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4619      	mov	r1, r3
 8001acc:	4821      	ldr	r0, [pc, #132]	@ (8001b54 <_ZL12MX_TIM1_Initv+0x198>)
 8001ace:	f003 fd55 	bl	800557c <HAL_TIM_PWM_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf14      	ite	ne
 8001ad8:	2301      	movne	r3, #1
 8001ada:	2300      	moveq	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8001ae2:	f000 f9cb 	bl	8001e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aea:	220c      	movs	r2, #12
 8001aec:	4619      	mov	r1, r3
 8001aee:	4819      	ldr	r0, [pc, #100]	@ (8001b54 <_ZL12MX_TIM1_Initv+0x198>)
 8001af0:	f003 fd44 	bl	800557c <HAL_TIM_PWM_ConfigChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	bf14      	ite	ne
 8001afa:	2301      	movne	r3, #1
 8001afc:	2300      	moveq	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8001b04:	f000 f9ba 	bl	8001e7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480a      	ldr	r0, [pc, #40]	@ (8001b54 <_ZL12MX_TIM1_Initv+0x198>)
 8001b2c:	f004 fa1e 	bl	8005f6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf14      	ite	ne
 8001b36:	2301      	movne	r3, #1
 8001b38:	2300      	moveq	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <_ZL12MX_TIM1_Initv+0x188>
  {
    Error_Handler();
 8001b40:	f000 f99c 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b44:	4803      	ldr	r0, [pc, #12]	@ (8001b54 <_ZL12MX_TIM1_Initv+0x198>)
 8001b46:	f000 fb5b 	bl	8002200 <HAL_TIM_MspPostInit>

}
 8001b4a:	bf00      	nop
 8001b4c:	3758      	adds	r7, #88	@ 0x58
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000224 	.word	0x20000224
 8001b58:	40010000 	.word	0x40010000

08001b5c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b70:	463b      	mov	r3, r7
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b78:	4b25      	ldr	r3, [pc, #148]	@ (8001c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 8001b80:	4b23      	ldr	r3, [pc, #140]	@ (8001c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b82:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001b86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001b8e:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b90:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	@ (8001c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ba2:	481b      	ldr	r0, [pc, #108]	@ (8001c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8001ba4:	f003 fa3f 	bl	8005026 <HAL_TIM_Base_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	bf14      	ite	ne
 8001bae:	2301      	movne	r3, #1
 8001bb0:	2300      	moveq	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8001bb8:	f000 f960 	bl	8001e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bc2:	f107 0308 	add.w	r3, r7, #8
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4811      	ldr	r0, [pc, #68]	@ (8001c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8001bca:	f003 fd99 	bl	8005700 <HAL_TIM_ConfigClockSource>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8001bde:	f000 f94d 	bl	8001e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bea:	463b      	mov	r3, r7
 8001bec:	4619      	mov	r1, r3
 8001bee:	4808      	ldr	r0, [pc, #32]	@ (8001c10 <_ZL12MX_TIM2_Initv+0xb4>)
 8001bf0:	f004 f94e 	bl	8005e90 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bf14      	ite	ne
 8001bfa:	2301      	movne	r3, #1
 8001bfc:	2300      	moveq	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8001c04:	f000 f93a 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	2000026c 	.word	0x2000026c

08001c14 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <_ZL11MX_DMA_Initv+0x3c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	4a0b      	ldr	r2, [pc, #44]	@ (8001c50 <_ZL11MX_DMA_Initv+0x3c>)
 8001c24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2a:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <_ZL11MX_DMA_Initv+0x3c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2105      	movs	r1, #5
 8001c3a:	2038      	movs	r0, #56	@ 0x38
 8001c3c:	f001 f942 	bl	8002ec4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c40:	2038      	movs	r0, #56	@ 0x38
 8001c42:	f001 f95b 	bl	8002efc <HAL_NVIC_EnableIRQ>

}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800

08001c54 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	@ 0x28
 8001c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	4b47      	ldr	r3, [pc, #284]	@ (8001d8c <_ZL12MX_GPIO_Initv+0x138>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a46      	ldr	r2, [pc, #280]	@ (8001d8c <_ZL12MX_GPIO_Initv+0x138>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b44      	ldr	r3, [pc, #272]	@ (8001d8c <_ZL12MX_GPIO_Initv+0x138>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b40      	ldr	r3, [pc, #256]	@ (8001d8c <_ZL12MX_GPIO_Initv+0x138>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d8c <_ZL12MX_GPIO_Initv+0x138>)
 8001c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b3d      	ldr	r3, [pc, #244]	@ (8001d8c <_ZL12MX_GPIO_Initv+0x138>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	4b39      	ldr	r3, [pc, #228]	@ (8001d8c <_ZL12MX_GPIO_Initv+0x138>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a38      	ldr	r2, [pc, #224]	@ (8001d8c <_ZL12MX_GPIO_Initv+0x138>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b36      	ldr	r3, [pc, #216]	@ (8001d8c <_ZL12MX_GPIO_Initv+0x138>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	4b32      	ldr	r3, [pc, #200]	@ (8001d8c <_ZL12MX_GPIO_Initv+0x138>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	4a31      	ldr	r2, [pc, #196]	@ (8001d8c <_ZL12MX_GPIO_Initv+0x138>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cce:	4b2f      	ldr	r3, [pc, #188]	@ (8001d8c <_ZL12MX_GPIO_Initv+0x138>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUELED_GPIO_Port, BLUELED_Pin, GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ce0:	482b      	ldr	r0, [pc, #172]	@ (8001d90 <_ZL12MX_GPIO_Initv+0x13c>)
 8001ce2:	f001 fe0d 	bl	8003900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_INA_Pin|R_INB_Pin, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2103      	movs	r1, #3
 8001cea:	482a      	ldr	r0, [pc, #168]	@ (8001d94 <_ZL12MX_GPIO_Initv+0x140>)
 8001cec:	f001 fe08 	bl	8003900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_INB_Pin|L_INA_Pin, GPIO_PIN_RESET);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001cf6:	4828      	ldr	r0, [pc, #160]	@ (8001d98 <_ZL12MX_GPIO_Initv+0x144>)
 8001cf8:	f001 fe02 	bl	8003900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUELED_Pin */
  GPIO_InitStruct.Pin = BLUELED_Pin;
 8001cfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUELED_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	481e      	ldr	r0, [pc, #120]	@ (8001d90 <_ZL12MX_GPIO_Initv+0x13c>)
 8001d16:	f001 fc6f 	bl	80035f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d1a:	2380      	movs	r3, #128	@ 0x80
 8001d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	481a      	ldr	r0, [pc, #104]	@ (8001d98 <_ZL12MX_GPIO_Initv+0x144>)
 8001d2e:	f001 fc63 	bl	80035f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_INA_Pin R_INB_Pin */
  GPIO_InitStruct.Pin = R_INA_Pin|R_INB_Pin;
 8001d32:	2303      	movs	r3, #3
 8001d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d36:	2301      	movs	r3, #1
 8001d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	4812      	ldr	r0, [pc, #72]	@ (8001d94 <_ZL12MX_GPIO_Initv+0x140>)
 8001d4a:	f001 fc55 	bl	80035f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_INB_Pin L_INA_Pin */
  GPIO_InitStruct.Pin = L_INB_Pin|L_INA_Pin;
 8001d4e:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4619      	mov	r1, r3
 8001d66:	480c      	ldr	r0, [pc, #48]	@ (8001d98 <_ZL12MX_GPIO_Initv+0x144>)
 8001d68:	f001 fc46 	bl	80035f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d6c:	2310      	movs	r3, #16
 8001d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4805      	ldr	r0, [pc, #20]	@ (8001d94 <_ZL12MX_GPIO_Initv+0x140>)
 8001d80:	f001 fc3a 	bl	80035f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	@ 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020800 	.word	0x40020800
 8001d94:	40020400 	.word	0x40020400
 8001d98:	40020000 	.word	0x40020000

08001d9c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f004 fa67 	bl	8006278 <osDelay>
 8001daa:	e7fb      	b.n	8001da4 <_Z16StartDefaultTaskPv+0x8>

08001dac <_Z14Task1msHandlerPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1msHandler */
void Task1msHandler(void *argument)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1msHandler */
  /* Infinite loop */
  for(;;)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <_Z14Task1msHandlerPv+0x8>

08001db8 <_Z15Task10msHandlerPv>:
* @brief Function implementing the Task10ms thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task10msHandler */
void Task10msHandler(void *argument) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task10msHandler */
	/* Infinite loop */
	for (;;) {

		clLeftW->Calculation();
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <_Z15Task10msHandlerPv+0x20>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fa95 	bl	80012f4 <_ZN9WheelData11CalculationEv>
		clRightW->Calculation();
 8001dca:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <_Z15Task10msHandlerPv+0x24>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fa90 	bl	80012f4 <_ZN9WheelData11CalculationEv>
		clLeftW->Calculation();
 8001dd4:	bf00      	nop
 8001dd6:	e7f3      	b.n	8001dc0 <_Z15Task10msHandlerPv+0x8>
 8001dd8:	2000033c 	.word	0x2000033c
 8001ddc:	20000340 	.word	0x20000340

08001de0 <_Z16Task100msHandlerPv>:
* @brief Function implementing the Task100ms thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task100msHandler */
void Task100msHandler(void *argument) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task100msHandler */
	/* Infinite loop */
	for (;;) {


		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, ADC_CHANNELS_NUM*10);
 8001de8:	2214      	movs	r2, #20
 8001dea:	490f      	ldr	r1, [pc, #60]	@ (8001e28 <_Z16Task100msHandlerPv+0x48>)
 8001dec:	480f      	ldr	r0, [pc, #60]	@ (8001e2c <_Z16Task100msHandlerPv+0x4c>)
 8001dee:	f000 fc0d 	bl	800260c <HAL_ADC_Start_DMA>

		clLeftW->ReadAS5600_Curr(0);
 8001df2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <_Z16Task100msHandlerPv+0x50>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8001e34 <_Z16Task100msHandlerPv+0x54>
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff f89c 	bl	8000f38 <_ZN9WheelData15ReadAS5600_CurrEf>
		clRightW->ReadAS5600_Curr(0);
 8001e00:	4b0d      	ldr	r3, [pc, #52]	@ (8001e38 <_Z16Task100msHandlerPv+0x58>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001e34 <_Z16Task100msHandlerPv+0x54>
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff f895 	bl	8000f38 <_ZN9WheelData15ReadAS5600_CurrEf>



	 	clLeftW->Set_Speed(set_speed);
 8001e0e:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <_Z16Task100msHandlerPv+0x50>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <_Z16Task100msHandlerPv+0x5c>)
 8001e14:	edd2 7a00 	vldr	s15, [r2]
 8001e18:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff f9c9 	bl	80011b4 <_ZN9WheelData9Set_SpeedEf>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, ADC_CHANNELS_NUM*10);
 8001e22:	bf00      	nop
 8001e24:	e7e0      	b.n	8001de8 <_Z16Task100msHandlerPv+0x8>
 8001e26:	bf00      	nop
 8001e28:	200002c4 	.word	0x200002c4
 8001e2c:	2000007c 	.word	0x2000007c
 8001e30:	2000033c 	.word	0x2000033c
 8001e34:	00000000 	.word	0x00000000
 8001e38:	20000340 	.word	0x20000340
 8001e3c:	20000344 	.word	0x20000344

08001e40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a09      	ldr	r2, [pc, #36]	@ (8001e74 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e52:	f000 fb77 	bl	8002544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2) {
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e5e:	d104      	bne.n	8001e6a <HAL_TIM_PeriodElapsedCallback+0x2a>

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);  // мигаем светодиодом
 8001e60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e64:	4804      	ldr	r0, [pc, #16]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001e66:	f001 fd64 	bl	8003932 <HAL_GPIO_TogglePin>


	} // end of TIM2
  /* USER CODE END Callback 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40014800 	.word	0x40014800
 8001e78:	40020800 	.word	0x40020800

08001e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e80:	b672      	cpsid	i
}
 8001e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <Error_Handler+0x8>

08001e88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <HAL_MspInit+0x54>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	4a11      	ldr	r2, [pc, #68]	@ (8001edc <HAL_MspInit+0x54>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <HAL_MspInit+0x54>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_MspInit+0x54>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <HAL_MspInit+0x54>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <HAL_MspInit+0x54>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	210f      	movs	r1, #15
 8001eca:	f06f 0001 	mvn.w	r0, #1
 8001ece:	f000 fff9 	bl	8002ec4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800

08001ee0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	@ 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a2e      	ldr	r2, [pc, #184]	@ (8001fb8 <HAL_ADC_MspInit+0xd8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d156      	bne.n	8001fb0 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b2d      	ldr	r3, [pc, #180]	@ (8001fbc <HAL_ADC_MspInit+0xdc>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	4a2c      	ldr	r2, [pc, #176]	@ (8001fbc <HAL_ADC_MspInit+0xdc>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f12:	4b2a      	ldr	r3, [pc, #168]	@ (8001fbc <HAL_ADC_MspInit+0xdc>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b26      	ldr	r3, [pc, #152]	@ (8001fbc <HAL_ADC_MspInit+0xdc>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a25      	ldr	r2, [pc, #148]	@ (8001fbc <HAL_ADC_MspInit+0xdc>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	4b23      	ldr	r3, [pc, #140]	@ (8001fbc <HAL_ADC_MspInit+0xdc>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	481c      	ldr	r0, [pc, #112]	@ (8001fc0 <HAL_ADC_MspInit+0xe0>)
 8001f4e:	f001 fb53 	bl	80035f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc4 <HAL_ADC_MspInit+0xe4>)
 8001f54:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc8 <HAL_ADC_MspInit+0xe8>)
 8001f56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc4 <HAL_ADC_MspInit+0xe4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f5e:	4b19      	ldr	r3, [pc, #100]	@ (8001fc4 <HAL_ADC_MspInit+0xe4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f64:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <HAL_ADC_MspInit+0xe4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f6a:	4b16      	ldr	r3, [pc, #88]	@ (8001fc4 <HAL_ADC_MspInit+0xe4>)
 8001f6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f72:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <HAL_ADC_MspInit+0xe4>)
 8001f74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f7a:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <HAL_ADC_MspInit+0xe4>)
 8001f7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f82:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <HAL_ADC_MspInit+0xe4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f88:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <HAL_ADC_MspInit+0xe4>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <HAL_ADC_MspInit+0xe4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f94:	480b      	ldr	r0, [pc, #44]	@ (8001fc4 <HAL_ADC_MspInit+0xe4>)
 8001f96:	f000 ffbf 	bl	8002f18 <HAL_DMA_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001fa0:	f7ff ff6c 	bl	8001e7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a07      	ldr	r2, [pc, #28]	@ (8001fc4 <HAL_ADC_MspInit+0xe4>)
 8001fa8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001faa:	4a06      	ldr	r2, [pc, #24]	@ (8001fc4 <HAL_ADC_MspInit+0xe4>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fb0:	bf00      	nop
 8001fb2:	3728      	adds	r7, #40	@ 0x28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40012000 	.word	0x40012000
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	200000c4 	.word	0x200000c4
 8001fc8:	40026410 	.word	0x40026410

08001fcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	@ 0x30
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 031c 	add.w	r3, r7, #28
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a3b      	ldr	r2, [pc, #236]	@ (80020d8 <HAL_I2C_MspInit+0x10c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d12d      	bne.n	800204a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80020dc <HAL_I2C_MspInit+0x110>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a39      	ldr	r2, [pc, #228]	@ (80020dc <HAL_I2C_MspInit+0x110>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b37      	ldr	r3, [pc, #220]	@ (80020dc <HAL_I2C_MspInit+0x110>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800200a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800200e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002010:	2312      	movs	r3, #18
 8002012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800201c:	2304      	movs	r3, #4
 800201e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	4619      	mov	r1, r3
 8002026:	482e      	ldr	r0, [pc, #184]	@ (80020e0 <HAL_I2C_MspInit+0x114>)
 8002028:	f001 fae6 	bl	80035f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	4b2a      	ldr	r3, [pc, #168]	@ (80020dc <HAL_I2C_MspInit+0x110>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	4a29      	ldr	r2, [pc, #164]	@ (80020dc <HAL_I2C_MspInit+0x110>)
 8002036:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800203a:	6413      	str	r3, [r2, #64]	@ 0x40
 800203c:	4b27      	ldr	r3, [pc, #156]	@ (80020dc <HAL_I2C_MspInit+0x110>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002048:	e041      	b.n	80020ce <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a25      	ldr	r2, [pc, #148]	@ (80020e4 <HAL_I2C_MspInit+0x118>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d13c      	bne.n	80020ce <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	4b20      	ldr	r3, [pc, #128]	@ (80020dc <HAL_I2C_MspInit+0x110>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	4a1f      	ldr	r2, [pc, #124]	@ (80020dc <HAL_I2C_MspInit+0x110>)
 800205e:	f043 0302 	orr.w	r3, r3, #2
 8002062:	6313      	str	r3, [r2, #48]	@ 0x30
 8002064:	4b1d      	ldr	r3, [pc, #116]	@ (80020dc <HAL_I2C_MspInit+0x110>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002070:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002076:	2312      	movs	r3, #18
 8002078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207e:	2303      	movs	r3, #3
 8002080:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002082:	2304      	movs	r3, #4
 8002084:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	4619      	mov	r1, r3
 800208c:	4814      	ldr	r0, [pc, #80]	@ (80020e0 <HAL_I2C_MspInit+0x114>)
 800208e:	f001 fab3 	bl	80035f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002092:	2308      	movs	r3, #8
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002096:	2312      	movs	r3, #18
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80020a2:	2309      	movs	r3, #9
 80020a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	4619      	mov	r1, r3
 80020ac:	480c      	ldr	r0, [pc, #48]	@ (80020e0 <HAL_I2C_MspInit+0x114>)
 80020ae:	f001 faa3 	bl	80035f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_I2C_MspInit+0x110>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a08      	ldr	r2, [pc, #32]	@ (80020dc <HAL_I2C_MspInit+0x110>)
 80020bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_I2C_MspInit+0x110>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
}
 80020ce:	bf00      	nop
 80020d0:	3730      	adds	r7, #48	@ 0x30
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40005400 	.word	0x40005400
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40005800 	.word	0x40005800

080020e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a19      	ldr	r2, [pc, #100]	@ (800216c <HAL_SPI_MspInit+0x84>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d12c      	bne.n	8002164 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <HAL_SPI_MspInit+0x88>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	4a17      	ldr	r2, [pc, #92]	@ (8002170 <HAL_SPI_MspInit+0x88>)
 8002114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002118:	6413      	str	r3, [r2, #64]	@ 0x40
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <HAL_SPI_MspInit+0x88>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <HAL_SPI_MspInit+0x88>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a10      	ldr	r2, [pc, #64]	@ (8002170 <HAL_SPI_MspInit+0x88>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <HAL_SPI_MspInit+0x88>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002142:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002154:	2305      	movs	r3, #5
 8002156:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4619      	mov	r1, r3
 800215e:	4805      	ldr	r0, [pc, #20]	@ (8002174 <HAL_SPI_MspInit+0x8c>)
 8002160:	f001 fa4a 	bl	80035f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002164:	bf00      	nop
 8002166:	3728      	adds	r7, #40	@ 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40003800 	.word	0x40003800
 8002170:	40023800 	.word	0x40023800
 8002174:	40020400 	.word	0x40020400

08002178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1c      	ldr	r2, [pc, #112]	@ (80021f8 <HAL_TIM_Base_MspInit+0x80>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d116      	bne.n	80021b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <HAL_TIM_Base_MspInit+0x84>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	4a1a      	ldr	r2, [pc, #104]	@ (80021fc <HAL_TIM_Base_MspInit+0x84>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6453      	str	r3, [r2, #68]	@ 0x44
 800219a:	4b18      	ldr	r3, [pc, #96]	@ (80021fc <HAL_TIM_Base_MspInit+0x84>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	210f      	movs	r1, #15
 80021aa:	201a      	movs	r0, #26
 80021ac:	f000 fe8a 	bl	8002ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80021b0:	201a      	movs	r0, #26
 80021b2:	f000 fea3 	bl	8002efc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021b6:	e01a      	b.n	80021ee <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c0:	d115      	bne.n	80021ee <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	4b0d      	ldr	r3, [pc, #52]	@ (80021fc <HAL_TIM_Base_MspInit+0x84>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	4a0c      	ldr	r2, [pc, #48]	@ (80021fc <HAL_TIM_Base_MspInit+0x84>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_TIM_Base_MspInit+0x84>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2105      	movs	r1, #5
 80021e2:	201c      	movs	r0, #28
 80021e4:	f000 fe6e 	bl	8002ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021e8:	201c      	movs	r0, #28
 80021ea:	f000 fe87 	bl	8002efc <HAL_NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40010000 	.word	0x40010000
 80021fc:	40023800 	.word	0x40023800

08002200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a12      	ldr	r2, [pc, #72]	@ (8002268 <HAL_TIM_MspPostInit+0x68>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d11e      	bne.n	8002260 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	4b11      	ldr	r3, [pc, #68]	@ (800226c <HAL_TIM_MspPostInit+0x6c>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	4a10      	ldr	r2, [pc, #64]	@ (800226c <HAL_TIM_MspPostInit+0x6c>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6313      	str	r3, [r2, #48]	@ 0x30
 8002232:	4b0e      	ldr	r3, [pc, #56]	@ (800226c <HAL_TIM_MspPostInit+0x6c>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800223e:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8002242:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800224c:	2302      	movs	r3, #2
 800224e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002250:	2301      	movs	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002254:	f107 030c 	add.w	r3, r7, #12
 8002258:	4619      	mov	r1, r3
 800225a:	4805      	ldr	r0, [pc, #20]	@ (8002270 <HAL_TIM_MspPostInit+0x70>)
 800225c:	f001 f9cc 	bl	80035f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002260:	bf00      	nop
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40010000 	.word	0x40010000
 800226c:	40023800 	.word	0x40023800
 8002270:	40020000 	.word	0x40020000

08002274 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08c      	sub	sp, #48	@ 0x30
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	4b2e      	ldr	r3, [pc, #184]	@ (8002344 <HAL_InitTick+0xd0>)
 800228a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228c:	4a2d      	ldr	r2, [pc, #180]	@ (8002344 <HAL_InitTick+0xd0>)
 800228e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002292:	6453      	str	r3, [r2, #68]	@ 0x44
 8002294:	4b2b      	ldr	r3, [pc, #172]	@ (8002344 <HAL_InitTick+0xd0>)
 8002296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002298:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022a0:	f107 020c 	add.w	r2, r7, #12
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 fe00 	bl	8004eb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022b0:	f002 fdea 	bl	8004e88 <HAL_RCC_GetPCLK2Freq>
 80022b4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b8:	4a23      	ldr	r2, [pc, #140]	@ (8002348 <HAL_InitTick+0xd4>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0c9b      	lsrs	r3, r3, #18
 80022c0:	3b01      	subs	r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80022c4:	4b21      	ldr	r3, [pc, #132]	@ (800234c <HAL_InitTick+0xd8>)
 80022c6:	4a22      	ldr	r2, [pc, #136]	@ (8002350 <HAL_InitTick+0xdc>)
 80022c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80022ca:	4b20      	ldr	r3, [pc, #128]	@ (800234c <HAL_InitTick+0xd8>)
 80022cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022d0:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80022d2:	4a1e      	ldr	r2, [pc, #120]	@ (800234c <HAL_InitTick+0xd8>)
 80022d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d6:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80022d8:	4b1c      	ldr	r3, [pc, #112]	@ (800234c <HAL_InitTick+0xd8>)
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022de:	4b1b      	ldr	r3, [pc, #108]	@ (800234c <HAL_InitTick+0xd8>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e4:	4b19      	ldr	r3, [pc, #100]	@ (800234c <HAL_InitTick+0xd8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 80022ea:	4818      	ldr	r0, [pc, #96]	@ (800234c <HAL_InitTick+0xd8>)
 80022ec:	f002 fe9b 	bl	8005026 <HAL_TIM_Base_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80022f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d11b      	bne.n	8002336 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80022fe:	4813      	ldr	r0, [pc, #76]	@ (800234c <HAL_InitTick+0xd8>)
 8002300:	f002 fee0 	bl	80050c4 <HAL_TIM_Base_Start_IT>
 8002304:	4603      	mov	r3, r0
 8002306:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800230a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800230e:	2b00      	cmp	r3, #0
 8002310:	d111      	bne.n	8002336 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002312:	201a      	movs	r0, #26
 8002314:	f000 fdf2 	bl	8002efc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b0f      	cmp	r3, #15
 800231c:	d808      	bhi.n	8002330 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 800231e:	2200      	movs	r2, #0
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	201a      	movs	r0, #26
 8002324:	f000 fdce 	bl	8002ec4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002328:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <HAL_InitTick+0xe0>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e002      	b.n	8002336 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002336:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800233a:	4618      	mov	r0, r3
 800233c:	3730      	adds	r7, #48	@ 0x30
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	431bde83 	.word	0x431bde83
 800234c:	20000348 	.word	0x20000348
 8002350:	40014800 	.word	0x40014800
 8002354:	20000004 	.word	0x20000004

08002358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <NMI_Handler+0x4>

08002360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <HardFault_Handler+0x4>

08002368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <MemManage_Handler+0x4>

08002370 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <UsageFault_Handler+0x4>

08002380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002394:	4803      	ldr	r0, [pc, #12]	@ (80023a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002396:	f003 f801 	bl	800539c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800239a:	4803      	ldr	r0, [pc, #12]	@ (80023a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800239c:	f002 fffe 	bl	800539c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000224 	.word	0x20000224
 80023a8:	20000348 	.word	0x20000348

080023ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023b0:	4802      	ldr	r0, [pc, #8]	@ (80023bc <TIM2_IRQHandler+0x10>)
 80023b2:	f002 fff3 	bl	800539c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000026c 	.word	0x2000026c

080023c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023c4:	4802      	ldr	r0, [pc, #8]	@ (80023d0 <DMA2_Stream0_IRQHandler+0x10>)
 80023c6:	f000 fead 	bl	8003124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200000c4 	.word	0x200000c4

080023d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return 1;
 80023d8:	2301      	movs	r3, #1
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <_kill>:

int _kill(int pid, int sig)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023ee:	f006 fd9d 	bl	8008f2c <__errno>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2216      	movs	r2, #22
 80023f6:	601a      	str	r2, [r3, #0]
  return -1;
 80023f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_exit>:

void _exit (int status)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ffe7 	bl	80023e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002416:	bf00      	nop
 8002418:	e7fd      	b.n	8002416 <_exit+0x12>
	...

0800241c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002424:	4a14      	ldr	r2, [pc, #80]	@ (8002478 <_sbrk+0x5c>)
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <_sbrk+0x60>)
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002430:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <_sbrk+0x64>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002438:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <_sbrk+0x64>)
 800243a:	4a12      	ldr	r2, [pc, #72]	@ (8002484 <_sbrk+0x68>)
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243e:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	429a      	cmp	r2, r3
 800244a:	d207      	bcs.n	800245c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800244c:	f006 fd6e 	bl	8008f2c <__errno>
 8002450:	4603      	mov	r3, r0
 8002452:	220c      	movs	r2, #12
 8002454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
 800245a:	e009      	b.n	8002470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800245c:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002462:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	4a05      	ldr	r2, [pc, #20]	@ (8002480 <_sbrk+0x64>)
 800246c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20010000 	.word	0x20010000
 800247c:	00000400 	.word	0x00000400
 8002480:	20000390 	.word	0x20000390
 8002484:	20004ed0 	.word	0x20004ed0

08002488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800248c:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <SystemInit+0x20>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002492:	4a05      	ldr	r2, [pc, #20]	@ (80024a8 <SystemInit+0x20>)
 8002494:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002498:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024b0:	f7ff ffea 	bl	8002488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024b4:	480c      	ldr	r0, [pc, #48]	@ (80024e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024b6:	490d      	ldr	r1, [pc, #52]	@ (80024ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024b8:	4a0d      	ldr	r2, [pc, #52]	@ (80024f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024bc:	e002      	b.n	80024c4 <LoopCopyDataInit>

080024be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c2:	3304      	adds	r3, #4

080024c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c8:	d3f9      	bcc.n	80024be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ca:	4a0a      	ldr	r2, [pc, #40]	@ (80024f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024cc:	4c0a      	ldr	r4, [pc, #40]	@ (80024f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d0:	e001      	b.n	80024d6 <LoopFillZerobss>

080024d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d4:	3204      	adds	r2, #4

080024d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d8:	d3fb      	bcc.n	80024d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024da:	f006 fd2d 	bl	8008f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024de:	f7ff f825 	bl	800152c <main>
  bx  lr    
 80024e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80024f0:	08009150 	.word	0x08009150
  ldr r2, =_sbss
 80024f4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80024f8:	20004ecc 	.word	0x20004ecc

080024fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024fc:	e7fe      	b.n	80024fc <ADC_IRQHandler>
	...

08002500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002504:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <HAL_Init+0x40>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <HAL_Init+0x40>)
 800250a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800250e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <HAL_Init+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <HAL_Init+0x40>)
 8002516:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800251a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800251c:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a07      	ldr	r2, [pc, #28]	@ (8002540 <HAL_Init+0x40>)
 8002522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002528:	2003      	movs	r0, #3
 800252a:	f000 fcc0 	bl	8002eae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800252e:	200f      	movs	r0, #15
 8002530:	f7ff fea0 	bl	8002274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002534:	f7ff fca8 	bl	8001e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00

08002544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002548:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <HAL_IncTick+0x20>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <HAL_IncTick+0x24>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4413      	add	r3, r2
 8002554:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <HAL_IncTick+0x24>)
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000008 	.word	0x20000008
 8002568:	20000394 	.word	0x20000394

0800256c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return uwTick;
 8002570:	4b03      	ldr	r3, [pc, #12]	@ (8002580 <HAL_GetTick+0x14>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000394 	.word	0x20000394

08002584 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e033      	b.n	8002602 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fc9c 	bl	8001ee0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d118      	bne.n	80025f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025ca:	f023 0302 	bic.w	r3, r3, #2
 80025ce:	f043 0202 	orr.w	r2, r3, #2
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fa3e 	bl	8002a58 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	f043 0201 	orr.w	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80025f2:	e001      	b.n	80025f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_ADC_Start_DMA+0x1e>
 8002626:	2302      	movs	r3, #2
 8002628:	e0ce      	b.n	80027c8 <HAL_ADC_Start_DMA+0x1bc>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d018      	beq.n	8002672 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002650:	4b5f      	ldr	r3, [pc, #380]	@ (80027d0 <HAL_ADC_Start_DMA+0x1c4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a5f      	ldr	r2, [pc, #380]	@ (80027d4 <HAL_ADC_Start_DMA+0x1c8>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	0c9a      	lsrs	r2, r3, #18
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002664:	e002      	b.n	800266c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	3b01      	subs	r3, #1
 800266a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f9      	bne.n	8002666 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002680:	d107      	bne.n	8002692 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002690:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b01      	cmp	r3, #1
 800269e:	f040 8086 	bne.w	80027ae <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d007      	beq.n	80026d4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026e0:	d106      	bne.n	80026f0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e6:	f023 0206 	bic.w	r2, r3, #6
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80026ee:	e002      	b.n	80026f6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026fe:	4b36      	ldr	r3, [pc, #216]	@ (80027d8 <HAL_ADC_Start_DMA+0x1cc>)
 8002700:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002706:	4a35      	ldr	r2, [pc, #212]	@ (80027dc <HAL_ADC_Start_DMA+0x1d0>)
 8002708:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270e:	4a34      	ldr	r2, [pc, #208]	@ (80027e0 <HAL_ADC_Start_DMA+0x1d4>)
 8002710:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002716:	4a33      	ldr	r2, [pc, #204]	@ (80027e4 <HAL_ADC_Start_DMA+0x1d8>)
 8002718:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002722:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002732:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002742:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	334c      	adds	r3, #76	@ 0x4c
 800274e:	4619      	mov	r1, r3
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f000 fc8e 	bl	8003074 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10f      	bne.n	8002784 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d129      	bne.n	80027c6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	e020      	b.n	80027c6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a17      	ldr	r2, [pc, #92]	@ (80027e8 <HAL_ADC_Start_DMA+0x1dc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d11b      	bne.n	80027c6 <HAL_ADC_Start_DMA+0x1ba>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d114      	bne.n	80027c6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	e00b      	b.n	80027c6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f043 0210 	orr.w	r2, r3, #16
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	f043 0201 	orr.w	r2, r3, #1
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000000 	.word	0x20000000
 80027d4:	431bde83 	.word	0x431bde83
 80027d8:	40012300 	.word	0x40012300
 80027dc:	08002c51 	.word	0x08002c51
 80027e0:	08002d0b 	.word	0x08002d0b
 80027e4:	08002d27 	.word	0x08002d27
 80027e8:	40012000 	.word	0x40012000

080027ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1c>
 800282c:	2302      	movs	r3, #2
 800282e:	e105      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x228>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b09      	cmp	r3, #9
 800283e:	d925      	bls.n	800288c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68d9      	ldr	r1, [r3, #12]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	4613      	mov	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4413      	add	r3, r2
 8002854:	3b1e      	subs	r3, #30
 8002856:	2207      	movs	r2, #7
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43da      	mvns	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	400a      	ands	r2, r1
 8002864:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68d9      	ldr	r1, [r3, #12]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	4618      	mov	r0, r3
 8002878:	4603      	mov	r3, r0
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4403      	add	r3, r0
 800287e:	3b1e      	subs	r3, #30
 8002880:	409a      	lsls	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	e022      	b.n	80028d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6919      	ldr	r1, [r3, #16]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	2207      	movs	r2, #7
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43da      	mvns	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	400a      	ands	r2, r1
 80028ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6919      	ldr	r1, [r3, #16]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4618      	mov	r0, r3
 80028c2:	4603      	mov	r3, r0
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4403      	add	r3, r0
 80028c8:	409a      	lsls	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d824      	bhi.n	8002924 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	3b05      	subs	r3, #5
 80028ec:	221f      	movs	r2, #31
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43da      	mvns	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	400a      	ands	r2, r1
 80028fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	4618      	mov	r0, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	3b05      	subs	r3, #5
 8002916:	fa00 f203 	lsl.w	r2, r0, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	635a      	str	r2, [r3, #52]	@ 0x34
 8002922:	e04c      	b.n	80029be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b0c      	cmp	r3, #12
 800292a:	d824      	bhi.n	8002976 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	3b23      	subs	r3, #35	@ 0x23
 800293e:	221f      	movs	r2, #31
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43da      	mvns	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	400a      	ands	r2, r1
 800294c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	4618      	mov	r0, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	3b23      	subs	r3, #35	@ 0x23
 8002968:	fa00 f203 	lsl.w	r2, r0, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
 8002974:	e023      	b.n	80029be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	3b41      	subs	r3, #65	@ 0x41
 8002988:	221f      	movs	r2, #31
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	400a      	ands	r2, r1
 8002996:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	4618      	mov	r0, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	3b41      	subs	r3, #65	@ 0x41
 80029b2:	fa00 f203 	lsl.w	r2, r0, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029be:	4b22      	ldr	r3, [pc, #136]	@ (8002a48 <HAL_ADC_ConfigChannel+0x234>)
 80029c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a21      	ldr	r2, [pc, #132]	@ (8002a4c <HAL_ADC_ConfigChannel+0x238>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d109      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x1cc>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b12      	cmp	r3, #18
 80029d2:	d105      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a19      	ldr	r2, [pc, #100]	@ (8002a4c <HAL_ADC_ConfigChannel+0x238>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d123      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x21e>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d003      	beq.n	80029fa <HAL_ADC_ConfigChannel+0x1e6>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b11      	cmp	r3, #17
 80029f8:	d11b      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b10      	cmp	r3, #16
 8002a0c:	d111      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a0e:	4b10      	ldr	r3, [pc, #64]	@ (8002a50 <HAL_ADC_ConfigChannel+0x23c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a10      	ldr	r2, [pc, #64]	@ (8002a54 <HAL_ADC_ConfigChannel+0x240>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	0c9a      	lsrs	r2, r3, #18
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a24:	e002      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f9      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40012300 	.word	0x40012300
 8002a4c:	40012000 	.word	0x40012000
 8002a50:	20000000 	.word	0x20000000
 8002a54:	431bde83 	.word	0x431bde83

08002a58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a60:	4b79      	ldr	r3, [pc, #484]	@ (8002c48 <ADC_Init+0x1f0>)
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	021a      	lsls	r2, r3, #8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ab0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6899      	ldr	r1, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aea:	4a58      	ldr	r2, [pc, #352]	@ (8002c4c <ADC_Init+0x1f4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d022      	beq.n	8002b36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002afe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6899      	ldr	r1, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6899      	ldr	r1, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	e00f      	b.n	8002b56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b54:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0202 	bic.w	r2, r2, #2
 8002b64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6899      	ldr	r1, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7e1b      	ldrb	r3, [r3, #24]
 8002b70:	005a      	lsls	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01b      	beq.n	8002bbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b92:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ba2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	035a      	lsls	r2, r3, #13
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	e007      	b.n	8002bcc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002bda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	051a      	lsls	r2, r3, #20
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6899      	ldr	r1, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c0e:	025a      	lsls	r2, r3, #9
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6899      	ldr	r1, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	029a      	lsls	r2, r3, #10
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	609a      	str	r2, [r3, #8]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40012300 	.word	0x40012300
 8002c4c:	0f000001 	.word	0x0f000001

08002c50 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d13c      	bne.n	8002ce4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d12b      	bne.n	8002cdc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d127      	bne.n	8002cdc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d119      	bne.n	8002cdc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0220 	bic.w	r2, r2, #32
 8002cb6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7fe fbdf 	bl	80014a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ce2:	e00e      	b.n	8002d02 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7ff fd85 	bl	8002800 <HAL_ADC_ErrorCallback>
}
 8002cf6:	e004      	b.n	8002d02 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	4798      	blx	r3
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d16:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f7ff fd67 	bl	80027ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d32:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2240      	movs	r2, #64	@ 0x40
 8002d38:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3e:	f043 0204 	orr.w	r2, r3, #4
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f7ff fd5a 	bl	8002800 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d4c:	bf00      	nop
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d64:	4b0c      	ldr	r3, [pc, #48]	@ (8002d98 <__NVIC_SetPriorityGrouping+0x44>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d70:	4013      	ands	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d86:	4a04      	ldr	r2, [pc, #16]	@ (8002d98 <__NVIC_SetPriorityGrouping+0x44>)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	60d3      	str	r3, [r2, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da0:	4b04      	ldr	r3, [pc, #16]	@ (8002db4 <__NVIC_GetPriorityGrouping+0x18>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	0a1b      	lsrs	r3, r3, #8
 8002da6:	f003 0307 	and.w	r3, r3, #7
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	db0b      	blt.n	8002de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	f003 021f 	and.w	r2, r3, #31
 8002dd0:	4907      	ldr	r1, [pc, #28]	@ (8002df0 <__NVIC_EnableIRQ+0x38>)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	2001      	movs	r0, #1
 8002dda:	fa00 f202 	lsl.w	r2, r0, r2
 8002dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	e000e100 	.word	0xe000e100

08002df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	db0a      	blt.n	8002e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	490c      	ldr	r1, [pc, #48]	@ (8002e40 <__NVIC_SetPriority+0x4c>)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	0112      	lsls	r2, r2, #4
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	440b      	add	r3, r1
 8002e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e1c:	e00a      	b.n	8002e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4908      	ldr	r1, [pc, #32]	@ (8002e44 <__NVIC_SetPriority+0x50>)
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	3b04      	subs	r3, #4
 8002e2c:	0112      	lsls	r2, r2, #4
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	440b      	add	r3, r1
 8002e32:	761a      	strb	r2, [r3, #24]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	e000e100 	.word	0xe000e100
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	@ 0x24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f1c3 0307 	rsb	r3, r3, #7
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	bf28      	it	cs
 8002e66:	2304      	movcs	r3, #4
 8002e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d902      	bls.n	8002e78 <NVIC_EncodePriority+0x30>
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3b03      	subs	r3, #3
 8002e76:	e000      	b.n	8002e7a <NVIC_EncodePriority+0x32>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e90:	f04f 31ff 	mov.w	r1, #4294967295
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9a:	43d9      	mvns	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea0:	4313      	orrs	r3, r2
         );
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3724      	adds	r7, #36	@ 0x24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ff4c 	bl	8002d54 <__NVIC_SetPriorityGrouping>
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed6:	f7ff ff61 	bl	8002d9c <__NVIC_GetPriorityGrouping>
 8002eda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	6978      	ldr	r0, [r7, #20]
 8002ee2:	f7ff ffb1 	bl	8002e48 <NVIC_EncodePriority>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff ff80 	bl	8002df4 <__NVIC_SetPriority>
}
 8002ef4:	bf00      	nop
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ff54 	bl	8002db8 <__NVIC_EnableIRQ>
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f24:	f7ff fb22 	bl	800256c <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e099      	b.n	8003068 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0201 	bic.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f54:	e00f      	b.n	8002f76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f56:	f7ff fb09 	bl	800256c <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b05      	cmp	r3, #5
 8002f62:	d908      	bls.n	8002f76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e078      	b.n	8003068 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e8      	bne.n	8002f56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4b38      	ldr	r3, [pc, #224]	@ (8003070 <HAL_DMA_Init+0x158>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d107      	bne.n	8002fe0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f023 0307 	bic.w	r3, r3, #7
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003006:	2b04      	cmp	r3, #4
 8003008:	d117      	bne.n	800303a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00e      	beq.n	800303a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fa6f 	bl	8003500 <DMA_CheckFifoParam>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2240      	movs	r2, #64	@ 0x40
 800302c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003036:	2301      	movs	r3, #1
 8003038:	e016      	b.n	8003068 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fa26 	bl	8003494 <DMA_CalcBaseAndBitshift>
 8003048:	4603      	mov	r3, r0
 800304a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003050:	223f      	movs	r2, #63	@ 0x3f
 8003052:	409a      	lsls	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	f010803f 	.word	0xf010803f

08003074 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_DMA_Start_IT+0x26>
 8003096:	2302      	movs	r3, #2
 8003098:	e040      	b.n	800311c <HAL_DMA_Start_IT+0xa8>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d12f      	bne.n	800310e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2202      	movs	r2, #2
 80030b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f9b8 	bl	8003438 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030cc:	223f      	movs	r2, #63	@ 0x3f
 80030ce:	409a      	lsls	r2, r3
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0216 	orr.w	r2, r2, #22
 80030e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0208 	orr.w	r2, r2, #8
 80030fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e005      	b.n	800311a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003116:	2302      	movs	r3, #2
 8003118:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800311a:	7dfb      	ldrb	r3, [r7, #23]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003130:	4b8e      	ldr	r3, [pc, #568]	@ (800336c <HAL_DMA_IRQHandler+0x248>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a8e      	ldr	r2, [pc, #568]	@ (8003370 <HAL_DMA_IRQHandler+0x24c>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	0a9b      	lsrs	r3, r3, #10
 800313c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003142:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314e:	2208      	movs	r2, #8
 8003150:	409a      	lsls	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01a      	beq.n	8003190 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0204 	bic.w	r2, r2, #4
 8003176:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317c:	2208      	movs	r2, #8
 800317e:	409a      	lsls	r2, r3
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003188:	f043 0201 	orr.w	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003194:	2201      	movs	r2, #1
 8003196:	409a      	lsls	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d012      	beq.n	80031c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b2:	2201      	movs	r2, #1
 80031b4:	409a      	lsls	r2, r3
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031be:	f043 0202 	orr.w	r2, r3, #2
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ca:	2204      	movs	r2, #4
 80031cc:	409a      	lsls	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d012      	beq.n	80031fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00b      	beq.n	80031fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e8:	2204      	movs	r2, #4
 80031ea:	409a      	lsls	r2, r3
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f4:	f043 0204 	orr.w	r2, r3, #4
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003200:	2210      	movs	r2, #16
 8003202:	409a      	lsls	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d043      	beq.n	8003294 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d03c      	beq.n	8003294 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321e:	2210      	movs	r2, #16
 8003220:	409a      	lsls	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d018      	beq.n	8003266 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d108      	bne.n	8003254 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d024      	beq.n	8003294 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
 8003252:	e01f      	b.n	8003294 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01b      	beq.n	8003294 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
 8003264:	e016      	b.n	8003294 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0208 	bic.w	r2, r2, #8
 8003282:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003298:	2220      	movs	r2, #32
 800329a:	409a      	lsls	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 808f 	beq.w	80033c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8087 	beq.w	80033c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ba:	2220      	movs	r2, #32
 80032bc:	409a      	lsls	r2, r3
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b05      	cmp	r3, #5
 80032cc:	d136      	bne.n	800333c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0216 	bic.w	r2, r2, #22
 80032dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <HAL_DMA_IRQHandler+0x1da>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0208 	bic.w	r2, r2, #8
 800330c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003312:	223f      	movs	r2, #63	@ 0x3f
 8003314:	409a      	lsls	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332e:	2b00      	cmp	r3, #0
 8003330:	d07e      	beq.n	8003430 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
        }
        return;
 800333a:	e079      	b.n	8003430 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01d      	beq.n	8003386 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10d      	bne.n	8003374 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335c:	2b00      	cmp	r3, #0
 800335e:	d031      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4798      	blx	r3
 8003368:	e02c      	b.n	80033c4 <HAL_DMA_IRQHandler+0x2a0>
 800336a:	bf00      	nop
 800336c:	20000000 	.word	0x20000000
 8003370:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d023      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
 8003384:	e01e      	b.n	80033c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10f      	bne.n	80033b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0210 	bic.w	r2, r2, #16
 80033a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d032      	beq.n	8003432 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d022      	beq.n	800341e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2205      	movs	r2, #5
 80033dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3301      	adds	r3, #1
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d307      	bcc.n	800340c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f2      	bne.n	80033f0 <HAL_DMA_IRQHandler+0x2cc>
 800340a:	e000      	b.n	800340e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800340c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
 800342e:	e000      	b.n	8003432 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003430:	bf00      	nop
    }
  }
}
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003454:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b40      	cmp	r3, #64	@ 0x40
 8003464:	d108      	bne.n	8003478 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003476:	e007      	b.n	8003488 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	60da      	str	r2, [r3, #12]
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	3b10      	subs	r3, #16
 80034a4:	4a14      	ldr	r2, [pc, #80]	@ (80034f8 <DMA_CalcBaseAndBitshift+0x64>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034ae:	4a13      	ldr	r2, [pc, #76]	@ (80034fc <DMA_CalcBaseAndBitshift+0x68>)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d909      	bls.n	80034d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034ca:	f023 0303 	bic.w	r3, r3, #3
 80034ce:	1d1a      	adds	r2, r3, #4
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80034d4:	e007      	b.n	80034e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034de:	f023 0303 	bic.w	r3, r3, #3
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	aaaaaaab 	.word	0xaaaaaaab
 80034fc:	08009138 	.word	0x08009138

08003500 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003510:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d11f      	bne.n	800355a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b03      	cmp	r3, #3
 800351e:	d856      	bhi.n	80035ce <DMA_CheckFifoParam+0xce>
 8003520:	a201      	add	r2, pc, #4	@ (adr r2, 8003528 <DMA_CheckFifoParam+0x28>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	08003539 	.word	0x08003539
 800352c:	0800354b 	.word	0x0800354b
 8003530:	08003539 	.word	0x08003539
 8003534:	080035cf 	.word	0x080035cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d046      	beq.n	80035d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003548:	e043      	b.n	80035d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003552:	d140      	bne.n	80035d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003558:	e03d      	b.n	80035d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003562:	d121      	bne.n	80035a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b03      	cmp	r3, #3
 8003568:	d837      	bhi.n	80035da <DMA_CheckFifoParam+0xda>
 800356a:	a201      	add	r2, pc, #4	@ (adr r2, 8003570 <DMA_CheckFifoParam+0x70>)
 800356c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003570:	08003581 	.word	0x08003581
 8003574:	08003587 	.word	0x08003587
 8003578:	08003581 	.word	0x08003581
 800357c:	08003599 	.word	0x08003599
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
      break;
 8003584:	e030      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d025      	beq.n	80035de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003596:	e022      	b.n	80035de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035a0:	d11f      	bne.n	80035e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035a6:	e01c      	b.n	80035e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d903      	bls.n	80035b6 <DMA_CheckFifoParam+0xb6>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d003      	beq.n	80035bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035b4:	e018      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	73fb      	strb	r3, [r7, #15]
      break;
 80035ba:	e015      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00e      	beq.n	80035e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
      break;
 80035cc:	e00b      	b.n	80035e6 <DMA_CheckFifoParam+0xe6>
      break;
 80035ce:	bf00      	nop
 80035d0:	e00a      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      break;
 80035d2:	bf00      	nop
 80035d4:	e008      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      break;
 80035d6:	bf00      	nop
 80035d8:	e006      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      break;
 80035da:	bf00      	nop
 80035dc:	e004      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      break;
 80035de:	bf00      	nop
 80035e0:	e002      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80035e2:	bf00      	nop
 80035e4:	e000      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      break;
 80035e6:	bf00      	nop
    }
  } 
  
  return status; 
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop

080035f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b089      	sub	sp, #36	@ 0x24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800360a:	2300      	movs	r3, #0
 800360c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	e159      	b.n	80038c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003614:	2201      	movs	r2, #1
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	429a      	cmp	r2, r3
 800362e:	f040 8148 	bne.w	80038c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	2b01      	cmp	r3, #1
 800363c:	d005      	beq.n	800364a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003646:	2b02      	cmp	r3, #2
 8003648:	d130      	bne.n	80036ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	2203      	movs	r2, #3
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003680:	2201      	movs	r2, #1
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f003 0201 	and.w	r2, r3, #1
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d017      	beq.n	80036e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	2203      	movs	r2, #3
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d123      	bne.n	800373c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	08da      	lsrs	r2, r3, #3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3208      	adds	r2, #8
 80036fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003700:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	220f      	movs	r2, #15
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	08da      	lsrs	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3208      	adds	r2, #8
 8003736:	69b9      	ldr	r1, [r7, #24]
 8003738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	2203      	movs	r2, #3
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0203 	and.w	r2, r3, #3
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80a2 	beq.w	80038c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	4b57      	ldr	r3, [pc, #348]	@ (80038e0 <HAL_GPIO_Init+0x2e8>)
 8003784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003786:	4a56      	ldr	r2, [pc, #344]	@ (80038e0 <HAL_GPIO_Init+0x2e8>)
 8003788:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800378c:	6453      	str	r3, [r2, #68]	@ 0x44
 800378e:	4b54      	ldr	r3, [pc, #336]	@ (80038e0 <HAL_GPIO_Init+0x2e8>)
 8003790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800379a:	4a52      	ldr	r2, [pc, #328]	@ (80038e4 <HAL_GPIO_Init+0x2ec>)
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	089b      	lsrs	r3, r3, #2
 80037a0:	3302      	adds	r3, #2
 80037a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	220f      	movs	r2, #15
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43db      	mvns	r3, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4013      	ands	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a49      	ldr	r2, [pc, #292]	@ (80038e8 <HAL_GPIO_Init+0x2f0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d019      	beq.n	80037fa <HAL_GPIO_Init+0x202>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a48      	ldr	r2, [pc, #288]	@ (80038ec <HAL_GPIO_Init+0x2f4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <HAL_GPIO_Init+0x1fe>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a47      	ldr	r2, [pc, #284]	@ (80038f0 <HAL_GPIO_Init+0x2f8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00d      	beq.n	80037f2 <HAL_GPIO_Init+0x1fa>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a46      	ldr	r2, [pc, #280]	@ (80038f4 <HAL_GPIO_Init+0x2fc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <HAL_GPIO_Init+0x1f6>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a45      	ldr	r2, [pc, #276]	@ (80038f8 <HAL_GPIO_Init+0x300>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d101      	bne.n	80037ea <HAL_GPIO_Init+0x1f2>
 80037e6:	2304      	movs	r3, #4
 80037e8:	e008      	b.n	80037fc <HAL_GPIO_Init+0x204>
 80037ea:	2307      	movs	r3, #7
 80037ec:	e006      	b.n	80037fc <HAL_GPIO_Init+0x204>
 80037ee:	2303      	movs	r3, #3
 80037f0:	e004      	b.n	80037fc <HAL_GPIO_Init+0x204>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e002      	b.n	80037fc <HAL_GPIO_Init+0x204>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <HAL_GPIO_Init+0x204>
 80037fa:	2300      	movs	r3, #0
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	f002 0203 	and.w	r2, r2, #3
 8003802:	0092      	lsls	r2, r2, #2
 8003804:	4093      	lsls	r3, r2
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800380c:	4935      	ldr	r1, [pc, #212]	@ (80038e4 <HAL_GPIO_Init+0x2ec>)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	089b      	lsrs	r3, r3, #2
 8003812:	3302      	adds	r3, #2
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800381a:	4b38      	ldr	r3, [pc, #224]	@ (80038fc <HAL_GPIO_Init+0x304>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800383e:	4a2f      	ldr	r2, [pc, #188]	@ (80038fc <HAL_GPIO_Init+0x304>)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003844:	4b2d      	ldr	r3, [pc, #180]	@ (80038fc <HAL_GPIO_Init+0x304>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003868:	4a24      	ldr	r2, [pc, #144]	@ (80038fc <HAL_GPIO_Init+0x304>)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800386e:	4b23      	ldr	r3, [pc, #140]	@ (80038fc <HAL_GPIO_Init+0x304>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003892:	4a1a      	ldr	r2, [pc, #104]	@ (80038fc <HAL_GPIO_Init+0x304>)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003898:	4b18      	ldr	r3, [pc, #96]	@ (80038fc <HAL_GPIO_Init+0x304>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038bc:	4a0f      	ldr	r2, [pc, #60]	@ (80038fc <HAL_GPIO_Init+0x304>)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3301      	adds	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2b0f      	cmp	r3, #15
 80038cc:	f67f aea2 	bls.w	8003614 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	3724      	adds	r7, #36	@ 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40013800 	.word	0x40013800
 80038e8:	40020000 	.word	0x40020000
 80038ec:	40020400 	.word	0x40020400
 80038f0:	40020800 	.word	0x40020800
 80038f4:	40020c00 	.word	0x40020c00
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40013c00 	.word	0x40013c00

08003900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	807b      	strh	r3, [r7, #2]
 800390c:	4613      	mov	r3, r2
 800390e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003910:	787b      	ldrb	r3, [r7, #1]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003916:	887a      	ldrh	r2, [r7, #2]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800391c:	e003      	b.n	8003926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800391e:	887b      	ldrh	r3, [r7, #2]
 8003920:	041a      	lsls	r2, r3, #16
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	619a      	str	r2, [r3, #24]
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	460b      	mov	r3, r1
 800393c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003944:	887a      	ldrh	r2, [r7, #2]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4013      	ands	r3, r2
 800394a:	041a      	lsls	r2, r3, #16
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	43d9      	mvns	r1, r3
 8003950:	887b      	ldrh	r3, [r7, #2]
 8003952:	400b      	ands	r3, r1
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	619a      	str	r2, [r3, #24]
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e12b      	b.n	8003bd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fe fb1c 	bl	8001fcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2224      	movs	r2, #36	@ 0x24
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039cc:	f001 fa48 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 80039d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4a81      	ldr	r2, [pc, #516]	@ (8003bdc <HAL_I2C_Init+0x274>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d807      	bhi.n	80039ec <HAL_I2C_Init+0x84>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4a80      	ldr	r2, [pc, #512]	@ (8003be0 <HAL_I2C_Init+0x278>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	bf94      	ite	ls
 80039e4:	2301      	movls	r3, #1
 80039e6:	2300      	movhi	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	e006      	b.n	80039fa <HAL_I2C_Init+0x92>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a7d      	ldr	r2, [pc, #500]	@ (8003be4 <HAL_I2C_Init+0x27c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	bf94      	ite	ls
 80039f4:	2301      	movls	r3, #1
 80039f6:	2300      	movhi	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e0e7      	b.n	8003bd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4a78      	ldr	r2, [pc, #480]	@ (8003be8 <HAL_I2C_Init+0x280>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	0c9b      	lsrs	r3, r3, #18
 8003a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a6a      	ldr	r2, [pc, #424]	@ (8003bdc <HAL_I2C_Init+0x274>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d802      	bhi.n	8003a3c <HAL_I2C_Init+0xd4>
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	e009      	b.n	8003a50 <HAL_I2C_Init+0xe8>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	4a69      	ldr	r2, [pc, #420]	@ (8003bec <HAL_I2C_Init+0x284>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	3301      	adds	r3, #1
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	495c      	ldr	r1, [pc, #368]	@ (8003bdc <HAL_I2C_Init+0x274>)
 8003a6c:	428b      	cmp	r3, r1
 8003a6e:	d819      	bhi.n	8003aa4 <HAL_I2C_Init+0x13c>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1e59      	subs	r1, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a7e:	1c59      	adds	r1, r3, #1
 8003a80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a84:	400b      	ands	r3, r1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_I2C_Init+0x138>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1e59      	subs	r1, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9e:	e051      	b.n	8003b44 <HAL_I2C_Init+0x1dc>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	e04f      	b.n	8003b44 <HAL_I2C_Init+0x1dc>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d111      	bne.n	8003ad0 <HAL_I2C_Init+0x168>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1e58      	subs	r0, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	440b      	add	r3, r1
 8003aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e012      	b.n	8003af6 <HAL_I2C_Init+0x18e>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1e58      	subs	r0, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	0099      	lsls	r1, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_I2C_Init+0x196>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e022      	b.n	8003b44 <HAL_I2C_Init+0x1dc>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10e      	bne.n	8003b24 <HAL_I2C_Init+0x1bc>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1e58      	subs	r0, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6859      	ldr	r1, [r3, #4]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	440b      	add	r3, r1
 8003b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b22:	e00f      	b.n	8003b44 <HAL_I2C_Init+0x1dc>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1e58      	subs	r0, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6859      	ldr	r1, [r3, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	0099      	lsls	r1, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	6809      	ldr	r1, [r1, #0]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69da      	ldr	r2, [r3, #28]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6911      	ldr	r1, [r2, #16]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68d2      	ldr	r2, [r2, #12]
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	430b      	orrs	r3, r1
 8003b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	000186a0 	.word	0x000186a0
 8003be0:	001e847f 	.word	0x001e847f
 8003be4:	003d08ff 	.word	0x003d08ff
 8003be8:	431bde83 	.word	0x431bde83
 8003bec:	10624dd3 	.word	0x10624dd3

08003bf0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08c      	sub	sp, #48	@ 0x30
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	817b      	strh	r3, [r7, #10]
 8003c02:	460b      	mov	r3, r1
 8003c04:	813b      	strh	r3, [r7, #8]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c0a:	f7fe fcaf 	bl	800256c <HAL_GetTick>
 8003c0e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	f040 8214 	bne.w	8004046 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	2319      	movs	r3, #25
 8003c24:	2201      	movs	r2, #1
 8003c26:	497b      	ldr	r1, [pc, #492]	@ (8003e14 <HAL_I2C_Mem_Read+0x224>)
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fafb 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
 8003c36:	e207      	b.n	8004048 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_I2C_Mem_Read+0x56>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e200      	b.n	8004048 <HAL_I2C_Mem_Read+0x458>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d007      	beq.n	8003c6c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2222      	movs	r2, #34	@ 0x22
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2240      	movs	r2, #64	@ 0x40
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a5b      	ldr	r2, [pc, #364]	@ (8003e18 <HAL_I2C_Mem_Read+0x228>)
 8003cac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cae:	88f8      	ldrh	r0, [r7, #6]
 8003cb0:	893a      	ldrh	r2, [r7, #8]
 8003cb2:	8979      	ldrh	r1, [r7, #10]
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f9c8 	bl	8004054 <I2C_RequestMemoryRead>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e1bc      	b.n	8004048 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d113      	bne.n	8003cfe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	623b      	str	r3, [r7, #32]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	623b      	str	r3, [r7, #32]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	623b      	str	r3, [r7, #32]
 8003cea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e190      	b.n	8004020 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d11b      	bne.n	8003d3e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	e170      	b.n	8004020 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d11b      	bne.n	8003d7e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d66:	2300      	movs	r3, #0
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	e150      	b.n	8004020 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d94:	e144      	b.n	8004020 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	f200 80f1 	bhi.w	8003f82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d123      	bne.n	8003df0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003daa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 fb9b 	bl	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e145      	b.n	8004048 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003dee:	e117      	b.n	8004020 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d14e      	bne.n	8003e96 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfe:	2200      	movs	r2, #0
 8003e00:	4906      	ldr	r1, [pc, #24]	@ (8003e1c <HAL_I2C_Mem_Read+0x22c>)
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 fa0e 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e11a      	b.n	8004048 <HAL_I2C_Mem_Read+0x458>
 8003e12:	bf00      	nop
 8003e14:	00100002 	.word	0x00100002
 8003e18:	ffff0000 	.word	0xffff0000
 8003e1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e94:	e0c4      	b.n	8004020 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	496c      	ldr	r1, [pc, #432]	@ (8004050 <HAL_I2C_Mem_Read+0x460>)
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f9bf 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0cb      	b.n	8004048 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ebe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef8:	2200      	movs	r2, #0
 8003efa:	4955      	ldr	r1, [pc, #340]	@ (8004050 <HAL_I2C_Mem_Read+0x460>)
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f991 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e09d      	b.n	8004048 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f80:	e04e      	b.n	8004020 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f84:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 faae 	bl	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e058      	b.n	8004048 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d124      	bne.n	8004020 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d107      	bne.n	8003fee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004024:	2b00      	cmp	r3, #0
 8004026:	f47f aeb6 	bne.w	8003d96 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	e000      	b.n	8004048 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004046:	2302      	movs	r3, #2
  }
}
 8004048:	4618      	mov	r0, r3
 800404a:	3728      	adds	r7, #40	@ 0x28
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	00010004 	.word	0x00010004

08004054 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	4608      	mov	r0, r1
 800405e:	4611      	mov	r1, r2
 8004060:	461a      	mov	r2, r3
 8004062:	4603      	mov	r3, r0
 8004064:	817b      	strh	r3, [r7, #10]
 8004066:	460b      	mov	r3, r1
 8004068:	813b      	strh	r3, [r7, #8]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800407c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800408c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	2200      	movs	r2, #0
 8004096:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f8c2 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040b4:	d103      	bne.n	80040be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e0aa      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040c2:	897b      	ldrh	r3, [r7, #10]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	4952      	ldr	r1, [pc, #328]	@ (8004220 <I2C_RequestMemoryRead+0x1cc>)
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f91d 	bl	8004318 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e097      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004100:	6a39      	ldr	r1, [r7, #32]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f9a8 	bl	8004458 <I2C_WaitOnTXEFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	2b04      	cmp	r3, #4
 8004114:	d107      	bne.n	8004126 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004124:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e076      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d105      	bne.n	800413c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004130:	893b      	ldrh	r3, [r7, #8]
 8004132:	b2da      	uxtb	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	611a      	str	r2, [r3, #16]
 800413a:	e021      	b.n	8004180 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800413c:	893b      	ldrh	r3, [r7, #8]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	b29b      	uxth	r3, r3
 8004142:	b2da      	uxtb	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800414a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800414c:	6a39      	ldr	r1, [r7, #32]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f982 	bl	8004458 <I2C_WaitOnTXEFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00d      	beq.n	8004176 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	2b04      	cmp	r3, #4
 8004160:	d107      	bne.n	8004172 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004170:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e050      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004176:	893b      	ldrh	r3, [r7, #8]
 8004178:	b2da      	uxtb	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004182:	6a39      	ldr	r1, [r7, #32]
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f967 	bl	8004458 <I2C_WaitOnTXEFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00d      	beq.n	80041ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	2b04      	cmp	r3, #4
 8004196:	d107      	bne.n	80041a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e035      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f82b 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00d      	beq.n	80041f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041e2:	d103      	bne.n	80041ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e013      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041f0:	897b      	ldrh	r3, [r7, #10]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	6a3a      	ldr	r2, [r7, #32]
 8004204:	4906      	ldr	r1, [pc, #24]	@ (8004220 <I2C_RequestMemoryRead+0x1cc>)
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f886 	bl	8004318 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	00010002 	.word	0x00010002

08004224 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004234:	e048      	b.n	80042c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d044      	beq.n	80042c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423e:	f7fe f995 	bl	800256c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d302      	bcc.n	8004254 <I2C_WaitOnFlagUntilTimeout+0x30>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d139      	bne.n	80042c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	0c1b      	lsrs	r3, r3, #16
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d10d      	bne.n	800427a <I2C_WaitOnFlagUntilTimeout+0x56>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	43da      	mvns	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4013      	ands	r3, r2
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	e00c      	b.n	8004294 <I2C_WaitOnFlagUntilTimeout+0x70>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	43da      	mvns	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4013      	ands	r3, r2
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	461a      	mov	r2, r3
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	429a      	cmp	r2, r3
 8004298:	d116      	bne.n	80042c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	f043 0220 	orr.w	r2, r3, #32
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e023      	b.n	8004310 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	0c1b      	lsrs	r3, r3, #16
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d10d      	bne.n	80042ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	43da      	mvns	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4013      	ands	r3, r2
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	e00c      	b.n	8004308 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	43da      	mvns	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4013      	ands	r3, r2
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	429a      	cmp	r2, r3
 800430c:	d093      	beq.n	8004236 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004326:	e071      	b.n	800440c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004336:	d123      	bne.n	8004380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004346:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004350:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	f043 0204 	orr.w	r2, r3, #4
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e067      	b.n	8004450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004386:	d041      	beq.n	800440c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004388:	f7fe f8f0 	bl	800256c <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	429a      	cmp	r2, r3
 8004396:	d302      	bcc.n	800439e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d136      	bne.n	800440c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	0c1b      	lsrs	r3, r3, #16
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d10c      	bne.n	80043c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	43da      	mvns	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4013      	ands	r3, r2
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	bf14      	ite	ne
 80043ba:	2301      	movne	r3, #1
 80043bc:	2300      	moveq	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	e00b      	b.n	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	43da      	mvns	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4013      	ands	r3, r2
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bf14      	ite	ne
 80043d4:	2301      	movne	r3, #1
 80043d6:	2300      	moveq	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d016      	beq.n	800440c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f8:	f043 0220 	orr.w	r2, r3, #32
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e021      	b.n	8004450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	0c1b      	lsrs	r3, r3, #16
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	d10c      	bne.n	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	43da      	mvns	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4013      	ands	r3, r2
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf14      	ite	ne
 8004428:	2301      	movne	r3, #1
 800442a:	2300      	moveq	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	e00b      	b.n	8004448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	43da      	mvns	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4013      	ands	r3, r2
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	bf14      	ite	ne
 8004442:	2301      	movne	r3, #1
 8004444:	2300      	moveq	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	f47f af6d 	bne.w	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004464:	e034      	b.n	80044d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f89b 	bl	80045a2 <I2C_IsAcknowledgeFailed>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e034      	b.n	80044e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d028      	beq.n	80044d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447e:	f7fe f875 	bl	800256c <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d11d      	bne.n	80044d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449e:	2b80      	cmp	r3, #128	@ 0x80
 80044a0:	d016      	beq.n	80044d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044bc:	f043 0220 	orr.w	r2, r3, #32
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e007      	b.n	80044e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044da:	2b80      	cmp	r3, #128	@ 0x80
 80044dc:	d1c3      	bne.n	8004466 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044f4:	e049      	b.n	800458a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0310 	and.w	r3, r3, #16
 8004500:	2b10      	cmp	r3, #16
 8004502:	d119      	bne.n	8004538 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0210 	mvn.w	r2, #16
 800450c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e030      	b.n	800459a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004538:	f7fe f818 	bl	800256c <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	429a      	cmp	r2, r3
 8004546:	d302      	bcc.n	800454e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d11d      	bne.n	800458a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004558:	2b40      	cmp	r3, #64	@ 0x40
 800455a:	d016      	beq.n	800458a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	f043 0220 	orr.w	r2, r3, #32
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e007      	b.n	800459a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004594:	2b40      	cmp	r3, #64	@ 0x40
 8004596:	d1ae      	bne.n	80044f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045b8:	d11b      	bne.n	80045f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	f043 0204 	orr.w	r2, r3, #4
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e267      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d075      	beq.n	800470a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800461e:	4b88      	ldr	r3, [pc, #544]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 030c 	and.w	r3, r3, #12
 8004626:	2b04      	cmp	r3, #4
 8004628:	d00c      	beq.n	8004644 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800462a:	4b85      	ldr	r3, [pc, #532]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004632:	2b08      	cmp	r3, #8
 8004634:	d112      	bne.n	800465c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004636:	4b82      	ldr	r3, [pc, #520]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800463e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004642:	d10b      	bne.n	800465c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004644:	4b7e      	ldr	r3, [pc, #504]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d05b      	beq.n	8004708 <HAL_RCC_OscConfig+0x108>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d157      	bne.n	8004708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e242      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004664:	d106      	bne.n	8004674 <HAL_RCC_OscConfig+0x74>
 8004666:	4b76      	ldr	r3, [pc, #472]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a75      	ldr	r2, [pc, #468]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 800466c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	e01d      	b.n	80046b0 <HAL_RCC_OscConfig+0xb0>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800467c:	d10c      	bne.n	8004698 <HAL_RCC_OscConfig+0x98>
 800467e:	4b70      	ldr	r3, [pc, #448]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a6f      	ldr	r2, [pc, #444]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 8004684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	4b6d      	ldr	r3, [pc, #436]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a6c      	ldr	r2, [pc, #432]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 8004690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	e00b      	b.n	80046b0 <HAL_RCC_OscConfig+0xb0>
 8004698:	4b69      	ldr	r3, [pc, #420]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a68      	ldr	r2, [pc, #416]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 800469e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	4b66      	ldr	r3, [pc, #408]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a65      	ldr	r2, [pc, #404]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 80046aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d013      	beq.n	80046e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fd ff58 	bl	800256c <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046c0:	f7fd ff54 	bl	800256c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b64      	cmp	r3, #100	@ 0x64
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e207      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d2:	4b5b      	ldr	r3, [pc, #364]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0xc0>
 80046de:	e014      	b.n	800470a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7fd ff44 	bl	800256c <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046e8:	f7fd ff40 	bl	800256c <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	@ 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e1f3      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046fa:	4b51      	ldr	r3, [pc, #324]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0xe8>
 8004706:	e000      	b.n	800470a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d063      	beq.n	80047de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004716:	4b4a      	ldr	r3, [pc, #296]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 030c 	and.w	r3, r3, #12
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004722:	4b47      	ldr	r3, [pc, #284]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800472a:	2b08      	cmp	r3, #8
 800472c:	d11c      	bne.n	8004768 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800472e:	4b44      	ldr	r3, [pc, #272]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d116      	bne.n	8004768 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473a:	4b41      	ldr	r3, [pc, #260]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <HAL_RCC_OscConfig+0x152>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d001      	beq.n	8004752 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e1c7      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004752:	4b3b      	ldr	r3, [pc, #236]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	4937      	ldr	r1, [pc, #220]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004766:	e03a      	b.n	80047de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d020      	beq.n	80047b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004770:	4b34      	ldr	r3, [pc, #208]	@ (8004844 <HAL_RCC_OscConfig+0x244>)
 8004772:	2201      	movs	r2, #1
 8004774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004776:	f7fd fef9 	bl	800256c <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800477e:	f7fd fef5 	bl	800256c <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e1a8      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004790:	4b2b      	ldr	r3, [pc, #172]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0f0      	beq.n	800477e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479c:	4b28      	ldr	r3, [pc, #160]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4925      	ldr	r1, [pc, #148]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]
 80047b0:	e015      	b.n	80047de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047b2:	4b24      	ldr	r3, [pc, #144]	@ (8004844 <HAL_RCC_OscConfig+0x244>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fd fed8 	bl	800256c <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047c0:	f7fd fed4 	bl	800256c <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e187      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d036      	beq.n	8004858 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d016      	beq.n	8004820 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047f2:	4b15      	ldr	r3, [pc, #84]	@ (8004848 <HAL_RCC_OscConfig+0x248>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f8:	f7fd feb8 	bl	800256c <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004800:	f7fd feb4 	bl	800256c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e167      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004812:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <HAL_RCC_OscConfig+0x240>)
 8004814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0f0      	beq.n	8004800 <HAL_RCC_OscConfig+0x200>
 800481e:	e01b      	b.n	8004858 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004820:	4b09      	ldr	r3, [pc, #36]	@ (8004848 <HAL_RCC_OscConfig+0x248>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004826:	f7fd fea1 	bl	800256c <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800482c:	e00e      	b.n	800484c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800482e:	f7fd fe9d 	bl	800256c <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d907      	bls.n	800484c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e150      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
 8004840:	40023800 	.word	0x40023800
 8004844:	42470000 	.word	0x42470000
 8004848:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800484c:	4b88      	ldr	r3, [pc, #544]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 800484e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1ea      	bne.n	800482e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8097 	beq.w	8004994 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004866:	2300      	movs	r3, #0
 8004868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800486a:	4b81      	ldr	r3, [pc, #516]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10f      	bne.n	8004896 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004876:	2300      	movs	r3, #0
 8004878:	60bb      	str	r3, [r7, #8]
 800487a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 800487c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 8004880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004884:	6413      	str	r3, [r2, #64]	@ 0x40
 8004886:	4b7a      	ldr	r3, [pc, #488]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800488e:	60bb      	str	r3, [r7, #8]
 8004890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004892:	2301      	movs	r3, #1
 8004894:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004896:	4b77      	ldr	r3, [pc, #476]	@ (8004a74 <HAL_RCC_OscConfig+0x474>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d118      	bne.n	80048d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048a2:	4b74      	ldr	r3, [pc, #464]	@ (8004a74 <HAL_RCC_OscConfig+0x474>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a73      	ldr	r2, [pc, #460]	@ (8004a74 <HAL_RCC_OscConfig+0x474>)
 80048a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ae:	f7fd fe5d 	bl	800256c <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b6:	f7fd fe59 	bl	800256c <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e10c      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a74 <HAL_RCC_OscConfig+0x474>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d106      	bne.n	80048ea <HAL_RCC_OscConfig+0x2ea>
 80048dc:	4b64      	ldr	r3, [pc, #400]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 80048de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e0:	4a63      	ldr	r2, [pc, #396]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048e8:	e01c      	b.n	8004924 <HAL_RCC_OscConfig+0x324>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b05      	cmp	r3, #5
 80048f0:	d10c      	bne.n	800490c <HAL_RCC_OscConfig+0x30c>
 80048f2:	4b5f      	ldr	r3, [pc, #380]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f6:	4a5e      	ldr	r2, [pc, #376]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 80048f8:	f043 0304 	orr.w	r3, r3, #4
 80048fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80048fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004902:	4a5b      	ldr	r2, [pc, #364]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	6713      	str	r3, [r2, #112]	@ 0x70
 800490a:	e00b      	b.n	8004924 <HAL_RCC_OscConfig+0x324>
 800490c:	4b58      	ldr	r3, [pc, #352]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 800490e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004910:	4a57      	ldr	r2, [pc, #348]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	6713      	str	r3, [r2, #112]	@ 0x70
 8004918:	4b55      	ldr	r3, [pc, #340]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 800491a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491c:	4a54      	ldr	r2, [pc, #336]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 800491e:	f023 0304 	bic.w	r3, r3, #4
 8004922:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d015      	beq.n	8004958 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492c:	f7fd fe1e 	bl	800256c <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004932:	e00a      	b.n	800494a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004934:	f7fd fe1a 	bl	800256c <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e0cb      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494a:	4b49      	ldr	r3, [pc, #292]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0ee      	beq.n	8004934 <HAL_RCC_OscConfig+0x334>
 8004956:	e014      	b.n	8004982 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004958:	f7fd fe08 	bl	800256c <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800495e:	e00a      	b.n	8004976 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004960:	f7fd fe04 	bl	800256c <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e0b5      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004976:	4b3e      	ldr	r3, [pc, #248]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1ee      	bne.n	8004960 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004982:	7dfb      	ldrb	r3, [r7, #23]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d105      	bne.n	8004994 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004988:	4b39      	ldr	r3, [pc, #228]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 800498a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498c:	4a38      	ldr	r2, [pc, #224]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 800498e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004992:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 80a1 	beq.w	8004ae0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800499e:	4b34      	ldr	r3, [pc, #208]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d05c      	beq.n	8004a64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d141      	bne.n	8004a36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b2:	4b31      	ldr	r3, [pc, #196]	@ (8004a78 <HAL_RCC_OscConfig+0x478>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b8:	f7fd fdd8 	bl	800256c <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c0:	f7fd fdd4 	bl	800256c <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e087      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d2:	4b27      	ldr	r3, [pc, #156]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f0      	bne.n	80049c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69da      	ldr	r2, [r3, #28]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ec:	019b      	lsls	r3, r3, #6
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f4:	085b      	lsrs	r3, r3, #1
 80049f6:	3b01      	subs	r3, #1
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a00:	061b      	lsls	r3, r3, #24
 8004a02:	491b      	ldr	r1, [pc, #108]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a08:	4b1b      	ldr	r3, [pc, #108]	@ (8004a78 <HAL_RCC_OscConfig+0x478>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0e:	f7fd fdad 	bl	800256c <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a16:	f7fd fda9 	bl	800256c <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e05c      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a28:	4b11      	ldr	r3, [pc, #68]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x416>
 8004a34:	e054      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a36:	4b10      	ldr	r3, [pc, #64]	@ (8004a78 <HAL_RCC_OscConfig+0x478>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fd fd96 	bl	800256c <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fd fd92 	bl	800256c <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e045      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a56:	4b06      	ldr	r3, [pc, #24]	@ (8004a70 <HAL_RCC_OscConfig+0x470>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x444>
 8004a62:	e03d      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d107      	bne.n	8004a7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e038      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
 8004a70:	40023800 	.word	0x40023800
 8004a74:	40007000 	.word	0x40007000
 8004a78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004aec <HAL_RCC_OscConfig+0x4ec>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d028      	beq.n	8004adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d121      	bne.n	8004adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d11a      	bne.n	8004adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004aac:	4013      	ands	r3, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ab2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d111      	bne.n	8004adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac2:	085b      	lsrs	r3, r3, #1
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d107      	bne.n	8004adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40023800 	.word	0x40023800

08004af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0cc      	b.n	8004c9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b04:	4b68      	ldr	r3, [pc, #416]	@ (8004ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d90c      	bls.n	8004b2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b12:	4b65      	ldr	r3, [pc, #404]	@ (8004ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1a:	4b63      	ldr	r3, [pc, #396]	@ (8004ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d001      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0b8      	b.n	8004c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d020      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d005      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b44:	4b59      	ldr	r3, [pc, #356]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	4a58      	ldr	r2, [pc, #352]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b5c:	4b53      	ldr	r3, [pc, #332]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	4a52      	ldr	r2, [pc, #328]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b68:	4b50      	ldr	r3, [pc, #320]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	494d      	ldr	r1, [pc, #308]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d044      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d107      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8e:	4b47      	ldr	r3, [pc, #284]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d119      	bne.n	8004bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e07f      	b.n	8004c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d003      	beq.n	8004bae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d107      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bae:	4b3f      	ldr	r3, [pc, #252]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e06f      	b.n	8004c9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e067      	b.n	8004c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bce:	4b37      	ldr	r3, [pc, #220]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f023 0203 	bic.w	r2, r3, #3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4934      	ldr	r1, [pc, #208]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004be0:	f7fd fcc4 	bl	800256c <HAL_GetTick>
 8004be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be6:	e00a      	b.n	8004bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be8:	f7fd fcc0 	bl	800256c <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e04f      	b.n	8004c9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 020c 	and.w	r2, r3, #12
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d1eb      	bne.n	8004be8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c10:	4b25      	ldr	r3, [pc, #148]	@ (8004ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d20c      	bcs.n	8004c38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1e:	4b22      	ldr	r3, [pc, #136]	@ (8004ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c26:	4b20      	ldr	r3, [pc, #128]	@ (8004ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d001      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e032      	b.n	8004c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d008      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c44:	4b19      	ldr	r3, [pc, #100]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	4916      	ldr	r1, [pc, #88]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d009      	beq.n	8004c76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c62:	4b12      	ldr	r3, [pc, #72]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	490e      	ldr	r1, [pc, #56]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c76:	f000 f821 	bl	8004cbc <HAL_RCC_GetSysClockFreq>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cac <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	091b      	lsrs	r3, r3, #4
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	490a      	ldr	r1, [pc, #40]	@ (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c88:	5ccb      	ldrb	r3, [r1, r3]
 8004c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8e:	4a09      	ldr	r2, [pc, #36]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c92:	4b09      	ldr	r3, [pc, #36]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fd faec 	bl	8002274 <HAL_InitTick>

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40023c00 	.word	0x40023c00
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	08009120 	.word	0x08009120
 8004cb4:	20000000 	.word	0x20000000
 8004cb8:	20000004 	.word	0x20000004

08004cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc0:	b090      	sub	sp, #64	@ 0x40
 8004cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc8:	2300      	movs	r3, #0
 8004cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ccc:	2300      	movs	r3, #0
 8004cce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cd4:	4b59      	ldr	r3, [pc, #356]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 030c 	and.w	r3, r3, #12
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d00d      	beq.n	8004cfc <HAL_RCC_GetSysClockFreq+0x40>
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	f200 80a1 	bhi.w	8004e28 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d003      	beq.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cee:	e09b      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cf0:	4b53      	ldr	r3, [pc, #332]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004cf4:	e09b      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cf6:	4b53      	ldr	r3, [pc, #332]	@ (8004e44 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cfa:	e098      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cfc:	4b4f      	ldr	r3, [pc, #316]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d04:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d06:	4b4d      	ldr	r3, [pc, #308]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d028      	beq.n	8004d64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d12:	4b4a      	ldr	r3, [pc, #296]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	2200      	movs	r2, #0
 8004d1a:	623b      	str	r3, [r7, #32]
 8004d1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d24:	2100      	movs	r1, #0
 8004d26:	4b47      	ldr	r3, [pc, #284]	@ (8004e44 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d28:	fb03 f201 	mul.w	r2, r3, r1
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	fb00 f303 	mul.w	r3, r0, r3
 8004d32:	4413      	add	r3, r2
 8004d34:	4a43      	ldr	r2, [pc, #268]	@ (8004e44 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d36:	fba0 1202 	umull	r1, r2, r0, r2
 8004d3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d3c:	460a      	mov	r2, r1
 8004d3e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004d40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d42:	4413      	add	r3, r2
 8004d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d48:	2200      	movs	r2, #0
 8004d4a:	61bb      	str	r3, [r7, #24]
 8004d4c:	61fa      	str	r2, [r7, #28]
 8004d4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004d56:	f7fb fee9 	bl	8000b2c <__aeabi_uldivmod>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4613      	mov	r3, r2
 8004d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d62:	e053      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d64:	4b35      	ldr	r3, [pc, #212]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	099b      	lsrs	r3, r3, #6
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	617a      	str	r2, [r7, #20]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d76:	f04f 0b00 	mov.w	fp, #0
 8004d7a:	4652      	mov	r2, sl
 8004d7c:	465b      	mov	r3, fp
 8004d7e:	f04f 0000 	mov.w	r0, #0
 8004d82:	f04f 0100 	mov.w	r1, #0
 8004d86:	0159      	lsls	r1, r3, #5
 8004d88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d8c:	0150      	lsls	r0, r2, #5
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	ebb2 080a 	subs.w	r8, r2, sl
 8004d96:	eb63 090b 	sbc.w	r9, r3, fp
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004da6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004daa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004dae:	ebb2 0408 	subs.w	r4, r2, r8
 8004db2:	eb63 0509 	sbc.w	r5, r3, r9
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	00eb      	lsls	r3, r5, #3
 8004dc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dc4:	00e2      	lsls	r2, r4, #3
 8004dc6:	4614      	mov	r4, r2
 8004dc8:	461d      	mov	r5, r3
 8004dca:	eb14 030a 	adds.w	r3, r4, sl
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	eb45 030b 	adc.w	r3, r5, fp
 8004dd4:	607b      	str	r3, [r7, #4]
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004de2:	4629      	mov	r1, r5
 8004de4:	028b      	lsls	r3, r1, #10
 8004de6:	4621      	mov	r1, r4
 8004de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dec:	4621      	mov	r1, r4
 8004dee:	028a      	lsls	r2, r1, #10
 8004df0:	4610      	mov	r0, r2
 8004df2:	4619      	mov	r1, r3
 8004df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df6:	2200      	movs	r2, #0
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	60fa      	str	r2, [r7, #12]
 8004dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e00:	f7fb fe94 	bl	8000b2c <__aeabi_uldivmod>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4613      	mov	r3, r2
 8004e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	0c1b      	lsrs	r3, r3, #16
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	3301      	adds	r3, #1
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004e1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e26:	e002      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e28:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3740      	adds	r7, #64	@ 0x40
 8004e34:	46bd      	mov	sp, r7
 8004e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	00f42400 	.word	0x00f42400
 8004e44:	017d7840 	.word	0x017d7840

08004e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e4c:	4b03      	ldr	r3, [pc, #12]	@ (8004e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000000 	.word	0x20000000

08004e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e64:	f7ff fff0 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	4b05      	ldr	r3, [pc, #20]	@ (8004e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	0a9b      	lsrs	r3, r3, #10
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4903      	ldr	r1, [pc, #12]	@ (8004e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e76:	5ccb      	ldrb	r3, [r1, r3]
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40023800 	.word	0x40023800
 8004e84:	08009130 	.word	0x08009130

08004e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e8c:	f7ff ffdc 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4b05      	ldr	r3, [pc, #20]	@ (8004ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	0b5b      	lsrs	r3, r3, #13
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	4903      	ldr	r1, [pc, #12]	@ (8004eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	08009130 	.word	0x08009130

08004eb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	220f      	movs	r2, #15
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ec0:	4b12      	ldr	r3, [pc, #72]	@ (8004f0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 0203 	and.w	r2, r3, #3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8004f0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f0c <HAL_RCC_GetClockConfig+0x5c>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ee4:	4b09      	ldr	r3, [pc, #36]	@ (8004f0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	08db      	lsrs	r3, r3, #3
 8004eea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ef2:	4b07      	ldr	r3, [pc, #28]	@ (8004f10 <HAL_RCC_GetClockConfig+0x60>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0207 	and.w	r2, r3, #7
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	601a      	str	r2, [r3, #0]
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	40023c00 	.word	0x40023c00

08004f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e07b      	b.n	800501e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d108      	bne.n	8004f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f36:	d009      	beq.n	8004f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	61da      	str	r2, [r3, #28]
 8004f3e:	e005      	b.n	8004f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fd f8be 	bl	80020e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd0:	ea42 0103 	orr.w	r1, r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	f003 0104 	and.w	r1, r3, #4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	f003 0210 	and.w	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800500c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e041      	b.n	80050bc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d106      	bne.n	8005052 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7fd f893 	bl	8002178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2202      	movs	r2, #2
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3304      	adds	r3, #4
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f000 fc3b 	bl	80058e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d001      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e044      	b.n	8005166 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005174 <HAL_TIM_Base_Start_IT+0xb0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d018      	beq.n	8005130 <HAL_TIM_Base_Start_IT+0x6c>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005106:	d013      	beq.n	8005130 <HAL_TIM_Base_Start_IT+0x6c>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1a      	ldr	r2, [pc, #104]	@ (8005178 <HAL_TIM_Base_Start_IT+0xb4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00e      	beq.n	8005130 <HAL_TIM_Base_Start_IT+0x6c>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a19      	ldr	r2, [pc, #100]	@ (800517c <HAL_TIM_Base_Start_IT+0xb8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d009      	beq.n	8005130 <HAL_TIM_Base_Start_IT+0x6c>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a17      	ldr	r2, [pc, #92]	@ (8005180 <HAL_TIM_Base_Start_IT+0xbc>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d004      	beq.n	8005130 <HAL_TIM_Base_Start_IT+0x6c>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a16      	ldr	r2, [pc, #88]	@ (8005184 <HAL_TIM_Base_Start_IT+0xc0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d111      	bne.n	8005154 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b06      	cmp	r3, #6
 8005140:	d010      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005152:	e007      	b.n	8005164 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40010000 	.word	0x40010000
 8005178:	40000400 	.word	0x40000400
 800517c:	40000800 	.word	0x40000800
 8005180:	40000c00 	.word	0x40000c00
 8005184:	40014000 	.word	0x40014000

08005188 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e041      	b.n	800521e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f839 	bl	8005226 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3304      	adds	r3, #4
 80051c4:	4619      	mov	r1, r3
 80051c6:	4610      	mov	r0, r2
 80051c8:	f000 fb8a 	bl	80058e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d109      	bne.n	8005260 <HAL_TIM_PWM_Start+0x24>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	bf14      	ite	ne
 8005258:	2301      	movne	r3, #1
 800525a:	2300      	moveq	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	e022      	b.n	80052a6 <HAL_TIM_PWM_Start+0x6a>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2b04      	cmp	r3, #4
 8005264:	d109      	bne.n	800527a <HAL_TIM_PWM_Start+0x3e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b01      	cmp	r3, #1
 8005270:	bf14      	ite	ne
 8005272:	2301      	movne	r3, #1
 8005274:	2300      	moveq	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	e015      	b.n	80052a6 <HAL_TIM_PWM_Start+0x6a>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b08      	cmp	r3, #8
 800527e:	d109      	bne.n	8005294 <HAL_TIM_PWM_Start+0x58>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	bf14      	ite	ne
 800528c:	2301      	movne	r3, #1
 800528e:	2300      	moveq	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	e008      	b.n	80052a6 <HAL_TIM_PWM_Start+0x6a>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	bf14      	ite	ne
 80052a0:	2301      	movne	r3, #1
 80052a2:	2300      	moveq	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e068      	b.n	8005380 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d104      	bne.n	80052be <HAL_TIM_PWM_Start+0x82>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052bc:	e013      	b.n	80052e6 <HAL_TIM_PWM_Start+0xaa>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_PWM_Start+0x92>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052cc:	e00b      	b.n	80052e6 <HAL_TIM_PWM_Start+0xaa>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d104      	bne.n	80052de <HAL_TIM_PWM_Start+0xa2>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052dc:	e003      	b.n	80052e6 <HAL_TIM_PWM_Start+0xaa>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2202      	movs	r2, #2
 80052e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2201      	movs	r2, #1
 80052ec:	6839      	ldr	r1, [r7, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fda8 	bl	8005e44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a23      	ldr	r2, [pc, #140]	@ (8005388 <HAL_TIM_PWM_Start+0x14c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d107      	bne.n	800530e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800530c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1d      	ldr	r2, [pc, #116]	@ (8005388 <HAL_TIM_PWM_Start+0x14c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d018      	beq.n	800534a <HAL_TIM_PWM_Start+0x10e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005320:	d013      	beq.n	800534a <HAL_TIM_PWM_Start+0x10e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a19      	ldr	r2, [pc, #100]	@ (800538c <HAL_TIM_PWM_Start+0x150>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00e      	beq.n	800534a <HAL_TIM_PWM_Start+0x10e>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a17      	ldr	r2, [pc, #92]	@ (8005390 <HAL_TIM_PWM_Start+0x154>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_TIM_PWM_Start+0x10e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a16      	ldr	r2, [pc, #88]	@ (8005394 <HAL_TIM_PWM_Start+0x158>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d004      	beq.n	800534a <HAL_TIM_PWM_Start+0x10e>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a14      	ldr	r2, [pc, #80]	@ (8005398 <HAL_TIM_PWM_Start+0x15c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d111      	bne.n	800536e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b06      	cmp	r3, #6
 800535a:	d010      	beq.n	800537e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536c:	e007      	b.n	800537e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40010000 	.word	0x40010000
 800538c:	40000400 	.word	0x40000400
 8005390:	40000800 	.word	0x40000800
 8005394:	40000c00 	.word	0x40000c00
 8005398:	40014000 	.word	0x40014000

0800539c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d020      	beq.n	8005400 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01b      	beq.n	8005400 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0202 	mvn.w	r2, #2
 80053d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fa5b 	bl	80058a2 <HAL_TIM_IC_CaptureCallback>
 80053ec:	e005      	b.n	80053fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fa4d 	bl	800588e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fa5e 	bl	80058b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d020      	beq.n	800544c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01b      	beq.n	800544c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0204 	mvn.w	r2, #4
 800541c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fa35 	bl	80058a2 <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fa27 	bl	800588e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fa38 	bl	80058b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d020      	beq.n	8005498 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f003 0308 	and.w	r3, r3, #8
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01b      	beq.n	8005498 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0208 	mvn.w	r2, #8
 8005468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2204      	movs	r2, #4
 800546e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fa0f 	bl	80058a2 <HAL_TIM_IC_CaptureCallback>
 8005484:	e005      	b.n	8005492 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa01 	bl	800588e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fa12 	bl	80058b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d020      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01b      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0210 	mvn.w	r2, #16
 80054b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2208      	movs	r2, #8
 80054ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f9e9 	bl	80058a2 <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f9db 	bl	800588e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f9ec 	bl	80058b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00c      	beq.n	8005508 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d007      	beq.n	8005508 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0201 	mvn.w	r2, #1
 8005500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fc fc9c 	bl	8001e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00c      	beq.n	800552c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fd7c 	bl	8006024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00c      	beq.n	8005550 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f9bd 	bl	80058ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00c      	beq.n	8005574 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0220 	mvn.w	r2, #32
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fd4e 	bl	8006010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005574:	bf00      	nop
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005596:	2302      	movs	r3, #2
 8005598:	e0ae      	b.n	80056f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b0c      	cmp	r3, #12
 80055a6:	f200 809f 	bhi.w	80056e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055aa:	a201      	add	r2, pc, #4	@ (adr r2, 80055b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	080055e5 	.word	0x080055e5
 80055b4:	080056e9 	.word	0x080056e9
 80055b8:	080056e9 	.word	0x080056e9
 80055bc:	080056e9 	.word	0x080056e9
 80055c0:	08005625 	.word	0x08005625
 80055c4:	080056e9 	.word	0x080056e9
 80055c8:	080056e9 	.word	0x080056e9
 80055cc:	080056e9 	.word	0x080056e9
 80055d0:	08005667 	.word	0x08005667
 80055d4:	080056e9 	.word	0x080056e9
 80055d8:	080056e9 	.word	0x080056e9
 80055dc:	080056e9 	.word	0x080056e9
 80055e0:	080056a7 	.word	0x080056a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fa04 	bl	80059f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0208 	orr.w	r2, r2, #8
 80055fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0204 	bic.w	r2, r2, #4
 800560e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6999      	ldr	r1, [r3, #24]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	619a      	str	r2, [r3, #24]
      break;
 8005622:	e064      	b.n	80056ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fa4a 	bl	8005ac4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800563e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699a      	ldr	r2, [r3, #24]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800564e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6999      	ldr	r1, [r3, #24]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	021a      	lsls	r2, r3, #8
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	619a      	str	r2, [r3, #24]
      break;
 8005664:	e043      	b.n	80056ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fa95 	bl	8005b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0208 	orr.w	r2, r2, #8
 8005680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0204 	bic.w	r2, r2, #4
 8005690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69d9      	ldr	r1, [r3, #28]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	61da      	str	r2, [r3, #28]
      break;
 80056a4:	e023      	b.n	80056ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fadf 	bl	8005c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69da      	ldr	r2, [r3, #28]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69d9      	ldr	r1, [r3, #28]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	021a      	lsls	r2, r3, #8
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	61da      	str	r2, [r3, #28]
      break;
 80056e6:	e002      	b.n	80056ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	75fb      	strb	r3, [r7, #23]
      break;
 80056ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_TIM_ConfigClockSource+0x1c>
 8005718:	2302      	movs	r3, #2
 800571a:	e0b4      	b.n	8005886 <HAL_TIM_ConfigClockSource+0x186>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800573a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005754:	d03e      	beq.n	80057d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800575a:	f200 8087 	bhi.w	800586c <HAL_TIM_ConfigClockSource+0x16c>
 800575e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005762:	f000 8086 	beq.w	8005872 <HAL_TIM_ConfigClockSource+0x172>
 8005766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800576a:	d87f      	bhi.n	800586c <HAL_TIM_ConfigClockSource+0x16c>
 800576c:	2b70      	cmp	r3, #112	@ 0x70
 800576e:	d01a      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005770:	2b70      	cmp	r3, #112	@ 0x70
 8005772:	d87b      	bhi.n	800586c <HAL_TIM_ConfigClockSource+0x16c>
 8005774:	2b60      	cmp	r3, #96	@ 0x60
 8005776:	d050      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x11a>
 8005778:	2b60      	cmp	r3, #96	@ 0x60
 800577a:	d877      	bhi.n	800586c <HAL_TIM_ConfigClockSource+0x16c>
 800577c:	2b50      	cmp	r3, #80	@ 0x50
 800577e:	d03c      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0xfa>
 8005780:	2b50      	cmp	r3, #80	@ 0x50
 8005782:	d873      	bhi.n	800586c <HAL_TIM_ConfigClockSource+0x16c>
 8005784:	2b40      	cmp	r3, #64	@ 0x40
 8005786:	d058      	beq.n	800583a <HAL_TIM_ConfigClockSource+0x13a>
 8005788:	2b40      	cmp	r3, #64	@ 0x40
 800578a:	d86f      	bhi.n	800586c <HAL_TIM_ConfigClockSource+0x16c>
 800578c:	2b30      	cmp	r3, #48	@ 0x30
 800578e:	d064      	beq.n	800585a <HAL_TIM_ConfigClockSource+0x15a>
 8005790:	2b30      	cmp	r3, #48	@ 0x30
 8005792:	d86b      	bhi.n	800586c <HAL_TIM_ConfigClockSource+0x16c>
 8005794:	2b20      	cmp	r3, #32
 8005796:	d060      	beq.n	800585a <HAL_TIM_ConfigClockSource+0x15a>
 8005798:	2b20      	cmp	r3, #32
 800579a:	d867      	bhi.n	800586c <HAL_TIM_ConfigClockSource+0x16c>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d05c      	beq.n	800585a <HAL_TIM_ConfigClockSource+0x15a>
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	d05a      	beq.n	800585a <HAL_TIM_ConfigClockSource+0x15a>
 80057a4:	e062      	b.n	800586c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057b6:	f000 fb25 	bl	8005e04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	609a      	str	r2, [r3, #8]
      break;
 80057d2:	e04f      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057e4:	f000 fb0e 	bl	8005e04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057f6:	609a      	str	r2, [r3, #8]
      break;
 80057f8:	e03c      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005806:	461a      	mov	r2, r3
 8005808:	f000 fa82 	bl	8005d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2150      	movs	r1, #80	@ 0x50
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fadb 	bl	8005dce <TIM_ITRx_SetConfig>
      break;
 8005818:	e02c      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005826:	461a      	mov	r2, r3
 8005828:	f000 faa1 	bl	8005d6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2160      	movs	r1, #96	@ 0x60
 8005832:	4618      	mov	r0, r3
 8005834:	f000 facb 	bl	8005dce <TIM_ITRx_SetConfig>
      break;
 8005838:	e01c      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005846:	461a      	mov	r2, r3
 8005848:	f000 fa62 	bl	8005d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2140      	movs	r1, #64	@ 0x40
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fabb 	bl	8005dce <TIM_ITRx_SetConfig>
      break;
 8005858:	e00c      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4619      	mov	r1, r3
 8005864:	4610      	mov	r0, r2
 8005866:	f000 fab2 	bl	8005dce <TIM_ITRx_SetConfig>
      break;
 800586a:	e003      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	73fb      	strb	r3, [r7, #15]
      break;
 8005870:	e000      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
	...

080058e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a3a      	ldr	r2, [pc, #232]	@ (80059dc <TIM_Base_SetConfig+0xfc>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00f      	beq.n	8005918 <TIM_Base_SetConfig+0x38>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058fe:	d00b      	beq.n	8005918 <TIM_Base_SetConfig+0x38>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a37      	ldr	r2, [pc, #220]	@ (80059e0 <TIM_Base_SetConfig+0x100>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d007      	beq.n	8005918 <TIM_Base_SetConfig+0x38>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a36      	ldr	r2, [pc, #216]	@ (80059e4 <TIM_Base_SetConfig+0x104>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <TIM_Base_SetConfig+0x38>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a35      	ldr	r2, [pc, #212]	@ (80059e8 <TIM_Base_SetConfig+0x108>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d108      	bne.n	800592a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a2b      	ldr	r2, [pc, #172]	@ (80059dc <TIM_Base_SetConfig+0xfc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d01b      	beq.n	800596a <TIM_Base_SetConfig+0x8a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005938:	d017      	beq.n	800596a <TIM_Base_SetConfig+0x8a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a28      	ldr	r2, [pc, #160]	@ (80059e0 <TIM_Base_SetConfig+0x100>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d013      	beq.n	800596a <TIM_Base_SetConfig+0x8a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a27      	ldr	r2, [pc, #156]	@ (80059e4 <TIM_Base_SetConfig+0x104>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00f      	beq.n	800596a <TIM_Base_SetConfig+0x8a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a26      	ldr	r2, [pc, #152]	@ (80059e8 <TIM_Base_SetConfig+0x108>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00b      	beq.n	800596a <TIM_Base_SetConfig+0x8a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a25      	ldr	r2, [pc, #148]	@ (80059ec <TIM_Base_SetConfig+0x10c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d007      	beq.n	800596a <TIM_Base_SetConfig+0x8a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a24      	ldr	r2, [pc, #144]	@ (80059f0 <TIM_Base_SetConfig+0x110>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d003      	beq.n	800596a <TIM_Base_SetConfig+0x8a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a23      	ldr	r2, [pc, #140]	@ (80059f4 <TIM_Base_SetConfig+0x114>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d108      	bne.n	800597c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a0e      	ldr	r2, [pc, #56]	@ (80059dc <TIM_Base_SetConfig+0xfc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d103      	bne.n	80059b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d105      	bne.n	80059ce <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f023 0201 	bic.w	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	611a      	str	r2, [r3, #16]
  }
}
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40010000 	.word	0x40010000
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40000800 	.word	0x40000800
 80059e8:	40000c00 	.word	0x40000c00
 80059ec:	40014000 	.word	0x40014000
 80059f0:	40014400 	.word	0x40014400
 80059f4:	40014800 	.word	0x40014800

080059f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	f023 0201 	bic.w	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0303 	bic.w	r3, r3, #3
 8005a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f023 0302 	bic.w	r3, r3, #2
 8005a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac0 <TIM_OC1_SetConfig+0xc8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d10c      	bne.n	8005a6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f023 0308 	bic.w	r3, r3, #8
 8005a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f023 0304 	bic.w	r3, r3, #4
 8005a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a13      	ldr	r2, [pc, #76]	@ (8005ac0 <TIM_OC1_SetConfig+0xc8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d111      	bne.n	8005a9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	621a      	str	r2, [r3, #32]
}
 8005ab4:	bf00      	nop
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	40010000 	.word	0x40010000

08005ac4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f023 0210 	bic.w	r2, r3, #16
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f023 0320 	bic.w	r3, r3, #32
 8005b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005b98 <TIM_OC2_SetConfig+0xd4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d10d      	bne.n	8005b40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a15      	ldr	r2, [pc, #84]	@ (8005b98 <TIM_OC2_SetConfig+0xd4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d113      	bne.n	8005b70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40010000 	.word	0x40010000

08005b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c6c <TIM_OC3_SetConfig+0xd0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d10d      	bne.n	8005c16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a14      	ldr	r2, [pc, #80]	@ (8005c6c <TIM_OC3_SetConfig+0xd0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d113      	bne.n	8005c46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	621a      	str	r2, [r3, #32]
}
 8005c60:	bf00      	nop
 8005c62:	371c      	adds	r7, #28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	40010000 	.word	0x40010000

08005c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	021b      	lsls	r3, r3, #8
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	031b      	lsls	r3, r3, #12
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a10      	ldr	r2, [pc, #64]	@ (8005d0c <TIM_OC4_SetConfig+0x9c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d109      	bne.n	8005ce4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	019b      	lsls	r3, r3, #6
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	621a      	str	r2, [r3, #32]
}
 8005cfe:	bf00      	nop
 8005d00:	371c      	adds	r7, #28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40010000 	.word	0x40010000

08005d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	f023 0201 	bic.w	r2, r3, #1
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f023 030a 	bic.w	r3, r3, #10
 8005d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	621a      	str	r2, [r3, #32]
}
 8005d62:	bf00      	nop
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b087      	sub	sp, #28
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	f023 0210 	bic.w	r2, r3, #16
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	031b      	lsls	r3, r3, #12
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005daa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	621a      	str	r2, [r3, #32]
}
 8005dc2:	bf00      	nop
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b085      	sub	sp, #20
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f043 0307 	orr.w	r3, r3, #7
 8005df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	609a      	str	r2, [r3, #8]
}
 8005df8:	bf00      	nop
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	021a      	lsls	r2, r3, #8
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	431a      	orrs	r2, r3
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	609a      	str	r2, [r3, #8]
}
 8005e38:	bf00      	nop
 8005e3a:	371c      	adds	r7, #28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	2201      	movs	r2, #1
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a1a      	ldr	r2, [r3, #32]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	43db      	mvns	r3, r3
 8005e66:	401a      	ands	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1a      	ldr	r2, [r3, #32]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f003 031f 	and.w	r3, r3, #31
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	621a      	str	r2, [r3, #32]
}
 8005e82:	bf00      	nop
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
	...

08005e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e050      	b.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d018      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef4:	d013      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a18      	ldr	r2, [pc, #96]	@ (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00e      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a16      	ldr	r2, [pc, #88]	@ (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d009      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a15      	ldr	r2, [pc, #84]	@ (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d004      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a13      	ldr	r2, [pc, #76]	@ (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d10c      	bne.n	8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40010000 	.word	0x40010000
 8005f5c:	40000400 	.word	0x40000400
 8005f60:	40000800 	.word	0x40000800
 8005f64:	40000c00 	.word	0x40000c00
 8005f68:	40014000 	.word	0x40014000

08005f6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e03d      	b.n	8006004 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <__NVIC_SetPriority>:
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	6039      	str	r1, [r7, #0]
 8006042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006048:	2b00      	cmp	r3, #0
 800604a:	db0a      	blt.n	8006062 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	b2da      	uxtb	r2, r3
 8006050:	490c      	ldr	r1, [pc, #48]	@ (8006084 <__NVIC_SetPriority+0x4c>)
 8006052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006056:	0112      	lsls	r2, r2, #4
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	440b      	add	r3, r1
 800605c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006060:	e00a      	b.n	8006078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	b2da      	uxtb	r2, r3
 8006066:	4908      	ldr	r1, [pc, #32]	@ (8006088 <__NVIC_SetPriority+0x50>)
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	3b04      	subs	r3, #4
 8006070:	0112      	lsls	r2, r2, #4
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	440b      	add	r3, r1
 8006076:	761a      	strb	r2, [r3, #24]
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	e000e100 	.word	0xe000e100
 8006088:	e000ed00 	.word	0xe000ed00

0800608c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006090:	4b05      	ldr	r3, [pc, #20]	@ (80060a8 <SysTick_Handler+0x1c>)
 8006092:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006094:	f001 fd46 	bl	8007b24 <xTaskGetSchedulerState>
 8006098:	4603      	mov	r3, r0
 800609a:	2b01      	cmp	r3, #1
 800609c:	d001      	beq.n	80060a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800609e:	f002 fb3b 	bl	8008718 <xPortSysTickHandler>
  }
}
 80060a2:	bf00      	nop
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	e000e010 	.word	0xe000e010

080060ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80060b0:	2100      	movs	r1, #0
 80060b2:	f06f 0004 	mvn.w	r0, #4
 80060b6:	f7ff ffbf 	bl	8006038 <__NVIC_SetPriority>
#endif
}
 80060ba:	bf00      	nop
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060c6:	f3ef 8305 	mrs	r3, IPSR
 80060ca:	603b      	str	r3, [r7, #0]
  return(result);
 80060cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80060d2:	f06f 0305 	mvn.w	r3, #5
 80060d6:	607b      	str	r3, [r7, #4]
 80060d8:	e00c      	b.n	80060f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060da:	4b0a      	ldr	r3, [pc, #40]	@ (8006104 <osKernelInitialize+0x44>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d105      	bne.n	80060ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80060e2:	4b08      	ldr	r3, [pc, #32]	@ (8006104 <osKernelInitialize+0x44>)
 80060e4:	2201      	movs	r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	607b      	str	r3, [r7, #4]
 80060ec:	e002      	b.n	80060f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80060ee:	f04f 33ff 	mov.w	r3, #4294967295
 80060f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060f4:	687b      	ldr	r3, [r7, #4]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20000398 	.word	0x20000398

08006108 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800610e:	f3ef 8305 	mrs	r3, IPSR
 8006112:	603b      	str	r3, [r7, #0]
  return(result);
 8006114:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <osKernelStart+0x1a>
    stat = osErrorISR;
 800611a:	f06f 0305 	mvn.w	r3, #5
 800611e:	607b      	str	r3, [r7, #4]
 8006120:	e010      	b.n	8006144 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006122:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <osKernelStart+0x48>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d109      	bne.n	800613e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800612a:	f7ff ffbf 	bl	80060ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800612e:	4b08      	ldr	r3, [pc, #32]	@ (8006150 <osKernelStart+0x48>)
 8006130:	2202      	movs	r2, #2
 8006132:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006134:	f001 f892 	bl	800725c <vTaskStartScheduler>
      stat = osOK;
 8006138:	2300      	movs	r3, #0
 800613a:	607b      	str	r3, [r7, #4]
 800613c:	e002      	b.n	8006144 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800613e:	f04f 33ff 	mov.w	r3, #4294967295
 8006142:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006144:	687b      	ldr	r3, [r7, #4]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000398 	.word	0x20000398

08006154 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006154:	b580      	push	{r7, lr}
 8006156:	b08e      	sub	sp, #56	@ 0x38
 8006158:	af04      	add	r7, sp, #16
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006160:	2300      	movs	r3, #0
 8006162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006164:	f3ef 8305 	mrs	r3, IPSR
 8006168:	617b      	str	r3, [r7, #20]
  return(result);
 800616a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800616c:	2b00      	cmp	r3, #0
 800616e:	d17e      	bne.n	800626e <osThreadNew+0x11a>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d07b      	beq.n	800626e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006176:	2380      	movs	r3, #128	@ 0x80
 8006178:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800617a:	2318      	movs	r3, #24
 800617c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800617e:	2300      	movs	r3, #0
 8006180:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006182:	f04f 33ff 	mov.w	r3, #4294967295
 8006186:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d045      	beq.n	800621a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <osThreadNew+0x48>
        name = attr->name;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <osThreadNew+0x6e>
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	2b38      	cmp	r3, #56	@ 0x38
 80061b4:	d805      	bhi.n	80061c2 <osThreadNew+0x6e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <osThreadNew+0x72>
        return (NULL);
 80061c2:	2300      	movs	r3, #0
 80061c4:	e054      	b.n	8006270 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	089b      	lsrs	r3, r3, #2
 80061d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00e      	beq.n	80061fc <osThreadNew+0xa8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	2ba7      	cmp	r3, #167	@ 0xa7
 80061e4:	d90a      	bls.n	80061fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d006      	beq.n	80061fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <osThreadNew+0xa8>
        mem = 1;
 80061f6:	2301      	movs	r3, #1
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	e010      	b.n	800621e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10c      	bne.n	800621e <osThreadNew+0xca>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d108      	bne.n	800621e <osThreadNew+0xca>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d104      	bne.n	800621e <osThreadNew+0xca>
          mem = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	61bb      	str	r3, [r7, #24]
 8006218:	e001      	b.n	800621e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d110      	bne.n	8006246 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800622c:	9202      	str	r2, [sp, #8]
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	6a3a      	ldr	r2, [r7, #32]
 8006238:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 fe1a 	bl	8006e74 <xTaskCreateStatic>
 8006240:	4603      	mov	r3, r0
 8006242:	613b      	str	r3, [r7, #16]
 8006244:	e013      	b.n	800626e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d110      	bne.n	800626e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	b29a      	uxth	r2, r3
 8006250:	f107 0310 	add.w	r3, r7, #16
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 fe68 	bl	8006f34 <xTaskCreate>
 8006264:	4603      	mov	r3, r0
 8006266:	2b01      	cmp	r3, #1
 8006268:	d001      	beq.n	800626e <osThreadNew+0x11a>
            hTask = NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800626e:	693b      	ldr	r3, [r7, #16]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3728      	adds	r7, #40	@ 0x28
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006280:	f3ef 8305 	mrs	r3, IPSR
 8006284:	60bb      	str	r3, [r7, #8]
  return(result);
 8006286:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <osDelay+0x1c>
    stat = osErrorISR;
 800628c:	f06f 0305 	mvn.w	r3, #5
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	e007      	b.n	80062a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 ffa6 	bl	80071f0 <vTaskDelay>
    }
  }

  return (stat);
 80062a4:	68fb      	ldr	r3, [r7, #12]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4a07      	ldr	r2, [pc, #28]	@ (80062dc <vApplicationGetIdleTaskMemory+0x2c>)
 80062c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	4a06      	ldr	r2, [pc, #24]	@ (80062e0 <vApplicationGetIdleTaskMemory+0x30>)
 80062c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2280      	movs	r2, #128	@ 0x80
 80062cc:	601a      	str	r2, [r3, #0]
}
 80062ce:	bf00      	nop
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	2000039c 	.word	0x2000039c
 80062e0:	20000444 	.word	0x20000444

080062e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4a07      	ldr	r2, [pc, #28]	@ (8006310 <vApplicationGetTimerTaskMemory+0x2c>)
 80062f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	4a06      	ldr	r2, [pc, #24]	@ (8006314 <vApplicationGetTimerTaskMemory+0x30>)
 80062fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006302:	601a      	str	r2, [r3, #0]
}
 8006304:	bf00      	nop
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	20000644 	.word	0x20000644
 8006314:	200006ec 	.word	0x200006ec

08006318 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f103 0208 	add.w	r2, r3, #8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f04f 32ff 	mov.w	r2, #4294967295
 8006330:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f103 0208 	add.w	r2, r3, #8
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f103 0208 	add.w	r2, r3, #8
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	601a      	str	r2, [r3, #0]
}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d103      	bne.n	80063da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	e00c      	b.n	80063f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3308      	adds	r3, #8
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	e002      	b.n	80063e8 <vListInsert+0x2e>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d2f6      	bcs.n	80063e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	601a      	str	r2, [r3, #0]
}
 8006420:	bf00      	nop
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6892      	ldr	r2, [r2, #8]
 8006442:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6852      	ldr	r2, [r2, #4]
 800644c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	429a      	cmp	r2, r3
 8006456:	d103      	bne.n	8006460 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	1e5a      	subs	r2, r3, #1
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10b      	bne.n	80064ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80064a6:	bf00      	nop
 80064a8:	bf00      	nop
 80064aa:	e7fd      	b.n	80064a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80064ac:	f002 f8a4 	bl	80085f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b8:	68f9      	ldr	r1, [r7, #12]
 80064ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	441a      	add	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064dc:	3b01      	subs	r3, #1
 80064de:	68f9      	ldr	r1, [r7, #12]
 80064e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80064e2:	fb01 f303 	mul.w	r3, r1, r3
 80064e6:	441a      	add	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	22ff      	movs	r2, #255	@ 0xff
 80064f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	22ff      	movs	r2, #255	@ 0xff
 80064f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d114      	bne.n	800652c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d01a      	beq.n	8006540 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3310      	adds	r3, #16
 800650e:	4618      	mov	r0, r3
 8006510:	f001 f942 	bl	8007798 <xTaskRemoveFromEventList>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d012      	beq.n	8006540 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800651a:	4b0d      	ldr	r3, [pc, #52]	@ (8006550 <xQueueGenericReset+0xd0>)
 800651c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	e009      	b.n	8006540 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3310      	adds	r3, #16
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff fef1 	bl	8006318 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3324      	adds	r3, #36	@ 0x24
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff feec 	bl	8006318 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006540:	f002 f88c 	bl	800865c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006544:	2301      	movs	r3, #1
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08e      	sub	sp, #56	@ 0x38
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10b      	bne.n	8006580 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800657a:	bf00      	nop
 800657c:	bf00      	nop
 800657e:	e7fd      	b.n	800657c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10b      	bne.n	800659e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006598:	bf00      	nop
 800659a:	bf00      	nop
 800659c:	e7fd      	b.n	800659a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <xQueueGenericCreateStatic+0x56>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <xQueueGenericCreateStatic+0x5a>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <xQueueGenericCreateStatic+0x5c>
 80065ae:	2300      	movs	r3, #0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10b      	bne.n	80065cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	623b      	str	r3, [r7, #32]
}
 80065c6:	bf00      	nop
 80065c8:	bf00      	nop
 80065ca:	e7fd      	b.n	80065c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d102      	bne.n	80065d8 <xQueueGenericCreateStatic+0x84>
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <xQueueGenericCreateStatic+0x88>
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <xQueueGenericCreateStatic+0x8a>
 80065dc:	2300      	movs	r3, #0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10b      	bne.n	80065fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	61fb      	str	r3, [r7, #28]
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop
 80065f8:	e7fd      	b.n	80065f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80065fa:	2350      	movs	r3, #80	@ 0x50
 80065fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b50      	cmp	r3, #80	@ 0x50
 8006602:	d00b      	beq.n	800661c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	61bb      	str	r3, [r7, #24]
}
 8006616:	bf00      	nop
 8006618:	bf00      	nop
 800661a:	e7fd      	b.n	8006618 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800661c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00d      	beq.n	8006644 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006630:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	4613      	mov	r3, r2
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	68b9      	ldr	r1, [r7, #8]
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 f805 	bl	800664e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006646:	4618      	mov	r0, r3
 8006648:	3730      	adds	r7, #48	@ 0x30
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	607a      	str	r2, [r7, #4]
 800665a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d103      	bne.n	800666a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	e002      	b.n	8006670 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800667c:	2101      	movs	r1, #1
 800667e:	69b8      	ldr	r0, [r7, #24]
 8006680:	f7ff fefe 	bl	8006480 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	78fa      	ldrb	r2, [r7, #3]
 8006688:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800668c:	bf00      	nop
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08e      	sub	sp, #56	@ 0x38
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80066a2:	2300      	movs	r3, #0
 80066a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80066aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10b      	bne.n	80066c8 <xQueueGenericSend+0x34>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80066c2:	bf00      	nop
 80066c4:	bf00      	nop
 80066c6:	e7fd      	b.n	80066c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d103      	bne.n	80066d6 <xQueueGenericSend+0x42>
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <xQueueGenericSend+0x46>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <xQueueGenericSend+0x48>
 80066da:	2300      	movs	r3, #0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10b      	bne.n	80066f8 <xQueueGenericSend+0x64>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	e7fd      	b.n	80066f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d103      	bne.n	8006706 <xQueueGenericSend+0x72>
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006702:	2b01      	cmp	r3, #1
 8006704:	d101      	bne.n	800670a <xQueueGenericSend+0x76>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <xQueueGenericSend+0x78>
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10b      	bne.n	8006728 <xQueueGenericSend+0x94>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	623b      	str	r3, [r7, #32]
}
 8006722:	bf00      	nop
 8006724:	bf00      	nop
 8006726:	e7fd      	b.n	8006724 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006728:	f001 f9fc 	bl	8007b24 <xTaskGetSchedulerState>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <xQueueGenericSend+0xa4>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <xQueueGenericSend+0xa8>
 8006738:	2301      	movs	r3, #1
 800673a:	e000      	b.n	800673e <xQueueGenericSend+0xaa>
 800673c:	2300      	movs	r3, #0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10b      	bne.n	800675a <xQueueGenericSend+0xc6>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	61fb      	str	r3, [r7, #28]
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	e7fd      	b.n	8006756 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800675a:	f001 ff4d 	bl	80085f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800675e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006760:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006766:	429a      	cmp	r2, r3
 8006768:	d302      	bcc.n	8006770 <xQueueGenericSend+0xdc>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d129      	bne.n	80067c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	68b9      	ldr	r1, [r7, #8]
 8006774:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006776:	f000 fa0f 	bl	8006b98 <prvCopyDataToQueue>
 800677a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800677c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	d010      	beq.n	80067a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006786:	3324      	adds	r3, #36	@ 0x24
 8006788:	4618      	mov	r0, r3
 800678a:	f001 f805 	bl	8007798 <xTaskRemoveFromEventList>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d013      	beq.n	80067bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006794:	4b3f      	ldr	r3, [pc, #252]	@ (8006894 <xQueueGenericSend+0x200>)
 8006796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	e00a      	b.n	80067bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80067ac:	4b39      	ldr	r3, [pc, #228]	@ (8006894 <xQueueGenericSend+0x200>)
 80067ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067bc:	f001 ff4e 	bl	800865c <vPortExitCritical>
				return pdPASS;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e063      	b.n	800688c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d103      	bne.n	80067d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067ca:	f001 ff47 	bl	800865c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e05c      	b.n	800688c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067d8:	f107 0314 	add.w	r3, r7, #20
 80067dc:	4618      	mov	r0, r3
 80067de:	f001 f83f 	bl	8007860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067e2:	2301      	movs	r3, #1
 80067e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067e6:	f001 ff39 	bl	800865c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067ea:	f000 fda7 	bl	800733c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ee:	f001 ff03 	bl	80085f8 <vPortEnterCritical>
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067f8:	b25b      	sxtb	r3, r3
 80067fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fe:	d103      	bne.n	8006808 <xQueueGenericSend+0x174>
 8006800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800680e:	b25b      	sxtb	r3, r3
 8006810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006814:	d103      	bne.n	800681e <xQueueGenericSend+0x18a>
 8006816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800681e:	f001 ff1d 	bl	800865c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006822:	1d3a      	adds	r2, r7, #4
 8006824:	f107 0314 	add.w	r3, r7, #20
 8006828:	4611      	mov	r1, r2
 800682a:	4618      	mov	r0, r3
 800682c:	f001 f82e 	bl	800788c <xTaskCheckForTimeOut>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d124      	bne.n	8006880 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006836:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006838:	f000 faa6 	bl	8006d88 <prvIsQueueFull>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d018      	beq.n	8006874 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	3310      	adds	r3, #16
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	4611      	mov	r1, r2
 800684a:	4618      	mov	r0, r3
 800684c:	f000 ff52 	bl	80076f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006850:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006852:	f000 fa31 	bl	8006cb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006856:	f000 fd7f 	bl	8007358 <xTaskResumeAll>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	f47f af7c 	bne.w	800675a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006862:	4b0c      	ldr	r3, [pc, #48]	@ (8006894 <xQueueGenericSend+0x200>)
 8006864:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	e772      	b.n	800675a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006874:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006876:	f000 fa1f 	bl	8006cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800687a:	f000 fd6d 	bl	8007358 <xTaskResumeAll>
 800687e:	e76c      	b.n	800675a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006880:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006882:	f000 fa19 	bl	8006cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006886:	f000 fd67 	bl	8007358 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800688a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800688c:	4618      	mov	r0, r3
 800688e:	3738      	adds	r7, #56	@ 0x38
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	e000ed04 	.word	0xe000ed04

08006898 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b090      	sub	sp, #64	@ 0x40
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80068aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10b      	bne.n	80068c8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
 80068c6:	e7fd      	b.n	80068c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d103      	bne.n	80068d6 <xQueueGenericSendFromISR+0x3e>
 80068ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <xQueueGenericSendFromISR+0x42>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e000      	b.n	80068dc <xQueueGenericSendFromISR+0x44>
 80068da:	2300      	movs	r3, #0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10b      	bne.n	80068f8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	e7fd      	b.n	80068f4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d103      	bne.n	8006906 <xQueueGenericSendFromISR+0x6e>
 80068fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <xQueueGenericSendFromISR+0x72>
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <xQueueGenericSendFromISR+0x74>
 800690a:	2300      	movs	r3, #0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10b      	bne.n	8006928 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	623b      	str	r3, [r7, #32]
}
 8006922:	bf00      	nop
 8006924:	bf00      	nop
 8006926:	e7fd      	b.n	8006924 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006928:	f001 ff46 	bl	80087b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800692c:	f3ef 8211 	mrs	r2, BASEPRI
 8006930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	61fa      	str	r2, [r7, #28]
 8006942:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006944:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006946:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800694c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006950:	429a      	cmp	r2, r3
 8006952:	d302      	bcc.n	800695a <xQueueGenericSendFromISR+0xc2>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d12f      	bne.n	80069ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800695a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006960:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006968:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006970:	f000 f912 	bl	8006b98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006974:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697c:	d112      	bne.n	80069a4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800697e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006982:	2b00      	cmp	r3, #0
 8006984:	d016      	beq.n	80069b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006988:	3324      	adds	r3, #36	@ 0x24
 800698a:	4618      	mov	r0, r3
 800698c:	f000 ff04 	bl	8007798 <xTaskRemoveFromEventList>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00e      	beq.n	80069b4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	e007      	b.n	80069b4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069a8:	3301      	adds	r3, #1
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	b25a      	sxtb	r2, r3
 80069ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80069b4:	2301      	movs	r3, #1
 80069b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80069b8:	e001      	b.n	80069be <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3740      	adds	r7, #64	@ 0x40
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08c      	sub	sp, #48	@ 0x30
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10b      	bne.n	8006a06 <xQueueReceive+0x32>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	623b      	str	r3, [r7, #32]
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	e7fd      	b.n	8006a02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d103      	bne.n	8006a14 <xQueueReceive+0x40>
 8006a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <xQueueReceive+0x44>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <xQueueReceive+0x46>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10b      	bne.n	8006a36 <xQueueReceive+0x62>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	61fb      	str	r3, [r7, #28]
}
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop
 8006a34:	e7fd      	b.n	8006a32 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a36:	f001 f875 	bl	8007b24 <xTaskGetSchedulerState>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d102      	bne.n	8006a46 <xQueueReceive+0x72>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <xQueueReceive+0x76>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <xQueueReceive+0x78>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10b      	bne.n	8006a68 <xQueueReceive+0x94>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	61bb      	str	r3, [r7, #24]
}
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	e7fd      	b.n	8006a64 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a68:	f001 fdc6 	bl	80085f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a70:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01f      	beq.n	8006ab8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a78:	68b9      	ldr	r1, [r7, #8]
 8006a7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a7c:	f000 f8f6 	bl	8006c6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	1e5a      	subs	r2, r3, #1
 8006a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a86:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00f      	beq.n	8006ab0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a92:	3310      	adds	r3, #16
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 fe7f 	bl	8007798 <xTaskRemoveFromEventList>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d007      	beq.n	8006ab0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006aa0:	4b3c      	ldr	r3, [pc, #240]	@ (8006b94 <xQueueReceive+0x1c0>)
 8006aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ab0:	f001 fdd4 	bl	800865c <vPortExitCritical>
				return pdPASS;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e069      	b.n	8006b8c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d103      	bne.n	8006ac6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006abe:	f001 fdcd 	bl	800865c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e062      	b.n	8006b8c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d106      	bne.n	8006ada <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006acc:	f107 0310 	add.w	r3, r7, #16
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 fec5 	bl	8007860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ada:	f001 fdbf 	bl	800865c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ade:	f000 fc2d 	bl	800733c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ae2:	f001 fd89 	bl	80085f8 <vPortEnterCritical>
 8006ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006aec:	b25b      	sxtb	r3, r3
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af2:	d103      	bne.n	8006afc <xQueueReceive+0x128>
 8006af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b02:	b25b      	sxtb	r3, r3
 8006b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b08:	d103      	bne.n	8006b12 <xQueueReceive+0x13e>
 8006b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b12:	f001 fda3 	bl	800865c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b16:	1d3a      	adds	r2, r7, #4
 8006b18:	f107 0310 	add.w	r3, r7, #16
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 feb4 	bl	800788c <xTaskCheckForTimeOut>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d123      	bne.n	8006b72 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b2c:	f000 f916 	bl	8006d5c <prvIsQueueEmpty>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d017      	beq.n	8006b66 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b38:	3324      	adds	r3, #36	@ 0x24
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 fdd8 	bl	80076f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b46:	f000 f8b7 	bl	8006cb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b4a:	f000 fc05 	bl	8007358 <xTaskResumeAll>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d189      	bne.n	8006a68 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006b54:	4b0f      	ldr	r3, [pc, #60]	@ (8006b94 <xQueueReceive+0x1c0>)
 8006b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	e780      	b.n	8006a68 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b68:	f000 f8a6 	bl	8006cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b6c:	f000 fbf4 	bl	8007358 <xTaskResumeAll>
 8006b70:	e77a      	b.n	8006a68 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b74:	f000 f8a0 	bl	8006cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b78:	f000 fbee 	bl	8007358 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b7e:	f000 f8ed 	bl	8006d5c <prvIsQueueEmpty>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f43f af6f 	beq.w	8006a68 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b8a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3730      	adds	r7, #48	@ 0x30
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	e000ed04 	.word	0xe000ed04

08006b98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10d      	bne.n	8006bd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d14d      	bne.n	8006c5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 ffcc 	bl	8007b60 <xTaskPriorityDisinherit>
 8006bc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	609a      	str	r2, [r3, #8]
 8006bd0:	e043      	b.n	8006c5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d119      	bne.n	8006c0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6858      	ldr	r0, [r3, #4]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be0:	461a      	mov	r2, r3
 8006be2:	68b9      	ldr	r1, [r7, #8]
 8006be4:	f002 f9ce 	bl	8008f84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf0:	441a      	add	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d32b      	bcc.n	8006c5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	605a      	str	r2, [r3, #4]
 8006c0a:	e026      	b.n	8006c5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	68d8      	ldr	r0, [r3, #12]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c14:	461a      	mov	r2, r3
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	f002 f9b4 	bl	8008f84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c24:	425b      	negs	r3, r3
 8006c26:	441a      	add	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d207      	bcs.n	8006c48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c40:	425b      	negs	r3, r3
 8006c42:	441a      	add	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d105      	bne.n	8006c5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006c62:	697b      	ldr	r3, [r7, #20]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d018      	beq.n	8006cb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c86:	441a      	add	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d303      	bcc.n	8006ca0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68d9      	ldr	r1, [r3, #12]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca8:	461a      	mov	r2, r3
 8006caa:	6838      	ldr	r0, [r7, #0]
 8006cac:	f002 f96a 	bl	8008f84 <memcpy>
	}
}
 8006cb0:	bf00      	nop
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006cc0:	f001 fc9a 	bl	80085f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ccc:	e011      	b.n	8006cf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d012      	beq.n	8006cfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3324      	adds	r3, #36	@ 0x24
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 fd5c 	bl	8007798 <xTaskRemoveFromEventList>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ce6:	f000 fe35 	bl	8007954 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	dce9      	bgt.n	8006cce <prvUnlockQueue+0x16>
 8006cfa:	e000      	b.n	8006cfe <prvUnlockQueue+0x46>
					break;
 8006cfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	22ff      	movs	r2, #255	@ 0xff
 8006d02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006d06:	f001 fca9 	bl	800865c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d0a:	f001 fc75 	bl	80085f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d16:	e011      	b.n	8006d3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d012      	beq.n	8006d46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3310      	adds	r3, #16
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fd37 	bl	8007798 <xTaskRemoveFromEventList>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d30:	f000 fe10 	bl	8007954 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	dce9      	bgt.n	8006d18 <prvUnlockQueue+0x60>
 8006d44:	e000      	b.n	8006d48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	22ff      	movs	r2, #255	@ 0xff
 8006d4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006d50:	f001 fc84 	bl	800865c <vPortExitCritical>
}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d64:	f001 fc48 	bl	80085f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d102      	bne.n	8006d76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d70:	2301      	movs	r3, #1
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	e001      	b.n	8006d7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d76:	2300      	movs	r3, #0
 8006d78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d7a:	f001 fc6f 	bl	800865c <vPortExitCritical>

	return xReturn;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d90:	f001 fc32 	bl	80085f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d102      	bne.n	8006da6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006da0:	2301      	movs	r3, #1
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	e001      	b.n	8006daa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006daa:	f001 fc57 	bl	800865c <vPortExitCritical>

	return xReturn;
 8006dae:	68fb      	ldr	r3, [r7, #12]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	e014      	b.n	8006df2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8006e08 <vQueueAddToRegistry+0x50>)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10b      	bne.n	8006dec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006dd4:	490c      	ldr	r1, [pc, #48]	@ (8006e08 <vQueueAddToRegistry+0x50>)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006dde:	4a0a      	ldr	r2, [pc, #40]	@ (8006e08 <vQueueAddToRegistry+0x50>)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	4413      	add	r3, r2
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006dea:	e006      	b.n	8006dfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3301      	adds	r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b07      	cmp	r3, #7
 8006df6:	d9e7      	bls.n	8006dc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006df8:	bf00      	nop
 8006dfa:	bf00      	nop
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	20000aec 	.word	0x20000aec

08006e0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e1c:	f001 fbec 	bl	80085f8 <vPortEnterCritical>
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e26:	b25b      	sxtb	r3, r3
 8006e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2c:	d103      	bne.n	8006e36 <vQueueWaitForMessageRestricted+0x2a>
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e3c:	b25b      	sxtb	r3, r3
 8006e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e42:	d103      	bne.n	8006e4c <vQueueWaitForMessageRestricted+0x40>
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e4c:	f001 fc06 	bl	800865c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d106      	bne.n	8006e66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	3324      	adds	r3, #36	@ 0x24
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fc6d 	bl	8007740 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e66:	6978      	ldr	r0, [r7, #20]
 8006e68:	f7ff ff26 	bl	8006cb8 <prvUnlockQueue>
	}
 8006e6c:	bf00      	nop
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08e      	sub	sp, #56	@ 0x38
 8006e78:	af04      	add	r7, sp, #16
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10b      	bne.n	8006ea0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	623b      	str	r3, [r7, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	e7fd      	b.n	8006e9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10b      	bne.n	8006ebe <xTaskCreateStatic+0x4a>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	61fb      	str	r3, [r7, #28]
}
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
 8006ebc:	e7fd      	b.n	8006eba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ebe:	23a8      	movs	r3, #168	@ 0xa8
 8006ec0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2ba8      	cmp	r3, #168	@ 0xa8
 8006ec6:	d00b      	beq.n	8006ee0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	61bb      	str	r3, [r7, #24]
}
 8006eda:	bf00      	nop
 8006edc:	bf00      	nop
 8006ede:	e7fd      	b.n	8006edc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ee0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01e      	beq.n	8006f26 <xTaskCreateStatic+0xb2>
 8006ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d01b      	beq.n	8006f26 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ef6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f00:	2300      	movs	r3, #0
 8006f02:	9303      	str	r3, [sp, #12]
 8006f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f06:	9302      	str	r3, [sp, #8]
 8006f08:	f107 0314 	add.w	r3, r7, #20
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	68b9      	ldr	r1, [r7, #8]
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f851 	bl	8006fc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f20:	f000 f8f6 	bl	8007110 <prvAddNewTaskToReadyList>
 8006f24:	e001      	b.n	8006f2a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f2a:	697b      	ldr	r3, [r7, #20]
	}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3728      	adds	r7, #40	@ 0x28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b08c      	sub	sp, #48	@ 0x30
 8006f38:	af04      	add	r7, sp, #16
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	4613      	mov	r3, r2
 8006f42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f001 fc77 	bl	800883c <pvPortMalloc>
 8006f4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00e      	beq.n	8006f74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f56:	20a8      	movs	r0, #168	@ 0xa8
 8006f58:	f001 fc70 	bl	800883c <pvPortMalloc>
 8006f5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f6a:	e005      	b.n	8006f78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f6c:	6978      	ldr	r0, [r7, #20]
 8006f6e:	f001 fd33 	bl	80089d8 <vPortFree>
 8006f72:	e001      	b.n	8006f78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f74:	2300      	movs	r3, #0
 8006f76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d017      	beq.n	8006fae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f86:	88fa      	ldrh	r2, [r7, #6]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	9303      	str	r3, [sp, #12]
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	9302      	str	r3, [sp, #8]
 8006f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f92:	9301      	str	r3, [sp, #4]
 8006f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	68b9      	ldr	r1, [r7, #8]
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 f80f 	bl	8006fc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fa2:	69f8      	ldr	r0, [r7, #28]
 8006fa4:	f000 f8b4 	bl	8007110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	e002      	b.n	8006fb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fae:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fb4:	69bb      	ldr	r3, [r7, #24]
	}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3720      	adds	r7, #32
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	21a5      	movs	r1, #165	@ 0xa5
 8006fda:	f001 fef5 	bl	8008dc8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4413      	add	r3, r2
 8006fee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	f023 0307 	bic.w	r3, r3, #7
 8006ff6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00b      	beq.n	800701a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	617b      	str	r3, [r7, #20]
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop
 8007018:	e7fd      	b.n	8007016 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01f      	beq.n	8007060 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007020:	2300      	movs	r3, #0
 8007022:	61fb      	str	r3, [r7, #28]
 8007024:	e012      	b.n	800704c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	4413      	add	r3, r2
 800702c:	7819      	ldrb	r1, [r3, #0]
 800702e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	4413      	add	r3, r2
 8007034:	3334      	adds	r3, #52	@ 0x34
 8007036:	460a      	mov	r2, r1
 8007038:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	4413      	add	r3, r2
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d006      	beq.n	8007054 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	3301      	adds	r3, #1
 800704a:	61fb      	str	r3, [r7, #28]
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	2b0f      	cmp	r3, #15
 8007050:	d9e9      	bls.n	8007026 <prvInitialiseNewTask+0x66>
 8007052:	e000      	b.n	8007056 <prvInitialiseNewTask+0x96>
			{
				break;
 8007054:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800705e:	e003      	b.n	8007068 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706a:	2b37      	cmp	r3, #55	@ 0x37
 800706c:	d901      	bls.n	8007072 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800706e:	2337      	movs	r3, #55	@ 0x37
 8007070:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007074:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007076:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800707c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	2200      	movs	r2, #0
 8007082:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007086:	3304      	adds	r3, #4
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff f965 	bl	8006358 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	3318      	adds	r3, #24
 8007092:	4618      	mov	r0, r3
 8007094:	f7ff f960 	bl	8006358 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800709c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800709e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80070a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	2200      	movs	r2, #0
 80070b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80070be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c0:	3354      	adds	r3, #84	@ 0x54
 80070c2:	224c      	movs	r2, #76	@ 0x4c
 80070c4:	2100      	movs	r1, #0
 80070c6:	4618      	mov	r0, r3
 80070c8:	f001 fe7e 	bl	8008dc8 <memset>
 80070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ce:	4a0d      	ldr	r2, [pc, #52]	@ (8007104 <prvInitialiseNewTask+0x144>)
 80070d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	4a0c      	ldr	r2, [pc, #48]	@ (8007108 <prvInitialiseNewTask+0x148>)
 80070d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80070d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070da:	4a0c      	ldr	r2, [pc, #48]	@ (800710c <prvInitialiseNewTask+0x14c>)
 80070dc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	68f9      	ldr	r1, [r7, #12]
 80070e2:	69b8      	ldr	r0, [r7, #24]
 80070e4:	f001 f95a 	bl	800839c <pxPortInitialiseStack>
 80070e8:	4602      	mov	r2, r0
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070fa:	bf00      	nop
 80070fc:	3720      	adds	r7, #32
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	20004d8c 	.word	0x20004d8c
 8007108:	20004df4 	.word	0x20004df4
 800710c:	20004e5c 	.word	0x20004e5c

08007110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007118:	f001 fa6e 	bl	80085f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800711c:	4b2d      	ldr	r3, [pc, #180]	@ (80071d4 <prvAddNewTaskToReadyList+0xc4>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3301      	adds	r3, #1
 8007122:	4a2c      	ldr	r2, [pc, #176]	@ (80071d4 <prvAddNewTaskToReadyList+0xc4>)
 8007124:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007126:	4b2c      	ldr	r3, [pc, #176]	@ (80071d8 <prvAddNewTaskToReadyList+0xc8>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d109      	bne.n	8007142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800712e:	4a2a      	ldr	r2, [pc, #168]	@ (80071d8 <prvAddNewTaskToReadyList+0xc8>)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007134:	4b27      	ldr	r3, [pc, #156]	@ (80071d4 <prvAddNewTaskToReadyList+0xc4>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d110      	bne.n	800715e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800713c:	f000 fc2e 	bl	800799c <prvInitialiseTaskLists>
 8007140:	e00d      	b.n	800715e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007142:	4b26      	ldr	r3, [pc, #152]	@ (80071dc <prvAddNewTaskToReadyList+0xcc>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d109      	bne.n	800715e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800714a:	4b23      	ldr	r3, [pc, #140]	@ (80071d8 <prvAddNewTaskToReadyList+0xc8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007154:	429a      	cmp	r2, r3
 8007156:	d802      	bhi.n	800715e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007158:	4a1f      	ldr	r2, [pc, #124]	@ (80071d8 <prvAddNewTaskToReadyList+0xc8>)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800715e:	4b20      	ldr	r3, [pc, #128]	@ (80071e0 <prvAddNewTaskToReadyList+0xd0>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3301      	adds	r3, #1
 8007164:	4a1e      	ldr	r2, [pc, #120]	@ (80071e0 <prvAddNewTaskToReadyList+0xd0>)
 8007166:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007168:	4b1d      	ldr	r3, [pc, #116]	@ (80071e0 <prvAddNewTaskToReadyList+0xd0>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007174:	4b1b      	ldr	r3, [pc, #108]	@ (80071e4 <prvAddNewTaskToReadyList+0xd4>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	429a      	cmp	r2, r3
 800717a:	d903      	bls.n	8007184 <prvAddNewTaskToReadyList+0x74>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007180:	4a18      	ldr	r2, [pc, #96]	@ (80071e4 <prvAddNewTaskToReadyList+0xd4>)
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4a15      	ldr	r2, [pc, #84]	@ (80071e8 <prvAddNewTaskToReadyList+0xd8>)
 8007192:	441a      	add	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3304      	adds	r3, #4
 8007198:	4619      	mov	r1, r3
 800719a:	4610      	mov	r0, r2
 800719c:	f7ff f8e9 	bl	8006372 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071a0:	f001 fa5c 	bl	800865c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071a4:	4b0d      	ldr	r3, [pc, #52]	@ (80071dc <prvAddNewTaskToReadyList+0xcc>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00e      	beq.n	80071ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071ac:	4b0a      	ldr	r3, [pc, #40]	@ (80071d8 <prvAddNewTaskToReadyList+0xc8>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d207      	bcs.n	80071ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071ba:	4b0c      	ldr	r3, [pc, #48]	@ (80071ec <prvAddNewTaskToReadyList+0xdc>)
 80071bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071ca:	bf00      	nop
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20001000 	.word	0x20001000
 80071d8:	20000b2c 	.word	0x20000b2c
 80071dc:	2000100c 	.word	0x2000100c
 80071e0:	2000101c 	.word	0x2000101c
 80071e4:	20001008 	.word	0x20001008
 80071e8:	20000b30 	.word	0x20000b30
 80071ec:	e000ed04 	.word	0xe000ed04

080071f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d018      	beq.n	8007234 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007202:	4b14      	ldr	r3, [pc, #80]	@ (8007254 <vTaskDelay+0x64>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00b      	beq.n	8007222 <vTaskDelay+0x32>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	60bb      	str	r3, [r7, #8]
}
 800721c:	bf00      	nop
 800721e:	bf00      	nop
 8007220:	e7fd      	b.n	800721e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007222:	f000 f88b 	bl	800733c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007226:	2100      	movs	r1, #0
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fd09 	bl	8007c40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800722e:	f000 f893 	bl	8007358 <xTaskResumeAll>
 8007232:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d107      	bne.n	800724a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800723a:	4b07      	ldr	r3, [pc, #28]	@ (8007258 <vTaskDelay+0x68>)
 800723c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800724a:	bf00      	nop
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20001028 	.word	0x20001028
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08a      	sub	sp, #40	@ 0x28
 8007260:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007266:	2300      	movs	r3, #0
 8007268:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800726a:	463a      	mov	r2, r7
 800726c:	1d39      	adds	r1, r7, #4
 800726e:	f107 0308 	add.w	r3, r7, #8
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff f81c 	bl	80062b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	9202      	str	r2, [sp, #8]
 8007280:	9301      	str	r3, [sp, #4]
 8007282:	2300      	movs	r3, #0
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	2300      	movs	r3, #0
 8007288:	460a      	mov	r2, r1
 800728a:	4924      	ldr	r1, [pc, #144]	@ (800731c <vTaskStartScheduler+0xc0>)
 800728c:	4824      	ldr	r0, [pc, #144]	@ (8007320 <vTaskStartScheduler+0xc4>)
 800728e:	f7ff fdf1 	bl	8006e74 <xTaskCreateStatic>
 8007292:	4603      	mov	r3, r0
 8007294:	4a23      	ldr	r2, [pc, #140]	@ (8007324 <vTaskStartScheduler+0xc8>)
 8007296:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007298:	4b22      	ldr	r3, [pc, #136]	@ (8007324 <vTaskStartScheduler+0xc8>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072a0:	2301      	movs	r3, #1
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	e001      	b.n	80072aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d102      	bne.n	80072b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80072b0:	f000 fd1a 	bl	8007ce8 <xTimerCreateTimerTask>
 80072b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d11b      	bne.n	80072f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	613b      	str	r3, [r7, #16]
}
 80072ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072d0:	4b15      	ldr	r3, [pc, #84]	@ (8007328 <vTaskStartScheduler+0xcc>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3354      	adds	r3, #84	@ 0x54
 80072d6:	4a15      	ldr	r2, [pc, #84]	@ (800732c <vTaskStartScheduler+0xd0>)
 80072d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80072da:	4b15      	ldr	r3, [pc, #84]	@ (8007330 <vTaskStartScheduler+0xd4>)
 80072dc:	f04f 32ff 	mov.w	r2, #4294967295
 80072e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80072e2:	4b14      	ldr	r3, [pc, #80]	@ (8007334 <vTaskStartScheduler+0xd8>)
 80072e4:	2201      	movs	r2, #1
 80072e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072e8:	4b13      	ldr	r3, [pc, #76]	@ (8007338 <vTaskStartScheduler+0xdc>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072ee:	f001 f8df 	bl	80084b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072f2:	e00f      	b.n	8007314 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fa:	d10b      	bne.n	8007314 <vTaskStartScheduler+0xb8>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	60fb      	str	r3, [r7, #12]
}
 800730e:	bf00      	nop
 8007310:	bf00      	nop
 8007312:	e7fd      	b.n	8007310 <vTaskStartScheduler+0xb4>
}
 8007314:	bf00      	nop
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	08009078 	.word	0x08009078
 8007320:	0800796d 	.word	0x0800796d
 8007324:	20001024 	.word	0x20001024
 8007328:	20000b2c 	.word	0x20000b2c
 800732c:	20000010 	.word	0x20000010
 8007330:	20001020 	.word	0x20001020
 8007334:	2000100c 	.word	0x2000100c
 8007338:	20001004 	.word	0x20001004

0800733c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007340:	4b04      	ldr	r3, [pc, #16]	@ (8007354 <vTaskSuspendAll+0x18>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3301      	adds	r3, #1
 8007346:	4a03      	ldr	r2, [pc, #12]	@ (8007354 <vTaskSuspendAll+0x18>)
 8007348:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800734a:	bf00      	nop
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	20001028 	.word	0x20001028

08007358 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007362:	2300      	movs	r3, #0
 8007364:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007366:	4b42      	ldr	r3, [pc, #264]	@ (8007470 <xTaskResumeAll+0x118>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10b      	bne.n	8007386 <xTaskResumeAll+0x2e>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	603b      	str	r3, [r7, #0]
}
 8007380:	bf00      	nop
 8007382:	bf00      	nop
 8007384:	e7fd      	b.n	8007382 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007386:	f001 f937 	bl	80085f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800738a:	4b39      	ldr	r3, [pc, #228]	@ (8007470 <xTaskResumeAll+0x118>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3b01      	subs	r3, #1
 8007390:	4a37      	ldr	r2, [pc, #220]	@ (8007470 <xTaskResumeAll+0x118>)
 8007392:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007394:	4b36      	ldr	r3, [pc, #216]	@ (8007470 <xTaskResumeAll+0x118>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d162      	bne.n	8007462 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800739c:	4b35      	ldr	r3, [pc, #212]	@ (8007474 <xTaskResumeAll+0x11c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d05e      	beq.n	8007462 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073a4:	e02f      	b.n	8007406 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073a6:	4b34      	ldr	r3, [pc, #208]	@ (8007478 <xTaskResumeAll+0x120>)
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3318      	adds	r3, #24
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff f83a 	bl	800642c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff f835 	bl	800642c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c6:	4b2d      	ldr	r3, [pc, #180]	@ (800747c <xTaskResumeAll+0x124>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d903      	bls.n	80073d6 <xTaskResumeAll+0x7e>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d2:	4a2a      	ldr	r2, [pc, #168]	@ (800747c <xTaskResumeAll+0x124>)
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073da:	4613      	mov	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4a27      	ldr	r2, [pc, #156]	@ (8007480 <xTaskResumeAll+0x128>)
 80073e4:	441a      	add	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3304      	adds	r3, #4
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f7fe ffc0 	bl	8006372 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f6:	4b23      	ldr	r3, [pc, #140]	@ (8007484 <xTaskResumeAll+0x12c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d302      	bcc.n	8007406 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007400:	4b21      	ldr	r3, [pc, #132]	@ (8007488 <xTaskResumeAll+0x130>)
 8007402:	2201      	movs	r2, #1
 8007404:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007406:	4b1c      	ldr	r3, [pc, #112]	@ (8007478 <xTaskResumeAll+0x120>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1cb      	bne.n	80073a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007414:	f000 fb66 	bl	8007ae4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007418:	4b1c      	ldr	r3, [pc, #112]	@ (800748c <xTaskResumeAll+0x134>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d010      	beq.n	8007446 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007424:	f000 f846 	bl	80074b4 <xTaskIncrementTick>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800742e:	4b16      	ldr	r3, [pc, #88]	@ (8007488 <xTaskResumeAll+0x130>)
 8007430:	2201      	movs	r2, #1
 8007432:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3b01      	subs	r3, #1
 8007438:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1f1      	bne.n	8007424 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007440:	4b12      	ldr	r3, [pc, #72]	@ (800748c <xTaskResumeAll+0x134>)
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007446:	4b10      	ldr	r3, [pc, #64]	@ (8007488 <xTaskResumeAll+0x130>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d009      	beq.n	8007462 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800744e:	2301      	movs	r3, #1
 8007450:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007452:	4b0f      	ldr	r3, [pc, #60]	@ (8007490 <xTaskResumeAll+0x138>)
 8007454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007462:	f001 f8fb 	bl	800865c <vPortExitCritical>

	return xAlreadyYielded;
 8007466:	68bb      	ldr	r3, [r7, #8]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	20001028 	.word	0x20001028
 8007474:	20001000 	.word	0x20001000
 8007478:	20000fc0 	.word	0x20000fc0
 800747c:	20001008 	.word	0x20001008
 8007480:	20000b30 	.word	0x20000b30
 8007484:	20000b2c 	.word	0x20000b2c
 8007488:	20001014 	.word	0x20001014
 800748c:	20001010 	.word	0x20001010
 8007490:	e000ed04 	.word	0xe000ed04

08007494 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800749a:	4b05      	ldr	r3, [pc, #20]	@ (80074b0 <xTaskGetTickCount+0x1c>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80074a0:	687b      	ldr	r3, [r7, #4]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	20001004 	.word	0x20001004

080074b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074ba:	2300      	movs	r3, #0
 80074bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074be:	4b4f      	ldr	r3, [pc, #316]	@ (80075fc <xTaskIncrementTick+0x148>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f040 8090 	bne.w	80075e8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074c8:	4b4d      	ldr	r3, [pc, #308]	@ (8007600 <xTaskIncrementTick+0x14c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3301      	adds	r3, #1
 80074ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074d0:	4a4b      	ldr	r2, [pc, #300]	@ (8007600 <xTaskIncrementTick+0x14c>)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d121      	bne.n	8007520 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80074dc:	4b49      	ldr	r3, [pc, #292]	@ (8007604 <xTaskIncrementTick+0x150>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00b      	beq.n	80074fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	603b      	str	r3, [r7, #0]
}
 80074f8:	bf00      	nop
 80074fa:	bf00      	nop
 80074fc:	e7fd      	b.n	80074fa <xTaskIncrementTick+0x46>
 80074fe:	4b41      	ldr	r3, [pc, #260]	@ (8007604 <xTaskIncrementTick+0x150>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	4b40      	ldr	r3, [pc, #256]	@ (8007608 <xTaskIncrementTick+0x154>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a3e      	ldr	r2, [pc, #248]	@ (8007604 <xTaskIncrementTick+0x150>)
 800750a:	6013      	str	r3, [r2, #0]
 800750c:	4a3e      	ldr	r2, [pc, #248]	@ (8007608 <xTaskIncrementTick+0x154>)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	4b3e      	ldr	r3, [pc, #248]	@ (800760c <xTaskIncrementTick+0x158>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3301      	adds	r3, #1
 8007518:	4a3c      	ldr	r2, [pc, #240]	@ (800760c <xTaskIncrementTick+0x158>)
 800751a:	6013      	str	r3, [r2, #0]
 800751c:	f000 fae2 	bl	8007ae4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007520:	4b3b      	ldr	r3, [pc, #236]	@ (8007610 <xTaskIncrementTick+0x15c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	429a      	cmp	r2, r3
 8007528:	d349      	bcc.n	80075be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800752a:	4b36      	ldr	r3, [pc, #216]	@ (8007604 <xTaskIncrementTick+0x150>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007534:	4b36      	ldr	r3, [pc, #216]	@ (8007610 <xTaskIncrementTick+0x15c>)
 8007536:	f04f 32ff 	mov.w	r2, #4294967295
 800753a:	601a      	str	r2, [r3, #0]
					break;
 800753c:	e03f      	b.n	80075be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800753e:	4b31      	ldr	r3, [pc, #196]	@ (8007604 <xTaskIncrementTick+0x150>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	429a      	cmp	r2, r3
 8007554:	d203      	bcs.n	800755e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007556:	4a2e      	ldr	r2, [pc, #184]	@ (8007610 <xTaskIncrementTick+0x15c>)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800755c:	e02f      	b.n	80075be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	3304      	adds	r3, #4
 8007562:	4618      	mov	r0, r3
 8007564:	f7fe ff62 	bl	800642c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756c:	2b00      	cmp	r3, #0
 800756e:	d004      	beq.n	800757a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	3318      	adds	r3, #24
 8007574:	4618      	mov	r0, r3
 8007576:	f7fe ff59 	bl	800642c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800757e:	4b25      	ldr	r3, [pc, #148]	@ (8007614 <xTaskIncrementTick+0x160>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d903      	bls.n	800758e <xTaskIncrementTick+0xda>
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758a:	4a22      	ldr	r2, [pc, #136]	@ (8007614 <xTaskIncrementTick+0x160>)
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007592:	4613      	mov	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4a1f      	ldr	r2, [pc, #124]	@ (8007618 <xTaskIncrementTick+0x164>)
 800759c:	441a      	add	r2, r3
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	3304      	adds	r3, #4
 80075a2:	4619      	mov	r1, r3
 80075a4:	4610      	mov	r0, r2
 80075a6:	f7fe fee4 	bl	8006372 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ae:	4b1b      	ldr	r3, [pc, #108]	@ (800761c <xTaskIncrementTick+0x168>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d3b8      	bcc.n	800752a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80075b8:	2301      	movs	r3, #1
 80075ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075bc:	e7b5      	b.n	800752a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075be:	4b17      	ldr	r3, [pc, #92]	@ (800761c <xTaskIncrementTick+0x168>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c4:	4914      	ldr	r1, [pc, #80]	@ (8007618 <xTaskIncrementTick+0x164>)
 80075c6:	4613      	mov	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	440b      	add	r3, r1
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d901      	bls.n	80075da <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80075d6:	2301      	movs	r3, #1
 80075d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80075da:	4b11      	ldr	r3, [pc, #68]	@ (8007620 <xTaskIncrementTick+0x16c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d007      	beq.n	80075f2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80075e2:	2301      	movs	r3, #1
 80075e4:	617b      	str	r3, [r7, #20]
 80075e6:	e004      	b.n	80075f2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80075e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007624 <xTaskIncrementTick+0x170>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3301      	adds	r3, #1
 80075ee:	4a0d      	ldr	r2, [pc, #52]	@ (8007624 <xTaskIncrementTick+0x170>)
 80075f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80075f2:	697b      	ldr	r3, [r7, #20]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20001028 	.word	0x20001028
 8007600:	20001004 	.word	0x20001004
 8007604:	20000fb8 	.word	0x20000fb8
 8007608:	20000fbc 	.word	0x20000fbc
 800760c:	20001018 	.word	0x20001018
 8007610:	20001020 	.word	0x20001020
 8007614:	20001008 	.word	0x20001008
 8007618:	20000b30 	.word	0x20000b30
 800761c:	20000b2c 	.word	0x20000b2c
 8007620:	20001014 	.word	0x20001014
 8007624:	20001010 	.word	0x20001010

08007628 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800762e:	4b2b      	ldr	r3, [pc, #172]	@ (80076dc <vTaskSwitchContext+0xb4>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007636:	4b2a      	ldr	r3, [pc, #168]	@ (80076e0 <vTaskSwitchContext+0xb8>)
 8007638:	2201      	movs	r2, #1
 800763a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800763c:	e047      	b.n	80076ce <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800763e:	4b28      	ldr	r3, [pc, #160]	@ (80076e0 <vTaskSwitchContext+0xb8>)
 8007640:	2200      	movs	r2, #0
 8007642:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007644:	4b27      	ldr	r3, [pc, #156]	@ (80076e4 <vTaskSwitchContext+0xbc>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	60fb      	str	r3, [r7, #12]
 800764a:	e011      	b.n	8007670 <vTaskSwitchContext+0x48>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10b      	bne.n	800766a <vTaskSwitchContext+0x42>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	607b      	str	r3, [r7, #4]
}
 8007664:	bf00      	nop
 8007666:	bf00      	nop
 8007668:	e7fd      	b.n	8007666 <vTaskSwitchContext+0x3e>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3b01      	subs	r3, #1
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	491d      	ldr	r1, [pc, #116]	@ (80076e8 <vTaskSwitchContext+0xc0>)
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	4613      	mov	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	440b      	add	r3, r1
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0e3      	beq.n	800764c <vTaskSwitchContext+0x24>
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4613      	mov	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4a16      	ldr	r2, [pc, #88]	@ (80076e8 <vTaskSwitchContext+0xc0>)
 8007690:	4413      	add	r3, r2
 8007692:	60bb      	str	r3, [r7, #8]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	605a      	str	r2, [r3, #4]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	3308      	adds	r3, #8
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d104      	bne.n	80076b4 <vTaskSwitchContext+0x8c>
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	605a      	str	r2, [r3, #4]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	4a0c      	ldr	r2, [pc, #48]	@ (80076ec <vTaskSwitchContext+0xc4>)
 80076bc:	6013      	str	r3, [r2, #0]
 80076be:	4a09      	ldr	r2, [pc, #36]	@ (80076e4 <vTaskSwitchContext+0xbc>)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076c4:	4b09      	ldr	r3, [pc, #36]	@ (80076ec <vTaskSwitchContext+0xc4>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3354      	adds	r3, #84	@ 0x54
 80076ca:	4a09      	ldr	r2, [pc, #36]	@ (80076f0 <vTaskSwitchContext+0xc8>)
 80076cc:	6013      	str	r3, [r2, #0]
}
 80076ce:	bf00      	nop
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	20001028 	.word	0x20001028
 80076e0:	20001014 	.word	0x20001014
 80076e4:	20001008 	.word	0x20001008
 80076e8:	20000b30 	.word	0x20000b30
 80076ec:	20000b2c 	.word	0x20000b2c
 80076f0:	20000010 	.word	0x20000010

080076f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10b      	bne.n	800771c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	60fb      	str	r3, [r7, #12]
}
 8007716:	bf00      	nop
 8007718:	bf00      	nop
 800771a:	e7fd      	b.n	8007718 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800771c:	4b07      	ldr	r3, [pc, #28]	@ (800773c <vTaskPlaceOnEventList+0x48>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3318      	adds	r3, #24
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7fe fe48 	bl	80063ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800772a:	2101      	movs	r1, #1
 800772c:	6838      	ldr	r0, [r7, #0]
 800772e:	f000 fa87 	bl	8007c40 <prvAddCurrentTaskToDelayedList>
}
 8007732:	bf00      	nop
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20000b2c 	.word	0x20000b2c

08007740 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10b      	bne.n	800776a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	617b      	str	r3, [r7, #20]
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	e7fd      	b.n	8007766 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800776a:	4b0a      	ldr	r3, [pc, #40]	@ (8007794 <vTaskPlaceOnEventListRestricted+0x54>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3318      	adds	r3, #24
 8007770:	4619      	mov	r1, r3
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f7fe fdfd 	bl	8006372 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800777e:	f04f 33ff 	mov.w	r3, #4294967295
 8007782:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	68b8      	ldr	r0, [r7, #8]
 8007788:	f000 fa5a 	bl	8007c40 <prvAddCurrentTaskToDelayedList>
	}
 800778c:	bf00      	nop
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20000b2c 	.word	0x20000b2c

08007798 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10b      	bne.n	80077c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	60fb      	str	r3, [r7, #12]
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	e7fd      	b.n	80077c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	3318      	adds	r3, #24
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe fe2e 	bl	800642c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007848 <xTaskRemoveFromEventList+0xb0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d11d      	bne.n	8007814 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	3304      	adds	r3, #4
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fe fe25 	bl	800642c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e6:	4b19      	ldr	r3, [pc, #100]	@ (800784c <xTaskRemoveFromEventList+0xb4>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d903      	bls.n	80077f6 <xTaskRemoveFromEventList+0x5e>
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f2:	4a16      	ldr	r2, [pc, #88]	@ (800784c <xTaskRemoveFromEventList+0xb4>)
 80077f4:	6013      	str	r3, [r2, #0]
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4a13      	ldr	r2, [pc, #76]	@ (8007850 <xTaskRemoveFromEventList+0xb8>)
 8007804:	441a      	add	r2, r3
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	3304      	adds	r3, #4
 800780a:	4619      	mov	r1, r3
 800780c:	4610      	mov	r0, r2
 800780e:	f7fe fdb0 	bl	8006372 <vListInsertEnd>
 8007812:	e005      	b.n	8007820 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	3318      	adds	r3, #24
 8007818:	4619      	mov	r1, r3
 800781a:	480e      	ldr	r0, [pc, #56]	@ (8007854 <xTaskRemoveFromEventList+0xbc>)
 800781c:	f7fe fda9 	bl	8006372 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007824:	4b0c      	ldr	r3, [pc, #48]	@ (8007858 <xTaskRemoveFromEventList+0xc0>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782a:	429a      	cmp	r2, r3
 800782c:	d905      	bls.n	800783a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800782e:	2301      	movs	r3, #1
 8007830:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007832:	4b0a      	ldr	r3, [pc, #40]	@ (800785c <xTaskRemoveFromEventList+0xc4>)
 8007834:	2201      	movs	r2, #1
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	e001      	b.n	800783e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800783a:	2300      	movs	r3, #0
 800783c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800783e:	697b      	ldr	r3, [r7, #20]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20001028 	.word	0x20001028
 800784c:	20001008 	.word	0x20001008
 8007850:	20000b30 	.word	0x20000b30
 8007854:	20000fc0 	.word	0x20000fc0
 8007858:	20000b2c 	.word	0x20000b2c
 800785c:	20001014 	.word	0x20001014

08007860 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007868:	4b06      	ldr	r3, [pc, #24]	@ (8007884 <vTaskInternalSetTimeOutState+0x24>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007870:	4b05      	ldr	r3, [pc, #20]	@ (8007888 <vTaskInternalSetTimeOutState+0x28>)
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	605a      	str	r2, [r3, #4]
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	20001018 	.word	0x20001018
 8007888:	20001004 	.word	0x20001004

0800788c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10b      	bne.n	80078b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	613b      	str	r3, [r7, #16]
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	e7fd      	b.n	80078b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10b      	bne.n	80078d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	60fb      	str	r3, [r7, #12]
}
 80078cc:	bf00      	nop
 80078ce:	bf00      	nop
 80078d0:	e7fd      	b.n	80078ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80078d2:	f000 fe91 	bl	80085f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80078d6:	4b1d      	ldr	r3, [pc, #116]	@ (800794c <xTaskCheckForTimeOut+0xc0>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ee:	d102      	bne.n	80078f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61fb      	str	r3, [r7, #28]
 80078f4:	e023      	b.n	800793e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	4b15      	ldr	r3, [pc, #84]	@ (8007950 <xTaskCheckForTimeOut+0xc4>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d007      	beq.n	8007912 <xTaskCheckForTimeOut+0x86>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	429a      	cmp	r2, r3
 800790a:	d302      	bcc.n	8007912 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800790c:	2301      	movs	r3, #1
 800790e:	61fb      	str	r3, [r7, #28]
 8007910:	e015      	b.n	800793e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	429a      	cmp	r2, r3
 800791a:	d20b      	bcs.n	8007934 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	1ad2      	subs	r2, r2, r3
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7ff ff99 	bl	8007860 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800792e:	2300      	movs	r3, #0
 8007930:	61fb      	str	r3, [r7, #28]
 8007932:	e004      	b.n	800793e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	2200      	movs	r2, #0
 8007938:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800793a:	2301      	movs	r3, #1
 800793c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800793e:	f000 fe8d 	bl	800865c <vPortExitCritical>

	return xReturn;
 8007942:	69fb      	ldr	r3, [r7, #28]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3720      	adds	r7, #32
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20001004 	.word	0x20001004
 8007950:	20001018 	.word	0x20001018

08007954 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007958:	4b03      	ldr	r3, [pc, #12]	@ (8007968 <vTaskMissedYield+0x14>)
 800795a:	2201      	movs	r2, #1
 800795c:	601a      	str	r2, [r3, #0]
}
 800795e:	bf00      	nop
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	20001014 	.word	0x20001014

0800796c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007974:	f000 f852 	bl	8007a1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007978:	4b06      	ldr	r3, [pc, #24]	@ (8007994 <prvIdleTask+0x28>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d9f9      	bls.n	8007974 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007980:	4b05      	ldr	r3, [pc, #20]	@ (8007998 <prvIdleTask+0x2c>)
 8007982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007990:	e7f0      	b.n	8007974 <prvIdleTask+0x8>
 8007992:	bf00      	nop
 8007994:	20000b30 	.word	0x20000b30
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079a2:	2300      	movs	r3, #0
 80079a4:	607b      	str	r3, [r7, #4]
 80079a6:	e00c      	b.n	80079c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4a12      	ldr	r2, [pc, #72]	@ (80079fc <prvInitialiseTaskLists+0x60>)
 80079b4:	4413      	add	r3, r2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe fcae 	bl	8006318 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3301      	adds	r3, #1
 80079c0:	607b      	str	r3, [r7, #4]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b37      	cmp	r3, #55	@ 0x37
 80079c6:	d9ef      	bls.n	80079a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079c8:	480d      	ldr	r0, [pc, #52]	@ (8007a00 <prvInitialiseTaskLists+0x64>)
 80079ca:	f7fe fca5 	bl	8006318 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079ce:	480d      	ldr	r0, [pc, #52]	@ (8007a04 <prvInitialiseTaskLists+0x68>)
 80079d0:	f7fe fca2 	bl	8006318 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079d4:	480c      	ldr	r0, [pc, #48]	@ (8007a08 <prvInitialiseTaskLists+0x6c>)
 80079d6:	f7fe fc9f 	bl	8006318 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079da:	480c      	ldr	r0, [pc, #48]	@ (8007a0c <prvInitialiseTaskLists+0x70>)
 80079dc:	f7fe fc9c 	bl	8006318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079e0:	480b      	ldr	r0, [pc, #44]	@ (8007a10 <prvInitialiseTaskLists+0x74>)
 80079e2:	f7fe fc99 	bl	8006318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a14 <prvInitialiseTaskLists+0x78>)
 80079e8:	4a05      	ldr	r2, [pc, #20]	@ (8007a00 <prvInitialiseTaskLists+0x64>)
 80079ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007a18 <prvInitialiseTaskLists+0x7c>)
 80079ee:	4a05      	ldr	r2, [pc, #20]	@ (8007a04 <prvInitialiseTaskLists+0x68>)
 80079f0:	601a      	str	r2, [r3, #0]
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20000b30 	.word	0x20000b30
 8007a00:	20000f90 	.word	0x20000f90
 8007a04:	20000fa4 	.word	0x20000fa4
 8007a08:	20000fc0 	.word	0x20000fc0
 8007a0c:	20000fd4 	.word	0x20000fd4
 8007a10:	20000fec 	.word	0x20000fec
 8007a14:	20000fb8 	.word	0x20000fb8
 8007a18:	20000fbc 	.word	0x20000fbc

08007a1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a22:	e019      	b.n	8007a58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a24:	f000 fde8 	bl	80085f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a28:	4b10      	ldr	r3, [pc, #64]	@ (8007a6c <prvCheckTasksWaitingTermination+0x50>)
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	3304      	adds	r3, #4
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fe fcf9 	bl	800642c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a70 <prvCheckTasksWaitingTermination+0x54>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	4a0b      	ldr	r2, [pc, #44]	@ (8007a70 <prvCheckTasksWaitingTermination+0x54>)
 8007a42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a44:	4b0b      	ldr	r3, [pc, #44]	@ (8007a74 <prvCheckTasksWaitingTermination+0x58>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8007a74 <prvCheckTasksWaitingTermination+0x58>)
 8007a4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a4e:	f000 fe05 	bl	800865c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f810 	bl	8007a78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a58:	4b06      	ldr	r3, [pc, #24]	@ (8007a74 <prvCheckTasksWaitingTermination+0x58>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e1      	bne.n	8007a24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a60:	bf00      	nop
 8007a62:	bf00      	nop
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000fd4 	.word	0x20000fd4
 8007a70:	20001000 	.word	0x20001000
 8007a74:	20000fe8 	.word	0x20000fe8

08007a78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3354      	adds	r3, #84	@ 0x54
 8007a84:	4618      	mov	r0, r3
 8007a86:	f001 f9d7 	bl	8008e38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d108      	bne.n	8007aa6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f000 ff9d 	bl	80089d8 <vPortFree>
				vPortFree( pxTCB );
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 ff9a 	bl	80089d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007aa4:	e019      	b.n	8007ada <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d103      	bne.n	8007ab8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 ff91 	bl	80089d8 <vPortFree>
	}
 8007ab6:	e010      	b.n	8007ada <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d00b      	beq.n	8007ada <prvDeleteTCB+0x62>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	60fb      	str	r3, [r7, #12]
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop
 8007ad8:	e7fd      	b.n	8007ad6 <prvDeleteTCB+0x5e>
	}
 8007ada:	bf00      	nop
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aea:	4b0c      	ldr	r3, [pc, #48]	@ (8007b1c <prvResetNextTaskUnblockTime+0x38>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d104      	bne.n	8007afe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007af4:	4b0a      	ldr	r3, [pc, #40]	@ (8007b20 <prvResetNextTaskUnblockTime+0x3c>)
 8007af6:	f04f 32ff 	mov.w	r2, #4294967295
 8007afa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007afc:	e008      	b.n	8007b10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007afe:	4b07      	ldr	r3, [pc, #28]	@ (8007b1c <prvResetNextTaskUnblockTime+0x38>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	4a04      	ldr	r2, [pc, #16]	@ (8007b20 <prvResetNextTaskUnblockTime+0x3c>)
 8007b0e:	6013      	str	r3, [r2, #0]
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	20000fb8 	.word	0x20000fb8
 8007b20:	20001020 	.word	0x20001020

08007b24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b58 <xTaskGetSchedulerState+0x34>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d102      	bne.n	8007b38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b32:	2301      	movs	r3, #1
 8007b34:	607b      	str	r3, [r7, #4]
 8007b36:	e008      	b.n	8007b4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b38:	4b08      	ldr	r3, [pc, #32]	@ (8007b5c <xTaskGetSchedulerState+0x38>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b40:	2302      	movs	r3, #2
 8007b42:	607b      	str	r3, [r7, #4]
 8007b44:	e001      	b.n	8007b4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b46:	2300      	movs	r3, #0
 8007b48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b4a:	687b      	ldr	r3, [r7, #4]
	}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	2000100c 	.word	0x2000100c
 8007b5c:	20001028 	.word	0x20001028

08007b60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d058      	beq.n	8007c28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b76:	4b2f      	ldr	r3, [pc, #188]	@ (8007c34 <xTaskPriorityDisinherit+0xd4>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d00b      	beq.n	8007b98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	60fb      	str	r3, [r7, #12]
}
 8007b92:	bf00      	nop
 8007b94:	bf00      	nop
 8007b96:	e7fd      	b.n	8007b94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10b      	bne.n	8007bb8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	60bb      	str	r3, [r7, #8]
}
 8007bb2:	bf00      	nop
 8007bb4:	bf00      	nop
 8007bb6:	e7fd      	b.n	8007bb4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bbc:	1e5a      	subs	r2, r3, #1
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d02c      	beq.n	8007c28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d128      	bne.n	8007c28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe fc26 	bl	800642c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8007c38 <xTaskPriorityDisinherit+0xd8>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d903      	bls.n	8007c08 <xTaskPriorityDisinherit+0xa8>
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c04:	4a0c      	ldr	r2, [pc, #48]	@ (8007c38 <xTaskPriorityDisinherit+0xd8>)
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4a09      	ldr	r2, [pc, #36]	@ (8007c3c <xTaskPriorityDisinherit+0xdc>)
 8007c16:	441a      	add	r2, r3
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4610      	mov	r0, r2
 8007c20:	f7fe fba7 	bl	8006372 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c24:	2301      	movs	r3, #1
 8007c26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c28:	697b      	ldr	r3, [r7, #20]
	}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3718      	adds	r7, #24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20000b2c 	.word	0x20000b2c
 8007c38:	20001008 	.word	0x20001008
 8007c3c:	20000b30 	.word	0x20000b30

08007c40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c4a:	4b21      	ldr	r3, [pc, #132]	@ (8007cd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c50:	4b20      	ldr	r3, [pc, #128]	@ (8007cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3304      	adds	r3, #4
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe fbe8 	bl	800642c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c62:	d10a      	bne.n	8007c7a <prvAddCurrentTaskToDelayedList+0x3a>
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d007      	beq.n	8007c7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8007cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3304      	adds	r3, #4
 8007c70:	4619      	mov	r1, r3
 8007c72:	4819      	ldr	r0, [pc, #100]	@ (8007cd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c74:	f7fe fb7d 	bl	8006372 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c78:	e026      	b.n	8007cc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4413      	add	r3, r2
 8007c80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c82:	4b14      	ldr	r3, [pc, #80]	@ (8007cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d209      	bcs.n	8007ca6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c92:	4b12      	ldr	r3, [pc, #72]	@ (8007cdc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	4b0f      	ldr	r3, [pc, #60]	@ (8007cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	f7fe fb8b 	bl	80063ba <vListInsert>
}
 8007ca4:	e010      	b.n	8007cc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8007ce0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	f7fe fb81 	bl	80063ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ce4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d202      	bcs.n	8007cc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007cc2:	4a08      	ldr	r2, [pc, #32]	@ (8007ce4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	6013      	str	r3, [r2, #0]
}
 8007cc8:	bf00      	nop
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	20001004 	.word	0x20001004
 8007cd4:	20000b2c 	.word	0x20000b2c
 8007cd8:	20000fec 	.word	0x20000fec
 8007cdc:	20000fbc 	.word	0x20000fbc
 8007ce0:	20000fb8 	.word	0x20000fb8
 8007ce4:	20001020 	.word	0x20001020

08007ce8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08a      	sub	sp, #40	@ 0x28
 8007cec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007cf2:	f000 fb13 	bl	800831c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8007d6c <xTimerCreateTimerTask+0x84>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d021      	beq.n	8007d42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d02:	2300      	movs	r3, #0
 8007d04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d06:	1d3a      	adds	r2, r7, #4
 8007d08:	f107 0108 	add.w	r1, r7, #8
 8007d0c:	f107 030c 	add.w	r3, r7, #12
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fe fae7 	bl	80062e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	9202      	str	r2, [sp, #8]
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	2302      	movs	r3, #2
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	2300      	movs	r3, #0
 8007d26:	460a      	mov	r2, r1
 8007d28:	4911      	ldr	r1, [pc, #68]	@ (8007d70 <xTimerCreateTimerTask+0x88>)
 8007d2a:	4812      	ldr	r0, [pc, #72]	@ (8007d74 <xTimerCreateTimerTask+0x8c>)
 8007d2c:	f7ff f8a2 	bl	8006e74 <xTaskCreateStatic>
 8007d30:	4603      	mov	r3, r0
 8007d32:	4a11      	ldr	r2, [pc, #68]	@ (8007d78 <xTimerCreateTimerTask+0x90>)
 8007d34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d36:	4b10      	ldr	r3, [pc, #64]	@ (8007d78 <xTimerCreateTimerTask+0x90>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10b      	bne.n	8007d60 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	613b      	str	r3, [r7, #16]
}
 8007d5a:	bf00      	nop
 8007d5c:	bf00      	nop
 8007d5e:	e7fd      	b.n	8007d5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d60:	697b      	ldr	r3, [r7, #20]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	2000105c 	.word	0x2000105c
 8007d70:	08009080 	.word	0x08009080
 8007d74:	08007eb5 	.word	0x08007eb5
 8007d78:	20001060 	.word	0x20001060

08007d7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08a      	sub	sp, #40	@ 0x28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10b      	bne.n	8007dac <xTimerGenericCommand+0x30>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	623b      	str	r3, [r7, #32]
}
 8007da6:	bf00      	nop
 8007da8:	bf00      	nop
 8007daa:	e7fd      	b.n	8007da8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007dac:	4b19      	ldr	r3, [pc, #100]	@ (8007e14 <xTimerGenericCommand+0x98>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d02a      	beq.n	8007e0a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b05      	cmp	r3, #5
 8007dc4:	dc18      	bgt.n	8007df8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007dc6:	f7ff fead 	bl	8007b24 <xTaskGetSchedulerState>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d109      	bne.n	8007de4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007dd0:	4b10      	ldr	r3, [pc, #64]	@ (8007e14 <xTimerGenericCommand+0x98>)
 8007dd2:	6818      	ldr	r0, [r3, #0]
 8007dd4:	f107 0110 	add.w	r1, r7, #16
 8007dd8:	2300      	movs	r3, #0
 8007dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ddc:	f7fe fc5a 	bl	8006694 <xQueueGenericSend>
 8007de0:	6278      	str	r0, [r7, #36]	@ 0x24
 8007de2:	e012      	b.n	8007e0a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007de4:	4b0b      	ldr	r3, [pc, #44]	@ (8007e14 <xTimerGenericCommand+0x98>)
 8007de6:	6818      	ldr	r0, [r3, #0]
 8007de8:	f107 0110 	add.w	r1, r7, #16
 8007dec:	2300      	movs	r3, #0
 8007dee:	2200      	movs	r2, #0
 8007df0:	f7fe fc50 	bl	8006694 <xQueueGenericSend>
 8007df4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007df6:	e008      	b.n	8007e0a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007df8:	4b06      	ldr	r3, [pc, #24]	@ (8007e14 <xTimerGenericCommand+0x98>)
 8007dfa:	6818      	ldr	r0, [r3, #0]
 8007dfc:	f107 0110 	add.w	r1, r7, #16
 8007e00:	2300      	movs	r3, #0
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	f7fe fd48 	bl	8006898 <xQueueGenericSendFromISR>
 8007e08:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3728      	adds	r7, #40	@ 0x28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	2000105c 	.word	0x2000105c

08007e18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af02      	add	r7, sp, #8
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e22:	4b23      	ldr	r3, [pc, #140]	@ (8007eb0 <prvProcessExpiredTimer+0x98>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fe fafb 	bl	800642c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e3c:	f003 0304 	and.w	r3, r3, #4
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d023      	beq.n	8007e8c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	699a      	ldr	r2, [r3, #24]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	18d1      	adds	r1, r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	6978      	ldr	r0, [r7, #20]
 8007e52:	f000 f8d5 	bl	8008000 <prvInsertTimerInActiveList>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d020      	beq.n	8007e9e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	2300      	movs	r3, #0
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	2100      	movs	r1, #0
 8007e66:	6978      	ldr	r0, [r7, #20]
 8007e68:	f7ff ff88 	bl	8007d7c <xTimerGenericCommand>
 8007e6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d114      	bne.n	8007e9e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	60fb      	str	r3, [r7, #12]
}
 8007e86:	bf00      	nop
 8007e88:	bf00      	nop
 8007e8a:	e7fd      	b.n	8007e88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e92:	f023 0301 	bic.w	r3, r3, #1
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	6978      	ldr	r0, [r7, #20]
 8007ea4:	4798      	blx	r3
}
 8007ea6:	bf00      	nop
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20001054 	.word	0x20001054

08007eb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ebc:	f107 0308 	add.w	r3, r7, #8
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 f859 	bl	8007f78 <prvGetNextExpireTime>
 8007ec6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 f805 	bl	8007edc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ed2:	f000 f8d7 	bl	8008084 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ed6:	bf00      	nop
 8007ed8:	e7f0      	b.n	8007ebc <prvTimerTask+0x8>
	...

08007edc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ee6:	f7ff fa29 	bl	800733c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007eea:	f107 0308 	add.w	r3, r7, #8
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 f866 	bl	8007fc0 <prvSampleTimeNow>
 8007ef4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d130      	bne.n	8007f5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10a      	bne.n	8007f18 <prvProcessTimerOrBlockTask+0x3c>
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d806      	bhi.n	8007f18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f0a:	f7ff fa25 	bl	8007358 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f0e:	68f9      	ldr	r1, [r7, #12]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff ff81 	bl	8007e18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f16:	e024      	b.n	8007f62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d008      	beq.n	8007f30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f1e:	4b13      	ldr	r3, [pc, #76]	@ (8007f6c <prvProcessTimerOrBlockTask+0x90>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <prvProcessTimerOrBlockTask+0x50>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e000      	b.n	8007f2e <prvProcessTimerOrBlockTask+0x52>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f30:	4b0f      	ldr	r3, [pc, #60]	@ (8007f70 <prvProcessTimerOrBlockTask+0x94>)
 8007f32:	6818      	ldr	r0, [r3, #0]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	f7fe ff65 	bl	8006e0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f42:	f7ff fa09 	bl	8007358 <xTaskResumeAll>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10a      	bne.n	8007f62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f4c:	4b09      	ldr	r3, [pc, #36]	@ (8007f74 <prvProcessTimerOrBlockTask+0x98>)
 8007f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	f3bf 8f6f 	isb	sy
}
 8007f5c:	e001      	b.n	8007f62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f5e:	f7ff f9fb 	bl	8007358 <xTaskResumeAll>
}
 8007f62:	bf00      	nop
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20001058 	.word	0x20001058
 8007f70:	2000105c 	.word	0x2000105c
 8007f74:	e000ed04 	.word	0xe000ed04

08007f78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f80:	4b0e      	ldr	r3, [pc, #56]	@ (8007fbc <prvGetNextExpireTime+0x44>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <prvGetNextExpireTime+0x16>
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	e000      	b.n	8007f90 <prvGetNextExpireTime+0x18>
 8007f8e:	2200      	movs	r2, #0
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d105      	bne.n	8007fa8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f9c:	4b07      	ldr	r3, [pc, #28]	@ (8007fbc <prvGetNextExpireTime+0x44>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	e001      	b.n	8007fac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007fac:	68fb      	ldr	r3, [r7, #12]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	20001054 	.word	0x20001054

08007fc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007fc8:	f7ff fa64 	bl	8007494 <xTaskGetTickCount>
 8007fcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007fce:	4b0b      	ldr	r3, [pc, #44]	@ (8007ffc <prvSampleTimeNow+0x3c>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d205      	bcs.n	8007fe4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007fd8:	f000 f93a 	bl	8008250 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e002      	b.n	8007fea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007fea:	4a04      	ldr	r2, [pc, #16]	@ (8007ffc <prvSampleTimeNow+0x3c>)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20001064 	.word	0x20001064

08008000 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
 800800c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800800e:	2300      	movs	r3, #0
 8008010:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	429a      	cmp	r2, r3
 8008024:	d812      	bhi.n	800804c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	1ad2      	subs	r2, r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	429a      	cmp	r2, r3
 8008032:	d302      	bcc.n	800803a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008034:	2301      	movs	r3, #1
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	e01b      	b.n	8008072 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800803a:	4b10      	ldr	r3, [pc, #64]	@ (800807c <prvInsertTimerInActiveList+0x7c>)
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3304      	adds	r3, #4
 8008042:	4619      	mov	r1, r3
 8008044:	4610      	mov	r0, r2
 8008046:	f7fe f9b8 	bl	80063ba <vListInsert>
 800804a:	e012      	b.n	8008072 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	429a      	cmp	r2, r3
 8008052:	d206      	bcs.n	8008062 <prvInsertTimerInActiveList+0x62>
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	429a      	cmp	r2, r3
 800805a:	d302      	bcc.n	8008062 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800805c:	2301      	movs	r3, #1
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	e007      	b.n	8008072 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008062:	4b07      	ldr	r3, [pc, #28]	@ (8008080 <prvInsertTimerInActiveList+0x80>)
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3304      	adds	r3, #4
 800806a:	4619      	mov	r1, r3
 800806c:	4610      	mov	r0, r2
 800806e:	f7fe f9a4 	bl	80063ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008072:	697b      	ldr	r3, [r7, #20]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20001058 	.word	0x20001058
 8008080:	20001054 	.word	0x20001054

08008084 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b08e      	sub	sp, #56	@ 0x38
 8008088:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800808a:	e0ce      	b.n	800822a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	da19      	bge.n	80080c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008092:	1d3b      	adds	r3, r7, #4
 8008094:	3304      	adds	r3, #4
 8008096:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10b      	bne.n	80080b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	61fb      	str	r3, [r7, #28]
}
 80080b0:	bf00      	nop
 80080b2:	bf00      	nop
 80080b4:	e7fd      	b.n	80080b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80080b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080bc:	6850      	ldr	r0, [r2, #4]
 80080be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080c0:	6892      	ldr	r2, [r2, #8]
 80080c2:	4611      	mov	r1, r2
 80080c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f2c0 80ae 	blt.w	800822a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d004      	beq.n	80080e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080dc:	3304      	adds	r3, #4
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe f9a4 	bl	800642c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080e4:	463b      	mov	r3, r7
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff ff6a 	bl	8007fc0 <prvSampleTimeNow>
 80080ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b09      	cmp	r3, #9
 80080f2:	f200 8097 	bhi.w	8008224 <prvProcessReceivedCommands+0x1a0>
 80080f6:	a201      	add	r2, pc, #4	@ (adr r2, 80080fc <prvProcessReceivedCommands+0x78>)
 80080f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fc:	08008125 	.word	0x08008125
 8008100:	08008125 	.word	0x08008125
 8008104:	08008125 	.word	0x08008125
 8008108:	0800819b 	.word	0x0800819b
 800810c:	080081af 	.word	0x080081af
 8008110:	080081fb 	.word	0x080081fb
 8008114:	08008125 	.word	0x08008125
 8008118:	08008125 	.word	0x08008125
 800811c:	0800819b 	.word	0x0800819b
 8008120:	080081af 	.word	0x080081af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008126:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800812a:	f043 0301 	orr.w	r3, r3, #1
 800812e:	b2da      	uxtb	r2, r3
 8008130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008132:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	18d1      	adds	r1, r2, r3
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008144:	f7ff ff5c 	bl	8008000 <prvInsertTimerInActiveList>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d06c      	beq.n	8008228 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800814e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008154:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008158:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800815c:	f003 0304 	and.w	r3, r3, #4
 8008160:	2b00      	cmp	r3, #0
 8008162:	d061      	beq.n	8008228 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	441a      	add	r2, r3
 800816c:	2300      	movs	r3, #0
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	2300      	movs	r3, #0
 8008172:	2100      	movs	r1, #0
 8008174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008176:	f7ff fe01 	bl	8007d7c <xTimerGenericCommand>
 800817a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d152      	bne.n	8008228 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	61bb      	str	r3, [r7, #24]
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop
 8008198:	e7fd      	b.n	8008196 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800819a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081a0:	f023 0301 	bic.w	r3, r3, #1
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80081ac:	e03d      	b.n	800822a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081b4:	f043 0301 	orr.w	r3, r3, #1
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10b      	bne.n	80081e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	617b      	str	r3, [r7, #20]
}
 80081e0:	bf00      	nop
 80081e2:	bf00      	nop
 80081e4:	e7fd      	b.n	80081e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80081e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ec:	18d1      	adds	r1, r2, r3
 80081ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081f4:	f7ff ff04 	bl	8008000 <prvInsertTimerInActiveList>
					break;
 80081f8:	e017      	b.n	800822a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80081fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008200:	f003 0302 	and.w	r3, r3, #2
 8008204:	2b00      	cmp	r3, #0
 8008206:	d103      	bne.n	8008210 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008208:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800820a:	f000 fbe5 	bl	80089d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800820e:	e00c      	b.n	800822a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008212:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008216:	f023 0301 	bic.w	r3, r3, #1
 800821a:	b2da      	uxtb	r2, r3
 800821c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008222:	e002      	b.n	800822a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008224:	bf00      	nop
 8008226:	e000      	b.n	800822a <prvProcessReceivedCommands+0x1a6>
					break;
 8008228:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800822a:	4b08      	ldr	r3, [pc, #32]	@ (800824c <prvProcessReceivedCommands+0x1c8>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	1d39      	adds	r1, r7, #4
 8008230:	2200      	movs	r2, #0
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe fbce 	bl	80069d4 <xQueueReceive>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	f47f af26 	bne.w	800808c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008240:	bf00      	nop
 8008242:	bf00      	nop
 8008244:	3730      	adds	r7, #48	@ 0x30
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	2000105c 	.word	0x2000105c

08008250 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008256:	e049      	b.n	80082ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008258:	4b2e      	ldr	r3, [pc, #184]	@ (8008314 <prvSwitchTimerLists+0xc4>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008262:	4b2c      	ldr	r3, [pc, #176]	@ (8008314 <prvSwitchTimerLists+0xc4>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	3304      	adds	r3, #4
 8008270:	4618      	mov	r0, r3
 8008272:	f7fe f8db 	bl	800642c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	d02f      	beq.n	80082ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4413      	add	r3, r2
 8008294:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	429a      	cmp	r2, r3
 800829c:	d90e      	bls.n	80082bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082aa:	4b1a      	ldr	r3, [pc, #104]	@ (8008314 <prvSwitchTimerLists+0xc4>)
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4619      	mov	r1, r3
 80082b4:	4610      	mov	r0, r2
 80082b6:	f7fe f880 	bl	80063ba <vListInsert>
 80082ba:	e017      	b.n	80082ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082bc:	2300      	movs	r3, #0
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	2300      	movs	r3, #0
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	2100      	movs	r1, #0
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f7ff fd58 	bl	8007d7c <xTimerGenericCommand>
 80082cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10b      	bne.n	80082ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	603b      	str	r3, [r7, #0]
}
 80082e6:	bf00      	nop
 80082e8:	bf00      	nop
 80082ea:	e7fd      	b.n	80082e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082ec:	4b09      	ldr	r3, [pc, #36]	@ (8008314 <prvSwitchTimerLists+0xc4>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1b0      	bne.n	8008258 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80082f6:	4b07      	ldr	r3, [pc, #28]	@ (8008314 <prvSwitchTimerLists+0xc4>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80082fc:	4b06      	ldr	r3, [pc, #24]	@ (8008318 <prvSwitchTimerLists+0xc8>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a04      	ldr	r2, [pc, #16]	@ (8008314 <prvSwitchTimerLists+0xc4>)
 8008302:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008304:	4a04      	ldr	r2, [pc, #16]	@ (8008318 <prvSwitchTimerLists+0xc8>)
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	6013      	str	r3, [r2, #0]
}
 800830a:	bf00      	nop
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20001054 	.word	0x20001054
 8008318:	20001058 	.word	0x20001058

0800831c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008322:	f000 f969 	bl	80085f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008326:	4b15      	ldr	r3, [pc, #84]	@ (800837c <prvCheckForValidListAndQueue+0x60>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d120      	bne.n	8008370 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800832e:	4814      	ldr	r0, [pc, #80]	@ (8008380 <prvCheckForValidListAndQueue+0x64>)
 8008330:	f7fd fff2 	bl	8006318 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008334:	4813      	ldr	r0, [pc, #76]	@ (8008384 <prvCheckForValidListAndQueue+0x68>)
 8008336:	f7fd ffef 	bl	8006318 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800833a:	4b13      	ldr	r3, [pc, #76]	@ (8008388 <prvCheckForValidListAndQueue+0x6c>)
 800833c:	4a10      	ldr	r2, [pc, #64]	@ (8008380 <prvCheckForValidListAndQueue+0x64>)
 800833e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008340:	4b12      	ldr	r3, [pc, #72]	@ (800838c <prvCheckForValidListAndQueue+0x70>)
 8008342:	4a10      	ldr	r2, [pc, #64]	@ (8008384 <prvCheckForValidListAndQueue+0x68>)
 8008344:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008346:	2300      	movs	r3, #0
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	4b11      	ldr	r3, [pc, #68]	@ (8008390 <prvCheckForValidListAndQueue+0x74>)
 800834c:	4a11      	ldr	r2, [pc, #68]	@ (8008394 <prvCheckForValidListAndQueue+0x78>)
 800834e:	2110      	movs	r1, #16
 8008350:	200a      	movs	r0, #10
 8008352:	f7fe f8ff 	bl	8006554 <xQueueGenericCreateStatic>
 8008356:	4603      	mov	r3, r0
 8008358:	4a08      	ldr	r2, [pc, #32]	@ (800837c <prvCheckForValidListAndQueue+0x60>)
 800835a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800835c:	4b07      	ldr	r3, [pc, #28]	@ (800837c <prvCheckForValidListAndQueue+0x60>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d005      	beq.n	8008370 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008364:	4b05      	ldr	r3, [pc, #20]	@ (800837c <prvCheckForValidListAndQueue+0x60>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	490b      	ldr	r1, [pc, #44]	@ (8008398 <prvCheckForValidListAndQueue+0x7c>)
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe fd24 	bl	8006db8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008370:	f000 f974 	bl	800865c <vPortExitCritical>
}
 8008374:	bf00      	nop
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	2000105c 	.word	0x2000105c
 8008380:	2000102c 	.word	0x2000102c
 8008384:	20001040 	.word	0x20001040
 8008388:	20001054 	.word	0x20001054
 800838c:	20001058 	.word	0x20001058
 8008390:	20001108 	.word	0x20001108
 8008394:	20001068 	.word	0x20001068
 8008398:	08009088 	.word	0x08009088

0800839c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3b04      	subs	r3, #4
 80083ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80083b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3b04      	subs	r3, #4
 80083ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f023 0201 	bic.w	r2, r3, #1
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3b04      	subs	r3, #4
 80083ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083cc:	4a0c      	ldr	r2, [pc, #48]	@ (8008400 <pxPortInitialiseStack+0x64>)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3b14      	subs	r3, #20
 80083d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3b04      	subs	r3, #4
 80083e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f06f 0202 	mvn.w	r2, #2
 80083ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3b20      	subs	r3, #32
 80083f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083f2:	68fb      	ldr	r3, [r7, #12]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr
 8008400:	08008405 	.word	0x08008405

08008404 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800840e:	4b13      	ldr	r3, [pc, #76]	@ (800845c <prvTaskExitError+0x58>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008416:	d00b      	beq.n	8008430 <prvTaskExitError+0x2c>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	60fb      	str	r3, [r7, #12]
}
 800842a:	bf00      	nop
 800842c:	bf00      	nop
 800842e:	e7fd      	b.n	800842c <prvTaskExitError+0x28>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	60bb      	str	r3, [r7, #8]
}
 8008442:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008444:	bf00      	nop
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d0fc      	beq.n	8008446 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800844c:	bf00      	nop
 800844e:	bf00      	nop
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	2000000c 	.word	0x2000000c

08008460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008460:	4b07      	ldr	r3, [pc, #28]	@ (8008480 <pxCurrentTCBConst2>)
 8008462:	6819      	ldr	r1, [r3, #0]
 8008464:	6808      	ldr	r0, [r1, #0]
 8008466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846a:	f380 8809 	msr	PSP, r0
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f04f 0000 	mov.w	r0, #0
 8008476:	f380 8811 	msr	BASEPRI, r0
 800847a:	4770      	bx	lr
 800847c:	f3af 8000 	nop.w

08008480 <pxCurrentTCBConst2>:
 8008480:	20000b2c 	.word	0x20000b2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008484:	bf00      	nop
 8008486:	bf00      	nop

08008488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008488:	4808      	ldr	r0, [pc, #32]	@ (80084ac <prvPortStartFirstTask+0x24>)
 800848a:	6800      	ldr	r0, [r0, #0]
 800848c:	6800      	ldr	r0, [r0, #0]
 800848e:	f380 8808 	msr	MSP, r0
 8008492:	f04f 0000 	mov.w	r0, #0
 8008496:	f380 8814 	msr	CONTROL, r0
 800849a:	b662      	cpsie	i
 800849c:	b661      	cpsie	f
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	df00      	svc	0
 80084a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80084aa:	bf00      	nop
 80084ac:	e000ed08 	.word	0xe000ed08

080084b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80084b6:	4b47      	ldr	r3, [pc, #284]	@ (80085d4 <xPortStartScheduler+0x124>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a47      	ldr	r2, [pc, #284]	@ (80085d8 <xPortStartScheduler+0x128>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d10b      	bne.n	80084d8 <xPortStartScheduler+0x28>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	613b      	str	r3, [r7, #16]
}
 80084d2:	bf00      	nop
 80084d4:	bf00      	nop
 80084d6:	e7fd      	b.n	80084d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084d8:	4b3e      	ldr	r3, [pc, #248]	@ (80085d4 <xPortStartScheduler+0x124>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a3f      	ldr	r2, [pc, #252]	@ (80085dc <xPortStartScheduler+0x12c>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d10b      	bne.n	80084fa <xPortStartScheduler+0x4a>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	60fb      	str	r3, [r7, #12]
}
 80084f4:	bf00      	nop
 80084f6:	bf00      	nop
 80084f8:	e7fd      	b.n	80084f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084fa:	4b39      	ldr	r3, [pc, #228]	@ (80085e0 <xPortStartScheduler+0x130>)
 80084fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	b2db      	uxtb	r3, r3
 8008504:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	22ff      	movs	r2, #255	@ 0xff
 800850a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	b2db      	uxtb	r3, r3
 8008512:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008514:	78fb      	ldrb	r3, [r7, #3]
 8008516:	b2db      	uxtb	r3, r3
 8008518:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800851c:	b2da      	uxtb	r2, r3
 800851e:	4b31      	ldr	r3, [pc, #196]	@ (80085e4 <xPortStartScheduler+0x134>)
 8008520:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008522:	4b31      	ldr	r3, [pc, #196]	@ (80085e8 <xPortStartScheduler+0x138>)
 8008524:	2207      	movs	r2, #7
 8008526:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008528:	e009      	b.n	800853e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800852a:	4b2f      	ldr	r3, [pc, #188]	@ (80085e8 <xPortStartScheduler+0x138>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3b01      	subs	r3, #1
 8008530:	4a2d      	ldr	r2, [pc, #180]	@ (80085e8 <xPortStartScheduler+0x138>)
 8008532:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	005b      	lsls	r3, r3, #1
 800853a:	b2db      	uxtb	r3, r3
 800853c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800853e:	78fb      	ldrb	r3, [r7, #3]
 8008540:	b2db      	uxtb	r3, r3
 8008542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008546:	2b80      	cmp	r3, #128	@ 0x80
 8008548:	d0ef      	beq.n	800852a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800854a:	4b27      	ldr	r3, [pc, #156]	@ (80085e8 <xPortStartScheduler+0x138>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f1c3 0307 	rsb	r3, r3, #7
 8008552:	2b04      	cmp	r3, #4
 8008554:	d00b      	beq.n	800856e <xPortStartScheduler+0xbe>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	60bb      	str	r3, [r7, #8]
}
 8008568:	bf00      	nop
 800856a:	bf00      	nop
 800856c:	e7fd      	b.n	800856a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800856e:	4b1e      	ldr	r3, [pc, #120]	@ (80085e8 <xPortStartScheduler+0x138>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	021b      	lsls	r3, r3, #8
 8008574:	4a1c      	ldr	r2, [pc, #112]	@ (80085e8 <xPortStartScheduler+0x138>)
 8008576:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008578:	4b1b      	ldr	r3, [pc, #108]	@ (80085e8 <xPortStartScheduler+0x138>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008580:	4a19      	ldr	r2, [pc, #100]	@ (80085e8 <xPortStartScheduler+0x138>)
 8008582:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	b2da      	uxtb	r2, r3
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800858c:	4b17      	ldr	r3, [pc, #92]	@ (80085ec <xPortStartScheduler+0x13c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a16      	ldr	r2, [pc, #88]	@ (80085ec <xPortStartScheduler+0x13c>)
 8008592:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008596:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008598:	4b14      	ldr	r3, [pc, #80]	@ (80085ec <xPortStartScheduler+0x13c>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a13      	ldr	r2, [pc, #76]	@ (80085ec <xPortStartScheduler+0x13c>)
 800859e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80085a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80085a4:	f000 f8da 	bl	800875c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085a8:	4b11      	ldr	r3, [pc, #68]	@ (80085f0 <xPortStartScheduler+0x140>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80085ae:	f000 f8f9 	bl	80087a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80085b2:	4b10      	ldr	r3, [pc, #64]	@ (80085f4 <xPortStartScheduler+0x144>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a0f      	ldr	r2, [pc, #60]	@ (80085f4 <xPortStartScheduler+0x144>)
 80085b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80085bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80085be:	f7ff ff63 	bl	8008488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80085c2:	f7ff f831 	bl	8007628 <vTaskSwitchContext>
	prvTaskExitError();
 80085c6:	f7ff ff1d 	bl	8008404 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	e000ed00 	.word	0xe000ed00
 80085d8:	410fc271 	.word	0x410fc271
 80085dc:	410fc270 	.word	0x410fc270
 80085e0:	e000e400 	.word	0xe000e400
 80085e4:	20001158 	.word	0x20001158
 80085e8:	2000115c 	.word	0x2000115c
 80085ec:	e000ed20 	.word	0xe000ed20
 80085f0:	2000000c 	.word	0x2000000c
 80085f4:	e000ef34 	.word	0xe000ef34

080085f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	607b      	str	r3, [r7, #4]
}
 8008610:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008612:	4b10      	ldr	r3, [pc, #64]	@ (8008654 <vPortEnterCritical+0x5c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3301      	adds	r3, #1
 8008618:	4a0e      	ldr	r2, [pc, #56]	@ (8008654 <vPortEnterCritical+0x5c>)
 800861a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800861c:	4b0d      	ldr	r3, [pc, #52]	@ (8008654 <vPortEnterCritical+0x5c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d110      	bne.n	8008646 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008624:	4b0c      	ldr	r3, [pc, #48]	@ (8008658 <vPortEnterCritical+0x60>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00b      	beq.n	8008646 <vPortEnterCritical+0x4e>
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	603b      	str	r3, [r7, #0]
}
 8008640:	bf00      	nop
 8008642:	bf00      	nop
 8008644:	e7fd      	b.n	8008642 <vPortEnterCritical+0x4a>
	}
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	2000000c 	.word	0x2000000c
 8008658:	e000ed04 	.word	0xe000ed04

0800865c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008662:	4b12      	ldr	r3, [pc, #72]	@ (80086ac <vPortExitCritical+0x50>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10b      	bne.n	8008682 <vPortExitCritical+0x26>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	607b      	str	r3, [r7, #4]
}
 800867c:	bf00      	nop
 800867e:	bf00      	nop
 8008680:	e7fd      	b.n	800867e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008682:	4b0a      	ldr	r3, [pc, #40]	@ (80086ac <vPortExitCritical+0x50>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3b01      	subs	r3, #1
 8008688:	4a08      	ldr	r2, [pc, #32]	@ (80086ac <vPortExitCritical+0x50>)
 800868a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800868c:	4b07      	ldr	r3, [pc, #28]	@ (80086ac <vPortExitCritical+0x50>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d105      	bne.n	80086a0 <vPortExitCritical+0x44>
 8008694:	2300      	movs	r3, #0
 8008696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	f383 8811 	msr	BASEPRI, r3
}
 800869e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	2000000c 	.word	0x2000000c

080086b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80086b0:	f3ef 8009 	mrs	r0, PSP
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	4b15      	ldr	r3, [pc, #84]	@ (8008710 <pxCurrentTCBConst>)
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	f01e 0f10 	tst.w	lr, #16
 80086c0:	bf08      	it	eq
 80086c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ca:	6010      	str	r0, [r2, #0]
 80086cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80086d4:	f380 8811 	msr	BASEPRI, r0
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f7fe ffa2 	bl	8007628 <vTaskSwitchContext>
 80086e4:	f04f 0000 	mov.w	r0, #0
 80086e8:	f380 8811 	msr	BASEPRI, r0
 80086ec:	bc09      	pop	{r0, r3}
 80086ee:	6819      	ldr	r1, [r3, #0]
 80086f0:	6808      	ldr	r0, [r1, #0]
 80086f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f6:	f01e 0f10 	tst.w	lr, #16
 80086fa:	bf08      	it	eq
 80086fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008700:	f380 8809 	msr	PSP, r0
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	f3af 8000 	nop.w

08008710 <pxCurrentTCBConst>:
 8008710:	20000b2c 	.word	0x20000b2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop

08008718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	607b      	str	r3, [r7, #4]
}
 8008730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008732:	f7fe febf 	bl	80074b4 <xTaskIncrementTick>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800873c:	4b06      	ldr	r3, [pc, #24]	@ (8008758 <xPortSysTickHandler+0x40>)
 800873e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	2300      	movs	r3, #0
 8008746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	f383 8811 	msr	BASEPRI, r3
}
 800874e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008750:	bf00      	nop
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	e000ed04 	.word	0xe000ed04

0800875c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800875c:	b480      	push	{r7}
 800875e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008760:	4b0b      	ldr	r3, [pc, #44]	@ (8008790 <vPortSetupTimerInterrupt+0x34>)
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008766:	4b0b      	ldr	r3, [pc, #44]	@ (8008794 <vPortSetupTimerInterrupt+0x38>)
 8008768:	2200      	movs	r2, #0
 800876a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800876c:	4b0a      	ldr	r3, [pc, #40]	@ (8008798 <vPortSetupTimerInterrupt+0x3c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a0a      	ldr	r2, [pc, #40]	@ (800879c <vPortSetupTimerInterrupt+0x40>)
 8008772:	fba2 2303 	umull	r2, r3, r2, r3
 8008776:	099b      	lsrs	r3, r3, #6
 8008778:	4a09      	ldr	r2, [pc, #36]	@ (80087a0 <vPortSetupTimerInterrupt+0x44>)
 800877a:	3b01      	subs	r3, #1
 800877c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800877e:	4b04      	ldr	r3, [pc, #16]	@ (8008790 <vPortSetupTimerInterrupt+0x34>)
 8008780:	2207      	movs	r2, #7
 8008782:	601a      	str	r2, [r3, #0]
}
 8008784:	bf00      	nop
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	e000e010 	.word	0xe000e010
 8008794:	e000e018 	.word	0xe000e018
 8008798:	20000000 	.word	0x20000000
 800879c:	10624dd3 	.word	0x10624dd3
 80087a0:	e000e014 	.word	0xe000e014

080087a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80087a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80087b4 <vPortEnableVFP+0x10>
 80087a8:	6801      	ldr	r1, [r0, #0]
 80087aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80087ae:	6001      	str	r1, [r0, #0]
 80087b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80087b2:	bf00      	nop
 80087b4:	e000ed88 	.word	0xe000ed88

080087b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80087be:	f3ef 8305 	mrs	r3, IPSR
 80087c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b0f      	cmp	r3, #15
 80087c8:	d915      	bls.n	80087f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087ca:	4a18      	ldr	r2, [pc, #96]	@ (800882c <vPortValidateInterruptPriority+0x74>)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4413      	add	r3, r2
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087d4:	4b16      	ldr	r3, [pc, #88]	@ (8008830 <vPortValidateInterruptPriority+0x78>)
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	7afa      	ldrb	r2, [r7, #11]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d20b      	bcs.n	80087f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	607b      	str	r3, [r7, #4]
}
 80087f0:	bf00      	nop
 80087f2:	bf00      	nop
 80087f4:	e7fd      	b.n	80087f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008834 <vPortValidateInterruptPriority+0x7c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80087fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008838 <vPortValidateInterruptPriority+0x80>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d90b      	bls.n	800881e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	603b      	str	r3, [r7, #0]
}
 8008818:	bf00      	nop
 800881a:	bf00      	nop
 800881c:	e7fd      	b.n	800881a <vPortValidateInterruptPriority+0x62>
	}
 800881e:	bf00      	nop
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	e000e3f0 	.word	0xe000e3f0
 8008830:	20001158 	.word	0x20001158
 8008834:	e000ed0c 	.word	0xe000ed0c
 8008838:	2000115c 	.word	0x2000115c

0800883c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b08a      	sub	sp, #40	@ 0x28
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008844:	2300      	movs	r3, #0
 8008846:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008848:	f7fe fd78 	bl	800733c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800884c:	4b5c      	ldr	r3, [pc, #368]	@ (80089c0 <pvPortMalloc+0x184>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d101      	bne.n	8008858 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008854:	f000 f924 	bl	8008aa0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008858:	4b5a      	ldr	r3, [pc, #360]	@ (80089c4 <pvPortMalloc+0x188>)
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4013      	ands	r3, r2
 8008860:	2b00      	cmp	r3, #0
 8008862:	f040 8095 	bne.w	8008990 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d01e      	beq.n	80088aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800886c:	2208      	movs	r2, #8
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4413      	add	r3, r2
 8008872:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f003 0307 	and.w	r3, r3, #7
 800887a:	2b00      	cmp	r3, #0
 800887c:	d015      	beq.n	80088aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f023 0307 	bic.w	r3, r3, #7
 8008884:	3308      	adds	r3, #8
 8008886:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f003 0307 	and.w	r3, r3, #7
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00b      	beq.n	80088aa <pvPortMalloc+0x6e>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	617b      	str	r3, [r7, #20]
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop
 80088a8:	e7fd      	b.n	80088a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d06f      	beq.n	8008990 <pvPortMalloc+0x154>
 80088b0:	4b45      	ldr	r3, [pc, #276]	@ (80089c8 <pvPortMalloc+0x18c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d86a      	bhi.n	8008990 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088ba:	4b44      	ldr	r3, [pc, #272]	@ (80089cc <pvPortMalloc+0x190>)
 80088bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80088be:	4b43      	ldr	r3, [pc, #268]	@ (80089cc <pvPortMalloc+0x190>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088c4:	e004      	b.n	80088d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80088c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d903      	bls.n	80088e2 <pvPortMalloc+0xa6>
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1f1      	bne.n	80088c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088e2:	4b37      	ldr	r3, [pc, #220]	@ (80089c0 <pvPortMalloc+0x184>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d051      	beq.n	8008990 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2208      	movs	r2, #8
 80088f2:	4413      	add	r3, r2
 80088f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	1ad2      	subs	r2, r2, r3
 8008906:	2308      	movs	r3, #8
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	429a      	cmp	r2, r3
 800890c:	d920      	bls.n	8008950 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800890e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4413      	add	r3, r2
 8008914:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	f003 0307 	and.w	r3, r3, #7
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00b      	beq.n	8008938 <pvPortMalloc+0xfc>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	613b      	str	r3, [r7, #16]
}
 8008932:	bf00      	nop
 8008934:	bf00      	nop
 8008936:	e7fd      	b.n	8008934 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	1ad2      	subs	r2, r2, r3
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800894a:	69b8      	ldr	r0, [r7, #24]
 800894c:	f000 f90a 	bl	8008b64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008950:	4b1d      	ldr	r3, [pc, #116]	@ (80089c8 <pvPortMalloc+0x18c>)
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	4a1b      	ldr	r2, [pc, #108]	@ (80089c8 <pvPortMalloc+0x18c>)
 800895c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800895e:	4b1a      	ldr	r3, [pc, #104]	@ (80089c8 <pvPortMalloc+0x18c>)
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	4b1b      	ldr	r3, [pc, #108]	@ (80089d0 <pvPortMalloc+0x194>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	429a      	cmp	r2, r3
 8008968:	d203      	bcs.n	8008972 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800896a:	4b17      	ldr	r3, [pc, #92]	@ (80089c8 <pvPortMalloc+0x18c>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a18      	ldr	r2, [pc, #96]	@ (80089d0 <pvPortMalloc+0x194>)
 8008970:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008974:	685a      	ldr	r2, [r3, #4]
 8008976:	4b13      	ldr	r3, [pc, #76]	@ (80089c4 <pvPortMalloc+0x188>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	431a      	orrs	r2, r3
 800897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008986:	4b13      	ldr	r3, [pc, #76]	@ (80089d4 <pvPortMalloc+0x198>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3301      	adds	r3, #1
 800898c:	4a11      	ldr	r2, [pc, #68]	@ (80089d4 <pvPortMalloc+0x198>)
 800898e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008990:	f7fe fce2 	bl	8007358 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00b      	beq.n	80089b6 <pvPortMalloc+0x17a>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	60fb      	str	r3, [r7, #12]
}
 80089b0:	bf00      	nop
 80089b2:	bf00      	nop
 80089b4:	e7fd      	b.n	80089b2 <pvPortMalloc+0x176>
	return pvReturn;
 80089b6:	69fb      	ldr	r3, [r7, #28]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3728      	adds	r7, #40	@ 0x28
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	20004d68 	.word	0x20004d68
 80089c4:	20004d7c 	.word	0x20004d7c
 80089c8:	20004d6c 	.word	0x20004d6c
 80089cc:	20004d60 	.word	0x20004d60
 80089d0:	20004d70 	.word	0x20004d70
 80089d4:	20004d74 	.word	0x20004d74

080089d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d04f      	beq.n	8008a8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089ea:	2308      	movs	r3, #8
 80089ec:	425b      	negs	r3, r3
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	4413      	add	r3, r2
 80089f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	4b25      	ldr	r3, [pc, #148]	@ (8008a94 <vPortFree+0xbc>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4013      	ands	r3, r2
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10b      	bne.n	8008a1e <vPortFree+0x46>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	60fb      	str	r3, [r7, #12]
}
 8008a18:	bf00      	nop
 8008a1a:	bf00      	nop
 8008a1c:	e7fd      	b.n	8008a1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00b      	beq.n	8008a3e <vPortFree+0x66>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	60bb      	str	r3, [r7, #8]
}
 8008a38:	bf00      	nop
 8008a3a:	bf00      	nop
 8008a3c:	e7fd      	b.n	8008a3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	4b14      	ldr	r3, [pc, #80]	@ (8008a94 <vPortFree+0xbc>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4013      	ands	r3, r2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d01e      	beq.n	8008a8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d11a      	bne.n	8008a8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	4b0e      	ldr	r3, [pc, #56]	@ (8008a94 <vPortFree+0xbc>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	43db      	mvns	r3, r3
 8008a5e:	401a      	ands	r2, r3
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a64:	f7fe fc6a 	bl	800733c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a98 <vPortFree+0xc0>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4413      	add	r3, r2
 8008a72:	4a09      	ldr	r2, [pc, #36]	@ (8008a98 <vPortFree+0xc0>)
 8008a74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a76:	6938      	ldr	r0, [r7, #16]
 8008a78:	f000 f874 	bl	8008b64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a7c:	4b07      	ldr	r3, [pc, #28]	@ (8008a9c <vPortFree+0xc4>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3301      	adds	r3, #1
 8008a82:	4a06      	ldr	r2, [pc, #24]	@ (8008a9c <vPortFree+0xc4>)
 8008a84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a86:	f7fe fc67 	bl	8007358 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a8a:	bf00      	nop
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20004d7c 	.word	0x20004d7c
 8008a98:	20004d6c 	.word	0x20004d6c
 8008a9c:	20004d78 	.word	0x20004d78

08008aa0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008aa6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008aaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008aac:	4b27      	ldr	r3, [pc, #156]	@ (8008b4c <prvHeapInit+0xac>)
 8008aae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f003 0307 	and.w	r3, r3, #7
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00c      	beq.n	8008ad4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3307      	adds	r3, #7
 8008abe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0307 	bic.w	r3, r3, #7
 8008ac6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	4a1f      	ldr	r2, [pc, #124]	@ (8008b4c <prvHeapInit+0xac>)
 8008ad0:	4413      	add	r3, r2
 8008ad2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b50 <prvHeapInit+0xb0>)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ade:	4b1c      	ldr	r3, [pc, #112]	@ (8008b50 <prvHeapInit+0xb0>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	4413      	add	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008aec:	2208      	movs	r2, #8
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	1a9b      	subs	r3, r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 0307 	bic.w	r3, r3, #7
 8008afa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4a15      	ldr	r2, [pc, #84]	@ (8008b54 <prvHeapInit+0xb4>)
 8008b00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b02:	4b14      	ldr	r3, [pc, #80]	@ (8008b54 <prvHeapInit+0xb4>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2200      	movs	r2, #0
 8008b08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b0a:	4b12      	ldr	r3, [pc, #72]	@ (8008b54 <prvHeapInit+0xb4>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	1ad2      	subs	r2, r2, r3
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b20:	4b0c      	ldr	r3, [pc, #48]	@ (8008b54 <prvHeapInit+0xb4>)
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b58 <prvHeapInit+0xb8>)
 8008b2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	4a09      	ldr	r2, [pc, #36]	@ (8008b5c <prvHeapInit+0xbc>)
 8008b36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b38:	4b09      	ldr	r3, [pc, #36]	@ (8008b60 <prvHeapInit+0xc0>)
 8008b3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b3e:	601a      	str	r2, [r3, #0]
}
 8008b40:	bf00      	nop
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	20001160 	.word	0x20001160
 8008b50:	20004d60 	.word	0x20004d60
 8008b54:	20004d68 	.word	0x20004d68
 8008b58:	20004d70 	.word	0x20004d70
 8008b5c:	20004d6c 	.word	0x20004d6c
 8008b60:	20004d7c 	.word	0x20004d7c

08008b64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b6c:	4b28      	ldr	r3, [pc, #160]	@ (8008c10 <prvInsertBlockIntoFreeList+0xac>)
 8008b6e:	60fb      	str	r3, [r7, #12]
 8008b70:	e002      	b.n	8008b78 <prvInsertBlockIntoFreeList+0x14>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d8f7      	bhi.n	8008b72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d108      	bne.n	8008ba6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	441a      	add	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	441a      	add	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d118      	bne.n	8008bec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	4b15      	ldr	r3, [pc, #84]	@ (8008c14 <prvInsertBlockIntoFreeList+0xb0>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d00d      	beq.n	8008be2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	685a      	ldr	r2, [r3, #4]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	441a      	add	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	e008      	b.n	8008bf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008be2:	4b0c      	ldr	r3, [pc, #48]	@ (8008c14 <prvInsertBlockIntoFreeList+0xb0>)
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	e003      	b.n	8008bf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d002      	beq.n	8008c02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c02:	bf00      	nop
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	20004d60 	.word	0x20004d60
 8008c14:	20004d68 	.word	0x20004d68

08008c18 <_Znwj>:
 8008c18:	2801      	cmp	r0, #1
 8008c1a:	bf38      	it	cc
 8008c1c:	2001      	movcc	r0, #1
 8008c1e:	b510      	push	{r4, lr}
 8008c20:	4604      	mov	r4, r0
 8008c22:	4620      	mov	r0, r4
 8008c24:	f000 f81a 	bl	8008c5c <malloc>
 8008c28:	b100      	cbz	r0, 8008c2c <_Znwj+0x14>
 8008c2a:	bd10      	pop	{r4, pc}
 8008c2c:	f000 f806 	bl	8008c3c <_ZSt15get_new_handlerv>
 8008c30:	b908      	cbnz	r0, 8008c36 <_Znwj+0x1e>
 8008c32:	f000 f80b 	bl	8008c4c <abort>
 8008c36:	4780      	blx	r0
 8008c38:	e7f3      	b.n	8008c22 <_Znwj+0xa>
	...

08008c3c <_ZSt15get_new_handlerv>:
 8008c3c:	4b02      	ldr	r3, [pc, #8]	@ (8008c48 <_ZSt15get_new_handlerv+0xc>)
 8008c3e:	6818      	ldr	r0, [r3, #0]
 8008c40:	f3bf 8f5b 	dmb	ish
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	20004d80 	.word	0x20004d80

08008c4c <abort>:
 8008c4c:	b508      	push	{r3, lr}
 8008c4e:	2006      	movs	r0, #6
 8008c50:	f000 f8ea 	bl	8008e28 <raise>
 8008c54:	2001      	movs	r0, #1
 8008c56:	f7f9 fbd5 	bl	8002404 <_exit>
	...

08008c5c <malloc>:
 8008c5c:	4b02      	ldr	r3, [pc, #8]	@ (8008c68 <malloc+0xc>)
 8008c5e:	4601      	mov	r1, r0
 8008c60:	6818      	ldr	r0, [r3, #0]
 8008c62:	f000 b825 	b.w	8008cb0 <_malloc_r>
 8008c66:	bf00      	nop
 8008c68:	20000010 	.word	0x20000010

08008c6c <sbrk_aligned>:
 8008c6c:	b570      	push	{r4, r5, r6, lr}
 8008c6e:	4e0f      	ldr	r6, [pc, #60]	@ (8008cac <sbrk_aligned+0x40>)
 8008c70:	460c      	mov	r4, r1
 8008c72:	6831      	ldr	r1, [r6, #0]
 8008c74:	4605      	mov	r5, r0
 8008c76:	b911      	cbnz	r1, 8008c7e <sbrk_aligned+0x12>
 8008c78:	f000 f948 	bl	8008f0c <_sbrk_r>
 8008c7c:	6030      	str	r0, [r6, #0]
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4628      	mov	r0, r5
 8008c82:	f000 f943 	bl	8008f0c <_sbrk_r>
 8008c86:	1c43      	adds	r3, r0, #1
 8008c88:	d103      	bne.n	8008c92 <sbrk_aligned+0x26>
 8008c8a:	f04f 34ff 	mov.w	r4, #4294967295
 8008c8e:	4620      	mov	r0, r4
 8008c90:	bd70      	pop	{r4, r5, r6, pc}
 8008c92:	1cc4      	adds	r4, r0, #3
 8008c94:	f024 0403 	bic.w	r4, r4, #3
 8008c98:	42a0      	cmp	r0, r4
 8008c9a:	d0f8      	beq.n	8008c8e <sbrk_aligned+0x22>
 8008c9c:	1a21      	subs	r1, r4, r0
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f000 f934 	bl	8008f0c <_sbrk_r>
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	d1f2      	bne.n	8008c8e <sbrk_aligned+0x22>
 8008ca8:	e7ef      	b.n	8008c8a <sbrk_aligned+0x1e>
 8008caa:	bf00      	nop
 8008cac:	20004d84 	.word	0x20004d84

08008cb0 <_malloc_r>:
 8008cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb4:	1ccd      	adds	r5, r1, #3
 8008cb6:	f025 0503 	bic.w	r5, r5, #3
 8008cba:	3508      	adds	r5, #8
 8008cbc:	2d0c      	cmp	r5, #12
 8008cbe:	bf38      	it	cc
 8008cc0:	250c      	movcc	r5, #12
 8008cc2:	2d00      	cmp	r5, #0
 8008cc4:	4606      	mov	r6, r0
 8008cc6:	db01      	blt.n	8008ccc <_malloc_r+0x1c>
 8008cc8:	42a9      	cmp	r1, r5
 8008cca:	d904      	bls.n	8008cd6 <_malloc_r+0x26>
 8008ccc:	230c      	movs	r3, #12
 8008cce:	6033      	str	r3, [r6, #0]
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008dac <_malloc_r+0xfc>
 8008cda:	f000 f869 	bl	8008db0 <__malloc_lock>
 8008cde:	f8d8 3000 	ldr.w	r3, [r8]
 8008ce2:	461c      	mov	r4, r3
 8008ce4:	bb44      	cbnz	r4, 8008d38 <_malloc_r+0x88>
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f7ff ffbf 	bl	8008c6c <sbrk_aligned>
 8008cee:	1c43      	adds	r3, r0, #1
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	d158      	bne.n	8008da6 <_malloc_r+0xf6>
 8008cf4:	f8d8 4000 	ldr.w	r4, [r8]
 8008cf8:	4627      	mov	r7, r4
 8008cfa:	2f00      	cmp	r7, #0
 8008cfc:	d143      	bne.n	8008d86 <_malloc_r+0xd6>
 8008cfe:	2c00      	cmp	r4, #0
 8008d00:	d04b      	beq.n	8008d9a <_malloc_r+0xea>
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	4639      	mov	r1, r7
 8008d06:	4630      	mov	r0, r6
 8008d08:	eb04 0903 	add.w	r9, r4, r3
 8008d0c:	f000 f8fe 	bl	8008f0c <_sbrk_r>
 8008d10:	4581      	cmp	r9, r0
 8008d12:	d142      	bne.n	8008d9a <_malloc_r+0xea>
 8008d14:	6821      	ldr	r1, [r4, #0]
 8008d16:	1a6d      	subs	r5, r5, r1
 8008d18:	4629      	mov	r1, r5
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f7ff ffa6 	bl	8008c6c <sbrk_aligned>
 8008d20:	3001      	adds	r0, #1
 8008d22:	d03a      	beq.n	8008d9a <_malloc_r+0xea>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	442b      	add	r3, r5
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	bb62      	cbnz	r2, 8008d8c <_malloc_r+0xdc>
 8008d32:	f8c8 7000 	str.w	r7, [r8]
 8008d36:	e00f      	b.n	8008d58 <_malloc_r+0xa8>
 8008d38:	6822      	ldr	r2, [r4, #0]
 8008d3a:	1b52      	subs	r2, r2, r5
 8008d3c:	d420      	bmi.n	8008d80 <_malloc_r+0xd0>
 8008d3e:	2a0b      	cmp	r2, #11
 8008d40:	d917      	bls.n	8008d72 <_malloc_r+0xc2>
 8008d42:	1961      	adds	r1, r4, r5
 8008d44:	42a3      	cmp	r3, r4
 8008d46:	6025      	str	r5, [r4, #0]
 8008d48:	bf18      	it	ne
 8008d4a:	6059      	strne	r1, [r3, #4]
 8008d4c:	6863      	ldr	r3, [r4, #4]
 8008d4e:	bf08      	it	eq
 8008d50:	f8c8 1000 	streq.w	r1, [r8]
 8008d54:	5162      	str	r2, [r4, r5]
 8008d56:	604b      	str	r3, [r1, #4]
 8008d58:	4630      	mov	r0, r6
 8008d5a:	f000 f82f 	bl	8008dbc <__malloc_unlock>
 8008d5e:	f104 000b 	add.w	r0, r4, #11
 8008d62:	1d23      	adds	r3, r4, #4
 8008d64:	f020 0007 	bic.w	r0, r0, #7
 8008d68:	1ac2      	subs	r2, r0, r3
 8008d6a:	bf1c      	itt	ne
 8008d6c:	1a1b      	subne	r3, r3, r0
 8008d6e:	50a3      	strne	r3, [r4, r2]
 8008d70:	e7af      	b.n	8008cd2 <_malloc_r+0x22>
 8008d72:	6862      	ldr	r2, [r4, #4]
 8008d74:	42a3      	cmp	r3, r4
 8008d76:	bf0c      	ite	eq
 8008d78:	f8c8 2000 	streq.w	r2, [r8]
 8008d7c:	605a      	strne	r2, [r3, #4]
 8008d7e:	e7eb      	b.n	8008d58 <_malloc_r+0xa8>
 8008d80:	4623      	mov	r3, r4
 8008d82:	6864      	ldr	r4, [r4, #4]
 8008d84:	e7ae      	b.n	8008ce4 <_malloc_r+0x34>
 8008d86:	463c      	mov	r4, r7
 8008d88:	687f      	ldr	r7, [r7, #4]
 8008d8a:	e7b6      	b.n	8008cfa <_malloc_r+0x4a>
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	42a3      	cmp	r3, r4
 8008d92:	d1fb      	bne.n	8008d8c <_malloc_r+0xdc>
 8008d94:	2300      	movs	r3, #0
 8008d96:	6053      	str	r3, [r2, #4]
 8008d98:	e7de      	b.n	8008d58 <_malloc_r+0xa8>
 8008d9a:	230c      	movs	r3, #12
 8008d9c:	6033      	str	r3, [r6, #0]
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f000 f80c 	bl	8008dbc <__malloc_unlock>
 8008da4:	e794      	b.n	8008cd0 <_malloc_r+0x20>
 8008da6:	6005      	str	r5, [r0, #0]
 8008da8:	e7d6      	b.n	8008d58 <_malloc_r+0xa8>
 8008daa:	bf00      	nop
 8008dac:	20004d88 	.word	0x20004d88

08008db0 <__malloc_lock>:
 8008db0:	4801      	ldr	r0, [pc, #4]	@ (8008db8 <__malloc_lock+0x8>)
 8008db2:	f000 b8e5 	b.w	8008f80 <__retarget_lock_acquire_recursive>
 8008db6:	bf00      	nop
 8008db8:	20004ec8 	.word	0x20004ec8

08008dbc <__malloc_unlock>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	@ (8008dc4 <__malloc_unlock+0x8>)
 8008dbe:	f000 b8e0 	b.w	8008f82 <__retarget_lock_release_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	20004ec8 	.word	0x20004ec8

08008dc8 <memset>:
 8008dc8:	4402      	add	r2, r0
 8008dca:	4603      	mov	r3, r0
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d100      	bne.n	8008dd2 <memset+0xa>
 8008dd0:	4770      	bx	lr
 8008dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8008dd6:	e7f9      	b.n	8008dcc <memset+0x4>

08008dd8 <_raise_r>:
 8008dd8:	291f      	cmp	r1, #31
 8008dda:	b538      	push	{r3, r4, r5, lr}
 8008ddc:	4605      	mov	r5, r0
 8008dde:	460c      	mov	r4, r1
 8008de0:	d904      	bls.n	8008dec <_raise_r+0x14>
 8008de2:	2316      	movs	r3, #22
 8008de4:	6003      	str	r3, [r0, #0]
 8008de6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008dee:	b112      	cbz	r2, 8008df6 <_raise_r+0x1e>
 8008df0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008df4:	b94b      	cbnz	r3, 8008e0a <_raise_r+0x32>
 8008df6:	4628      	mov	r0, r5
 8008df8:	f000 f886 	bl	8008f08 <_getpid_r>
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	4601      	mov	r1, r0
 8008e00:	4628      	mov	r0, r5
 8008e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e06:	f000 b86d 	b.w	8008ee4 <_kill_r>
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d00a      	beq.n	8008e24 <_raise_r+0x4c>
 8008e0e:	1c59      	adds	r1, r3, #1
 8008e10:	d103      	bne.n	8008e1a <_raise_r+0x42>
 8008e12:	2316      	movs	r3, #22
 8008e14:	6003      	str	r3, [r0, #0]
 8008e16:	2001      	movs	r0, #1
 8008e18:	e7e7      	b.n	8008dea <_raise_r+0x12>
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008e20:	4620      	mov	r0, r4
 8008e22:	4798      	blx	r3
 8008e24:	2000      	movs	r0, #0
 8008e26:	e7e0      	b.n	8008dea <_raise_r+0x12>

08008e28 <raise>:
 8008e28:	4b02      	ldr	r3, [pc, #8]	@ (8008e34 <raise+0xc>)
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	f7ff bfd3 	b.w	8008dd8 <_raise_r>
 8008e32:	bf00      	nop
 8008e34:	20000010 	.word	0x20000010

08008e38 <_reclaim_reent>:
 8008e38:	4b29      	ldr	r3, [pc, #164]	@ (8008ee0 <_reclaim_reent+0xa8>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4283      	cmp	r3, r0
 8008e3e:	b570      	push	{r4, r5, r6, lr}
 8008e40:	4604      	mov	r4, r0
 8008e42:	d04b      	beq.n	8008edc <_reclaim_reent+0xa4>
 8008e44:	69c3      	ldr	r3, [r0, #28]
 8008e46:	b1ab      	cbz	r3, 8008e74 <_reclaim_reent+0x3c>
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	b16b      	cbz	r3, 8008e68 <_reclaim_reent+0x30>
 8008e4c:	2500      	movs	r5, #0
 8008e4e:	69e3      	ldr	r3, [r4, #28]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	5959      	ldr	r1, [r3, r5]
 8008e54:	2900      	cmp	r1, #0
 8008e56:	d13b      	bne.n	8008ed0 <_reclaim_reent+0x98>
 8008e58:	3504      	adds	r5, #4
 8008e5a:	2d80      	cmp	r5, #128	@ 0x80
 8008e5c:	d1f7      	bne.n	8008e4e <_reclaim_reent+0x16>
 8008e5e:	69e3      	ldr	r3, [r4, #28]
 8008e60:	4620      	mov	r0, r4
 8008e62:	68d9      	ldr	r1, [r3, #12]
 8008e64:	f000 f89c 	bl	8008fa0 <_free_r>
 8008e68:	69e3      	ldr	r3, [r4, #28]
 8008e6a:	6819      	ldr	r1, [r3, #0]
 8008e6c:	b111      	cbz	r1, 8008e74 <_reclaim_reent+0x3c>
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f000 f896 	bl	8008fa0 <_free_r>
 8008e74:	6961      	ldr	r1, [r4, #20]
 8008e76:	b111      	cbz	r1, 8008e7e <_reclaim_reent+0x46>
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f000 f891 	bl	8008fa0 <_free_r>
 8008e7e:	69e1      	ldr	r1, [r4, #28]
 8008e80:	b111      	cbz	r1, 8008e88 <_reclaim_reent+0x50>
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 f88c 	bl	8008fa0 <_free_r>
 8008e88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008e8a:	b111      	cbz	r1, 8008e92 <_reclaim_reent+0x5a>
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f000 f887 	bl	8008fa0 <_free_r>
 8008e92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e94:	b111      	cbz	r1, 8008e9c <_reclaim_reent+0x64>
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 f882 	bl	8008fa0 <_free_r>
 8008e9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008e9e:	b111      	cbz	r1, 8008ea6 <_reclaim_reent+0x6e>
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 f87d 	bl	8008fa0 <_free_r>
 8008ea6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008ea8:	b111      	cbz	r1, 8008eb0 <_reclaim_reent+0x78>
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f000 f878 	bl	8008fa0 <_free_r>
 8008eb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008eb2:	b111      	cbz	r1, 8008eba <_reclaim_reent+0x82>
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 f873 	bl	8008fa0 <_free_r>
 8008eba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008ebc:	b111      	cbz	r1, 8008ec4 <_reclaim_reent+0x8c>
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f000 f86e 	bl	8008fa0 <_free_r>
 8008ec4:	6a23      	ldr	r3, [r4, #32]
 8008ec6:	b14b      	cbz	r3, 8008edc <_reclaim_reent+0xa4>
 8008ec8:	4620      	mov	r0, r4
 8008eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ece:	4718      	bx	r3
 8008ed0:	680e      	ldr	r6, [r1, #0]
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f000 f864 	bl	8008fa0 <_free_r>
 8008ed8:	4631      	mov	r1, r6
 8008eda:	e7bb      	b.n	8008e54 <_reclaim_reent+0x1c>
 8008edc:	bd70      	pop	{r4, r5, r6, pc}
 8008ede:	bf00      	nop
 8008ee0:	20000010 	.word	0x20000010

08008ee4 <_kill_r>:
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	4d07      	ldr	r5, [pc, #28]	@ (8008f04 <_kill_r+0x20>)
 8008ee8:	2300      	movs	r3, #0
 8008eea:	4604      	mov	r4, r0
 8008eec:	4608      	mov	r0, r1
 8008eee:	4611      	mov	r1, r2
 8008ef0:	602b      	str	r3, [r5, #0]
 8008ef2:	f7f9 fa77 	bl	80023e4 <_kill>
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	d102      	bne.n	8008f00 <_kill_r+0x1c>
 8008efa:	682b      	ldr	r3, [r5, #0]
 8008efc:	b103      	cbz	r3, 8008f00 <_kill_r+0x1c>
 8008efe:	6023      	str	r3, [r4, #0]
 8008f00:	bd38      	pop	{r3, r4, r5, pc}
 8008f02:	bf00      	nop
 8008f04:	20004ec4 	.word	0x20004ec4

08008f08 <_getpid_r>:
 8008f08:	f7f9 ba64 	b.w	80023d4 <_getpid>

08008f0c <_sbrk_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4d06      	ldr	r5, [pc, #24]	@ (8008f28 <_sbrk_r+0x1c>)
 8008f10:	2300      	movs	r3, #0
 8008f12:	4604      	mov	r4, r0
 8008f14:	4608      	mov	r0, r1
 8008f16:	602b      	str	r3, [r5, #0]
 8008f18:	f7f9 fa80 	bl	800241c <_sbrk>
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	d102      	bne.n	8008f26 <_sbrk_r+0x1a>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	b103      	cbz	r3, 8008f26 <_sbrk_r+0x1a>
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	bd38      	pop	{r3, r4, r5, pc}
 8008f28:	20004ec4 	.word	0x20004ec4

08008f2c <__errno>:
 8008f2c:	4b01      	ldr	r3, [pc, #4]	@ (8008f34 <__errno+0x8>)
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20000010 	.word	0x20000010

08008f38 <__libc_init_array>:
 8008f38:	b570      	push	{r4, r5, r6, lr}
 8008f3a:	4d0d      	ldr	r5, [pc, #52]	@ (8008f70 <__libc_init_array+0x38>)
 8008f3c:	4c0d      	ldr	r4, [pc, #52]	@ (8008f74 <__libc_init_array+0x3c>)
 8008f3e:	1b64      	subs	r4, r4, r5
 8008f40:	10a4      	asrs	r4, r4, #2
 8008f42:	2600      	movs	r6, #0
 8008f44:	42a6      	cmp	r6, r4
 8008f46:	d109      	bne.n	8008f5c <__libc_init_array+0x24>
 8008f48:	4d0b      	ldr	r5, [pc, #44]	@ (8008f78 <__libc_init_array+0x40>)
 8008f4a:	4c0c      	ldr	r4, [pc, #48]	@ (8008f7c <__libc_init_array+0x44>)
 8008f4c:	f000 f872 	bl	8009034 <_init>
 8008f50:	1b64      	subs	r4, r4, r5
 8008f52:	10a4      	asrs	r4, r4, #2
 8008f54:	2600      	movs	r6, #0
 8008f56:	42a6      	cmp	r6, r4
 8008f58:	d105      	bne.n	8008f66 <__libc_init_array+0x2e>
 8008f5a:	bd70      	pop	{r4, r5, r6, pc}
 8008f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f60:	4798      	blx	r3
 8008f62:	3601      	adds	r6, #1
 8008f64:	e7ee      	b.n	8008f44 <__libc_init_array+0xc>
 8008f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f6a:	4798      	blx	r3
 8008f6c:	3601      	adds	r6, #1
 8008f6e:	e7f2      	b.n	8008f56 <__libc_init_array+0x1e>
 8008f70:	08009148 	.word	0x08009148
 8008f74:	08009148 	.word	0x08009148
 8008f78:	08009148 	.word	0x08009148
 8008f7c:	0800914c 	.word	0x0800914c

08008f80 <__retarget_lock_acquire_recursive>:
 8008f80:	4770      	bx	lr

08008f82 <__retarget_lock_release_recursive>:
 8008f82:	4770      	bx	lr

08008f84 <memcpy>:
 8008f84:	440a      	add	r2, r1
 8008f86:	4291      	cmp	r1, r2
 8008f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f8c:	d100      	bne.n	8008f90 <memcpy+0xc>
 8008f8e:	4770      	bx	lr
 8008f90:	b510      	push	{r4, lr}
 8008f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f9a:	4291      	cmp	r1, r2
 8008f9c:	d1f9      	bne.n	8008f92 <memcpy+0xe>
 8008f9e:	bd10      	pop	{r4, pc}

08008fa0 <_free_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	2900      	cmp	r1, #0
 8008fa6:	d041      	beq.n	800902c <_free_r+0x8c>
 8008fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fac:	1f0c      	subs	r4, r1, #4
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	bfb8      	it	lt
 8008fb2:	18e4      	addlt	r4, r4, r3
 8008fb4:	f7ff fefc 	bl	8008db0 <__malloc_lock>
 8008fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8009030 <_free_r+0x90>)
 8008fba:	6813      	ldr	r3, [r2, #0]
 8008fbc:	b933      	cbnz	r3, 8008fcc <_free_r+0x2c>
 8008fbe:	6063      	str	r3, [r4, #4]
 8008fc0:	6014      	str	r4, [r2, #0]
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fc8:	f7ff bef8 	b.w	8008dbc <__malloc_unlock>
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	d908      	bls.n	8008fe2 <_free_r+0x42>
 8008fd0:	6820      	ldr	r0, [r4, #0]
 8008fd2:	1821      	adds	r1, r4, r0
 8008fd4:	428b      	cmp	r3, r1
 8008fd6:	bf01      	itttt	eq
 8008fd8:	6819      	ldreq	r1, [r3, #0]
 8008fda:	685b      	ldreq	r3, [r3, #4]
 8008fdc:	1809      	addeq	r1, r1, r0
 8008fde:	6021      	streq	r1, [r4, #0]
 8008fe0:	e7ed      	b.n	8008fbe <_free_r+0x1e>
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	b10b      	cbz	r3, 8008fec <_free_r+0x4c>
 8008fe8:	42a3      	cmp	r3, r4
 8008fea:	d9fa      	bls.n	8008fe2 <_free_r+0x42>
 8008fec:	6811      	ldr	r1, [r2, #0]
 8008fee:	1850      	adds	r0, r2, r1
 8008ff0:	42a0      	cmp	r0, r4
 8008ff2:	d10b      	bne.n	800900c <_free_r+0x6c>
 8008ff4:	6820      	ldr	r0, [r4, #0]
 8008ff6:	4401      	add	r1, r0
 8008ff8:	1850      	adds	r0, r2, r1
 8008ffa:	4283      	cmp	r3, r0
 8008ffc:	6011      	str	r1, [r2, #0]
 8008ffe:	d1e0      	bne.n	8008fc2 <_free_r+0x22>
 8009000:	6818      	ldr	r0, [r3, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	6053      	str	r3, [r2, #4]
 8009006:	4408      	add	r0, r1
 8009008:	6010      	str	r0, [r2, #0]
 800900a:	e7da      	b.n	8008fc2 <_free_r+0x22>
 800900c:	d902      	bls.n	8009014 <_free_r+0x74>
 800900e:	230c      	movs	r3, #12
 8009010:	602b      	str	r3, [r5, #0]
 8009012:	e7d6      	b.n	8008fc2 <_free_r+0x22>
 8009014:	6820      	ldr	r0, [r4, #0]
 8009016:	1821      	adds	r1, r4, r0
 8009018:	428b      	cmp	r3, r1
 800901a:	bf04      	itt	eq
 800901c:	6819      	ldreq	r1, [r3, #0]
 800901e:	685b      	ldreq	r3, [r3, #4]
 8009020:	6063      	str	r3, [r4, #4]
 8009022:	bf04      	itt	eq
 8009024:	1809      	addeq	r1, r1, r0
 8009026:	6021      	streq	r1, [r4, #0]
 8009028:	6054      	str	r4, [r2, #4]
 800902a:	e7ca      	b.n	8008fc2 <_free_r+0x22>
 800902c:	bd38      	pop	{r3, r4, r5, pc}
 800902e:	bf00      	nop
 8009030:	20004d88 	.word	0x20004d88

08009034 <_init>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	bf00      	nop
 8009038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903a:	bc08      	pop	{r3}
 800903c:	469e      	mov	lr, r3
 800903e:	4770      	bx	lr

08009040 <_fini>:
 8009040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009042:	bf00      	nop
 8009044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009046:	bc08      	pop	{r3}
 8009048:	469e      	mov	lr, r3
 800904a:	4770      	bx	lr
