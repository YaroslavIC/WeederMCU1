
WeederMCU1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008df4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08008f94  08008f94  00009f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009088  08009088  0000b010  2**0
                  CONTENTS
  4 .ARM          00000008  08009088  08009088  0000a088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009090  08009090  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009090  08009090  0000a090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009094  08009094  0000a094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08009098  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000505c  20000010  080090a8  0000b010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000506c  080090a8  0000b06c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d22b  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b99  00000000  00000000  0002826b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  0002be08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014b4  00000000  00000000  0002d858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044b2  00000000  00000000  0002ed0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e292  00000000  00000000  000331be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a808f  00000000  00000000  00051450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f94df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007268  00000000  00000000  000f9524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0010078c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f7c 	.word	0x08008f7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08008f7c 	.word	0x08008f7c

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a30:	f000 b96a 	b.w	8000d08 <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9d08      	ldr	r5, [sp, #32]
 8000a52:	460c      	mov	r4, r1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d14e      	bne.n	8000af6 <__udivmoddi4+0xaa>
 8000a58:	4694      	mov	ip, r2
 8000a5a:	458c      	cmp	ip, r1
 8000a5c:	4686      	mov	lr, r0
 8000a5e:	fab2 f282 	clz	r2, r2
 8000a62:	d962      	bls.n	8000b2a <__udivmoddi4+0xde>
 8000a64:	b14a      	cbz	r2, 8000a7a <__udivmoddi4+0x2e>
 8000a66:	f1c2 0320 	rsb	r3, r2, #32
 8000a6a:	4091      	lsls	r1, r2
 8000a6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a74:	4319      	orrs	r1, r3
 8000a76:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a7e:	fa1f f68c 	uxth.w	r6, ip
 8000a82:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a86:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a8a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a92:	fb04 f106 	mul.w	r1, r4, r6
 8000a96:	4299      	cmp	r1, r3
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x64>
 8000a9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000aa2:	f080 8112 	bcs.w	8000cca <__udivmoddi4+0x27e>
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	f240 810f 	bls.w	8000cca <__udivmoddi4+0x27e>
 8000aac:	3c02      	subs	r4, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	1a59      	subs	r1, r3, r1
 8000ab2:	fa1f f38e 	uxth.w	r3, lr
 8000ab6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aba:	fb07 1110 	mls	r1, r7, r0, r1
 8000abe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ac2:	fb00 f606 	mul.w	r6, r0, r6
 8000ac6:	429e      	cmp	r6, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x94>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ad2:	f080 80fc 	bcs.w	8000cce <__udivmoddi4+0x282>
 8000ad6:	429e      	cmp	r6, r3
 8000ad8:	f240 80f9 	bls.w	8000cce <__udivmoddi4+0x282>
 8000adc:	4463      	add	r3, ip
 8000ade:	3802      	subs	r0, #2
 8000ae0:	1b9b      	subs	r3, r3, r6
 8000ae2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	b11d      	cbz	r5, 8000af2 <__udivmoddi4+0xa6>
 8000aea:	40d3      	lsrs	r3, r2
 8000aec:	2200      	movs	r2, #0
 8000aee:	e9c5 3200 	strd	r3, r2, [r5]
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d905      	bls.n	8000b06 <__udivmoddi4+0xba>
 8000afa:	b10d      	cbz	r5, 8000b00 <__udivmoddi4+0xb4>
 8000afc:	e9c5 0100 	strd	r0, r1, [r5]
 8000b00:	2100      	movs	r1, #0
 8000b02:	4608      	mov	r0, r1
 8000b04:	e7f5      	b.n	8000af2 <__udivmoddi4+0xa6>
 8000b06:	fab3 f183 	clz	r1, r3
 8000b0a:	2900      	cmp	r1, #0
 8000b0c:	d146      	bne.n	8000b9c <__udivmoddi4+0x150>
 8000b0e:	42a3      	cmp	r3, r4
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xcc>
 8000b12:	4290      	cmp	r0, r2
 8000b14:	f0c0 80f0 	bcc.w	8000cf8 <__udivmoddi4+0x2ac>
 8000b18:	1a86      	subs	r6, r0, r2
 8000b1a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d0e6      	beq.n	8000af2 <__udivmoddi4+0xa6>
 8000b24:	e9c5 6300 	strd	r6, r3, [r5]
 8000b28:	e7e3      	b.n	8000af2 <__udivmoddi4+0xa6>
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	f040 8090 	bne.w	8000c50 <__udivmoddi4+0x204>
 8000b30:	eba1 040c 	sub.w	r4, r1, ip
 8000b34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b38:	fa1f f78c 	uxth.w	r7, ip
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b46:	fb08 4416 	mls	r4, r8, r6, r4
 8000b4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b4e:	fb07 f006 	mul.w	r0, r7, r6
 8000b52:	4298      	cmp	r0, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x11c>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x11a>
 8000b60:	4298      	cmp	r0, r3
 8000b62:	f200 80cd 	bhi.w	8000d00 <__udivmoddi4+0x2b4>
 8000b66:	4626      	mov	r6, r4
 8000b68:	1a1c      	subs	r4, r3, r0
 8000b6a:	fa1f f38e 	uxth.w	r3, lr
 8000b6e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b72:	fb08 4410 	mls	r4, r8, r0, r4
 8000b76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b7a:	fb00 f707 	mul.w	r7, r0, r7
 8000b7e:	429f      	cmp	r7, r3
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x148>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b8a:	d202      	bcs.n	8000b92 <__udivmoddi4+0x146>
 8000b8c:	429f      	cmp	r7, r3
 8000b8e:	f200 80b0 	bhi.w	8000cf2 <__udivmoddi4+0x2a6>
 8000b92:	4620      	mov	r0, r4
 8000b94:	1bdb      	subs	r3, r3, r7
 8000b96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b9a:	e7a5      	b.n	8000ae8 <__udivmoddi4+0x9c>
 8000b9c:	f1c1 0620 	rsb	r6, r1, #32
 8000ba0:	408b      	lsls	r3, r1
 8000ba2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ba6:	431f      	orrs	r7, r3
 8000ba8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bac:	fa04 f301 	lsl.w	r3, r4, r1
 8000bb0:	ea43 030c 	orr.w	r3, r3, ip
 8000bb4:	40f4      	lsrs	r4, r6
 8000bb6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bba:	0c38      	lsrs	r0, r7, #16
 8000bbc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bc0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bc4:	fa1f fc87 	uxth.w	ip, r7
 8000bc8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bcc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bd0:	fb0e f90c 	mul.w	r9, lr, ip
 8000bd4:	45a1      	cmp	r9, r4
 8000bd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bda:	d90a      	bls.n	8000bf2 <__udivmoddi4+0x1a6>
 8000bdc:	193c      	adds	r4, r7, r4
 8000bde:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000be2:	f080 8084 	bcs.w	8000cee <__udivmoddi4+0x2a2>
 8000be6:	45a1      	cmp	r9, r4
 8000be8:	f240 8081 	bls.w	8000cee <__udivmoddi4+0x2a2>
 8000bec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bf0:	443c      	add	r4, r7
 8000bf2:	eba4 0409 	sub.w	r4, r4, r9
 8000bf6:	fa1f f983 	uxth.w	r9, r3
 8000bfa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bfe:	fb00 4413 	mls	r4, r0, r3, r4
 8000c02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x1d2>
 8000c0e:	193c      	adds	r4, r7, r4
 8000c10:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c14:	d267      	bcs.n	8000ce6 <__udivmoddi4+0x29a>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	d965      	bls.n	8000ce6 <__udivmoddi4+0x29a>
 8000c1a:	3b02      	subs	r3, #2
 8000c1c:	443c      	add	r4, r7
 8000c1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c22:	fba0 9302 	umull	r9, r3, r0, r2
 8000c26:	eba4 040c 	sub.w	r4, r4, ip
 8000c2a:	429c      	cmp	r4, r3
 8000c2c:	46ce      	mov	lr, r9
 8000c2e:	469c      	mov	ip, r3
 8000c30:	d351      	bcc.n	8000cd6 <__udivmoddi4+0x28a>
 8000c32:	d04e      	beq.n	8000cd2 <__udivmoddi4+0x286>
 8000c34:	b155      	cbz	r5, 8000c4c <__udivmoddi4+0x200>
 8000c36:	ebb8 030e 	subs.w	r3, r8, lr
 8000c3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c42:	40cb      	lsrs	r3, r1
 8000c44:	431e      	orrs	r6, r3
 8000c46:	40cc      	lsrs	r4, r1
 8000c48:	e9c5 6400 	strd	r6, r4, [r5]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	e750      	b.n	8000af2 <__udivmoddi4+0xa6>
 8000c50:	f1c2 0320 	rsb	r3, r2, #32
 8000c54:	fa20 f103 	lsr.w	r1, r0, r3
 8000c58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c60:	4094      	lsls	r4, r2
 8000c62:	430c      	orrs	r4, r1
 8000c64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6c:	fa1f f78c 	uxth.w	r7, ip
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3110 	mls	r1, r8, r0, r3
 8000c78:	0c23      	lsrs	r3, r4, #16
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f107 	mul.w	r1, r0, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x24c>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c8e:	d22c      	bcs.n	8000cea <__udivmoddi4+0x29e>
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d92a      	bls.n	8000cea <__udivmoddi4+0x29e>
 8000c94:	3802      	subs	r0, #2
 8000c96:	4463      	add	r3, ip
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ca0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb01 f307 	mul.w	r3, r1, r7
 8000cac:	42a3      	cmp	r3, r4
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x276>
 8000cb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cb8:	d213      	bcs.n	8000ce2 <__udivmoddi4+0x296>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d911      	bls.n	8000ce2 <__udivmoddi4+0x296>
 8000cbe:	3902      	subs	r1, #2
 8000cc0:	4464      	add	r4, ip
 8000cc2:	1ae4      	subs	r4, r4, r3
 8000cc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cc8:	e739      	b.n	8000b3e <__udivmoddi4+0xf2>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	e6f0      	b.n	8000ab0 <__udivmoddi4+0x64>
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e706      	b.n	8000ae0 <__udivmoddi4+0x94>
 8000cd2:	45c8      	cmp	r8, r9
 8000cd4:	d2ae      	bcs.n	8000c34 <__udivmoddi4+0x1e8>
 8000cd6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cda:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cde:	3801      	subs	r0, #1
 8000ce0:	e7a8      	b.n	8000c34 <__udivmoddi4+0x1e8>
 8000ce2:	4631      	mov	r1, r6
 8000ce4:	e7ed      	b.n	8000cc2 <__udivmoddi4+0x276>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	e799      	b.n	8000c1e <__udivmoddi4+0x1d2>
 8000cea:	4630      	mov	r0, r6
 8000cec:	e7d4      	b.n	8000c98 <__udivmoddi4+0x24c>
 8000cee:	46d6      	mov	lr, sl
 8000cf0:	e77f      	b.n	8000bf2 <__udivmoddi4+0x1a6>
 8000cf2:	4463      	add	r3, ip
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	e74d      	b.n	8000b94 <__udivmoddi4+0x148>
 8000cf8:	4606      	mov	r6, r0
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	e70f      	b.n	8000b20 <__udivmoddi4+0xd4>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	4463      	add	r3, ip
 8000d04:	e730      	b.n	8000b68 <__udivmoddi4+0x11c>
 8000d06:	bf00      	nop

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <HAL_ReadAS5600_I2Cx>:




float HAL_ReadAS5600_I2Cx(I2C_HandleTypeDef hi2cX) // pulling 0.5 ms
{
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af04      	add	r7, sp, #16
 8000d14:	f107 0c10 	add.w	ip, r7, #16
 8000d18:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t regData[2];
  HAL_I2C_Mem_Read(&hi2cX, (I2C_AS5600 << 1) , AS5600_ANGLE_H	, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&regData , 2, 0x10000);
 8000d1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	2302      	movs	r3, #2
 8000d24:	9301      	str	r3, [sp, #4]
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	220e      	movs	r2, #14
 8000d2e:	216c      	movs	r1, #108	@ 0x6c
 8000d30:	f107 0010 	add.w	r0, r7, #16
 8000d34:	f002 fdba 	bl	80038ac <HAL_I2C_Mem_Read>
  return ((float)(((uint16_t)regData[0]<<8 | (uint16_t)regData[1]) & (uint16_t)0xFFF))/4096*360;
 8000d38:	793b      	ldrb	r3, [r7, #4]
 8000d3a:	021b      	lsls	r3, r3, #8
 8000d3c:	797a      	ldrb	r2, [r7, #5]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d4c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000d6c <HAL_ReadAS5600_I2Cx+0x60>
 8000d50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d54:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000d70 <HAL_ReadAS5600_I2Cx+0x64>
 8000d58:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr
 8000d6c:	45800000 	.word	0x45800000
 8000d70:	43b40000 	.word	0x43b40000

08000d74 <Motor_Init>:
	RightW.PWM[i] = RightW.PWM_Value;
  }

}
void Motor_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	  LeftW.hi2c = hi2c2;
 8000d78:	4b69      	ldr	r3, [pc, #420]	@ (8000f20 <Motor_Init+0x1ac>)
 8000d7a:	4a6a      	ldr	r2, [pc, #424]	@ (8000f24 <Motor_Init+0x1b0>)
 8000d7c:	334c      	adds	r3, #76	@ 0x4c
 8000d7e:	4611      	mov	r1, r2
 8000d80:	2254      	movs	r2, #84	@ 0x54
 8000d82:	4618      	mov	r0, r3
 8000d84:	f008 f8ec 	bl	8008f60 <memcpy>
	  LeftW.htim = htim1;
 8000d88:	4b65      	ldr	r3, [pc, #404]	@ (8000f20 <Motor_Init+0x1ac>)
 8000d8a:	4a67      	ldr	r2, [pc, #412]	@ (8000f28 <Motor_Init+0x1b4>)
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	4611      	mov	r1, r2
 8000d90:	2248      	movs	r2, #72	@ 0x48
 8000d92:	4618      	mov	r0, r3
 8000d94:	f008 f8e4 	bl	8008f60 <memcpy>
	  LeftW.PWM_Channel = TIM_CHANNEL_1;
 8000d98:	4b61      	ldr	r3, [pc, #388]	@ (8000f20 <Motor_Init+0x1ac>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
	  LeftW.PWM_Value = 0;
 8000da0:	4b5f      	ldr	r3, [pc, #380]	@ (8000f20 <Motor_Init+0x1ac>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
	  LeftW.GPIOx_INA = GPIOB;
 8000da8:	4b5d      	ldr	r3, [pc, #372]	@ (8000f20 <Motor_Init+0x1ac>)
 8000daa:	4a60      	ldr	r2, [pc, #384]	@ (8000f2c <Motor_Init+0x1b8>)
 8000dac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	  LeftW.GPIOx_INB = GPIOB;
 8000db0:	4b5b      	ldr	r3, [pc, #364]	@ (8000f20 <Motor_Init+0x1ac>)
 8000db2:	4a5e      	ldr	r2, [pc, #376]	@ (8000f2c <Motor_Init+0x1b8>)
 8000db4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	  LeftW.GPIO_Pin_INA = R_INA_Pin;
 8000db8:	4b59      	ldr	r3, [pc, #356]	@ (8000f20 <Motor_Init+0x1ac>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	  LeftW.GPIO_Pin_INB = R_INB_Pin;
 8000dc0:	4b57      	ldr	r3, [pc, #348]	@ (8000f20 <Motor_Init+0x1ac>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	  LeftW.PinState_INA    = GPIO_PIN_RESET;
 8000dc8:	4b55      	ldr	r3, [pc, #340]	@ (8000f20 <Motor_Init+0x1ac>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	  LeftW.PinState_INB    = GPIO_PIN_RESET;
 8000dd0:	4b53      	ldr	r3, [pc, #332]	@ (8000f20 <Motor_Init+0x1ac>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae

	  LeftW.PID = 100;
 8000dd8:	4b51      	ldr	r3, [pc, #324]	@ (8000f20 <Motor_Init+0x1ac>)
 8000dda:	4a55      	ldr	r2, [pc, #340]	@ (8000f30 <Motor_Init+0x1bc>)
 8000ddc:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180

	  HAL_TIM_PWM_Start(&LeftW.htim, LeftW.PWM_Channel);
 8000de0:	4b4f      	ldr	r3, [pc, #316]	@ (8000f20 <Motor_Init+0x1ac>)
 8000de2:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000de6:	4619      	mov	r1, r3
 8000de8:	4852      	ldr	r0, [pc, #328]	@ (8000f34 <Motor_Init+0x1c0>)
 8000dea:	f004 f885 	bl	8004ef8 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel, LeftW.PWM_Value );
 8000dee:	4b4c      	ldr	r3, [pc, #304]	@ (8000f20 <Motor_Init+0x1ac>)
 8000df0:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d106      	bne.n	8000e06 <Motor_Init+0x92>
 8000df8:	4b49      	ldr	r3, [pc, #292]	@ (8000f20 <Motor_Init+0x1ac>)
 8000dfa:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8000dfe:	4b48      	ldr	r3, [pc, #288]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e04:	e020      	b.n	8000e48 <Motor_Init+0xd4>
 8000e06:	4b46      	ldr	r3, [pc, #280]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e08:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d107      	bne.n	8000e20 <Motor_Init+0xac>
 8000e10:	4b43      	ldr	r3, [pc, #268]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e12:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8000e16:	4b42      	ldr	r3, [pc, #264]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e1e:	e013      	b.n	8000e48 <Motor_Init+0xd4>
 8000e20:	4b3f      	ldr	r3, [pc, #252]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e22:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000e26:	2b08      	cmp	r3, #8
 8000e28:	d107      	bne.n	8000e3a <Motor_Init+0xc6>
 8000e2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e2c:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8000e30:	4b3b      	ldr	r3, [pc, #236]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e38:	e006      	b.n	8000e48 <Motor_Init+0xd4>
 8000e3a:	4b39      	ldr	r3, [pc, #228]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e3c:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8000e40:	4b37      	ldr	r3, [pc, #220]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	6413      	str	r3, [r2, #64]	@ 0x40


	  RightW.hi2c = hi2c1;
 8000e48:	4b3b      	ldr	r3, [pc, #236]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e4a:	4a3c      	ldr	r2, [pc, #240]	@ (8000f3c <Motor_Init+0x1c8>)
 8000e4c:	334c      	adds	r3, #76	@ 0x4c
 8000e4e:	4611      	mov	r1, r2
 8000e50:	2254      	movs	r2, #84	@ 0x54
 8000e52:	4618      	mov	r0, r3
 8000e54:	f008 f884 	bl	8008f60 <memcpy>
	  RightW.htim = htim1;
 8000e58:	4b37      	ldr	r3, [pc, #220]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e5a:	4a33      	ldr	r2, [pc, #204]	@ (8000f28 <Motor_Init+0x1b4>)
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	4611      	mov	r1, r2
 8000e60:	2248      	movs	r2, #72	@ 0x48
 8000e62:	4618      	mov	r0, r3
 8000e64:	f008 f87c 	bl	8008f60 <memcpy>
	  RightW.PWM_Channel = TIM_CHANNEL_4;
 8000e68:	4b33      	ldr	r3, [pc, #204]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
	  RightW.PWM_Value = 0;
 8000e70:	4b31      	ldr	r3, [pc, #196]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
	  RightW.GPIOx_INA = GPIOA;
 8000e78:	4b2f      	ldr	r3, [pc, #188]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e7a:	4a31      	ldr	r2, [pc, #196]	@ (8000f40 <Motor_Init+0x1cc>)
 8000e7c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	  RightW.GPIOx_INB = GPIOA;
 8000e80:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e82:	4a2f      	ldr	r2, [pc, #188]	@ (8000f40 <Motor_Init+0x1cc>)
 8000e84:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	  RightW.GPIO_Pin_INA = L_INA_Pin;
 8000e88:	4b2b      	ldr	r3, [pc, #172]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e8a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e8e:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	  RightW.GPIO_Pin_INB = L_INB_Pin;
 8000e92:	4b29      	ldr	r3, [pc, #164]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e98:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	  RightW.PinState_INA   = GPIO_PIN_RESET;
 8000e9c:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	  RightW.PinState_INB   = GPIO_PIN_RESET;
 8000ea4:	4b24      	ldr	r3, [pc, #144]	@ (8000f38 <Motor_Init+0x1c4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae

	  RightW.PID = 100;
 8000eac:	4b22      	ldr	r3, [pc, #136]	@ (8000f38 <Motor_Init+0x1c4>)
 8000eae:	4a20      	ldr	r2, [pc, #128]	@ (8000f30 <Motor_Init+0x1bc>)
 8000eb0:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180

	  HAL_TIM_PWM_Start(&RightW.htim, RightW.PWM_Channel);
 8000eb4:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <Motor_Init+0x1c4>)
 8000eb6:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4821      	ldr	r0, [pc, #132]	@ (8000f44 <Motor_Init+0x1d0>)
 8000ebe:	f004 f81b 	bl	8004ef8 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f38 <Motor_Init+0x1c4>)
 8000ec4:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d106      	bne.n	8000eda <Motor_Init+0x166>
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <Motor_Init+0x1c4>)
 8000ece:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8000ed2:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <Motor_Init+0x1c4>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000ed8:	e020      	b.n	8000f1c <Motor_Init+0x1a8>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <Motor_Init+0x1c4>)
 8000edc:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	d107      	bne.n	8000ef4 <Motor_Init+0x180>
 8000ee4:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <Motor_Init+0x1c4>)
 8000ee6:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8000eea:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <Motor_Init+0x1c4>)
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000ef2:	e013      	b.n	8000f1c <Motor_Init+0x1a8>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 8000ef4:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <Motor_Init+0x1c4>)
 8000ef6:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000efa:	2b08      	cmp	r3, #8
 8000efc:	d107      	bne.n	8000f0e <Motor_Init+0x19a>
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <Motor_Init+0x1c4>)
 8000f00:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <Motor_Init+0x1c4>)
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000f0c:	e006      	b.n	8000f1c <Motor_Init+0x1a8>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <Motor_Init+0x1c4>)
 8000f10:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <Motor_Init+0x1c4>)
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200002c8 	.word	0x200002c8
 8000f24:	20000128 	.word	0x20000128
 8000f28:	200001d4 	.word	0x200001d4
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	42c80000 	.word	0x42c80000
 8000f34:	200002cc 	.word	0x200002cc
 8000f38:	200004c8 	.word	0x200004c8
 8000f3c:	200000d4 	.word	0x200000d4
 8000f40:	40020000 	.word	0x40020000
 8000f44:	200004cc 	.word	0x200004cc

08000f48 <SetDir_Speed>:

void SetDir_Speed(float Speed) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	ed87 0a01 	vstr	s0, [r7, #4]

	RightW.Target_speed = Speed;
 8000f52:	4a8f      	ldr	r2, [pc, #572]	@ (8001190 <SetDir_Speed+0x248>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
	LeftW.Target_speed = Speed;
 8000f5a:	4a8e      	ldr	r2, [pc, #568]	@ (8001194 <SetDir_Speed+0x24c>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

	RightW.PWM_Value = (int32_t) Speed;
 8000f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f6a:	ee17 2a90 	vmov	r2, s15
 8000f6e:	4b88      	ldr	r3, [pc, #544]	@ (8001190 <SetDir_Speed+0x248>)
 8000f70:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
	LeftW.PWM_Value = (int32_t) Speed;
 8000f74:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f7c:	ee17 2a90 	vmov	r2, s15
 8000f80:	4b84      	ldr	r3, [pc, #528]	@ (8001194 <SetDir_Speed+0x24c>)
 8000f82:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

	if (LeftW.Target_speed > 0) {
 8000f86:	4b83      	ldr	r3, [pc, #524]	@ (8001194 <SetDir_Speed+0x24c>)
 8000f88:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8000f8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f94:	dd0a      	ble.n	8000fac <SetDir_Speed+0x64>
		LeftW.PinState_INA = GPIO_PIN_RESET;
 8000f96:	4b7f      	ldr	r3, [pc, #508]	@ (8001194 <SetDir_Speed+0x24c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		LeftW.PinState_INB = GPIO_PIN_SET;
 8000f9e:	4b7d      	ldr	r3, [pc, #500]	@ (8001194 <SetDir_Speed+0x24c>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		LeftW.Direction = WH_CW;
 8000fa6:	4b7b      	ldr	r3, [pc, #492]	@ (8001194 <SetDir_Speed+0x24c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
	};
	if (LeftW.Target_speed < 0) {
 8000fac:	4b79      	ldr	r3, [pc, #484]	@ (8001194 <SetDir_Speed+0x24c>)
 8000fae:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8000fb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fba:	d50a      	bpl.n	8000fd2 <SetDir_Speed+0x8a>
		LeftW.PinState_INA = GPIO_PIN_SET;
 8000fbc:	4b75      	ldr	r3, [pc, #468]	@ (8001194 <SetDir_Speed+0x24c>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		LeftW.PinState_INB = GPIO_PIN_RESET;
 8000fc4:	4b73      	ldr	r3, [pc, #460]	@ (8001194 <SetDir_Speed+0x24c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		LeftW.Direction = WH_CCW;
 8000fcc:	4b71      	ldr	r3, [pc, #452]	@ (8001194 <SetDir_Speed+0x24c>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
	};

	if (LeftW.Target_speed == 0) {
 8000fd2:	4b70      	ldr	r3, [pc, #448]	@ (8001194 <SetDir_Speed+0x24c>)
 8000fd4:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8000fd8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe0:	d10a      	bne.n	8000ff8 <SetDir_Speed+0xb0>
		LeftW.PinState_INA = GPIO_PIN_RESET;
 8000fe2:	4b6c      	ldr	r3, [pc, #432]	@ (8001194 <SetDir_Speed+0x24c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		LeftW.PinState_INB = GPIO_PIN_RESET;
 8000fea:	4b6a      	ldr	r3, [pc, #424]	@ (8001194 <SetDir_Speed+0x24c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		LeftW.Direction = WH_STOP;
 8000ff2:	4b68      	ldr	r3, [pc, #416]	@ (8001194 <SetDir_Speed+0x24c>)
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	701a      	strb	r2, [r3, #0]
	};
	HAL_GPIO_WritePin(LeftW.GPIOx_INA, LeftW.GPIO_Pin_INA, LeftW.PinState_INA);
 8000ff8:	4b66      	ldr	r3, [pc, #408]	@ (8001194 <SetDir_Speed+0x24c>)
 8000ffa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000ffe:	4a65      	ldr	r2, [pc, #404]	@ (8001194 <SetDir_Speed+0x24c>)
 8001000:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 8001004:	4a63      	ldr	r2, [pc, #396]	@ (8001194 <SetDir_Speed+0x24c>)
 8001006:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 800100a:	4618      	mov	r0, r3
 800100c:	f002 fad6 	bl	80035bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LeftW.GPIOx_INB, LeftW.GPIO_Pin_INB, LeftW.PinState_INB);
 8001010:	4b60      	ldr	r3, [pc, #384]	@ (8001194 <SetDir_Speed+0x24c>)
 8001012:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001016:	4a5f      	ldr	r2, [pc, #380]	@ (8001194 <SetDir_Speed+0x24c>)
 8001018:	f8b2 10ac 	ldrh.w	r1, [r2, #172]	@ 0xac
 800101c:	4a5d      	ldr	r2, [pc, #372]	@ (8001194 <SetDir_Speed+0x24c>)
 800101e:	f892 20ae 	ldrb.w	r2, [r2, #174]	@ 0xae
 8001022:	4618      	mov	r0, r3
 8001024:	f002 faca 	bl	80035bc <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel, LeftW.PWM_Value);
 8001028:	4b5a      	ldr	r3, [pc, #360]	@ (8001194 <SetDir_Speed+0x24c>)
 800102a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800102e:	2b00      	cmp	r3, #0
 8001030:	d106      	bne.n	8001040 <SetDir_Speed+0xf8>
 8001032:	4b58      	ldr	r3, [pc, #352]	@ (8001194 <SetDir_Speed+0x24c>)
 8001034:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8001038:	4b56      	ldr	r3, [pc, #344]	@ (8001194 <SetDir_Speed+0x24c>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	635a      	str	r2, [r3, #52]	@ 0x34
 800103e:	e020      	b.n	8001082 <SetDir_Speed+0x13a>
 8001040:	4b54      	ldr	r3, [pc, #336]	@ (8001194 <SetDir_Speed+0x24c>)
 8001042:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001046:	2b04      	cmp	r3, #4
 8001048:	d107      	bne.n	800105a <SetDir_Speed+0x112>
 800104a:	4b52      	ldr	r3, [pc, #328]	@ (8001194 <SetDir_Speed+0x24c>)
 800104c:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001050:	4b50      	ldr	r3, [pc, #320]	@ (8001194 <SetDir_Speed+0x24c>)
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	6393      	str	r3, [r2, #56]	@ 0x38
 8001058:	e013      	b.n	8001082 <SetDir_Speed+0x13a>
 800105a:	4b4e      	ldr	r3, [pc, #312]	@ (8001194 <SetDir_Speed+0x24c>)
 800105c:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001060:	2b08      	cmp	r3, #8
 8001062:	d107      	bne.n	8001074 <SetDir_Speed+0x12c>
 8001064:	4b4b      	ldr	r3, [pc, #300]	@ (8001194 <SetDir_Speed+0x24c>)
 8001066:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 800106a:	4b4a      	ldr	r3, [pc, #296]	@ (8001194 <SetDir_Speed+0x24c>)
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001072:	e006      	b.n	8001082 <SetDir_Speed+0x13a>
 8001074:	4b47      	ldr	r3, [pc, #284]	@ (8001194 <SetDir_Speed+0x24c>)
 8001076:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 800107a:	4b46      	ldr	r3, [pc, #280]	@ (8001194 <SetDir_Speed+0x24c>)
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	6413      	str	r3, [r2, #64]	@ 0x40

	if (RightW.Target_speed > 0) {
 8001082:	4b43      	ldr	r3, [pc, #268]	@ (8001190 <SetDir_Speed+0x248>)
 8001084:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8001088:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001090:	dd0a      	ble.n	80010a8 <SetDir_Speed+0x160>
		RightW.PinState_INA = GPIO_PIN_SET;
 8001092:	4b3f      	ldr	r3, [pc, #252]	@ (8001190 <SetDir_Speed+0x248>)
 8001094:	2201      	movs	r2, #1
 8001096:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		RightW.PinState_INB = GPIO_PIN_RESET;
 800109a:	4b3d      	ldr	r3, [pc, #244]	@ (8001190 <SetDir_Speed+0x248>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		RightW.Direction = WH_CW;
 80010a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001190 <SetDir_Speed+0x248>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
	};
	if (RightW.Target_speed < 0) {
 80010a8:	4b39      	ldr	r3, [pc, #228]	@ (8001190 <SetDir_Speed+0x248>)
 80010aa:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 80010ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b6:	d50a      	bpl.n	80010ce <SetDir_Speed+0x186>
		RightW.PinState_INA = GPIO_PIN_RESET;
 80010b8:	4b35      	ldr	r3, [pc, #212]	@ (8001190 <SetDir_Speed+0x248>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		RightW.PinState_INB = GPIO_PIN_SET;
 80010c0:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <SetDir_Speed+0x248>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		RightW.Direction = WH_CCW;
 80010c8:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <SetDir_Speed+0x248>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
	};

	if (RightW.Target_speed == 0) {
 80010ce:	4b30      	ldr	r3, [pc, #192]	@ (8001190 <SetDir_Speed+0x248>)
 80010d0:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 80010d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	d10e      	bne.n	80010fc <SetDir_Speed+0x1b4>
		RightW.PinState_INA = GPIO_PIN_RESET;
 80010de:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <SetDir_Speed+0x248>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		RightW.PinState_INB = GPIO_PIN_RESET;
 80010e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <SetDir_Speed+0x248>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		RightW.PWM_Value = 0;
 80010ee:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <SetDir_Speed+0x248>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
		RightW.Direction = WH_STOP;
 80010f6:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <SetDir_Speed+0x248>)
 80010f8:	2202      	movs	r2, #2
 80010fa:	701a      	strb	r2, [r3, #0]

	};

	HAL_GPIO_WritePin(RightW.GPIOx_INA, RightW.GPIO_Pin_INA,
 80010fc:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <SetDir_Speed+0x248>)
 80010fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001102:	4a23      	ldr	r2, [pc, #140]	@ (8001190 <SetDir_Speed+0x248>)
 8001104:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 8001108:	4a21      	ldr	r2, [pc, #132]	@ (8001190 <SetDir_Speed+0x248>)
 800110a:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 800110e:	4618      	mov	r0, r3
 8001110:	f002 fa54 	bl	80035bc <HAL_GPIO_WritePin>
			RightW.PinState_INA);
	HAL_GPIO_WritePin(RightW.GPIOx_INB, RightW.GPIO_Pin_INB,
 8001114:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <SetDir_Speed+0x248>)
 8001116:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800111a:	4a1d      	ldr	r2, [pc, #116]	@ (8001190 <SetDir_Speed+0x248>)
 800111c:	f8b2 10ac 	ldrh.w	r1, [r2, #172]	@ 0xac
 8001120:	4a1b      	ldr	r2, [pc, #108]	@ (8001190 <SetDir_Speed+0x248>)
 8001122:	f892 20ae 	ldrb.w	r2, [r2, #174]	@ 0xae
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fa48 	bl	80035bc <HAL_GPIO_WritePin>
			RightW.PinState_INB);

	__HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value);
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <SetDir_Speed+0x248>)
 800112e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001132:	2b00      	cmp	r3, #0
 8001134:	d106      	bne.n	8001144 <SetDir_Speed+0x1fc>
 8001136:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <SetDir_Speed+0x248>)
 8001138:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <SetDir_Speed+0x248>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001142:	e020      	b.n	8001186 <SetDir_Speed+0x23e>
	__HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value);
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <SetDir_Speed+0x248>)
 8001146:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800114a:	2b04      	cmp	r3, #4
 800114c:	d107      	bne.n	800115e <SetDir_Speed+0x216>
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <SetDir_Speed+0x248>)
 8001150:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001154:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <SetDir_Speed+0x248>)
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800115c:	e013      	b.n	8001186 <SetDir_Speed+0x23e>
	__HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value);
 800115e:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <SetDir_Speed+0x248>)
 8001160:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001164:	2b08      	cmp	r3, #8
 8001166:	d107      	bne.n	8001178 <SetDir_Speed+0x230>
 8001168:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <SetDir_Speed+0x248>)
 800116a:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 800116e:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <SetDir_Speed+0x248>)
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	460b      	mov	r3, r1
 8001174:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001176:	e006      	b.n	8001186 <SetDir_Speed+0x23e>
	__HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value);
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <SetDir_Speed+0x248>)
 800117a:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 800117e:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <SetDir_Speed+0x248>)
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200004c8 	.word	0x200004c8
 8001194:	200002c8 	.word	0x200002c8

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119c:	f001 fa1a 	bl	80025d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a0:	f000 f86a 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a4:	f000 fafe 	bl	80017a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011a8:	f000 fadc 	bl	8001764 <MX_DMA_Init>
  MX_I2C1_Init();
 80011ac:	f000 f924 	bl	80013f8 <MX_I2C1_Init>
  MX_ADC1_Init();
 80011b0:	f000 f8c2 	bl	8001338 <MX_ADC1_Init>
  MX_I2C2_Init();
 80011b4:	f000 f94e 	bl	8001454 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80011b8:	f000 faaa 	bl	8001710 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80011bc:	f000 fa5a 	bl	8001674 <MX_TIM2_Init>
  MX_TIM1_Init();
 80011c0:	f000 f9ac 	bl	800151c <MX_TIM1_Init>
  MX_SPI2_Init();
 80011c4:	f000 f974 	bl	80014b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80011c8:	481d      	ldr	r0, [pc, #116]	@ (8001240 <main+0xa8>)
 80011ca:	f003 fdd9 	bl	8004d80 <HAL_TIM_Base_Start_IT>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <main+0x40>
  {
    /* Starting Error */
    Error_Handler();
 80011d4:	f000 fece 	bl	8001f74 <Error_Handler>
  }

  Motor_Init();
 80011d8:	f7ff fdcc 	bl	8000d74 <Motor_Init>




  speedr =  0;
 80011dc:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <main+0xac>)
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
  SetDir_Speed(speedr);
 80011e4:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <main+0xac>)
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	eeb0 0a67 	vmov.f32	s0, s15
 80011ee:	f7ff feab 	bl	8000f48 <SetDir_Speed>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011f2:	f005 f887 	bl	8006304 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011f6:	4a14      	ldr	r2, [pc, #80]	@ (8001248 <main+0xb0>)
 80011f8:	2100      	movs	r1, #0
 80011fa:	4814      	ldr	r0, [pc, #80]	@ (800124c <main+0xb4>)
 80011fc:	f005 f8cc 	bl	8006398 <osThreadNew>
 8001200:	4603      	mov	r3, r0
 8001202:	4a13      	ldr	r2, [pc, #76]	@ (8001250 <main+0xb8>)
 8001204:	6013      	str	r3, [r2, #0]

  /* creation of Task1ms */
  Task1msHandle = osThreadNew(Task1msHandler, NULL, &Task1ms_attributes);
 8001206:	4a13      	ldr	r2, [pc, #76]	@ (8001254 <main+0xbc>)
 8001208:	2100      	movs	r1, #0
 800120a:	4813      	ldr	r0, [pc, #76]	@ (8001258 <main+0xc0>)
 800120c:	f005 f8c4 	bl	8006398 <osThreadNew>
 8001210:	4603      	mov	r3, r0
 8001212:	4a12      	ldr	r2, [pc, #72]	@ (800125c <main+0xc4>)
 8001214:	6013      	str	r3, [r2, #0]

  /* creation of Task10ms */
  Task10msHandle = osThreadNew(Task10msHandler, NULL, &Task10ms_attributes);
 8001216:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <main+0xc8>)
 8001218:	2100      	movs	r1, #0
 800121a:	4812      	ldr	r0, [pc, #72]	@ (8001264 <main+0xcc>)
 800121c:	f005 f8bc 	bl	8006398 <osThreadNew>
 8001220:	4603      	mov	r3, r0
 8001222:	4a11      	ldr	r2, [pc, #68]	@ (8001268 <main+0xd0>)
 8001224:	6013      	str	r3, [r2, #0]

  /* creation of Task100ms */
  Task100msHandle = osThreadNew(Task100msHandler, NULL, &Task100ms_attributes);
 8001226:	4a11      	ldr	r2, [pc, #68]	@ (800126c <main+0xd4>)
 8001228:	2100      	movs	r1, #0
 800122a:	4811      	ldr	r0, [pc, #68]	@ (8001270 <main+0xd8>)
 800122c:	f005 f8b4 	bl	8006398 <osThreadNew>
 8001230:	4603      	mov	r3, r0
 8001232:	4a10      	ldr	r2, [pc, #64]	@ (8001274 <main+0xdc>)
 8001234:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001236:	f005 f889 	bl	800634c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800123a:	bf00      	nop
 800123c:	e7fd      	b.n	800123a <main+0xa2>
 800123e:	bf00      	nop
 8001240:	2000021c 	.word	0x2000021c
 8001244:	200006c8 	.word	0x200006c8
 8001248:	08008fd8 	.word	0x08008fd8
 800124c:	08001ea9 	.word	0x08001ea9
 8001250:	200002ac 	.word	0x200002ac
 8001254:	08008ffc 	.word	0x08008ffc
 8001258:	08001eb9 	.word	0x08001eb9
 800125c:	200002b0 	.word	0x200002b0
 8001260:	08009020 	.word	0x08009020
 8001264:	08001eed 	.word	0x08001eed
 8001268:	200002b4 	.word	0x200002b4
 800126c:	08009044 	.word	0x08009044
 8001270:	08001f21 	.word	0x08001f21
 8001274:	200002b8 	.word	0x200002b8

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	@ 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	2230      	movs	r2, #48	@ 0x30
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f007 fe3e 	bl	8008f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <SystemClock_Config+0xb8>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a4:	4a22      	ldr	r2, [pc, #136]	@ (8001330 <SystemClock_Config+0xb8>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ac:	4b20      	ldr	r3, [pc, #128]	@ (8001330 <SystemClock_Config+0xb8>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <SystemClock_Config+0xbc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001334 <SystemClock_Config+0xbc>)
 80012c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <SystemClock_Config+0xbc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	2302      	movs	r3, #2
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e0:	2310      	movs	r3, #16
 80012e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 ffe5 	bl	80042bc <HAL_RCC_OscConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012f8:	f000 fe3c 	bl	8001f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fc:	230f      	movs	r3, #15
 80012fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f003 fa48 	bl	80047ac <HAL_RCC_ClockConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001322:	f000 fe27 	bl	8001f74 <Error_Handler>
  }
}
 8001326:	bf00      	nop
 8001328:	3750      	adds	r7, #80	@ 0x50
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40007000 	.word	0x40007000

08001338 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800133e:	463b      	mov	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800134a:	4b28      	ldr	r3, [pc, #160]	@ (80013ec <MX_ADC1_Init+0xb4>)
 800134c:	4a28      	ldr	r2, [pc, #160]	@ (80013f0 <MX_ADC1_Init+0xb8>)
 800134e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001350:	4b26      	ldr	r3, [pc, #152]	@ (80013ec <MX_ADC1_Init+0xb4>)
 8001352:	2200      	movs	r2, #0
 8001354:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001356:	4b25      	ldr	r3, [pc, #148]	@ (80013ec <MX_ADC1_Init+0xb4>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800135c:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <MX_ADC1_Init+0xb4>)
 800135e:	2201      	movs	r2, #1
 8001360:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001362:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <MX_ADC1_Init+0xb4>)
 8001364:	2200      	movs	r2, #0
 8001366:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001368:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <MX_ADC1_Init+0xb4>)
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001370:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <MX_ADC1_Init+0xb4>)
 8001372:	2200      	movs	r2, #0
 8001374:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001376:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <MX_ADC1_Init+0xb4>)
 8001378:	4a1e      	ldr	r2, [pc, #120]	@ (80013f4 <MX_ADC1_Init+0xbc>)
 800137a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <MX_ADC1_Init+0xb4>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_ADC1_Init+0xb4>)
 8001384:	2202      	movs	r2, #2
 8001386:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <MX_ADC1_Init+0xb4>)
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001390:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <MX_ADC1_Init+0xb4>)
 8001392:	2201      	movs	r2, #1
 8001394:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001396:	4815      	ldr	r0, [pc, #84]	@ (80013ec <MX_ADC1_Init+0xb4>)
 8001398:	f001 f95e 	bl	8002658 <HAL_ADC_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013a2:	f000 fde7 	bl	8001f74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013aa:	2301      	movs	r3, #1
 80013ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80013ae:	2303      	movs	r3, #3
 80013b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b2:	463b      	mov	r3, r7
 80013b4:	4619      	mov	r1, r3
 80013b6:	480d      	ldr	r0, [pc, #52]	@ (80013ec <MX_ADC1_Init+0xb4>)
 80013b8:	f001 f992 	bl	80026e0 <HAL_ADC_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013c2:	f000 fdd7 	bl	8001f74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	@ (80013ec <MX_ADC1_Init+0xb4>)
 80013d4:	f001 f984 	bl	80026e0 <HAL_ADC_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80013de:	f000 fdc9 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000002c 	.word	0x2000002c
 80013f0:	40012000 	.word	0x40012000
 80013f4:	0f000001 	.word	0x0f000001

080013f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <MX_I2C1_Init+0x50>)
 80013fe:	4a13      	ldr	r2, [pc, #76]	@ (800144c <MX_I2C1_Init+0x54>)
 8001400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <MX_I2C1_Init+0x50>)
 8001404:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <MX_I2C1_Init+0x58>)
 8001406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001408:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <MX_I2C1_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <MX_I2C1_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001414:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <MX_I2C1_Init+0x50>)
 8001416:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800141a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141c:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <MX_I2C1_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <MX_I2C1_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001428:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	@ (8001448 <MX_I2C1_Init+0x50>)
 8001436:	f002 f8f5 	bl	8003624 <HAL_I2C_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001440:	f000 fd98 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200000d4 	.word	0x200000d4
 800144c:	40005400 	.word	0x40005400
 8001450:	000186a0 	.word	0x000186a0

08001454 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <MX_I2C2_Init+0x50>)
 800145a:	4a13      	ldr	r2, [pc, #76]	@ (80014a8 <MX_I2C2_Init+0x54>)
 800145c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <MX_I2C2_Init+0x50>)
 8001460:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <MX_I2C2_Init+0x58>)
 8001462:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <MX_I2C2_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <MX_I2C2_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <MX_I2C2_Init+0x50>)
 8001472:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001476:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <MX_I2C2_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <MX_I2C2_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <MX_I2C2_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148a:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <MX_I2C2_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <MX_I2C2_Init+0x50>)
 8001492:	f002 f8c7 	bl	8003624 <HAL_I2C_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800149c:	f000 fd6a 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000128 	.word	0x20000128
 80014a8:	40005800 	.word	0x40005800
 80014ac:	000186a0 	.word	0x000186a0

080014b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014b4:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014b6:	4a18      	ldr	r2, [pc, #96]	@ (8001518 <MX_SPI2_Init+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014ba:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014c2:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ce:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014da:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014fc:	220a      	movs	r2, #10
 80014fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	@ (8001514 <MX_SPI2_Init+0x64>)
 8001502:	f003 fb65 	bl	8004bd0 <HAL_SPI_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800150c:	f000 fd32 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	2000017c 	.word	0x2000017c
 8001518:	40003800 	.word	0x40003800

0800151c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b096      	sub	sp, #88	@ 0x58
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800153a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
 800154a:	615a      	str	r2, [r3, #20]
 800154c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2220      	movs	r2, #32
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f007 fcd7 	bl	8008f08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800155a:	4b44      	ldr	r3, [pc, #272]	@ (800166c <MX_TIM1_Init+0x150>)
 800155c:	4a44      	ldr	r2, [pc, #272]	@ (8001670 <MX_TIM1_Init+0x154>)
 800155e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001560:	4b42      	ldr	r3, [pc, #264]	@ (800166c <MX_TIM1_Init+0x150>)
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001566:	4b41      	ldr	r3, [pc, #260]	@ (800166c <MX_TIM1_Init+0x150>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800156c:	4b3f      	ldr	r3, [pc, #252]	@ (800166c <MX_TIM1_Init+0x150>)
 800156e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001572:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001574:	4b3d      	ldr	r3, [pc, #244]	@ (800166c <MX_TIM1_Init+0x150>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800157a:	4b3c      	ldr	r3, [pc, #240]	@ (800166c <MX_TIM1_Init+0x150>)
 800157c:	2200      	movs	r2, #0
 800157e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001580:	4b3a      	ldr	r3, [pc, #232]	@ (800166c <MX_TIM1_Init+0x150>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001586:	4839      	ldr	r0, [pc, #228]	@ (800166c <MX_TIM1_Init+0x150>)
 8001588:	f003 fbab 	bl	8004ce2 <HAL_TIM_Base_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001592:	f000 fcef 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001596:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800159a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800159c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015a0:	4619      	mov	r1, r3
 80015a2:	4832      	ldr	r0, [pc, #200]	@ (800166c <MX_TIM1_Init+0x150>)
 80015a4:	f003 ff0a 	bl	80053bc <HAL_TIM_ConfigClockSource>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015ae:	f000 fce1 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015b2:	482e      	ldr	r0, [pc, #184]	@ (800166c <MX_TIM1_Init+0x150>)
 80015b4:	f003 fc46 	bl	8004e44 <HAL_TIM_PWM_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015be:	f000 fcd9 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c2:	2300      	movs	r3, #0
 80015c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015ce:	4619      	mov	r1, r3
 80015d0:	4826      	ldr	r0, [pc, #152]	@ (800166c <MX_TIM1_Init+0x150>)
 80015d2:	f004 fabb 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015dc:	f000 fcca 	bl	8001f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e0:	2360      	movs	r3, #96	@ 0x60
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ec:	2300      	movs	r3, #0
 80015ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001600:	2200      	movs	r2, #0
 8001602:	4619      	mov	r1, r3
 8001604:	4819      	ldr	r0, [pc, #100]	@ (800166c <MX_TIM1_Init+0x150>)
 8001606:	f003 fe17 	bl	8005238 <HAL_TIM_PWM_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001610:	f000 fcb0 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001618:	220c      	movs	r2, #12
 800161a:	4619      	mov	r1, r3
 800161c:	4813      	ldr	r0, [pc, #76]	@ (800166c <MX_TIM1_Init+0x150>)
 800161e:	f003 fe0b 	bl	8005238 <HAL_TIM_PWM_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001628:	f000 fca4 	bl	8001f74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001640:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001644:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	4619      	mov	r1, r3
 800164e:	4807      	ldr	r0, [pc, #28]	@ (800166c <MX_TIM1_Init+0x150>)
 8001650:	f004 faea 	bl	8005c28 <HAL_TIMEx_ConfigBreakDeadTime>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800165a:	f000 fc8b 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800165e:	4803      	ldr	r0, [pc, #12]	@ (800166c <MX_TIM1_Init+0x150>)
 8001660:	f000 fe4a 	bl	80022f8 <HAL_TIM_MspPostInit>

}
 8001664:	bf00      	nop
 8001666:	3758      	adds	r7, #88	@ 0x58
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200001d4 	.word	0x200001d4
 8001670:	40010000 	.word	0x40010000

08001674 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001688:	463b      	mov	r3, r7
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001690:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <MX_TIM2_Init+0x98>)
 8001692:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001696:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 8001698:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <MX_TIM2_Init+0x98>)
 800169a:	f240 623f 	movw	r2, #1599	@ 0x63f
 800169e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <MX_TIM2_Init+0x98>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80016a6:	4b19      	ldr	r3, [pc, #100]	@ (800170c <MX_TIM2_Init+0x98>)
 80016a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ae:	4b17      	ldr	r3, [pc, #92]	@ (800170c <MX_TIM2_Init+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b4:	4b15      	ldr	r3, [pc, #84]	@ (800170c <MX_TIM2_Init+0x98>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ba:	4814      	ldr	r0, [pc, #80]	@ (800170c <MX_TIM2_Init+0x98>)
 80016bc:	f003 fb11 	bl	8004ce2 <HAL_TIM_Base_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016c6:	f000 fc55 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4619      	mov	r1, r3
 80016d6:	480d      	ldr	r0, [pc, #52]	@ (800170c <MX_TIM2_Init+0x98>)
 80016d8:	f003 fe70 	bl	80053bc <HAL_TIM_ConfigClockSource>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016e2:	f000 fc47 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ee:	463b      	mov	r3, r7
 80016f0:	4619      	mov	r1, r3
 80016f2:	4806      	ldr	r0, [pc, #24]	@ (800170c <MX_TIM2_Init+0x98>)
 80016f4:	f004 fa2a 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016fe:	f000 fc39 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000021c 	.word	0x2000021c

08001710 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001714:	4b11      	ldr	r3, [pc, #68]	@ (800175c <MX_USART1_UART_Init+0x4c>)
 8001716:	4a12      	ldr	r2, [pc, #72]	@ (8001760 <MX_USART1_UART_Init+0x50>)
 8001718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <MX_USART1_UART_Init+0x4c>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <MX_USART1_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <MX_USART1_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172e:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <MX_USART1_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b09      	ldr	r3, [pc, #36]	@ (800175c <MX_USART1_UART_Init+0x4c>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b08      	ldr	r3, [pc, #32]	@ (800175c <MX_USART1_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <MX_USART1_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	@ (800175c <MX_USART1_UART_Init+0x4c>)
 8001748:	f004 fad4 	bl	8005cf4 <HAL_UART_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001752:	f000 fc0f 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000264 	.word	0x20000264
 8001760:	40011000 	.word	0x40011000

08001764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <MX_DMA_Init+0x3c>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a0b      	ldr	r2, [pc, #44]	@ (80017a0 <MX_DMA_Init+0x3c>)
 8001774:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <MX_DMA_Init+0x3c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2105      	movs	r1, #5
 800178a:	2038      	movs	r0, #56	@ 0x38
 800178c:	f001 fa7e 	bl	8002c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001790:	2038      	movs	r0, #56	@ 0x38
 8001792:	f001 fa97 	bl	8002cc4 <HAL_NVIC_EnableIRQ>

}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	@ 0x28
 80017a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b47      	ldr	r3, [pc, #284]	@ (80018dc <MX_GPIO_Init+0x138>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a46      	ldr	r2, [pc, #280]	@ (80018dc <MX_GPIO_Init+0x138>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b44      	ldr	r3, [pc, #272]	@ (80018dc <MX_GPIO_Init+0x138>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b40      	ldr	r3, [pc, #256]	@ (80018dc <MX_GPIO_Init+0x138>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a3f      	ldr	r2, [pc, #252]	@ (80018dc <MX_GPIO_Init+0x138>)
 80017e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b3d      	ldr	r3, [pc, #244]	@ (80018dc <MX_GPIO_Init+0x138>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	4b39      	ldr	r3, [pc, #228]	@ (80018dc <MX_GPIO_Init+0x138>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a38      	ldr	r2, [pc, #224]	@ (80018dc <MX_GPIO_Init+0x138>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b36      	ldr	r3, [pc, #216]	@ (80018dc <MX_GPIO_Init+0x138>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b32      	ldr	r3, [pc, #200]	@ (80018dc <MX_GPIO_Init+0x138>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a31      	ldr	r2, [pc, #196]	@ (80018dc <MX_GPIO_Init+0x138>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b2f      	ldr	r3, [pc, #188]	@ (80018dc <MX_GPIO_Init+0x138>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUELED_GPIO_Port, BLUELED_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001830:	482b      	ldr	r0, [pc, #172]	@ (80018e0 <MX_GPIO_Init+0x13c>)
 8001832:	f001 fec3 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_INA_Pin|R_INB_Pin, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2103      	movs	r1, #3
 800183a:	482a      	ldr	r0, [pc, #168]	@ (80018e4 <MX_GPIO_Init+0x140>)
 800183c:	f001 febe 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_INB_Pin|L_INA_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001846:	4828      	ldr	r0, [pc, #160]	@ (80018e8 <MX_GPIO_Init+0x144>)
 8001848:	f001 feb8 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUELED_Pin */
  GPIO_InitStruct.Pin = BLUELED_Pin;
 800184c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001852:	2301      	movs	r3, #1
 8001854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUELED_GPIO_Port, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	481e      	ldr	r0, [pc, #120]	@ (80018e0 <MX_GPIO_Init+0x13c>)
 8001866:	f001 fd25 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800186a:	2380      	movs	r3, #128	@ 0x80
 800186c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	481a      	ldr	r0, [pc, #104]	@ (80018e8 <MX_GPIO_Init+0x144>)
 800187e:	f001 fd19 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_INA_Pin R_INB_Pin */
  GPIO_InitStruct.Pin = R_INA_Pin|R_INB_Pin;
 8001882:	2303      	movs	r3, #3
 8001884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4812      	ldr	r0, [pc, #72]	@ (80018e4 <MX_GPIO_Init+0x140>)
 800189a:	f001 fd0b 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_INB_Pin L_INA_Pin */
  GPIO_InitStruct.Pin = L_INB_Pin|L_INA_Pin;
 800189e:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <MX_GPIO_Init+0x144>)
 80018b8:	f001 fcfc 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018bc:	2310      	movs	r3, #16
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <MX_GPIO_Init+0x140>)
 80018d0:	f001 fcf0 	bl	80032b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018d4:	bf00      	nop
 80018d6:	3728      	adds	r7, #40	@ 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020800 	.word	0x40020800
 80018e4:	40020400 	.word	0x40020400
 80018e8:	40020000 	.word	0x40020000

080018ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018f0:	b099      	sub	sp, #100	@ 0x64
 80018f2:	af12      	add	r7, sp, #72	@ 0x48
 80018f4:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM11) {
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4ab6      	ldr	r2, [pc, #728]	@ (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d102      	bne.n	8001906 <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_IncTick();
 8001900:	f000 fe8a 	bl	8002618 <HAL_IncTick>
		return;
 8001904:	e2c7      	b.n	8001e96 <HAL_TIM_PeriodElapsedCallback+0x5aa>
	}

	if (htim->Instance == TIM2) {
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800190e:	f040 82c2 	bne.w	8001e96 <HAL_TIM_PeriodElapsedCallback+0x5aa>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001912:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001916:	48b0      	ldr	r0, [pc, #704]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001918:	f001 fe69 	bl	80035ee <HAL_GPIO_TogglePin>

		for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 800191c:	2301      	movs	r3, #1
 800191e:	75fb      	strb	r3, [r7, #23]
 8001920:	e056      	b.n	80019d0 <HAL_TIM_PeriodElapsedCallback+0xe4>
			LeftW.angle[i - 1] = LeftW.angle[i];
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	7dfa      	ldrb	r2, [r7, #23]
 8001926:	1e51      	subs	r1, r2, #1
 8001928:	4aac      	ldr	r2, [pc, #688]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800192a:	331c      	adds	r3, #28
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4413      	add	r3, r2
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	48a9      	ldr	r0, [pc, #676]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001936:	311c      	adds	r1, #28
 8001938:	00c9      	lsls	r1, r1, #3
 800193a:	4401      	add	r1, r0
 800193c:	e9c1 2300 	strd	r2, r3, [r1]
			RightW.angle[i - 1] = RightW.angle[i];
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	7dfa      	ldrb	r2, [r7, #23]
 8001944:	1e51      	subs	r1, r2, #1
 8001946:	4aa6      	ldr	r2, [pc, #664]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001948:	331c      	adds	r3, #28
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	4413      	add	r3, r2
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	48a3      	ldr	r0, [pc, #652]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001954:	311c      	adds	r1, #28
 8001956:	00c9      	lsls	r1, r1, #3
 8001958:	4401      	add	r1, r0
 800195a:	e9c1 2300 	strd	r2, r3, [r1]

			LeftW.time_ms_wheel[i - 1] = LeftW.time_ms_wheel[i];
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	7dfa      	ldrb	r2, [r7, #23]
 8001962:	1e51      	subs	r1, r2, #1
 8001964:	4a9d      	ldr	r2, [pc, #628]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001966:	332c      	adds	r3, #44	@ 0x2c
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	489b      	ldr	r0, [pc, #620]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001970:	f101 032c 	add.w	r3, r1, #44	@ 0x2c
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4403      	add	r3, r0
 8001978:	605a      	str	r2, [r3, #4]
			RightW.time_ms_wheel[i - 1] = RightW.time_ms_wheel[i];
 800197a:	7dfb      	ldrb	r3, [r7, #23]
 800197c:	7dfa      	ldrb	r2, [r7, #23]
 800197e:	1e51      	subs	r1, r2, #1
 8001980:	4a97      	ldr	r2, [pc, #604]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001982:	332c      	adds	r3, #44	@ 0x2c
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4895      	ldr	r0, [pc, #596]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800198c:	f101 032c 	add.w	r3, r1, #44	@ 0x2c
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4403      	add	r3, r0
 8001994:	605a      	str	r2, [r3, #4]

			LeftW.speed[i - 1] = LeftW.speed[i];
 8001996:	7dfa      	ldrb	r2, [r7, #23]
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	3b01      	subs	r3, #1
 800199c:	498f      	ldr	r1, [pc, #572]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800199e:	324c      	adds	r2, #76	@ 0x4c
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	440a      	add	r2, r1
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	498d      	ldr	r1, [pc, #564]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80019a8:	334c      	adds	r3, #76	@ 0x4c
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	601a      	str	r2, [r3, #0]
			RightW.speed[i - 1] = RightW.speed[i];
 80019b0:	7dfa      	ldrb	r2, [r7, #23]
 80019b2:	7dfb      	ldrb	r3, [r7, #23]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	498a      	ldr	r1, [pc, #552]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80019b8:	324c      	adds	r2, #76	@ 0x4c
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	440a      	add	r2, r1
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	4987      	ldr	r1, [pc, #540]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80019c2:	334c      	adds	r3, #76	@ 0x4c
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	3301      	adds	r3, #1
 80019ce:	75fb      	strb	r3, [r7, #23]
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	2b09      	cmp	r3, #9
 80019d4:	d9a5      	bls.n	8001922 <HAL_TIM_PeriodElapsedCallback+0x36>

		};

		RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1] = HAL_GetTick();
 80019d6:	f000 fe33 	bl	8002640 <HAL_GetTick>
 80019da:	4603      	mov	r3, r0
 80019dc:	4a80      	ldr	r2, [pc, #512]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80019de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
		LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1] = HAL_GetTick();
 80019e2:	f000 fe2d 	bl	8002640 <HAL_GetTick>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a7c      	ldr	r2, [pc, #496]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80019ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

		LeftW.angle[MAX_ANGLE_WHEEL_ARRAY - 1] = HAL_ReadAS5600_I2Cx(
 80019ee:	4e7b      	ldr	r6, [pc, #492]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80019f0:	4668      	mov	r0, sp
 80019f2:	f106 035c 	add.w	r3, r6, #92	@ 0x5c
 80019f6:	2244      	movs	r2, #68	@ 0x44
 80019f8:	4619      	mov	r1, r3
 80019fa:	f007 fab1 	bl	8008f60 <memcpy>
 80019fe:	f106 034c 	add.w	r3, r6, #76	@ 0x4c
 8001a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a04:	f7ff f982 	bl	8000d0c <HAL_ReadAS5600_I2Cx>
 8001a08:	ee10 3a10 	vmov	r3, s0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fd4b 	bl	80004a8 <__aeabi_f2d>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4971      	ldr	r1, [pc, #452]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a18:	e9c1 234a 	strd	r2, r3, [r1, #296]	@ 0x128
				LeftW.hi2c);
		RightW.angle[MAX_ANGLE_WHEEL_ARRAY - 1] = HAL_ReadAS5600_I2Cx(
 8001a1c:	4e70      	ldr	r6, [pc, #448]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a1e:	4668      	mov	r0, sp
 8001a20:	f106 035c 	add.w	r3, r6, #92	@ 0x5c
 8001a24:	2244      	movs	r2, #68	@ 0x44
 8001a26:	4619      	mov	r1, r3
 8001a28:	f007 fa9a 	bl	8008f60 <memcpy>
 8001a2c:	f106 034c 	add.w	r3, r6, #76	@ 0x4c
 8001a30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a32:	f7ff f96b 	bl	8000d0c <HAL_ReadAS5600_I2Cx>
 8001a36:	ee10 3a10 	vmov	r3, s0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd34 	bl	80004a8 <__aeabi_f2d>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4966      	ldr	r1, [pc, #408]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a46:	e9c1 234a 	strd	r2, r3, [r1, #296]	@ 0x128
				RightW.hi2c);

		float tmplspeed = -((1000
				* (LeftW.angle[MAX_ANGLE_WHEEL_ARRAY - 1]
 8001a4a:	4b64      	ldr	r3, [pc, #400]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a4c:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
						- LeftW.angle[MAX_ANGLE_WHEEL_ARRAY - 2]))
 8001a50:	4b62      	ldr	r3, [pc, #392]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a52:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 8001a56:	f7fe fbc7 	bl	80001e8 <__aeabi_dsub>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
				* (LeftW.angle[MAX_ANGLE_WHEEL_ARRAY - 1]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	4b5f      	ldr	r3, [pc, #380]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001a68:	f7fe fd76 	bl	8000558 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4690      	mov	r8, r2
 8001a72:	4699      	mov	r9, r3
				/ (LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1]
 8001a74:	4b59      	ldr	r3, [pc, #356]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a76:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
						- LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 2])) / 360
 8001a7a:	4b58      	ldr	r3, [pc, #352]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a80:	1ad3      	subs	r3, r2, r3
				/ (LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fcee 	bl	8000464 <__aeabi_ui2d>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4640      	mov	r0, r8
 8001a8e:	4649      	mov	r1, r9
 8001a90:	f7fe fe8c 	bl	80007ac <__aeabi_ddiv>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
		float tmplspeed = -((1000
 8001a98:	4614      	mov	r4, r2
 8001a9a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
						- LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 2])) / 360
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	4b51      	ldr	r3, [pc, #324]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	f7fe fe80 	bl	80007ac <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
				* 60;
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b4c      	ldr	r3, [pc, #304]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001aba:	f7fe fd4d 	bl	8000558 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
		float tmplspeed = -((1000
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7fe ff59 	bl	800097c <__aeabi_d2f>
 8001aca:	4603      	mov	r3, r0
 8001acc:	613b      	str	r3, [r7, #16]
		float tmprspeed = ((1000
				* (RightW.angle[MAX_ANGLE_WHEEL_ARRAY - 1]
 8001ace:	4b44      	ldr	r3, [pc, #272]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001ad0:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
						- RightW.angle[MAX_ANGLE_WHEEL_ARRAY - 2]))
 8001ad4:	4b42      	ldr	r3, [pc, #264]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001ad6:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 8001ada:	f7fe fb85 	bl	80001e8 <__aeabi_dsub>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
				* (RightW.angle[MAX_ANGLE_WHEEL_ARRAY - 1]
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	4b3e      	ldr	r3, [pc, #248]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001aec:	f7fe fd34 	bl	8000558 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4614      	mov	r4, r2
 8001af6:	461d      	mov	r5, r3
				/ (RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1]
 8001af8:	4b39      	ldr	r3, [pc, #228]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001afa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
						- RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 2]))
 8001afe:	4b38      	ldr	r3, [pc, #224]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001b00:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b04:	1ad3      	subs	r3, r2, r3
				/ (RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fcac 	bl	8000464 <__aeabi_ui2d>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4620      	mov	r0, r4
 8001b12:	4629      	mov	r1, r5
 8001b14:	f7fe fe4a 	bl	80007ac <__aeabi_ddiv>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
				/ 360 * 60;
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b30      	ldr	r3, [pc, #192]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001b26:	f7fe fe41 	bl	80007ac <__aeabi_ddiv>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b2d      	ldr	r3, [pc, #180]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001b38:	f7fe fd0e 	bl	8000558 <__aeabi_dmul>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
		float tmprspeed = ((1000
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7fe ff1a 	bl	800097c <__aeabi_d2f>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60fb      	str	r3, [r7, #12]

		if ((tmplspeed * LeftW.speed[MAX_ANGLE_WHEEL_ARRAY - 2]) >= 0) {
 8001b4c:	4b23      	ldr	r3, [pc, #140]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001b4e:	ed93 7a54 	vldr	s14, [r3, #336]	@ 0x150
 8001b52:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b62:	db27      	blt.n	8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c8>
			for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8001b64:	2301      	movs	r3, #1
 8001b66:	72fb      	strb	r3, [r7, #11]
 8001b68:	e00f      	b.n	8001b8a <HAL_TIM_PeriodElapsedCallback+0x29e>
				LeftW.speed[i - 1] = LeftW.speed[i];
 8001b6a:	7afa      	ldrb	r2, [r7, #11]
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	491a      	ldr	r1, [pc, #104]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001b72:	324c      	adds	r2, #76	@ 0x4c
 8001b74:	0092      	lsls	r2, r2, #2
 8001b76:	440a      	add	r2, r1
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	4918      	ldr	r1, [pc, #96]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001b7c:	334c      	adds	r3, #76	@ 0x4c
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	601a      	str	r2, [r3, #0]
			for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8001b84:	7afb      	ldrb	r3, [r7, #11]
 8001b86:	3301      	adds	r3, #1
 8001b88:	72fb      	strb	r3, [r7, #11]
 8001b8a:	7afb      	ldrb	r3, [r7, #11]
 8001b8c:	2b09      	cmp	r3, #9
 8001b8e:	d9ec      	bls.n	8001b6a <HAL_TIM_PeriodElapsedCallback+0x27e>
			};

			if (fabsf(tmplspeed) < 1) {
 8001b90:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b94:	eef0 7ae7 	vabs.f32	s15, s15
 8001b98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba4:	d502      	bpl.n	8001bac <HAL_TIM_PeriodElapsedCallback+0x2c0>
				tmplspeed = 0;
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
			};
			LeftW.speed[MAX_ANGLE_WHEEL_ARRAY - 1] = tmplspeed;
 8001bac:	4a0b      	ldr	r2, [pc, #44]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
		};

		if ((tmprspeed * RightW.speed[MAX_ANGLE_WHEEL_ARRAY - 2]) >= 0) {
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001bb6:	ed93 7a54 	vldr	s14, [r3, #336]	@ 0x150
 8001bba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	db36      	blt.n	8001c3a <HAL_TIM_PeriodElapsedCallback+0x34e>
			for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8001bcc:	2301      	movs	r3, #1
 8001bce:	72bb      	strb	r3, [r7, #10]
 8001bd0:	e01e      	b.n	8001c10 <HAL_TIM_PeriodElapsedCallback+0x324>
 8001bd2:	bf00      	nop
 8001bd4:	40014800 	.word	0x40014800
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	200002c8 	.word	0x200002c8
 8001be0:	200004c8 	.word	0x200004c8
 8001be4:	408f4000 	.word	0x408f4000
 8001be8:	40768000 	.word	0x40768000
 8001bec:	404e0000 	.word	0x404e0000
				RightW.speed[i - 1] = RightW.speed[i];
 8001bf0:	7aba      	ldrb	r2, [r7, #10]
 8001bf2:	7abb      	ldrb	r3, [r7, #10]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	49aa      	ldr	r1, [pc, #680]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001bf8:	324c      	adds	r2, #76	@ 0x4c
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	440a      	add	r2, r1
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	49a7      	ldr	r1, [pc, #668]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001c02:	334c      	adds	r3, #76	@ 0x4c
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	601a      	str	r2, [r3, #0]
			for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8001c0a:	7abb      	ldrb	r3, [r7, #10]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	72bb      	strb	r3, [r7, #10]
 8001c10:	7abb      	ldrb	r3, [r7, #10]
 8001c12:	2b09      	cmp	r3, #9
 8001c14:	d9ec      	bls.n	8001bf0 <HAL_TIM_PeriodElapsedCallback+0x304>
			};
			if (fabsf(tmprspeed) < 1) {
 8001c16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c1a:	eef0 7ae7 	vabs.f32	s15, s15
 8001c1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2a:	d502      	bpl.n	8001c32 <HAL_TIM_PeriodElapsedCallback+0x346>
				tmprspeed = 0;
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
			};
			RightW.speed[MAX_ANGLE_WHEEL_ARRAY - 1] = tmprspeed;
 8001c32:	4a9b      	ldr	r2, [pc, #620]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
		};

		LeftW.averspeed = 0;
 8001c3a:	4b9a      	ldr	r3, [pc, #616]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		RightW.averspeed = 0;
 8001c44:	4b96      	ldr	r3, [pc, #600]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

		for (uint8_t i = 0; i < MAX_ANGLE_WHEEL_ARRAY - 2; i++) {
 8001c4e:	2300      	movs	r3, #0
 8001c50:	727b      	strb	r3, [r7, #9]
 8001c52:	e020      	b.n	8001c96 <HAL_TIM_PeriodElapsedCallback+0x3aa>
			LeftW.averspeed = LeftW.averspeed + LeftW.speed[i];
 8001c54:	4b93      	ldr	r3, [pc, #588]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001c56:	ed93 7a56 	vldr	s14, [r3, #344]	@ 0x158
 8001c5a:	7a7b      	ldrb	r3, [r7, #9]
 8001c5c:	4a91      	ldr	r2, [pc, #580]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001c5e:	334c      	adds	r3, #76	@ 0x4c
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6c:	4b8d      	ldr	r3, [pc, #564]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001c6e:	edc3 7a56 	vstr	s15, [r3, #344]	@ 0x158
			RightW.averspeed = RightW.averspeed + RightW.speed[i];
 8001c72:	4b8b      	ldr	r3, [pc, #556]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001c74:	ed93 7a56 	vldr	s14, [r3, #344]	@ 0x158
 8001c78:	7a7b      	ldrb	r3, [r7, #9]
 8001c7a:	4a89      	ldr	r2, [pc, #548]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001c7c:	334c      	adds	r3, #76	@ 0x4c
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8a:	4b85      	ldr	r3, [pc, #532]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001c8c:	edc3 7a56 	vstr	s15, [r3, #344]	@ 0x158
		for (uint8_t i = 0; i < MAX_ANGLE_WHEEL_ARRAY - 2; i++) {
 8001c90:	7a7b      	ldrb	r3, [r7, #9]
 8001c92:	3301      	adds	r3, #1
 8001c94:	727b      	strb	r3, [r7, #9]
 8001c96:	7a7b      	ldrb	r3, [r7, #9]
 8001c98:	2b07      	cmp	r3, #7
 8001c9a:	d9db      	bls.n	8001c54 <HAL_TIM_PeriodElapsedCallback+0x368>
		};

		RightW.averspeed = RightW.averspeed / (MAX_ANGLE_WHEEL_ARRAY - 2);
 8001c9c:	4b80      	ldr	r3, [pc, #512]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001c9e:	ed93 7a56 	vldr	s14, [r3, #344]	@ 0x158
 8001ca2:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001ca6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001caa:	4b7d      	ldr	r3, [pc, #500]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001cac:	edc3 7a56 	vstr	s15, [r3, #344]	@ 0x158
		LeftW.averspeed = LeftW.averspeed / (MAX_ANGLE_WHEEL_ARRAY - 2);
 8001cb0:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001cb2:	ed93 7a56 	vldr	s14, [r3, #344]	@ 0x158
 8001cb6:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001cba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cbe:	4b79      	ldr	r3, [pc, #484]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001cc0:	edc3 7a56 	vstr	s15, [r3, #344]	@ 0x158

		if (RightW.averspeed > 7) {
 8001cc4:	4b76      	ldr	r3, [pc, #472]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001cc6:	edd3 7a56 	vldr	s15, [r3, #344]	@ 0x158
 8001cca:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8001cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	f340 80de 	ble.w	8001e96 <HAL_TIM_PeriodElapsedCallback+0x5aa>
			if (RightW.averspeed - LeftW.averspeed < 0) {
 8001cda:	4b71      	ldr	r3, [pc, #452]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001cdc:	ed93 7a56 	vldr	s14, [r3, #344]	@ 0x158
 8001ce0:	4b70      	ldr	r3, [pc, #448]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001ce2:	edd3 7a56 	vldr	s15, [r3, #344]	@ 0x158
 8001ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf2:	d568      	bpl.n	8001dc6 <HAL_TIM_PeriodElapsedCallback+0x4da>
				RightW.PWM_Value = RightW.PWM_Value + 5;
 8001cf4:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001cf6:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001cfa:	3305      	adds	r3, #5
 8001cfc:	4a68      	ldr	r2, [pc, #416]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001cfe:	f8c2 316c 	str.w	r3, [r2, #364]	@ 0x16c
				__HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel,
 8001d02:	4b67      	ldr	r3, [pc, #412]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001d04:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d106      	bne.n	8001d1a <HAL_TIM_PeriodElapsedCallback+0x42e>
 8001d0c:	4b64      	ldr	r3, [pc, #400]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001d0e:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8001d12:	4b63      	ldr	r3, [pc, #396]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d18:	e020      	b.n	8001d5c <HAL_TIM_PeriodElapsedCallback+0x470>
 8001d1a:	4b61      	ldr	r3, [pc, #388]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001d1c:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d107      	bne.n	8001d34 <HAL_TIM_PeriodElapsedCallback+0x448>
 8001d24:	4b5e      	ldr	r3, [pc, #376]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001d26:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001d2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d32:	e013      	b.n	8001d5c <HAL_TIM_PeriodElapsedCallback+0x470>
 8001d34:	4b5a      	ldr	r3, [pc, #360]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001d36:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d107      	bne.n	8001d4e <HAL_TIM_PeriodElapsedCallback+0x462>
 8001d3e:	4b58      	ldr	r3, [pc, #352]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001d40:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001d44:	4b56      	ldr	r3, [pc, #344]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d4c:	e006      	b.n	8001d5c <HAL_TIM_PeriodElapsedCallback+0x470>
 8001d4e:	4b54      	ldr	r3, [pc, #336]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001d50:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001d54:	4b52      	ldr	r3, [pc, #328]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	6413      	str	r3, [r2, #64]	@ 0x40
						RightW.PWM_Value);

				LeftW.PWM_Value = LeftW.PWM_Value - 5;
 8001d5c:	4b51      	ldr	r3, [pc, #324]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001d5e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001d62:	3b05      	subs	r3, #5
 8001d64:	4a4f      	ldr	r2, [pc, #316]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001d66:	f8c2 316c 	str.w	r3, [r2, #364]	@ 0x16c
				__HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel,
 8001d6a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001d6c:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d106      	bne.n	8001d82 <HAL_TIM_PeriodElapsedCallback+0x496>
 8001d74:	4b4b      	ldr	r3, [pc, #300]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001d76:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8001d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d80:	e089      	b.n	8001e96 <HAL_TIM_PeriodElapsedCallback+0x5aa>
 8001d82:	4b48      	ldr	r3, [pc, #288]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001d84:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d107      	bne.n	8001d9c <HAL_TIM_PeriodElapsedCallback+0x4b0>
 8001d8c:	4b45      	ldr	r3, [pc, #276]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001d8e:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001d92:	4b44      	ldr	r3, [pc, #272]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d9a:	e07c      	b.n	8001e96 <HAL_TIM_PeriodElapsedCallback+0x5aa>
 8001d9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001d9e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d107      	bne.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x4ca>
 8001da6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001da8:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001dac:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001db4:	e06f      	b.n	8001e96 <HAL_TIM_PeriodElapsedCallback+0x5aa>
 8001db6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001db8:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001dbc:	4b39      	ldr	r3, [pc, #228]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc4:	e067      	b.n	8001e96 <HAL_TIM_PeriodElapsedCallback+0x5aa>
						LeftW.PWM_Value);

			} else {

				RightW.PWM_Value = RightW.PWM_Value - 5;
 8001dc6:	4b36      	ldr	r3, [pc, #216]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001dc8:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001dcc:	3b05      	subs	r3, #5
 8001dce:	4a34      	ldr	r2, [pc, #208]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001dd0:	f8c2 316c 	str.w	r3, [r2, #364]	@ 0x16c
				__HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel,
 8001dd4:	4b32      	ldr	r3, [pc, #200]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001dd6:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_TIM_PeriodElapsedCallback+0x500>
 8001dde:	4b30      	ldr	r3, [pc, #192]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001de0:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8001de4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dea:	e020      	b.n	8001e2e <HAL_TIM_PeriodElapsedCallback+0x542>
 8001dec:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001dee:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d107      	bne.n	8001e06 <HAL_TIM_PeriodElapsedCallback+0x51a>
 8001df6:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001df8:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001dfc:	4b28      	ldr	r3, [pc, #160]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e04:	e013      	b.n	8001e2e <HAL_TIM_PeriodElapsedCallback+0x542>
 8001e06:	4b26      	ldr	r3, [pc, #152]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001e08:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d107      	bne.n	8001e20 <HAL_TIM_PeriodElapsedCallback+0x534>
 8001e10:	4b23      	ldr	r3, [pc, #140]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001e12:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001e16:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e1e:	e006      	b.n	8001e2e <HAL_TIM_PeriodElapsedCallback+0x542>
 8001e20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001e22:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001e26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	6413      	str	r3, [r2, #64]	@ 0x40
						RightW.PWM_Value);

				LeftW.PWM_Value = LeftW.PWM_Value + 5;
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001e30:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001e34:	3305      	adds	r3, #5
 8001e36:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001e38:	f8c2 316c 	str.w	r3, [r2, #364]	@ 0x16c
				__HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel,
 8001e3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001e3e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_TIM_PeriodElapsedCallback+0x568>
 8001e46:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001e48:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8001e4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e52:	e020      	b.n	8001e96 <HAL_TIM_PeriodElapsedCallback+0x5aa>
 8001e54:	4b13      	ldr	r3, [pc, #76]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001e56:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d107      	bne.n	8001e6e <HAL_TIM_PeriodElapsedCallback+0x582>
 8001e5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001e60:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001e64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e6c:	e013      	b.n	8001e96 <HAL_TIM_PeriodElapsedCallback+0x5aa>
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001e70:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d107      	bne.n	8001e88 <HAL_TIM_PeriodElapsedCallback+0x59c>
 8001e78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001e7a:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e86:	e006      	b.n	8001e96 <HAL_TIM_PeriodElapsedCallback+0x5aa>
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001e8a:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001e8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	460b      	mov	r3, r1
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40
			};
		};

	}

}
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200004c8 	.word	0x200004c8
 8001ea4:	200002c8 	.word	0x200002c8

08001ea8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f004 fb03 	bl	80064bc <osDelay>
 8001eb6:	e7fb      	b.n	8001eb0 <StartDefaultTask+0x8>

08001eb8 <Task1msHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1msHandler */
void Task1msHandler(void *argument)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Task1msHandler */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 1  / portTICK_PERIOD_MS;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 8001ec4:	f005 fc68 	bl	8007798 <xTaskGetTickCount>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60bb      	str	r3, [r7, #8]
    /* Infinite loop */
    for(;;)
    {
        // Add code here
        task1msCnt++;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <Task1msHandler+0x30>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	4a05      	ldr	r2, [pc, #20]	@ (8001ee8 <Task1msHandler+0x30>)
 8001ed4:	6013      	str	r3, [r2, #0]

        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	68f9      	ldr	r1, [r7, #12]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f005 fa91 	bl	8007404 <vTaskDelayUntil>
        task1msCnt++;
 8001ee2:	bf00      	nop
 8001ee4:	e7f2      	b.n	8001ecc <Task1msHandler+0x14>
 8001ee6:	bf00      	nop
 8001ee8:	200002bc 	.word	0x200002bc

08001eec <Task10msHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task10msHandler */
void Task10msHandler(void *argument)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Task10msHandler */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 10 / portTICK_PERIOD_MS;
 8001ef4:	230a      	movs	r3, #10
 8001ef6:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 8001ef8:	f005 fc4e 	bl	8007798 <xTaskGetTickCount>
 8001efc:	4603      	mov	r3, r0
 8001efe:	60bb      	str	r3, [r7, #8]
    /* Infinite loop */
    for(;;)
    {
        // Add code here

        task10msCnt++;
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <Task10msHandler+0x30>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	4a05      	ldr	r2, [pc, #20]	@ (8001f1c <Task10msHandler+0x30>)
 8001f08:	6013      	str	r3, [r2, #0]

        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	68f9      	ldr	r1, [r7, #12]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f005 fa77 	bl	8007404 <vTaskDelayUntil>
        task10msCnt++;
 8001f16:	bf00      	nop
 8001f18:	e7f2      	b.n	8001f00 <Task10msHandler+0x14>
 8001f1a:	bf00      	nop
 8001f1c:	200002c0 	.word	0x200002c0

08001f20 <Task100msHandler>:
*/
/* USER CODE END Header_Task100msHandler */


void Task100msHandler(void *argument)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Task100msHandler */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 100 / portTICK_PERIOD_MS;
 8001f28:	2364      	movs	r3, #100	@ 0x64
 8001f2a:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 8001f2c:	f005 fc34 	bl	8007798 <xTaskGetTickCount>
 8001f30:	4603      	mov	r3, r0
 8001f32:	60bb      	str	r3, [r7, #8]
    /* Infinite loop */
    for(;;)
    {
        // Add code here
        task100msCnt++;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <Task100msHandler+0x48>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f68 <Task100msHandler+0x48>)
 8001f3c:	6013      	str	r3, [r2, #0]


    	if (newval==1) {
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <Task100msHandler+0x4c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d109      	bne.n	8001f5a <Task100msHandler+0x3a>
    		newval = 0;
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <Task100msHandler+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
    		 SetDir_Speed(speedr);
 8001f4c:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <Task100msHandler+0x50>)
 8001f4e:	edd3 7a00 	vldr	s15, [r3]
 8001f52:	eeb0 0a67 	vmov.f32	s0, s15
 8001f56:	f7fe fff7 	bl	8000f48 <SetDir_Speed>
    	}

        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	68f9      	ldr	r1, [r7, #12]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f005 fa4f 	bl	8007404 <vTaskDelayUntil>
        task100msCnt++;
 8001f66:	e7e5      	b.n	8001f34 <Task100msHandler+0x14>
 8001f68:	200002c4 	.word	0x200002c4
 8001f6c:	200006cc 	.word	0x200006cc
 8001f70:	200006c8 	.word	0x200006c8

08001f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f78:	b672      	cpsid	i
}
 8001f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <Error_Handler+0x8>

08001f80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_MspInit+0x54>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	4a11      	ldr	r2, [pc, #68]	@ (8001fd4 <HAL_MspInit+0x54>)
 8001f90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f96:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <HAL_MspInit+0x54>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_MspInit+0x54>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <HAL_MspInit+0x54>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb2:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <HAL_MspInit+0x54>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	210f      	movs	r1, #15
 8001fc2:	f06f 0001 	mvn.w	r0, #1
 8001fc6:	f000 fe61 	bl	8002c8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	@ 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80020b0 <HAL_ADC_MspInit+0xd8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d156      	bne.n	80020a8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80020b4 <HAL_ADC_MspInit+0xdc>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	4a2c      	ldr	r2, [pc, #176]	@ (80020b4 <HAL_ADC_MspInit+0xdc>)
 8002004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002008:	6453      	str	r3, [r2, #68]	@ 0x44
 800200a:	4b2a      	ldr	r3, [pc, #168]	@ (80020b4 <HAL_ADC_MspInit+0xdc>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b26      	ldr	r3, [pc, #152]	@ (80020b4 <HAL_ADC_MspInit+0xdc>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	4a25      	ldr	r2, [pc, #148]	@ (80020b4 <HAL_ADC_MspInit+0xdc>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6313      	str	r3, [r2, #48]	@ 0x30
 8002026:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <HAL_ADC_MspInit+0xdc>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002032:	2303      	movs	r3, #3
 8002034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002036:	2303      	movs	r3, #3
 8002038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4619      	mov	r1, r3
 8002044:	481c      	ldr	r0, [pc, #112]	@ (80020b8 <HAL_ADC_MspInit+0xe0>)
 8002046:	f001 f935 	bl	80032b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800204a:	4b1c      	ldr	r3, [pc, #112]	@ (80020bc <HAL_ADC_MspInit+0xe4>)
 800204c:	4a1c      	ldr	r2, [pc, #112]	@ (80020c0 <HAL_ADC_MspInit+0xe8>)
 800204e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002050:	4b1a      	ldr	r3, [pc, #104]	@ (80020bc <HAL_ADC_MspInit+0xe4>)
 8002052:	2200      	movs	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002056:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <HAL_ADC_MspInit+0xe4>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800205c:	4b17      	ldr	r3, [pc, #92]	@ (80020bc <HAL_ADC_MspInit+0xe4>)
 800205e:	2200      	movs	r2, #0
 8002060:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002062:	4b16      	ldr	r3, [pc, #88]	@ (80020bc <HAL_ADC_MspInit+0xe4>)
 8002064:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002068:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800206a:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <HAL_ADC_MspInit+0xe4>)
 800206c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002070:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002072:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <HAL_ADC_MspInit+0xe4>)
 8002074:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002078:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <HAL_ADC_MspInit+0xe4>)
 800207c:	2200      	movs	r2, #0
 800207e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002080:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <HAL_ADC_MspInit+0xe4>)
 8002082:	2200      	movs	r2, #0
 8002084:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002086:	4b0d      	ldr	r3, [pc, #52]	@ (80020bc <HAL_ADC_MspInit+0xe4>)
 8002088:	2200      	movs	r2, #0
 800208a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800208c:	480b      	ldr	r0, [pc, #44]	@ (80020bc <HAL_ADC_MspInit+0xe4>)
 800208e:	f000 fe27 	bl	8002ce0 <HAL_DMA_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002098:	f7ff ff6c 	bl	8001f74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a07      	ldr	r2, [pc, #28]	@ (80020bc <HAL_ADC_MspInit+0xe4>)
 80020a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80020a2:	4a06      	ldr	r2, [pc, #24]	@ (80020bc <HAL_ADC_MspInit+0xe4>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020a8:	bf00      	nop
 80020aa:	3728      	adds	r7, #40	@ 0x28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40012000 	.word	0x40012000
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020000 	.word	0x40020000
 80020bc:	20000074 	.word	0x20000074
 80020c0:	40026410 	.word	0x40026410

080020c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08c      	sub	sp, #48	@ 0x30
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 031c 	add.w	r3, r7, #28
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a3b      	ldr	r2, [pc, #236]	@ (80021d0 <HAL_I2C_MspInit+0x10c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d12d      	bne.n	8002142 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	4b3a      	ldr	r3, [pc, #232]	@ (80021d4 <HAL_I2C_MspInit+0x110>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	4a39      	ldr	r2, [pc, #228]	@ (80021d4 <HAL_I2C_MspInit+0x110>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f6:	4b37      	ldr	r3, [pc, #220]	@ (80021d4 <HAL_I2C_MspInit+0x110>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002102:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002108:	2312      	movs	r3, #18
 800210a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002110:	2303      	movs	r3, #3
 8002112:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002114:	2304      	movs	r3, #4
 8002116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	4619      	mov	r1, r3
 800211e:	482e      	ldr	r0, [pc, #184]	@ (80021d8 <HAL_I2C_MspInit+0x114>)
 8002120:	f001 f8c8 	bl	80032b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	4b2a      	ldr	r3, [pc, #168]	@ (80021d4 <HAL_I2C_MspInit+0x110>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	4a29      	ldr	r2, [pc, #164]	@ (80021d4 <HAL_I2C_MspInit+0x110>)
 800212e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002132:	6413      	str	r3, [r2, #64]	@ 0x40
 8002134:	4b27      	ldr	r3, [pc, #156]	@ (80021d4 <HAL_I2C_MspInit+0x110>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002140:	e041      	b.n	80021c6 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a25      	ldr	r2, [pc, #148]	@ (80021dc <HAL_I2C_MspInit+0x118>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d13c      	bne.n	80021c6 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	4b20      	ldr	r3, [pc, #128]	@ (80021d4 <HAL_I2C_MspInit+0x110>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	4a1f      	ldr	r2, [pc, #124]	@ (80021d4 <HAL_I2C_MspInit+0x110>)
 8002156:	f043 0302 	orr.w	r3, r3, #2
 800215a:	6313      	str	r3, [r2, #48]	@ 0x30
 800215c:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <HAL_I2C_MspInit+0x110>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002168:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800216c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800216e:	2312      	movs	r3, #18
 8002170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800217a:	2304      	movs	r3, #4
 800217c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	4814      	ldr	r0, [pc, #80]	@ (80021d8 <HAL_I2C_MspInit+0x114>)
 8002186:	f001 f895 	bl	80032b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800218a:	2308      	movs	r3, #8
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800218e:	2312      	movs	r3, #18
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002196:	2303      	movs	r3, #3
 8002198:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800219a:	2309      	movs	r3, #9
 800219c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219e:	f107 031c 	add.w	r3, r7, #28
 80021a2:	4619      	mov	r1, r3
 80021a4:	480c      	ldr	r0, [pc, #48]	@ (80021d8 <HAL_I2C_MspInit+0x114>)
 80021a6:	f001 f885 	bl	80032b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <HAL_I2C_MspInit+0x110>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	4a08      	ldr	r2, [pc, #32]	@ (80021d4 <HAL_I2C_MspInit+0x110>)
 80021b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ba:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_I2C_MspInit+0x110>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
}
 80021c6:	bf00      	nop
 80021c8:	3730      	adds	r7, #48	@ 0x30
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40005400 	.word	0x40005400
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020400 	.word	0x40020400
 80021dc:	40005800 	.word	0x40005800

080021e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	@ 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a19      	ldr	r2, [pc, #100]	@ (8002264 <HAL_SPI_MspInit+0x84>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d12c      	bne.n	800225c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	4a17      	ldr	r2, [pc, #92]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 800220c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002210:	6413      	str	r3, [r2, #64]	@ 0x40
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a10      	ldr	r2, [pc, #64]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800223a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800224c:	2305      	movs	r3, #5
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4805      	ldr	r0, [pc, #20]	@ (800226c <HAL_SPI_MspInit+0x8c>)
 8002258:	f001 f82c 	bl	80032b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800225c:	bf00      	nop
 800225e:	3728      	adds	r7, #40	@ 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40003800 	.word	0x40003800
 8002268:	40023800 	.word	0x40023800
 800226c:	40020400 	.word	0x40020400

08002270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <HAL_TIM_Base_MspInit+0x80>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d116      	bne.n	80022b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <HAL_TIM_Base_MspInit+0x84>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	4a1a      	ldr	r2, [pc, #104]	@ (80022f4 <HAL_TIM_Base_MspInit+0x84>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6453      	str	r3, [r2, #68]	@ 0x44
 8002292:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <HAL_TIM_Base_MspInit+0x84>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	210f      	movs	r1, #15
 80022a2:	201a      	movs	r0, #26
 80022a4:	f000 fcf2 	bl	8002c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80022a8:	201a      	movs	r0, #26
 80022aa:	f000 fd0b 	bl	8002cc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022ae:	e01a      	b.n	80022e6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b8:	d115      	bne.n	80022e6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <HAL_TIM_Base_MspInit+0x84>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	4a0c      	ldr	r2, [pc, #48]	@ (80022f4 <HAL_TIM_Base_MspInit+0x84>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ca:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <HAL_TIM_Base_MspInit+0x84>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2105      	movs	r1, #5
 80022da:	201c      	movs	r0, #28
 80022dc:	f000 fcd6 	bl	8002c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022e0:	201c      	movs	r0, #28
 80022e2:	f000 fcef 	bl	8002cc4 <HAL_NVIC_EnableIRQ>
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40010000 	.word	0x40010000
 80022f4:	40023800 	.word	0x40023800

080022f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a12      	ldr	r2, [pc, #72]	@ (8002360 <HAL_TIM_MspPostInit+0x68>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d11e      	bne.n	8002358 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	4b11      	ldr	r3, [pc, #68]	@ (8002364 <HAL_TIM_MspPostInit+0x6c>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	4a10      	ldr	r2, [pc, #64]	@ (8002364 <HAL_TIM_MspPostInit+0x6c>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6313      	str	r3, [r2, #48]	@ 0x30
 800232a:	4b0e      	ldr	r3, [pc, #56]	@ (8002364 <HAL_TIM_MspPostInit+0x6c>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8002336:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800233a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002344:	2302      	movs	r3, #2
 8002346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002348:	2301      	movs	r3, #1
 800234a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	4619      	mov	r1, r3
 8002352:	4805      	ldr	r0, [pc, #20]	@ (8002368 <HAL_TIM_MspPostInit+0x70>)
 8002354:	f000 ffae 	bl	80032b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002358:	bf00      	nop
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40010000 	.word	0x40010000
 8002364:	40023800 	.word	0x40023800
 8002368:	40020000 	.word	0x40020000

0800236c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	@ 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a19      	ldr	r2, [pc, #100]	@ (80023f0 <HAL_UART_MspInit+0x84>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d12c      	bne.n	80023e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	4b18      	ldr	r3, [pc, #96]	@ (80023f4 <HAL_UART_MspInit+0x88>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	4a17      	ldr	r2, [pc, #92]	@ (80023f4 <HAL_UART_MspInit+0x88>)
 8002398:	f043 0310 	orr.w	r3, r3, #16
 800239c:	6453      	str	r3, [r2, #68]	@ 0x44
 800239e:	4b15      	ldr	r3, [pc, #84]	@ (80023f4 <HAL_UART_MspInit+0x88>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <HAL_UART_MspInit+0x88>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	4a10      	ldr	r2, [pc, #64]	@ (80023f4 <HAL_UART_MspInit+0x88>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ba:	4b0e      	ldr	r3, [pc, #56]	@ (80023f4 <HAL_UART_MspInit+0x88>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	2302      	movs	r3, #2
 80023ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023d8:	2307      	movs	r3, #7
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	4619      	mov	r1, r3
 80023e2:	4805      	ldr	r0, [pc, #20]	@ (80023f8 <HAL_UART_MspInit+0x8c>)
 80023e4:	f000 ff66 	bl	80032b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023e8:	bf00      	nop
 80023ea:	3728      	adds	r7, #40	@ 0x28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40011000 	.word	0x40011000
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000

080023fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08c      	sub	sp, #48	@ 0x30
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 800240c:	2300      	movs	r3, #0
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	4b2e      	ldr	r3, [pc, #184]	@ (80024cc <HAL_InitTick+0xd0>)
 8002412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002414:	4a2d      	ldr	r2, [pc, #180]	@ (80024cc <HAL_InitTick+0xd0>)
 8002416:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800241a:	6453      	str	r3, [r2, #68]	@ 0x44
 800241c:	4b2b      	ldr	r3, [pc, #172]	@ (80024cc <HAL_InitTick+0xd0>)
 800241e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002420:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002428:	f107 020c 	add.w	r2, r7, #12
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fb9a 	bl	8004b6c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002438:	f002 fb84 	bl	8004b44 <HAL_RCC_GetPCLK2Freq>
 800243c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800243e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002440:	4a23      	ldr	r2, [pc, #140]	@ (80024d0 <HAL_InitTick+0xd4>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0c9b      	lsrs	r3, r3, #18
 8002448:	3b01      	subs	r3, #1
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800244c:	4b21      	ldr	r3, [pc, #132]	@ (80024d4 <HAL_InitTick+0xd8>)
 800244e:	4a22      	ldr	r2, [pc, #136]	@ (80024d8 <HAL_InitTick+0xdc>)
 8002450:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8002452:	4b20      	ldr	r3, [pc, #128]	@ (80024d4 <HAL_InitTick+0xd8>)
 8002454:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002458:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800245a:	4a1e      	ldr	r2, [pc, #120]	@ (80024d4 <HAL_InitTick+0xd8>)
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8002460:	4b1c      	ldr	r3, [pc, #112]	@ (80024d4 <HAL_InitTick+0xd8>)
 8002462:	2200      	movs	r2, #0
 8002464:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002466:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <HAL_InitTick+0xd8>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246c:	4b19      	ldr	r3, [pc, #100]	@ (80024d4 <HAL_InitTick+0xd8>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8002472:	4818      	ldr	r0, [pc, #96]	@ (80024d4 <HAL_InitTick+0xd8>)
 8002474:	f002 fc35 	bl	8004ce2 <HAL_TIM_Base_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800247e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002482:	2b00      	cmp	r3, #0
 8002484:	d11b      	bne.n	80024be <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8002486:	4813      	ldr	r0, [pc, #76]	@ (80024d4 <HAL_InitTick+0xd8>)
 8002488:	f002 fc7a 	bl	8004d80 <HAL_TIM_Base_Start_IT>
 800248c:	4603      	mov	r3, r0
 800248e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002492:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002496:	2b00      	cmp	r3, #0
 8002498:	d111      	bne.n	80024be <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800249a:	201a      	movs	r0, #26
 800249c:	f000 fc12 	bl	8002cc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b0f      	cmp	r3, #15
 80024a4:	d808      	bhi.n	80024b8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80024a6:	2200      	movs	r2, #0
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	201a      	movs	r0, #26
 80024ac:	f000 fbee 	bl	8002c8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024b0:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <HAL_InitTick+0xe0>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e002      	b.n	80024be <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80024be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3730      	adds	r7, #48	@ 0x30
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	431bde83 	.word	0x431bde83
 80024d4:	200006d0 	.word	0x200006d0
 80024d8:	40014800 	.word	0x40014800
 80024dc:	20000004 	.word	0x20000004

080024e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <NMI_Handler+0x4>

080024e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <HardFault_Handler+0x4>

080024f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <MemManage_Handler+0x4>

080024f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <BusFault_Handler+0x4>

08002500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <UsageFault_Handler+0x4>

08002508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800251c:	4803      	ldr	r0, [pc, #12]	@ (800252c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800251e:	f002 fd9b 	bl	8005058 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002522:	4803      	ldr	r0, [pc, #12]	@ (8002530 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002524:	f002 fd98 	bl	8005058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200001d4 	.word	0x200001d4
 8002530:	200006d0 	.word	0x200006d0

08002534 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002538:	4802      	ldr	r0, [pc, #8]	@ (8002544 <TIM2_IRQHandler+0x10>)
 800253a:	f002 fd8d 	bl	8005058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	2000021c 	.word	0x2000021c

08002548 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800254c:	4802      	ldr	r0, [pc, #8]	@ (8002558 <DMA2_Stream0_IRQHandler+0x10>)
 800254e:	f000 fc75 	bl	8002e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000074 	.word	0x20000074

0800255c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <SystemInit+0x20>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002566:	4a05      	ldr	r2, [pc, #20]	@ (800257c <SystemInit+0x20>)
 8002568:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800256c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002580:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002584:	f7ff ffea 	bl	800255c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002588:	480c      	ldr	r0, [pc, #48]	@ (80025bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800258a:	490d      	ldr	r1, [pc, #52]	@ (80025c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800258c:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800258e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002590:	e002      	b.n	8002598 <LoopCopyDataInit>

08002592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002596:	3304      	adds	r3, #4

08002598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800259c:	d3f9      	bcc.n	8002592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025a0:	4c0a      	ldr	r4, [pc, #40]	@ (80025cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80025a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a4:	e001      	b.n	80025aa <LoopFillZerobss>

080025a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a8:	3204      	adds	r2, #4

080025aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025ac:	d3fb      	bcc.n	80025a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ae:	f006 fcb3 	bl	8008f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025b2:	f7fe fdf1 	bl	8001198 <main>
  bx  lr    
 80025b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80025bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80025c4:	08009098 	.word	0x08009098
  ldr r2, =_sbss
 80025c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80025cc:	2000506c 	.word	0x2000506c

080025d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d0:	e7fe      	b.n	80025d0 <ADC_IRQHandler>
	...

080025d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002614 <HAL_Init+0x40>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002614 <HAL_Init+0x40>)
 80025de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_Init+0x40>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002614 <HAL_Init+0x40>)
 80025ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f0:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <HAL_Init+0x40>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a07      	ldr	r2, [pc, #28]	@ (8002614 <HAL_Init+0x40>)
 80025f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025fc:	2003      	movs	r0, #3
 80025fe:	f000 fb3a 	bl	8002c76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002602:	200f      	movs	r0, #15
 8002604:	f7ff fefa 	bl	80023fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002608:	f7ff fcba 	bl	8001f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40023c00 	.word	0x40023c00

08002618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800261c:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_IncTick+0x20>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	4b06      	ldr	r3, [pc, #24]	@ (800263c <HAL_IncTick+0x24>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4413      	add	r3, r2
 8002628:	4a04      	ldr	r2, [pc, #16]	@ (800263c <HAL_IncTick+0x24>)
 800262a:	6013      	str	r3, [r2, #0]
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000008 	.word	0x20000008
 800263c:	20000718 	.word	0x20000718

08002640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return uwTick;
 8002644:	4b03      	ldr	r3, [pc, #12]	@ (8002654 <HAL_GetTick+0x14>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000718 	.word	0x20000718

08002658 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e033      	b.n	80026d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff fcae 	bl	8001fd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	d118      	bne.n	80026c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800269e:	f023 0302 	bic.w	r3, r3, #2
 80026a2:	f043 0202 	orr.w	r2, r3, #2
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f93a 	bl	8002924 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f023 0303 	bic.w	r3, r3, #3
 80026be:	f043 0201 	orr.w	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80026c6:	e001      	b.n	80026cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x1c>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e105      	b.n	8002908 <HAL_ADC_ConfigChannel+0x228>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b09      	cmp	r3, #9
 800270a:	d925      	bls.n	8002758 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68d9      	ldr	r1, [r3, #12]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	3b1e      	subs	r3, #30
 8002722:	2207      	movs	r2, #7
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43da      	mvns	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	400a      	ands	r2, r1
 8002730:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68d9      	ldr	r1, [r3, #12]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	4618      	mov	r0, r3
 8002744:	4603      	mov	r3, r0
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4403      	add	r3, r0
 800274a:	3b1e      	subs	r3, #30
 800274c:	409a      	lsls	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	e022      	b.n	800279e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6919      	ldr	r1, [r3, #16]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	2207      	movs	r2, #7
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	400a      	ands	r2, r1
 800277a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6919      	ldr	r1, [r3, #16]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	4618      	mov	r0, r3
 800278e:	4603      	mov	r3, r0
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4403      	add	r3, r0
 8002794:	409a      	lsls	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d824      	bhi.n	80027f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	3b05      	subs	r3, #5
 80027b8:	221f      	movs	r2, #31
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43da      	mvns	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	400a      	ands	r2, r1
 80027c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	4618      	mov	r0, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3b05      	subs	r3, #5
 80027e2:	fa00 f203 	lsl.w	r2, r0, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80027ee:	e04c      	b.n	800288a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	d824      	bhi.n	8002842 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	3b23      	subs	r3, #35	@ 0x23
 800280a:	221f      	movs	r2, #31
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43da      	mvns	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	400a      	ands	r2, r1
 8002818:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	4618      	mov	r0, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	3b23      	subs	r3, #35	@ 0x23
 8002834:	fa00 f203 	lsl.w	r2, r0, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002840:	e023      	b.n	800288a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	3b41      	subs	r3, #65	@ 0x41
 8002854:	221f      	movs	r2, #31
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	400a      	ands	r2, r1
 8002862:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	4618      	mov	r0, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	3b41      	subs	r3, #65	@ 0x41
 800287e:	fa00 f203 	lsl.w	r2, r0, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800288a:	4b22      	ldr	r3, [pc, #136]	@ (8002914 <HAL_ADC_ConfigChannel+0x234>)
 800288c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a21      	ldr	r2, [pc, #132]	@ (8002918 <HAL_ADC_ConfigChannel+0x238>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d109      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x1cc>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b12      	cmp	r3, #18
 800289e:	d105      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a19      	ldr	r2, [pc, #100]	@ (8002918 <HAL_ADC_ConfigChannel+0x238>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d123      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x21e>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	d003      	beq.n	80028c6 <HAL_ADC_ConfigChannel+0x1e6>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b11      	cmp	r3, #17
 80028c4:	d11b      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d111      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028da:	4b10      	ldr	r3, [pc, #64]	@ (800291c <HAL_ADC_ConfigChannel+0x23c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a10      	ldr	r2, [pc, #64]	@ (8002920 <HAL_ADC_ConfigChannel+0x240>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	0c9a      	lsrs	r2, r3, #18
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028f0:	e002      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	3b01      	subs	r3, #1
 80028f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f9      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40012300 	.word	0x40012300
 8002918:	40012000 	.word	0x40012000
 800291c:	20000000 	.word	0x20000000
 8002920:	431bde83 	.word	0x431bde83

08002924 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800292c:	4b79      	ldr	r3, [pc, #484]	@ (8002b14 <ADC_Init+0x1f0>)
 800292e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	431a      	orrs	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	021a      	lsls	r2, r3, #8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800297c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800299e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6899      	ldr	r1, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b6:	4a58      	ldr	r2, [pc, #352]	@ (8002b18 <ADC_Init+0x1f4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d022      	beq.n	8002a02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6899      	ldr	r1, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6899      	ldr	r1, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	e00f      	b.n	8002a22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a20:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0202 	bic.w	r2, r2, #2
 8002a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6899      	ldr	r1, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	7e1b      	ldrb	r3, [r3, #24]
 8002a3c:	005a      	lsls	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01b      	beq.n	8002a88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a5e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	035a      	lsls	r2, r3, #13
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	e007      	b.n	8002a98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a96:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	051a      	lsls	r2, r3, #20
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002acc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6899      	ldr	r1, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ada:	025a      	lsls	r2, r3, #9
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6899      	ldr	r1, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	029a      	lsls	r2, r3, #10
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	609a      	str	r2, [r3, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	40012300 	.word	0x40012300
 8002b18:	0f000001 	.word	0x0f000001

08002b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b4e:	4a04      	ldr	r2, [pc, #16]	@ (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	60d3      	str	r3, [r2, #12]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b68:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <__NVIC_GetPriorityGrouping+0x18>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	f003 0307 	and.w	r3, r3, #7
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	db0b      	blt.n	8002baa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	f003 021f 	and.w	r2, r3, #31
 8002b98:	4907      	ldr	r1, [pc, #28]	@ (8002bb8 <__NVIC_EnableIRQ+0x38>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000e100 	.word	0xe000e100

08002bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	6039      	str	r1, [r7, #0]
 8002bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	db0a      	blt.n	8002be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	490c      	ldr	r1, [pc, #48]	@ (8002c08 <__NVIC_SetPriority+0x4c>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	0112      	lsls	r2, r2, #4
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	440b      	add	r3, r1
 8002be0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be4:	e00a      	b.n	8002bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	4908      	ldr	r1, [pc, #32]	@ (8002c0c <__NVIC_SetPriority+0x50>)
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	3b04      	subs	r3, #4
 8002bf4:	0112      	lsls	r2, r2, #4
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	761a      	strb	r2, [r3, #24]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000e100 	.word	0xe000e100
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	@ 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f1c3 0307 	rsb	r3, r3, #7
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	bf28      	it	cs
 8002c2e:	2304      	movcs	r3, #4
 8002c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3304      	adds	r3, #4
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d902      	bls.n	8002c40 <NVIC_EncodePriority+0x30>
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3b03      	subs	r3, #3
 8002c3e:	e000      	b.n	8002c42 <NVIC_EncodePriority+0x32>
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	f04f 32ff 	mov.w	r2, #4294967295
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	401a      	ands	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c58:	f04f 31ff 	mov.w	r1, #4294967295
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	43d9      	mvns	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	4313      	orrs	r3, r2
         );
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3724      	adds	r7, #36	@ 0x24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ff4c 	bl	8002b1c <__NVIC_SetPriorityGrouping>
}
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c9e:	f7ff ff61 	bl	8002b64 <__NVIC_GetPriorityGrouping>
 8002ca2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	6978      	ldr	r0, [r7, #20]
 8002caa:	f7ff ffb1 	bl	8002c10 <NVIC_EncodePriority>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ff80 	bl	8002bbc <__NVIC_SetPriority>
}
 8002cbc:	bf00      	nop
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ff54 	bl	8002b80 <__NVIC_EnableIRQ>
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cec:	f7ff fca8 	bl	8002640 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e099      	b.n	8002e30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d1c:	e00f      	b.n	8002d3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d1e:	f7ff fc8f 	bl	8002640 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d908      	bls.n	8002d3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2203      	movs	r2, #3
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e078      	b.n	8002e30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e8      	bne.n	8002d1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4b38      	ldr	r3, [pc, #224]	@ (8002e38 <HAL_DMA_Init+0x158>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d107      	bne.n	8002da8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	4313      	orrs	r3, r2
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f023 0307 	bic.w	r3, r3, #7
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d117      	bne.n	8002e02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00e      	beq.n	8002e02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f9e9 	bl	80031bc <DMA_CheckFifoParam>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2240      	movs	r2, #64	@ 0x40
 8002df4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e016      	b.n	8002e30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f9a0 	bl	8003150 <DMA_CalcBaseAndBitshift>
 8002e10:	4603      	mov	r3, r0
 8002e12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e18:	223f      	movs	r2, #63	@ 0x3f
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	f010803f 	.word	0xf010803f

08002e3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e48:	4b8e      	ldr	r3, [pc, #568]	@ (8003084 <HAL_DMA_IRQHandler+0x248>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a8e      	ldr	r2, [pc, #568]	@ (8003088 <HAL_DMA_IRQHandler+0x24c>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	0a9b      	lsrs	r3, r3, #10
 8002e54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e66:	2208      	movs	r2, #8
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d01a      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0204 	bic.w	r2, r2, #4
 8002e8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	2208      	movs	r2, #8
 8002e96:	409a      	lsls	r2, r3
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eac:	2201      	movs	r2, #1
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d012      	beq.n	8002ede <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00b      	beq.n	8002ede <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eca:	2201      	movs	r2, #1
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed6:	f043 0202 	orr.w	r2, r3, #2
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d012      	beq.n	8002f14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00b      	beq.n	8002f14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f00:	2204      	movs	r2, #4
 8002f02:	409a      	lsls	r2, r3
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0c:	f043 0204 	orr.w	r2, r3, #4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f18:	2210      	movs	r2, #16
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d043      	beq.n	8002fac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d03c      	beq.n	8002fac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f36:	2210      	movs	r2, #16
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d018      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d108      	bne.n	8002f6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d024      	beq.n	8002fac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	4798      	blx	r3
 8002f6a:	e01f      	b.n	8002fac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01b      	beq.n	8002fac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	4798      	blx	r3
 8002f7c:	e016      	b.n	8002fac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d107      	bne.n	8002f9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0208 	bic.w	r2, r2, #8
 8002f9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 808f 	beq.w	80030dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8087 	beq.w	80030dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d136      	bne.n	8003054 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0216 	bic.w	r2, r2, #22
 8002ff4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003004:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <HAL_DMA_IRQHandler+0x1da>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0208 	bic.w	r2, r2, #8
 8003024:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302a:	223f      	movs	r2, #63	@ 0x3f
 800302c:	409a      	lsls	r2, r3
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003046:	2b00      	cmp	r3, #0
 8003048:	d07e      	beq.n	8003148 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	4798      	blx	r3
        }
        return;
 8003052:	e079      	b.n	8003148 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d01d      	beq.n	800309e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10d      	bne.n	800308c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003074:	2b00      	cmp	r3, #0
 8003076:	d031      	beq.n	80030dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4798      	blx	r3
 8003080:	e02c      	b.n	80030dc <HAL_DMA_IRQHandler+0x2a0>
 8003082:	bf00      	nop
 8003084:	20000000 	.word	0x20000000
 8003088:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d023      	beq.n	80030dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4798      	blx	r3
 800309c:	e01e      	b.n	80030dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10f      	bne.n	80030cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0210 	bic.w	r2, r2, #16
 80030ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d032      	beq.n	800314a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d022      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2205      	movs	r2, #5
 80030f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	3301      	adds	r3, #1
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	429a      	cmp	r2, r3
 8003112:	d307      	bcc.n	8003124 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f2      	bne.n	8003108 <HAL_DMA_IRQHandler+0x2cc>
 8003122:	e000      	b.n	8003126 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003124:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
 8003146:	e000      	b.n	800314a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003148:	bf00      	nop
    }
  }
}
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	3b10      	subs	r3, #16
 8003160:	4a14      	ldr	r2, [pc, #80]	@ (80031b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800316a:	4a13      	ldr	r2, [pc, #76]	@ (80031b8 <DMA_CalcBaseAndBitshift+0x68>)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b03      	cmp	r3, #3
 800317c:	d909      	bls.n	8003192 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	1d1a      	adds	r2, r3, #4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003190:	e007      	b.n	80031a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800319a:	f023 0303 	bic.w	r3, r3, #3
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	aaaaaaab 	.word	0xaaaaaaab
 80031b8:	08009080 	.word	0x08009080

080031bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d11f      	bne.n	8003216 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d856      	bhi.n	800328a <DMA_CheckFifoParam+0xce>
 80031dc:	a201      	add	r2, pc, #4	@ (adr r2, 80031e4 <DMA_CheckFifoParam+0x28>)
 80031de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e2:	bf00      	nop
 80031e4:	080031f5 	.word	0x080031f5
 80031e8:	08003207 	.word	0x08003207
 80031ec:	080031f5 	.word	0x080031f5
 80031f0:	0800328b 	.word	0x0800328b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d046      	beq.n	800328e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003204:	e043      	b.n	800328e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800320e:	d140      	bne.n	8003292 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003214:	e03d      	b.n	8003292 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800321e:	d121      	bne.n	8003264 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b03      	cmp	r3, #3
 8003224:	d837      	bhi.n	8003296 <DMA_CheckFifoParam+0xda>
 8003226:	a201      	add	r2, pc, #4	@ (adr r2, 800322c <DMA_CheckFifoParam+0x70>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	0800323d 	.word	0x0800323d
 8003230:	08003243 	.word	0x08003243
 8003234:	0800323d 	.word	0x0800323d
 8003238:	08003255 	.word	0x08003255
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
      break;
 8003240:	e030      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003246:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d025      	beq.n	800329a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003252:	e022      	b.n	800329a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800325c:	d11f      	bne.n	800329e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003262:	e01c      	b.n	800329e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d903      	bls.n	8003272 <DMA_CheckFifoParam+0xb6>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d003      	beq.n	8003278 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003270:	e018      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
      break;
 8003276:	e015      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00e      	beq.n	80032a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
      break;
 8003288:	e00b      	b.n	80032a2 <DMA_CheckFifoParam+0xe6>
      break;
 800328a:	bf00      	nop
 800328c:	e00a      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      break;
 800328e:	bf00      	nop
 8003290:	e008      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003292:	bf00      	nop
 8003294:	e006      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003296:	bf00      	nop
 8003298:	e004      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      break;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      break;
 80032a2:	bf00      	nop
    }
  } 
  
  return status; 
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop

080032b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	@ 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	e159      	b.n	8003584 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032d0:	2201      	movs	r2, #1
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	f040 8148 	bne.w	800357e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d005      	beq.n	8003306 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003302:	2b02      	cmp	r3, #2
 8003304:	d130      	bne.n	8003368 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	2203      	movs	r2, #3
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800333c:	2201      	movs	r2, #1
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 0201 	and.w	r2, r3, #1
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b03      	cmp	r3, #3
 8003372:	d017      	beq.n	80033a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	2203      	movs	r2, #3
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d123      	bne.n	80033f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	08da      	lsrs	r2, r3, #3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3208      	adds	r2, #8
 80033b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	220f      	movs	r2, #15
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	08da      	lsrs	r2, r3, #3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3208      	adds	r2, #8
 80033f2:	69b9      	ldr	r1, [r7, #24]
 80033f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	2203      	movs	r2, #3
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0203 	and.w	r2, r3, #3
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a2 	beq.w	800357e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	4b57      	ldr	r3, [pc, #348]	@ (800359c <HAL_GPIO_Init+0x2e8>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003442:	4a56      	ldr	r2, [pc, #344]	@ (800359c <HAL_GPIO_Init+0x2e8>)
 8003444:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003448:	6453      	str	r3, [r2, #68]	@ 0x44
 800344a:	4b54      	ldr	r3, [pc, #336]	@ (800359c <HAL_GPIO_Init+0x2e8>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003456:	4a52      	ldr	r2, [pc, #328]	@ (80035a0 <HAL_GPIO_Init+0x2ec>)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	3302      	adds	r3, #2
 800345e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	220f      	movs	r2, #15
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a49      	ldr	r2, [pc, #292]	@ (80035a4 <HAL_GPIO_Init+0x2f0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d019      	beq.n	80034b6 <HAL_GPIO_Init+0x202>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a48      	ldr	r2, [pc, #288]	@ (80035a8 <HAL_GPIO_Init+0x2f4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_GPIO_Init+0x1fe>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a47      	ldr	r2, [pc, #284]	@ (80035ac <HAL_GPIO_Init+0x2f8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00d      	beq.n	80034ae <HAL_GPIO_Init+0x1fa>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a46      	ldr	r2, [pc, #280]	@ (80035b0 <HAL_GPIO_Init+0x2fc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d007      	beq.n	80034aa <HAL_GPIO_Init+0x1f6>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a45      	ldr	r2, [pc, #276]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <HAL_GPIO_Init+0x1f2>
 80034a2:	2304      	movs	r3, #4
 80034a4:	e008      	b.n	80034b8 <HAL_GPIO_Init+0x204>
 80034a6:	2307      	movs	r3, #7
 80034a8:	e006      	b.n	80034b8 <HAL_GPIO_Init+0x204>
 80034aa:	2303      	movs	r3, #3
 80034ac:	e004      	b.n	80034b8 <HAL_GPIO_Init+0x204>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e002      	b.n	80034b8 <HAL_GPIO_Init+0x204>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <HAL_GPIO_Init+0x204>
 80034b6:	2300      	movs	r3, #0
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	f002 0203 	and.w	r2, r2, #3
 80034be:	0092      	lsls	r2, r2, #2
 80034c0:	4093      	lsls	r3, r2
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034c8:	4935      	ldr	r1, [pc, #212]	@ (80035a0 <HAL_GPIO_Init+0x2ec>)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	3302      	adds	r3, #2
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034d6:	4b38      	ldr	r3, [pc, #224]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034fa:	4a2f      	ldr	r2, [pc, #188]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003500:	4b2d      	ldr	r3, [pc, #180]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003524:	4a24      	ldr	r2, [pc, #144]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800352a:	4b23      	ldr	r3, [pc, #140]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800354e:	4a1a      	ldr	r2, [pc, #104]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003554:	4b18      	ldr	r3, [pc, #96]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003578:	4a0f      	ldr	r2, [pc, #60]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3301      	adds	r3, #1
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b0f      	cmp	r3, #15
 8003588:	f67f aea2 	bls.w	80032d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3724      	adds	r7, #36	@ 0x24
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
 80035a0:	40013800 	.word	0x40013800
 80035a4:	40020000 	.word	0x40020000
 80035a8:	40020400 	.word	0x40020400
 80035ac:	40020800 	.word	0x40020800
 80035b0:	40020c00 	.word	0x40020c00
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40013c00 	.word	0x40013c00

080035bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
 80035c8:	4613      	mov	r3, r2
 80035ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035cc:	787b      	ldrb	r3, [r7, #1]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035d8:	e003      	b.n	80035e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035da:	887b      	ldrh	r3, [r7, #2]
 80035dc:	041a      	lsls	r2, r3, #16
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	619a      	str	r2, [r3, #24]
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b085      	sub	sp, #20
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003600:	887a      	ldrh	r2, [r7, #2]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4013      	ands	r3, r2
 8003606:	041a      	lsls	r2, r3, #16
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	43d9      	mvns	r1, r3
 800360c:	887b      	ldrh	r3, [r7, #2]
 800360e:	400b      	ands	r3, r1
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	619a      	str	r2, [r3, #24]
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e12b      	b.n	800388e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fe fd3a 	bl	80020c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2224      	movs	r2, #36	@ 0x24
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003676:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003686:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003688:	f001 fa48 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 800368c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4a81      	ldr	r2, [pc, #516]	@ (8003898 <HAL_I2C_Init+0x274>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d807      	bhi.n	80036a8 <HAL_I2C_Init+0x84>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4a80      	ldr	r2, [pc, #512]	@ (800389c <HAL_I2C_Init+0x278>)
 800369c:	4293      	cmp	r3, r2
 800369e:	bf94      	ite	ls
 80036a0:	2301      	movls	r3, #1
 80036a2:	2300      	movhi	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e006      	b.n	80036b6 <HAL_I2C_Init+0x92>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a7d      	ldr	r2, [pc, #500]	@ (80038a0 <HAL_I2C_Init+0x27c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	bf94      	ite	ls
 80036b0:	2301      	movls	r3, #1
 80036b2:	2300      	movhi	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e0e7      	b.n	800388e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4a78      	ldr	r2, [pc, #480]	@ (80038a4 <HAL_I2C_Init+0x280>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	0c9b      	lsrs	r3, r3, #18
 80036c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4a6a      	ldr	r2, [pc, #424]	@ (8003898 <HAL_I2C_Init+0x274>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d802      	bhi.n	80036f8 <HAL_I2C_Init+0xd4>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	3301      	adds	r3, #1
 80036f6:	e009      	b.n	800370c <HAL_I2C_Init+0xe8>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80036fe:	fb02 f303 	mul.w	r3, r2, r3
 8003702:	4a69      	ldr	r2, [pc, #420]	@ (80038a8 <HAL_I2C_Init+0x284>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	099b      	lsrs	r3, r3, #6
 800370a:	3301      	adds	r3, #1
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	430b      	orrs	r3, r1
 8003712:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800371e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	495c      	ldr	r1, [pc, #368]	@ (8003898 <HAL_I2C_Init+0x274>)
 8003728:	428b      	cmp	r3, r1
 800372a:	d819      	bhi.n	8003760 <HAL_I2C_Init+0x13c>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1e59      	subs	r1, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	fbb1 f3f3 	udiv	r3, r1, r3
 800373a:	1c59      	adds	r1, r3, #1
 800373c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003740:	400b      	ands	r3, r1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_I2C_Init+0x138>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1e59      	subs	r1, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fbb1 f3f3 	udiv	r3, r1, r3
 8003754:	3301      	adds	r3, #1
 8003756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375a:	e051      	b.n	8003800 <HAL_I2C_Init+0x1dc>
 800375c:	2304      	movs	r3, #4
 800375e:	e04f      	b.n	8003800 <HAL_I2C_Init+0x1dc>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d111      	bne.n	800378c <HAL_I2C_Init+0x168>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1e58      	subs	r0, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	440b      	add	r3, r1
 8003776:	fbb0 f3f3 	udiv	r3, r0, r3
 800377a:	3301      	adds	r3, #1
 800377c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003780:	2b00      	cmp	r3, #0
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e012      	b.n	80037b2 <HAL_I2C_Init+0x18e>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1e58      	subs	r0, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	0099      	lsls	r1, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a2:	3301      	adds	r3, #1
 80037a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Init+0x196>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e022      	b.n	8003800 <HAL_I2C_Init+0x1dc>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10e      	bne.n	80037e0 <HAL_I2C_Init+0x1bc>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1e58      	subs	r0, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6859      	ldr	r1, [r3, #4]
 80037ca:	460b      	mov	r3, r1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	440b      	add	r3, r1
 80037d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d4:	3301      	adds	r3, #1
 80037d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037de:	e00f      	b.n	8003800 <HAL_I2C_Init+0x1dc>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1e58      	subs	r0, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	0099      	lsls	r1, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f6:	3301      	adds	r3, #1
 80037f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	6809      	ldr	r1, [r1, #0]
 8003804:	4313      	orrs	r3, r2
 8003806:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69da      	ldr	r2, [r3, #28]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800382e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6911      	ldr	r1, [r2, #16]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68d2      	ldr	r2, [r2, #12]
 800383a:	4311      	orrs	r1, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	430b      	orrs	r3, r1
 8003842:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	000186a0 	.word	0x000186a0
 800389c:	001e847f 	.word	0x001e847f
 80038a0:	003d08ff 	.word	0x003d08ff
 80038a4:	431bde83 	.word	0x431bde83
 80038a8:	10624dd3 	.word	0x10624dd3

080038ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08c      	sub	sp, #48	@ 0x30
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	4608      	mov	r0, r1
 80038b6:	4611      	mov	r1, r2
 80038b8:	461a      	mov	r2, r3
 80038ba:	4603      	mov	r3, r0
 80038bc:	817b      	strh	r3, [r7, #10]
 80038be:	460b      	mov	r3, r1
 80038c0:	813b      	strh	r3, [r7, #8]
 80038c2:	4613      	mov	r3, r2
 80038c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038c6:	f7fe febb 	bl	8002640 <HAL_GetTick>
 80038ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	f040 8214 	bne.w	8003d02 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	2319      	movs	r3, #25
 80038e0:	2201      	movs	r2, #1
 80038e2:	497b      	ldr	r1, [pc, #492]	@ (8003ad0 <HAL_I2C_Mem_Read+0x224>)
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fafb 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
 80038f2:	e207      	b.n	8003d04 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_I2C_Mem_Read+0x56>
 80038fe:	2302      	movs	r3, #2
 8003900:	e200      	b.n	8003d04 <HAL_I2C_Mem_Read+0x458>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b01      	cmp	r3, #1
 8003916:	d007      	beq.n	8003928 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003936:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2222      	movs	r2, #34	@ 0x22
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2240      	movs	r2, #64	@ 0x40
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003952:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003958:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4a5b      	ldr	r2, [pc, #364]	@ (8003ad4 <HAL_I2C_Mem_Read+0x228>)
 8003968:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800396a:	88f8      	ldrh	r0, [r7, #6]
 800396c:	893a      	ldrh	r2, [r7, #8]
 800396e:	8979      	ldrh	r1, [r7, #10]
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	4603      	mov	r3, r0
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f9c8 	bl	8003d10 <I2C_RequestMemoryRead>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e1bc      	b.n	8003d04 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398e:	2b00      	cmp	r3, #0
 8003990:	d113      	bne.n	80039ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003992:	2300      	movs	r3, #0
 8003994:	623b      	str	r3, [r7, #32]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	623b      	str	r3, [r7, #32]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	623b      	str	r3, [r7, #32]
 80039a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e190      	b.n	8003cdc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d11b      	bne.n	80039fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e170      	b.n	8003cdc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d11b      	bne.n	8003a3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	e150      	b.n	8003cdc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a50:	e144      	b.n	8003cdc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	f200 80f1 	bhi.w	8003c3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d123      	bne.n	8003aac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fb9b 	bl	80041a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e145      	b.n	8003d04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aaa:	e117      	b.n	8003cdc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d14e      	bne.n	8003b52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aba:	2200      	movs	r2, #0
 8003abc:	4906      	ldr	r1, [pc, #24]	@ (8003ad8 <HAL_I2C_Mem_Read+0x22c>)
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fa0e 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d008      	beq.n	8003adc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e11a      	b.n	8003d04 <HAL_I2C_Mem_Read+0x458>
 8003ace:	bf00      	nop
 8003ad0:	00100002 	.word	0x00100002
 8003ad4:	ffff0000 	.word	0xffff0000
 8003ad8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b50:	e0c4      	b.n	8003cdc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b58:	2200      	movs	r2, #0
 8003b5a:	496c      	ldr	r1, [pc, #432]	@ (8003d0c <HAL_I2C_Mem_Read+0x460>)
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f9bf 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0cb      	b.n	8003d04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	4955      	ldr	r1, [pc, #340]	@ (8003d0c <HAL_I2C_Mem_Read+0x460>)
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f991 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e09d      	b.n	8003d04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c3c:	e04e      	b.n	8003cdc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 faae 	bl	80041a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e058      	b.n	8003d04 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d124      	bne.n	8003cdc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d107      	bne.n	8003caa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ca8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f47f aeb6 	bne.w	8003a52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d02:	2302      	movs	r3, #2
  }
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3728      	adds	r7, #40	@ 0x28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	00010004 	.word	0x00010004

08003d10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	4608      	mov	r0, r1
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4603      	mov	r3, r0
 8003d20:	817b      	strh	r3, [r7, #10]
 8003d22:	460b      	mov	r3, r1
 8003d24:	813b      	strh	r3, [r7, #8]
 8003d26:	4613      	mov	r3, r2
 8003d28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f8c2 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00d      	beq.n	8003d7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d70:	d103      	bne.n	8003d7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e0aa      	b.n	8003ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d7e:	897b      	ldrh	r3, [r7, #10]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	6a3a      	ldr	r2, [r7, #32]
 8003d92:	4952      	ldr	r1, [pc, #328]	@ (8003edc <I2C_RequestMemoryRead+0x1cc>)
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f91d 	bl	8003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e097      	b.n	8003ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dbc:	6a39      	ldr	r1, [r7, #32]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f9a8 	bl	8004114 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d107      	bne.n	8003de2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e076      	b.n	8003ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d105      	bne.n	8003df8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dec:	893b      	ldrh	r3, [r7, #8]
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	611a      	str	r2, [r3, #16]
 8003df6:	e021      	b.n	8003e3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003df8:	893b      	ldrh	r3, [r7, #8]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e08:	6a39      	ldr	r1, [r7, #32]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f982 	bl	8004114 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00d      	beq.n	8003e32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d107      	bne.n	8003e2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e050      	b.n	8003ed4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e32:	893b      	ldrh	r3, [r7, #8]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e3e:	6a39      	ldr	r1, [r7, #32]
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f967 	bl	8004114 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00d      	beq.n	8003e68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d107      	bne.n	8003e64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e035      	b.n	8003ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f82b 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00d      	beq.n	8003eac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e9e:	d103      	bne.n	8003ea8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ea6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e013      	b.n	8003ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003eac:	897b      	ldrh	r3, [r7, #10]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	6a3a      	ldr	r2, [r7, #32]
 8003ec0:	4906      	ldr	r1, [pc, #24]	@ (8003edc <I2C_RequestMemoryRead+0x1cc>)
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f886 	bl	8003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	00010002 	.word	0x00010002

08003ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef0:	e048      	b.n	8003f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d044      	beq.n	8003f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efa:	f7fe fba1 	bl	8002640 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d302      	bcc.n	8003f10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d139      	bne.n	8003f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	0c1b      	lsrs	r3, r3, #16
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d10d      	bne.n	8003f36 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	43da      	mvns	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4013      	ands	r3, r2
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	e00c      	b.n	8003f50 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	43da      	mvns	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	4013      	ands	r3, r2
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bf0c      	ite	eq
 8003f48:	2301      	moveq	r3, #1
 8003f4a:	2300      	movne	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d116      	bne.n	8003f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f70:	f043 0220 	orr.w	r2, r3, #32
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e023      	b.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	0c1b      	lsrs	r3, r3, #16
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d10d      	bne.n	8003faa <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	43da      	mvns	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	e00c      	b.n	8003fc4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	43da      	mvns	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d093      	beq.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fe2:	e071      	b.n	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ff2:	d123      	bne.n	800403c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004002:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800400c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	f043 0204 	orr.w	r2, r3, #4
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e067      	b.n	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004042:	d041      	beq.n	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004044:	f7fe fafc 	bl	8002640 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	429a      	cmp	r2, r3
 8004052:	d302      	bcc.n	800405a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d136      	bne.n	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d10c      	bne.n	800407e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	43da      	mvns	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4013      	ands	r3, r2
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf14      	ite	ne
 8004076:	2301      	movne	r3, #1
 8004078:	2300      	moveq	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	e00b      	b.n	8004096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	43da      	mvns	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4013      	ands	r3, r2
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf14      	ite	ne
 8004090:	2301      	movne	r3, #1
 8004092:	2300      	moveq	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d016      	beq.n	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b4:	f043 0220 	orr.w	r2, r3, #32
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e021      	b.n	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	0c1b      	lsrs	r3, r3, #16
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d10c      	bne.n	80040ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	43da      	mvns	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bf14      	ite	ne
 80040e4:	2301      	movne	r3, #1
 80040e6:	2300      	moveq	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e00b      	b.n	8004104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	43da      	mvns	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4013      	ands	r3, r2
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bf14      	ite	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	2300      	moveq	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	f47f af6d 	bne.w	8003fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004120:	e034      	b.n	800418c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f89b 	bl	800425e <I2C_IsAcknowledgeFailed>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e034      	b.n	800419c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d028      	beq.n	800418c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413a:	f7fe fa81 	bl	8002640 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d11d      	bne.n	800418c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800415a:	2b80      	cmp	r3, #128	@ 0x80
 800415c:	d016      	beq.n	800418c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e007      	b.n	800419c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004196:	2b80      	cmp	r3, #128	@ 0x80
 8004198:	d1c3      	bne.n	8004122 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041b0:	e049      	b.n	8004246 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d119      	bne.n	80041f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0210 	mvn.w	r2, #16
 80041c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e030      	b.n	8004256 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f4:	f7fe fa24 	bl	8002640 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	429a      	cmp	r2, r3
 8004202:	d302      	bcc.n	800420a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d11d      	bne.n	8004246 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004214:	2b40      	cmp	r3, #64	@ 0x40
 8004216:	d016      	beq.n	8004246 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	f043 0220 	orr.w	r2, r3, #32
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e007      	b.n	8004256 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004250:	2b40      	cmp	r3, #64	@ 0x40
 8004252:	d1ae      	bne.n	80041b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004274:	d11b      	bne.n	80042ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800427e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429a:	f043 0204 	orr.w	r2, r3, #4
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e267      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d075      	beq.n	80043c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042da:	4b88      	ldr	r3, [pc, #544]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d00c      	beq.n	8004300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042e6:	4b85      	ldr	r3, [pc, #532]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d112      	bne.n	8004318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f2:	4b82      	ldr	r3, [pc, #520]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042fe:	d10b      	bne.n	8004318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004300:	4b7e      	ldr	r3, [pc, #504]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d05b      	beq.n	80043c4 <HAL_RCC_OscConfig+0x108>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d157      	bne.n	80043c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e242      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004320:	d106      	bne.n	8004330 <HAL_RCC_OscConfig+0x74>
 8004322:	4b76      	ldr	r3, [pc, #472]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a75      	ldr	r2, [pc, #468]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e01d      	b.n	800436c <HAL_RCC_OscConfig+0xb0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x98>
 800433a:	4b70      	ldr	r3, [pc, #448]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6f      	ldr	r2, [pc, #444]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b6d      	ldr	r3, [pc, #436]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6c      	ldr	r2, [pc, #432]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e00b      	b.n	800436c <HAL_RCC_OscConfig+0xb0>
 8004354:	4b69      	ldr	r3, [pc, #420]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a68      	ldr	r2, [pc, #416]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 800435a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4b66      	ldr	r3, [pc, #408]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a65      	ldr	r2, [pc, #404]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800436a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fe f964 	bl	8002640 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800437c:	f7fe f960 	bl	8002640 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	@ 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e207      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b5b      	ldr	r3, [pc, #364]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0xc0>
 800439a:	e014      	b.n	80043c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fe f950 	bl	8002640 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fe f94c 	bl	8002640 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	@ 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1f3      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b6:	4b51      	ldr	r3, [pc, #324]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0xe8>
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d063      	beq.n	800449a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d2:	4b4a      	ldr	r3, [pc, #296]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043de:	4b47      	ldr	r3, [pc, #284]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d11c      	bne.n	8004424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ea:	4b44      	ldr	r3, [pc, #272]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d116      	bne.n	8004424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	4b41      	ldr	r3, [pc, #260]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_RCC_OscConfig+0x152>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d001      	beq.n	800440e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e1c7      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440e:	4b3b      	ldr	r3, [pc, #236]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4937      	ldr	r1, [pc, #220]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004422:	e03a      	b.n	800449a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800442c:	4b34      	ldr	r3, [pc, #208]	@ (8004500 <HAL_RCC_OscConfig+0x244>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fe f905 	bl	8002640 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443a:	f7fe f901 	bl	8002640 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e1a8      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444c:	4b2b      	ldr	r3, [pc, #172]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b28      	ldr	r3, [pc, #160]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4925      	ldr	r1, [pc, #148]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]
 800446c:	e015      	b.n	800449a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446e:	4b24      	ldr	r3, [pc, #144]	@ (8004500 <HAL_RCC_OscConfig+0x244>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fe f8e4 	bl	8002640 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800447c:	f7fe f8e0 	bl	8002640 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e187      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448e:	4b1b      	ldr	r3, [pc, #108]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d036      	beq.n	8004514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ae:	4b15      	ldr	r3, [pc, #84]	@ (8004504 <HAL_RCC_OscConfig+0x248>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fe f8c4 	bl	8002640 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fe f8c0 	bl	8002640 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e167      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ce:	4b0b      	ldr	r3, [pc, #44]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80044d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x200>
 80044da:	e01b      	b.n	8004514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044dc:	4b09      	ldr	r3, [pc, #36]	@ (8004504 <HAL_RCC_OscConfig+0x248>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e2:	f7fe f8ad 	bl	8002640 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e8:	e00e      	b.n	8004508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ea:	f7fe f8a9 	bl	8002640 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d907      	bls.n	8004508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e150      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 80044fc:	40023800 	.word	0x40023800
 8004500:	42470000 	.word	0x42470000
 8004504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004508:	4b88      	ldr	r3, [pc, #544]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 800450a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ea      	bne.n	80044ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8097 	beq.w	8004650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004522:	2300      	movs	r3, #0
 8004524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004526:	4b81      	ldr	r3, [pc, #516]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10f      	bne.n	8004552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	4b7d      	ldr	r3, [pc, #500]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	4a7c      	ldr	r2, [pc, #496]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004540:	6413      	str	r3, [r2, #64]	@ 0x40
 8004542:	4b7a      	ldr	r3, [pc, #488]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454e:	2301      	movs	r3, #1
 8004550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004552:	4b77      	ldr	r3, [pc, #476]	@ (8004730 <HAL_RCC_OscConfig+0x474>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d118      	bne.n	8004590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800455e:	4b74      	ldr	r3, [pc, #464]	@ (8004730 <HAL_RCC_OscConfig+0x474>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a73      	ldr	r2, [pc, #460]	@ (8004730 <HAL_RCC_OscConfig+0x474>)
 8004564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456a:	f7fe f869 	bl	8002640 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004572:	f7fe f865 	bl	8002640 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e10c      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004584:	4b6a      	ldr	r3, [pc, #424]	@ (8004730 <HAL_RCC_OscConfig+0x474>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d106      	bne.n	80045a6 <HAL_RCC_OscConfig+0x2ea>
 8004598:	4b64      	ldr	r3, [pc, #400]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459c:	4a63      	ldr	r2, [pc, #396]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a4:	e01c      	b.n	80045e0 <HAL_RCC_OscConfig+0x324>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x30c>
 80045ae:	4b5f      	ldr	r3, [pc, #380]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b2:	4a5e      	ldr	r2, [pc, #376]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045b4:	f043 0304 	orr.w	r3, r3, #4
 80045b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ba:	4b5c      	ldr	r3, [pc, #368]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045be:	4a5b      	ldr	r2, [pc, #364]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045c6:	e00b      	b.n	80045e0 <HAL_RCC_OscConfig+0x324>
 80045c8:	4b58      	ldr	r3, [pc, #352]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045cc:	4a57      	ldr	r2, [pc, #348]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045d4:	4b55      	ldr	r3, [pc, #340]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d8:	4a54      	ldr	r2, [pc, #336]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045da:	f023 0304 	bic.w	r3, r3, #4
 80045de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d015      	beq.n	8004614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fe f82a 	bl	8002640 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fe f826 	bl	8002640 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e0cb      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004606:	4b49      	ldr	r3, [pc, #292]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ee      	beq.n	80045f0 <HAL_RCC_OscConfig+0x334>
 8004612:	e014      	b.n	800463e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004614:	f7fe f814 	bl	8002640 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461a:	e00a      	b.n	8004632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fe f810 	bl	8002640 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e0b5      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004632:	4b3e      	ldr	r3, [pc, #248]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1ee      	bne.n	800461c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d105      	bne.n	8004650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004644:	4b39      	ldr	r3, [pc, #228]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004648:	4a38      	ldr	r2, [pc, #224]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 800464a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800464e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80a1 	beq.w	800479c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800465a:	4b34      	ldr	r3, [pc, #208]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	2b08      	cmp	r3, #8
 8004664:	d05c      	beq.n	8004720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d141      	bne.n	80046f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466e:	4b31      	ldr	r3, [pc, #196]	@ (8004734 <HAL_RCC_OscConfig+0x478>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004674:	f7fd ffe4 	bl	8002640 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467c:	f7fd ffe0 	bl	8002640 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e087      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468e:	4b27      	ldr	r3, [pc, #156]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	3b01      	subs	r3, #1
 80046b4:	041b      	lsls	r3, r3, #16
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	491b      	ldr	r1, [pc, #108]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004734 <HAL_RCC_OscConfig+0x478>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fd ffb9 	bl	8002640 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fd ffb5 	bl	8002640 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e05c      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e4:	4b11      	ldr	r3, [pc, #68]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x416>
 80046f0:	e054      	b.n	800479c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b10      	ldr	r3, [pc, #64]	@ (8004734 <HAL_RCC_OscConfig+0x478>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fd ffa2 	bl	8002640 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004700:	f7fd ff9e 	bl	8002640 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e045      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	4b06      	ldr	r3, [pc, #24]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x444>
 800471e:	e03d      	b.n	800479c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d107      	bne.n	8004738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e038      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 800472c:	40023800 	.word	0x40023800
 8004730:	40007000 	.word	0x40007000
 8004734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004738:	4b1b      	ldr	r3, [pc, #108]	@ (80047a8 <HAL_RCC_OscConfig+0x4ec>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d028      	beq.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d121      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d11a      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800476e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004770:	4293      	cmp	r3, r2
 8004772:	d111      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	3b01      	subs	r3, #1
 8004782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d107      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40023800 	.word	0x40023800

080047ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0cc      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c0:	4b68      	ldr	r3, [pc, #416]	@ (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d90c      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b65      	ldr	r3, [pc, #404]	@ (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b63      	ldr	r3, [pc, #396]	@ (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0b8      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d020      	beq.n	8004836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004800:	4b59      	ldr	r3, [pc, #356]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4a58      	ldr	r2, [pc, #352]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800480a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004818:	4b53      	ldr	r3, [pc, #332]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4a52      	ldr	r2, [pc, #328]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004824:	4b50      	ldr	r3, [pc, #320]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	494d      	ldr	r1, [pc, #308]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d044      	beq.n	80048cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b47      	ldr	r3, [pc, #284]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d119      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e07f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d003      	beq.n	800486a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004866:	2b03      	cmp	r3, #3
 8004868:	d107      	bne.n	800487a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486a:	4b3f      	ldr	r3, [pc, #252]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e06f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487a:	4b3b      	ldr	r3, [pc, #236]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e067      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488a:	4b37      	ldr	r3, [pc, #220]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f023 0203 	bic.w	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	4934      	ldr	r1, [pc, #208]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	4313      	orrs	r3, r2
 800489a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800489c:	f7fd fed0 	bl	8002640 <HAL_GetTick>
 80048a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a4:	f7fd fecc 	bl	8002640 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e04f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 020c 	and.w	r2, r3, #12
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d1eb      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048cc:	4b25      	ldr	r3, [pc, #148]	@ (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d20c      	bcs.n	80048f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048da:	4b22      	ldr	r3, [pc, #136]	@ (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e2:	4b20      	ldr	r3, [pc, #128]	@ (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e032      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004900:	4b19      	ldr	r3, [pc, #100]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4916      	ldr	r1, [pc, #88]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800491e:	4b12      	ldr	r3, [pc, #72]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	490e      	ldr	r1, [pc, #56]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004932:	f000 f821 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004936:	4602      	mov	r2, r0
 8004938:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	490a      	ldr	r1, [pc, #40]	@ (800496c <HAL_RCC_ClockConfig+0x1c0>)
 8004944:	5ccb      	ldrb	r3, [r1, r3]
 8004946:	fa22 f303 	lsr.w	r3, r2, r3
 800494a:	4a09      	ldr	r2, [pc, #36]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800494e:	4b09      	ldr	r3, [pc, #36]	@ (8004974 <HAL_RCC_ClockConfig+0x1c8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fd fd52 	bl	80023fc <HAL_InitTick>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40023c00 	.word	0x40023c00
 8004968:	40023800 	.word	0x40023800
 800496c:	08009068 	.word	0x08009068
 8004970:	20000000 	.word	0x20000000
 8004974:	20000004 	.word	0x20000004

08004978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800497c:	b090      	sub	sp, #64	@ 0x40
 800497e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	637b      	str	r3, [r7, #52]	@ 0x34
 8004984:	2300      	movs	r3, #0
 8004986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004988:	2300      	movs	r3, #0
 800498a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004990:	4b59      	ldr	r3, [pc, #356]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b08      	cmp	r3, #8
 800499a:	d00d      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0x40>
 800499c:	2b08      	cmp	r3, #8
 800499e:	f200 80a1 	bhi.w	8004ae4 <HAL_RCC_GetSysClockFreq+0x16c>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x34>
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049aa:	e09b      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049ac:	4b53      	ldr	r3, [pc, #332]	@ (8004afc <HAL_RCC_GetSysClockFreq+0x184>)
 80049ae:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80049b0:	e09b      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b2:	4b53      	ldr	r3, [pc, #332]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80049b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049b6:	e098      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b8:	4b4f      	ldr	r3, [pc, #316]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c2:	4b4d      	ldr	r3, [pc, #308]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d028      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ce:	4b4a      	ldr	r3, [pc, #296]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	099b      	lsrs	r3, r3, #6
 80049d4:	2200      	movs	r2, #0
 80049d6:	623b      	str	r3, [r7, #32]
 80049d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049e0:	2100      	movs	r1, #0
 80049e2:	4b47      	ldr	r3, [pc, #284]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80049e4:	fb03 f201 	mul.w	r2, r3, r1
 80049e8:	2300      	movs	r3, #0
 80049ea:	fb00 f303 	mul.w	r3, r0, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	4a43      	ldr	r2, [pc, #268]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80049f2:	fba0 1202 	umull	r1, r2, r0, r2
 80049f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049f8:	460a      	mov	r2, r1
 80049fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80049fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049fe:	4413      	add	r3, r2
 8004a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a04:	2200      	movs	r2, #0
 8004a06:	61bb      	str	r3, [r7, #24]
 8004a08:	61fa      	str	r2, [r7, #28]
 8004a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004a12:	f7fc f803 	bl	8000a1c <__aeabi_uldivmod>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a1e:	e053      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a20:	4b35      	ldr	r3, [pc, #212]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	099b      	lsrs	r3, r3, #6
 8004a26:	2200      	movs	r2, #0
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	617a      	str	r2, [r7, #20]
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a32:	f04f 0b00 	mov.w	fp, #0
 8004a36:	4652      	mov	r2, sl
 8004a38:	465b      	mov	r3, fp
 8004a3a:	f04f 0000 	mov.w	r0, #0
 8004a3e:	f04f 0100 	mov.w	r1, #0
 8004a42:	0159      	lsls	r1, r3, #5
 8004a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a48:	0150      	lsls	r0, r2, #5
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	ebb2 080a 	subs.w	r8, r2, sl
 8004a52:	eb63 090b 	sbc.w	r9, r3, fp
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a6a:	ebb2 0408 	subs.w	r4, r2, r8
 8004a6e:	eb63 0509 	sbc.w	r5, r3, r9
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	00eb      	lsls	r3, r5, #3
 8004a7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a80:	00e2      	lsls	r2, r4, #3
 8004a82:	4614      	mov	r4, r2
 8004a84:	461d      	mov	r5, r3
 8004a86:	eb14 030a 	adds.w	r3, r4, sl
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	eb45 030b 	adc.w	r3, r5, fp
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	028b      	lsls	r3, r1, #10
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	028a      	lsls	r2, r1, #10
 8004aac:	4610      	mov	r0, r2
 8004aae:	4619      	mov	r1, r3
 8004ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	60fa      	str	r2, [r7, #12]
 8004ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004abc:	f7fb ffae 	bl	8000a1c <__aeabi_uldivmod>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	0c1b      	lsrs	r3, r3, #16
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004ad8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ae2:	e002      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ae4:	4b05      	ldr	r3, [pc, #20]	@ (8004afc <HAL_RCC_GetSysClockFreq+0x184>)
 8004ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3740      	adds	r7, #64	@ 0x40
 8004af0:	46bd      	mov	sp, r7
 8004af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800
 8004afc:	00f42400 	.word	0x00f42400
 8004b00:	017d7840 	.word	0x017d7840

08004b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b08:	4b03      	ldr	r3, [pc, #12]	@ (8004b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000000 	.word	0x20000000

08004b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b20:	f7ff fff0 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	0a9b      	lsrs	r3, r3, #10
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	4903      	ldr	r1, [pc, #12]	@ (8004b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b32:	5ccb      	ldrb	r3, [r1, r3]
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	08009078 	.word	0x08009078

08004b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b48:	f7ff ffdc 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0b5b      	lsrs	r3, r3, #13
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4903      	ldr	r1, [pc, #12]	@ (8004b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b5a:	5ccb      	ldrb	r3, [r1, r3]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	08009078 	.word	0x08009078

08004b6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	220f      	movs	r2, #15
 8004b7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b7c:	4b12      	ldr	r3, [pc, #72]	@ (8004bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0203 	and.w	r2, r3, #3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b88:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b94:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ba0:	4b09      	ldr	r3, [pc, #36]	@ (8004bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	08db      	lsrs	r3, r3, #3
 8004ba6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bae:	4b07      	ldr	r3, [pc, #28]	@ (8004bcc <HAL_RCC_GetClockConfig+0x60>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0207 	and.w	r2, r3, #7
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	601a      	str	r2, [r3, #0]
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	40023c00 	.word	0x40023c00

08004bd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e07b      	b.n	8004cda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d108      	bne.n	8004bfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bf2:	d009      	beq.n	8004c08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	61da      	str	r2, [r3, #28]
 8004bfa:	e005      	b.n	8004c08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fd fadc 	bl	80021e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c8c:	ea42 0103 	orr.w	r1, r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c94:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	0c1b      	lsrs	r3, r3, #16
 8004ca6:	f003 0104 	and.w	r1, r3, #4
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	f003 0210 	and.w	r2, r3, #16
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e041      	b.n	8004d78 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fd fab1 	bl	8002270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2202      	movs	r2, #2
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4610      	mov	r0, r2
 8004d22:	f000 fc3b 	bl	800559c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d001      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e044      	b.n	8004e22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1e      	ldr	r2, [pc, #120]	@ (8004e30 <HAL_TIM_Base_Start_IT+0xb0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d018      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x6c>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc2:	d013      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x6c>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1a      	ldr	r2, [pc, #104]	@ (8004e34 <HAL_TIM_Base_Start_IT+0xb4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00e      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x6c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a19      	ldr	r2, [pc, #100]	@ (8004e38 <HAL_TIM_Base_Start_IT+0xb8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d009      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x6c>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a17      	ldr	r2, [pc, #92]	@ (8004e3c <HAL_TIM_Base_Start_IT+0xbc>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d004      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x6c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a16      	ldr	r2, [pc, #88]	@ (8004e40 <HAL_TIM_Base_Start_IT+0xc0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d111      	bne.n	8004e10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b06      	cmp	r3, #6
 8004dfc:	d010      	beq.n	8004e20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0201 	orr.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0e:	e007      	b.n	8004e20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40000800 	.word	0x40000800
 8004e3c:	40000c00 	.word	0x40000c00
 8004e40:	40014000 	.word	0x40014000

08004e44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e041      	b.n	8004eda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f839 	bl	8004ee2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f000 fb8a 	bl	800559c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d109      	bne.n	8004f1c <HAL_TIM_PWM_Start+0x24>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	bf14      	ite	ne
 8004f14:	2301      	movne	r3, #1
 8004f16:	2300      	moveq	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	e022      	b.n	8004f62 <HAL_TIM_PWM_Start+0x6a>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d109      	bne.n	8004f36 <HAL_TIM_PWM_Start+0x3e>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	bf14      	ite	ne
 8004f2e:	2301      	movne	r3, #1
 8004f30:	2300      	moveq	r3, #0
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	e015      	b.n	8004f62 <HAL_TIM_PWM_Start+0x6a>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d109      	bne.n	8004f50 <HAL_TIM_PWM_Start+0x58>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	bf14      	ite	ne
 8004f48:	2301      	movne	r3, #1
 8004f4a:	2300      	moveq	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	e008      	b.n	8004f62 <HAL_TIM_PWM_Start+0x6a>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e068      	b.n	800503c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d104      	bne.n	8004f7a <HAL_TIM_PWM_Start+0x82>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f78:	e013      	b.n	8004fa2 <HAL_TIM_PWM_Start+0xaa>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_PWM_Start+0x92>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f88:	e00b      	b.n	8004fa2 <HAL_TIM_PWM_Start+0xaa>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_PWM_Start+0xa2>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f98:	e003      	b.n	8004fa2 <HAL_TIM_PWM_Start+0xaa>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fda8 	bl	8005b00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a23      	ldr	r2, [pc, #140]	@ (8005044 <HAL_TIM_PWM_Start+0x14c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d107      	bne.n	8004fca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1d      	ldr	r2, [pc, #116]	@ (8005044 <HAL_TIM_PWM_Start+0x14c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d018      	beq.n	8005006 <HAL_TIM_PWM_Start+0x10e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fdc:	d013      	beq.n	8005006 <HAL_TIM_PWM_Start+0x10e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a19      	ldr	r2, [pc, #100]	@ (8005048 <HAL_TIM_PWM_Start+0x150>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00e      	beq.n	8005006 <HAL_TIM_PWM_Start+0x10e>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a17      	ldr	r2, [pc, #92]	@ (800504c <HAL_TIM_PWM_Start+0x154>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d009      	beq.n	8005006 <HAL_TIM_PWM_Start+0x10e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a16      	ldr	r2, [pc, #88]	@ (8005050 <HAL_TIM_PWM_Start+0x158>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d004      	beq.n	8005006 <HAL_TIM_PWM_Start+0x10e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a14      	ldr	r2, [pc, #80]	@ (8005054 <HAL_TIM_PWM_Start+0x15c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d111      	bne.n	800502a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b06      	cmp	r3, #6
 8005016:	d010      	beq.n	800503a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005028:	e007      	b.n	800503a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0201 	orr.w	r2, r2, #1
 8005038:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40010000 	.word	0x40010000
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40014000 	.word	0x40014000

08005058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d020      	beq.n	80050bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01b      	beq.n	80050bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0202 	mvn.w	r2, #2
 800508c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fa5b 	bl	800555e <HAL_TIM_IC_CaptureCallback>
 80050a8:	e005      	b.n	80050b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fa4d 	bl	800554a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fa5e 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d020      	beq.n	8005108 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01b      	beq.n	8005108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0204 	mvn.w	r2, #4
 80050d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2202      	movs	r2, #2
 80050de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fa35 	bl	800555e <HAL_TIM_IC_CaptureCallback>
 80050f4:	e005      	b.n	8005102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fa27 	bl	800554a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fa38 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d020      	beq.n	8005154 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01b      	beq.n	8005154 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0208 	mvn.w	r2, #8
 8005124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2204      	movs	r2, #4
 800512a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fa0f 	bl	800555e <HAL_TIM_IC_CaptureCallback>
 8005140:	e005      	b.n	800514e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa01 	bl	800554a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fa12 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0310 	and.w	r3, r3, #16
 800515a:	2b00      	cmp	r3, #0
 800515c:	d020      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01b      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0210 	mvn.w	r2, #16
 8005170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2208      	movs	r2, #8
 8005176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f9e9 	bl	800555e <HAL_TIM_IC_CaptureCallback>
 800518c:	e005      	b.n	800519a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f9db 	bl	800554a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f9ec 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00c      	beq.n	80051c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0201 	mvn.w	r2, #1
 80051bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fc fb94 	bl	80018ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00c      	beq.n	80051e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d007      	beq.n	80051e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80051e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fd7c 	bl	8005ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00c      	beq.n	800520c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d007      	beq.n	800520c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f9bd 	bl	8005586 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00c      	beq.n	8005230 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0220 	mvn.w	r2, #32
 8005228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fd4e 	bl	8005ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005252:	2302      	movs	r3, #2
 8005254:	e0ae      	b.n	80053b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b0c      	cmp	r3, #12
 8005262:	f200 809f 	bhi.w	80053a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005266:	a201      	add	r2, pc, #4	@ (adr r2, 800526c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526c:	080052a1 	.word	0x080052a1
 8005270:	080053a5 	.word	0x080053a5
 8005274:	080053a5 	.word	0x080053a5
 8005278:	080053a5 	.word	0x080053a5
 800527c:	080052e1 	.word	0x080052e1
 8005280:	080053a5 	.word	0x080053a5
 8005284:	080053a5 	.word	0x080053a5
 8005288:	080053a5 	.word	0x080053a5
 800528c:	08005323 	.word	0x08005323
 8005290:	080053a5 	.word	0x080053a5
 8005294:	080053a5 	.word	0x080053a5
 8005298:	080053a5 	.word	0x080053a5
 800529c:	08005363 	.word	0x08005363
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fa04 	bl	80056b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0208 	orr.w	r2, r2, #8
 80052ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0204 	bic.w	r2, r2, #4
 80052ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6999      	ldr	r1, [r3, #24]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	619a      	str	r2, [r3, #24]
      break;
 80052de:	e064      	b.n	80053aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fa4a 	bl	8005780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800530a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6999      	ldr	r1, [r3, #24]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	021a      	lsls	r2, r3, #8
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	619a      	str	r2, [r3, #24]
      break;
 8005320:	e043      	b.n	80053aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fa95 	bl	8005858 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0208 	orr.w	r2, r2, #8
 800533c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0204 	bic.w	r2, r2, #4
 800534c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69d9      	ldr	r1, [r3, #28]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	61da      	str	r2, [r3, #28]
      break;
 8005360:	e023      	b.n	80053aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fadf 	bl	800592c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800537c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800538c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69d9      	ldr	r1, [r3, #28]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	021a      	lsls	r2, r3, #8
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	61da      	str	r2, [r3, #28]
      break;
 80053a2:	e002      	b.n	80053aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	75fb      	strb	r3, [r7, #23]
      break;
 80053a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_TIM_ConfigClockSource+0x1c>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e0b4      	b.n	8005542 <HAL_TIM_ConfigClockSource+0x186>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80053f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005410:	d03e      	beq.n	8005490 <HAL_TIM_ConfigClockSource+0xd4>
 8005412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005416:	f200 8087 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800541e:	f000 8086 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x172>
 8005422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005426:	d87f      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005428:	2b70      	cmp	r3, #112	@ 0x70
 800542a:	d01a      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0xa6>
 800542c:	2b70      	cmp	r3, #112	@ 0x70
 800542e:	d87b      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005430:	2b60      	cmp	r3, #96	@ 0x60
 8005432:	d050      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x11a>
 8005434:	2b60      	cmp	r3, #96	@ 0x60
 8005436:	d877      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005438:	2b50      	cmp	r3, #80	@ 0x50
 800543a:	d03c      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0xfa>
 800543c:	2b50      	cmp	r3, #80	@ 0x50
 800543e:	d873      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005440:	2b40      	cmp	r3, #64	@ 0x40
 8005442:	d058      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0x13a>
 8005444:	2b40      	cmp	r3, #64	@ 0x40
 8005446:	d86f      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005448:	2b30      	cmp	r3, #48	@ 0x30
 800544a:	d064      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 800544c:	2b30      	cmp	r3, #48	@ 0x30
 800544e:	d86b      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005450:	2b20      	cmp	r3, #32
 8005452:	d060      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 8005454:	2b20      	cmp	r3, #32
 8005456:	d867      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d05c      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 800545c:	2b10      	cmp	r3, #16
 800545e:	d05a      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 8005460:	e062      	b.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005472:	f000 fb25 	bl	8005ac0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	609a      	str	r2, [r3, #8]
      break;
 800548e:	e04f      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054a0:	f000 fb0e 	bl	8005ac0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054b2:	609a      	str	r2, [r3, #8]
      break;
 80054b4:	e03c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c2:	461a      	mov	r2, r3
 80054c4:	f000 fa82 	bl	80059cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2150      	movs	r1, #80	@ 0x50
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fadb 	bl	8005a8a <TIM_ITRx_SetConfig>
      break;
 80054d4:	e02c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054e2:	461a      	mov	r2, r3
 80054e4:	f000 faa1 	bl	8005a2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2160      	movs	r1, #96	@ 0x60
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 facb 	bl	8005a8a <TIM_ITRx_SetConfig>
      break;
 80054f4:	e01c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005502:	461a      	mov	r2, r3
 8005504:	f000 fa62 	bl	80059cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2140      	movs	r1, #64	@ 0x40
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fabb 	bl	8005a8a <TIM_ITRx_SetConfig>
      break;
 8005514:	e00c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4619      	mov	r1, r3
 8005520:	4610      	mov	r0, r2
 8005522:	f000 fab2 	bl	8005a8a <TIM_ITRx_SetConfig>
      break;
 8005526:	e003      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
      break;
 800552c:	e000      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800552e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a3a      	ldr	r2, [pc, #232]	@ (8005698 <TIM_Base_SetConfig+0xfc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00f      	beq.n	80055d4 <TIM_Base_SetConfig+0x38>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ba:	d00b      	beq.n	80055d4 <TIM_Base_SetConfig+0x38>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a37      	ldr	r2, [pc, #220]	@ (800569c <TIM_Base_SetConfig+0x100>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d007      	beq.n	80055d4 <TIM_Base_SetConfig+0x38>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a36      	ldr	r2, [pc, #216]	@ (80056a0 <TIM_Base_SetConfig+0x104>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d003      	beq.n	80055d4 <TIM_Base_SetConfig+0x38>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a35      	ldr	r2, [pc, #212]	@ (80056a4 <TIM_Base_SetConfig+0x108>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d108      	bne.n	80055e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005698 <TIM_Base_SetConfig+0xfc>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01b      	beq.n	8005626 <TIM_Base_SetConfig+0x8a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f4:	d017      	beq.n	8005626 <TIM_Base_SetConfig+0x8a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a28      	ldr	r2, [pc, #160]	@ (800569c <TIM_Base_SetConfig+0x100>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <TIM_Base_SetConfig+0x8a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a27      	ldr	r2, [pc, #156]	@ (80056a0 <TIM_Base_SetConfig+0x104>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00f      	beq.n	8005626 <TIM_Base_SetConfig+0x8a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a26      	ldr	r2, [pc, #152]	@ (80056a4 <TIM_Base_SetConfig+0x108>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00b      	beq.n	8005626 <TIM_Base_SetConfig+0x8a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a25      	ldr	r2, [pc, #148]	@ (80056a8 <TIM_Base_SetConfig+0x10c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d007      	beq.n	8005626 <TIM_Base_SetConfig+0x8a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a24      	ldr	r2, [pc, #144]	@ (80056ac <TIM_Base_SetConfig+0x110>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d003      	beq.n	8005626 <TIM_Base_SetConfig+0x8a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a23      	ldr	r2, [pc, #140]	@ (80056b0 <TIM_Base_SetConfig+0x114>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d108      	bne.n	8005638 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800562c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a0e      	ldr	r2, [pc, #56]	@ (8005698 <TIM_Base_SetConfig+0xfc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d103      	bne.n	800566c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d105      	bne.n	800568a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f023 0201 	bic.w	r2, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	611a      	str	r2, [r3, #16]
  }
}
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	40010000 	.word	0x40010000
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40014400 	.word	0x40014400
 80056b0:	40014800 	.word	0x40014800

080056b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	f023 0201 	bic.w	r2, r3, #1
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0303 	bic.w	r3, r3, #3
 80056ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f023 0302 	bic.w	r3, r3, #2
 80056fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a1c      	ldr	r2, [pc, #112]	@ (800577c <TIM_OC1_SetConfig+0xc8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d10c      	bne.n	800572a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 0308 	bic.w	r3, r3, #8
 8005716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f023 0304 	bic.w	r3, r3, #4
 8005728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a13      	ldr	r2, [pc, #76]	@ (800577c <TIM_OC1_SetConfig+0xc8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d111      	bne.n	8005756 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	621a      	str	r2, [r3, #32]
}
 8005770:	bf00      	nop
 8005772:	371c      	adds	r7, #28
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	40010000 	.word	0x40010000

08005780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	f023 0210 	bic.w	r2, r3, #16
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f023 0320 	bic.w	r3, r3, #32
 80057ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a1e      	ldr	r2, [pc, #120]	@ (8005854 <TIM_OC2_SetConfig+0xd4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d10d      	bne.n	80057fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a15      	ldr	r2, [pc, #84]	@ (8005854 <TIM_OC2_SetConfig+0xd4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d113      	bne.n	800582c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800580a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005812:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40010000 	.word	0x40010000

08005858 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0303 	bic.w	r3, r3, #3
 800588e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005928 <TIM_OC3_SetConfig+0xd0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10d      	bne.n	80058d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a14      	ldr	r2, [pc, #80]	@ (8005928 <TIM_OC3_SetConfig+0xd0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d113      	bne.n	8005902 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	621a      	str	r2, [r3, #32]
}
 800591c:	bf00      	nop
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	40010000 	.word	0x40010000

0800592c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800595a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	031b      	lsls	r3, r3, #12
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	4313      	orrs	r3, r2
 8005982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a10      	ldr	r2, [pc, #64]	@ (80059c8 <TIM_OC4_SetConfig+0x9c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d109      	bne.n	80059a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005992:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	019b      	lsls	r3, r3, #6
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	621a      	str	r2, [r3, #32]
}
 80059ba:	bf00      	nop
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40010000 	.word	0x40010000

080059cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f023 030a 	bic.w	r3, r3, #10
 8005a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	621a      	str	r2, [r3, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b087      	sub	sp, #28
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f023 0210 	bic.w	r2, r3, #16
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	031b      	lsls	r3, r3, #12
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	621a      	str	r2, [r3, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	371c      	adds	r7, #28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b085      	sub	sp, #20
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f043 0307 	orr.w	r3, r3, #7
 8005aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	609a      	str	r2, [r3, #8]
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	021a      	lsls	r2, r3, #8
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	609a      	str	r2, [r3, #8]
}
 8005af4:	bf00      	nop
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f003 031f 	and.w	r3, r3, #31
 8005b12:	2201      	movs	r2, #1
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a1a      	ldr	r2, [r3, #32]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	43db      	mvns	r3, r3
 8005b22:	401a      	ands	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1a      	ldr	r2, [r3, #32]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f003 031f 	and.w	r3, r3, #31
 8005b32:	6879      	ldr	r1, [r7, #4]
 8005b34:	fa01 f303 	lsl.w	r3, r1, r3
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	621a      	str	r2, [r3, #32]
}
 8005b3e:	bf00      	nop
 8005b40:	371c      	adds	r7, #28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
	...

08005b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e050      	b.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d018      	beq.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb0:	d013      	beq.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a18      	ldr	r2, [pc, #96]	@ (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00e      	beq.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a16      	ldr	r2, [pc, #88]	@ (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d009      	beq.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a15      	ldr	r2, [pc, #84]	@ (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d004      	beq.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a13      	ldr	r2, [pc, #76]	@ (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d10c      	bne.n	8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005be0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	40010000 	.word	0x40010000
 8005c18:	40000400 	.word	0x40000400
 8005c1c:	40000800 	.word	0x40000800
 8005c20:	40000c00 	.word	0x40000c00
 8005c24:	40014000 	.word	0x40014000

08005c28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e03d      	b.n	8005cc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e042      	b.n	8005d8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7fc fb26 	bl	800236c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2224      	movs	r2, #36	@ 0x24
 8005d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f82b 	bl	8005d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	695a      	ldr	r2, [r3, #20]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d98:	b0c0      	sub	sp, #256	@ 0x100
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db0:	68d9      	ldr	r1, [r3, #12]
 8005db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	ea40 0301 	orr.w	r3, r0, r1
 8005dbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005dec:	f021 010c 	bic.w	r1, r1, #12
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005dfa:	430b      	orrs	r3, r1
 8005dfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0e:	6999      	ldr	r1, [r3, #24]
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	ea40 0301 	orr.w	r3, r0, r1
 8005e1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	4b8f      	ldr	r3, [pc, #572]	@ (8006060 <UART_SetConfig+0x2cc>)
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d005      	beq.n	8005e34 <UART_SetConfig+0xa0>
 8005e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	4b8d      	ldr	r3, [pc, #564]	@ (8006064 <UART_SetConfig+0x2d0>)
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d104      	bne.n	8005e3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e34:	f7fe fe86 	bl	8004b44 <HAL_RCC_GetPCLK2Freq>
 8005e38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e3c:	e003      	b.n	8005e46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e3e:	f7fe fe6d 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 8005e42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e50:	f040 810c 	bne.w	800606c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e66:	4622      	mov	r2, r4
 8005e68:	462b      	mov	r3, r5
 8005e6a:	1891      	adds	r1, r2, r2
 8005e6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e6e:	415b      	adcs	r3, r3
 8005e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e76:	4621      	mov	r1, r4
 8005e78:	eb12 0801 	adds.w	r8, r2, r1
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	eb43 0901 	adc.w	r9, r3, r1
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e96:	4690      	mov	r8, r2
 8005e98:	4699      	mov	r9, r3
 8005e9a:	4623      	mov	r3, r4
 8005e9c:	eb18 0303 	adds.w	r3, r8, r3
 8005ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ea4:	462b      	mov	r3, r5
 8005ea6:	eb49 0303 	adc.w	r3, r9, r3
 8005eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005eba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ebe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	18db      	adds	r3, r3, r3
 8005ec6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ec8:	4613      	mov	r3, r2
 8005eca:	eb42 0303 	adc.w	r3, r2, r3
 8005ece:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ed0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ed4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ed8:	f7fa fda0 	bl	8000a1c <__aeabi_uldivmod>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4b61      	ldr	r3, [pc, #388]	@ (8006068 <UART_SetConfig+0x2d4>)
 8005ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	011c      	lsls	r4, r3, #4
 8005eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ef4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ef8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005efc:	4642      	mov	r2, r8
 8005efe:	464b      	mov	r3, r9
 8005f00:	1891      	adds	r1, r2, r2
 8005f02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f04:	415b      	adcs	r3, r3
 8005f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f0c:	4641      	mov	r1, r8
 8005f0e:	eb12 0a01 	adds.w	sl, r2, r1
 8005f12:	4649      	mov	r1, r9
 8005f14:	eb43 0b01 	adc.w	fp, r3, r1
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	f04f 0300 	mov.w	r3, #0
 8005f20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f2c:	4692      	mov	sl, r2
 8005f2e:	469b      	mov	fp, r3
 8005f30:	4643      	mov	r3, r8
 8005f32:	eb1a 0303 	adds.w	r3, sl, r3
 8005f36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	eb4b 0303 	adc.w	r3, fp, r3
 8005f40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	18db      	adds	r3, r3, r3
 8005f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f5e:	4613      	mov	r3, r2
 8005f60:	eb42 0303 	adc.w	r3, r2, r3
 8005f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f6e:	f7fa fd55 	bl	8000a1c <__aeabi_uldivmod>
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4611      	mov	r1, r2
 8005f78:	4b3b      	ldr	r3, [pc, #236]	@ (8006068 <UART_SetConfig+0x2d4>)
 8005f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	2264      	movs	r2, #100	@ 0x64
 8005f82:	fb02 f303 	mul.w	r3, r2, r3
 8005f86:	1acb      	subs	r3, r1, r3
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f8e:	4b36      	ldr	r3, [pc, #216]	@ (8006068 <UART_SetConfig+0x2d4>)
 8005f90:	fba3 2302 	umull	r2, r3, r3, r2
 8005f94:	095b      	lsrs	r3, r3, #5
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f9c:	441c      	add	r4, r3
 8005f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fa8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005fac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	1891      	adds	r1, r2, r2
 8005fb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fb8:	415b      	adcs	r3, r3
 8005fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005fc0:	4641      	mov	r1, r8
 8005fc2:	1851      	adds	r1, r2, r1
 8005fc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	414b      	adcs	r3, r1
 8005fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fd8:	4659      	mov	r1, fp
 8005fda:	00cb      	lsls	r3, r1, #3
 8005fdc:	4651      	mov	r1, sl
 8005fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fe2:	4651      	mov	r1, sl
 8005fe4:	00ca      	lsls	r2, r1, #3
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4603      	mov	r3, r0
 8005fec:	4642      	mov	r2, r8
 8005fee:	189b      	adds	r3, r3, r2
 8005ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ff4:	464b      	mov	r3, r9
 8005ff6:	460a      	mov	r2, r1
 8005ff8:	eb42 0303 	adc.w	r3, r2, r3
 8005ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800600c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006010:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006014:	460b      	mov	r3, r1
 8006016:	18db      	adds	r3, r3, r3
 8006018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800601a:	4613      	mov	r3, r2
 800601c:	eb42 0303 	adc.w	r3, r2, r3
 8006020:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006022:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006026:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800602a:	f7fa fcf7 	bl	8000a1c <__aeabi_uldivmod>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4b0d      	ldr	r3, [pc, #52]	@ (8006068 <UART_SetConfig+0x2d4>)
 8006034:	fba3 1302 	umull	r1, r3, r3, r2
 8006038:	095b      	lsrs	r3, r3, #5
 800603a:	2164      	movs	r1, #100	@ 0x64
 800603c:	fb01 f303 	mul.w	r3, r1, r3
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	3332      	adds	r3, #50	@ 0x32
 8006046:	4a08      	ldr	r2, [pc, #32]	@ (8006068 <UART_SetConfig+0x2d4>)
 8006048:	fba2 2303 	umull	r2, r3, r2, r3
 800604c:	095b      	lsrs	r3, r3, #5
 800604e:	f003 0207 	and.w	r2, r3, #7
 8006052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4422      	add	r2, r4
 800605a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800605c:	e106      	b.n	800626c <UART_SetConfig+0x4d8>
 800605e:	bf00      	nop
 8006060:	40011000 	.word	0x40011000
 8006064:	40011400 	.word	0x40011400
 8006068:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800606c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006070:	2200      	movs	r2, #0
 8006072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006076:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800607a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800607e:	4642      	mov	r2, r8
 8006080:	464b      	mov	r3, r9
 8006082:	1891      	adds	r1, r2, r2
 8006084:	6239      	str	r1, [r7, #32]
 8006086:	415b      	adcs	r3, r3
 8006088:	627b      	str	r3, [r7, #36]	@ 0x24
 800608a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800608e:	4641      	mov	r1, r8
 8006090:	1854      	adds	r4, r2, r1
 8006092:	4649      	mov	r1, r9
 8006094:	eb43 0501 	adc.w	r5, r3, r1
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	f04f 0300 	mov.w	r3, #0
 80060a0:	00eb      	lsls	r3, r5, #3
 80060a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060a6:	00e2      	lsls	r2, r4, #3
 80060a8:	4614      	mov	r4, r2
 80060aa:	461d      	mov	r5, r3
 80060ac:	4643      	mov	r3, r8
 80060ae:	18e3      	adds	r3, r4, r3
 80060b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060b4:	464b      	mov	r3, r9
 80060b6:	eb45 0303 	adc.w	r3, r5, r3
 80060ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060ce:	f04f 0200 	mov.w	r2, #0
 80060d2:	f04f 0300 	mov.w	r3, #0
 80060d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060da:	4629      	mov	r1, r5
 80060dc:	008b      	lsls	r3, r1, #2
 80060de:	4621      	mov	r1, r4
 80060e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e4:	4621      	mov	r1, r4
 80060e6:	008a      	lsls	r2, r1, #2
 80060e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060ec:	f7fa fc96 	bl	8000a1c <__aeabi_uldivmod>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4b60      	ldr	r3, [pc, #384]	@ (8006278 <UART_SetConfig+0x4e4>)
 80060f6:	fba3 2302 	umull	r2, r3, r3, r2
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	011c      	lsls	r4, r3, #4
 80060fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006102:	2200      	movs	r2, #0
 8006104:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006108:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800610c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006110:	4642      	mov	r2, r8
 8006112:	464b      	mov	r3, r9
 8006114:	1891      	adds	r1, r2, r2
 8006116:	61b9      	str	r1, [r7, #24]
 8006118:	415b      	adcs	r3, r3
 800611a:	61fb      	str	r3, [r7, #28]
 800611c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006120:	4641      	mov	r1, r8
 8006122:	1851      	adds	r1, r2, r1
 8006124:	6139      	str	r1, [r7, #16]
 8006126:	4649      	mov	r1, r9
 8006128:	414b      	adcs	r3, r1
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006138:	4659      	mov	r1, fp
 800613a:	00cb      	lsls	r3, r1, #3
 800613c:	4651      	mov	r1, sl
 800613e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006142:	4651      	mov	r1, sl
 8006144:	00ca      	lsls	r2, r1, #3
 8006146:	4610      	mov	r0, r2
 8006148:	4619      	mov	r1, r3
 800614a:	4603      	mov	r3, r0
 800614c:	4642      	mov	r2, r8
 800614e:	189b      	adds	r3, r3, r2
 8006150:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006154:	464b      	mov	r3, r9
 8006156:	460a      	mov	r2, r1
 8006158:	eb42 0303 	adc.w	r3, r2, r3
 800615c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	67bb      	str	r3, [r7, #120]	@ 0x78
 800616a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	f04f 0300 	mov.w	r3, #0
 8006174:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006178:	4649      	mov	r1, r9
 800617a:	008b      	lsls	r3, r1, #2
 800617c:	4641      	mov	r1, r8
 800617e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006182:	4641      	mov	r1, r8
 8006184:	008a      	lsls	r2, r1, #2
 8006186:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800618a:	f7fa fc47 	bl	8000a1c <__aeabi_uldivmod>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	4611      	mov	r1, r2
 8006194:	4b38      	ldr	r3, [pc, #224]	@ (8006278 <UART_SetConfig+0x4e4>)
 8006196:	fba3 2301 	umull	r2, r3, r3, r1
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	2264      	movs	r2, #100	@ 0x64
 800619e:	fb02 f303 	mul.w	r3, r2, r3
 80061a2:	1acb      	subs	r3, r1, r3
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	3332      	adds	r3, #50	@ 0x32
 80061a8:	4a33      	ldr	r2, [pc, #204]	@ (8006278 <UART_SetConfig+0x4e4>)
 80061aa:	fba2 2303 	umull	r2, r3, r2, r3
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061b4:	441c      	add	r4, r3
 80061b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ba:	2200      	movs	r2, #0
 80061bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80061be:	677a      	str	r2, [r7, #116]	@ 0x74
 80061c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	1891      	adds	r1, r2, r2
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	415b      	adcs	r3, r3
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061d4:	4641      	mov	r1, r8
 80061d6:	1851      	adds	r1, r2, r1
 80061d8:	6039      	str	r1, [r7, #0]
 80061da:	4649      	mov	r1, r9
 80061dc:	414b      	adcs	r3, r1
 80061de:	607b      	str	r3, [r7, #4]
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061ec:	4659      	mov	r1, fp
 80061ee:	00cb      	lsls	r3, r1, #3
 80061f0:	4651      	mov	r1, sl
 80061f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061f6:	4651      	mov	r1, sl
 80061f8:	00ca      	lsls	r2, r1, #3
 80061fa:	4610      	mov	r0, r2
 80061fc:	4619      	mov	r1, r3
 80061fe:	4603      	mov	r3, r0
 8006200:	4642      	mov	r2, r8
 8006202:	189b      	adds	r3, r3, r2
 8006204:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006206:	464b      	mov	r3, r9
 8006208:	460a      	mov	r2, r1
 800620a:	eb42 0303 	adc.w	r3, r2, r3
 800620e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	663b      	str	r3, [r7, #96]	@ 0x60
 800621a:	667a      	str	r2, [r7, #100]	@ 0x64
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006228:	4649      	mov	r1, r9
 800622a:	008b      	lsls	r3, r1, #2
 800622c:	4641      	mov	r1, r8
 800622e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006232:	4641      	mov	r1, r8
 8006234:	008a      	lsls	r2, r1, #2
 8006236:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800623a:	f7fa fbef 	bl	8000a1c <__aeabi_uldivmod>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4b0d      	ldr	r3, [pc, #52]	@ (8006278 <UART_SetConfig+0x4e4>)
 8006244:	fba3 1302 	umull	r1, r3, r3, r2
 8006248:	095b      	lsrs	r3, r3, #5
 800624a:	2164      	movs	r1, #100	@ 0x64
 800624c:	fb01 f303 	mul.w	r3, r1, r3
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	011b      	lsls	r3, r3, #4
 8006254:	3332      	adds	r3, #50	@ 0x32
 8006256:	4a08      	ldr	r2, [pc, #32]	@ (8006278 <UART_SetConfig+0x4e4>)
 8006258:	fba2 2303 	umull	r2, r3, r2, r3
 800625c:	095b      	lsrs	r3, r3, #5
 800625e:	f003 020f 	and.w	r2, r3, #15
 8006262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4422      	add	r2, r4
 800626a:	609a      	str	r2, [r3, #8]
}
 800626c:	bf00      	nop
 800626e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006272:	46bd      	mov	sp, r7
 8006274:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006278:	51eb851f 	.word	0x51eb851f

0800627c <__NVIC_SetPriority>:
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	4603      	mov	r3, r0
 8006284:	6039      	str	r1, [r7, #0]
 8006286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800628c:	2b00      	cmp	r3, #0
 800628e:	db0a      	blt.n	80062a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	b2da      	uxtb	r2, r3
 8006294:	490c      	ldr	r1, [pc, #48]	@ (80062c8 <__NVIC_SetPriority+0x4c>)
 8006296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800629a:	0112      	lsls	r2, r2, #4
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	440b      	add	r3, r1
 80062a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80062a4:	e00a      	b.n	80062bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	4908      	ldr	r1, [pc, #32]	@ (80062cc <__NVIC_SetPriority+0x50>)
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	3b04      	subs	r3, #4
 80062b4:	0112      	lsls	r2, r2, #4
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	440b      	add	r3, r1
 80062ba:	761a      	strb	r2, [r3, #24]
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	e000e100 	.word	0xe000e100
 80062cc:	e000ed00 	.word	0xe000ed00

080062d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80062d4:	4b05      	ldr	r3, [pc, #20]	@ (80062ec <SysTick_Handler+0x1c>)
 80062d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80062d8:	f001 fd98 	bl	8007e0c <xTaskGetSchedulerState>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d001      	beq.n	80062e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80062e2:	f002 fb91 	bl	8008a08 <xPortSysTickHandler>
  }
}
 80062e6:	bf00      	nop
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	e000e010 	.word	0xe000e010

080062f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80062f4:	2100      	movs	r1, #0
 80062f6:	f06f 0004 	mvn.w	r0, #4
 80062fa:	f7ff ffbf 	bl	800627c <__NVIC_SetPriority>
#endif
}
 80062fe:	bf00      	nop
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800630a:	f3ef 8305 	mrs	r3, IPSR
 800630e:	603b      	str	r3, [r7, #0]
  return(result);
 8006310:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006316:	f06f 0305 	mvn.w	r3, #5
 800631a:	607b      	str	r3, [r7, #4]
 800631c:	e00c      	b.n	8006338 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800631e:	4b0a      	ldr	r3, [pc, #40]	@ (8006348 <osKernelInitialize+0x44>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d105      	bne.n	8006332 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006326:	4b08      	ldr	r3, [pc, #32]	@ (8006348 <osKernelInitialize+0x44>)
 8006328:	2201      	movs	r2, #1
 800632a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800632c:	2300      	movs	r3, #0
 800632e:	607b      	str	r3, [r7, #4]
 8006330:	e002      	b.n	8006338 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006332:	f04f 33ff 	mov.w	r3, #4294967295
 8006336:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006338:	687b      	ldr	r3, [r7, #4]
}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	2000071c 	.word	0x2000071c

0800634c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006352:	f3ef 8305 	mrs	r3, IPSR
 8006356:	603b      	str	r3, [r7, #0]
  return(result);
 8006358:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <osKernelStart+0x1a>
    stat = osErrorISR;
 800635e:	f06f 0305 	mvn.w	r3, #5
 8006362:	607b      	str	r3, [r7, #4]
 8006364:	e010      	b.n	8006388 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006366:	4b0b      	ldr	r3, [pc, #44]	@ (8006394 <osKernelStart+0x48>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d109      	bne.n	8006382 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800636e:	f7ff ffbf 	bl	80062f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006372:	4b08      	ldr	r3, [pc, #32]	@ (8006394 <osKernelStart+0x48>)
 8006374:	2202      	movs	r2, #2
 8006376:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006378:	f001 f8fa 	bl	8007570 <vTaskStartScheduler>
      stat = osOK;
 800637c:	2300      	movs	r3, #0
 800637e:	607b      	str	r3, [r7, #4]
 8006380:	e002      	b.n	8006388 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006382:	f04f 33ff 	mov.w	r3, #4294967295
 8006386:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006388:	687b      	ldr	r3, [r7, #4]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	2000071c 	.word	0x2000071c

08006398 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006398:	b580      	push	{r7, lr}
 800639a:	b08e      	sub	sp, #56	@ 0x38
 800639c:	af04      	add	r7, sp, #16
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063a8:	f3ef 8305 	mrs	r3, IPSR
 80063ac:	617b      	str	r3, [r7, #20]
  return(result);
 80063ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d17e      	bne.n	80064b2 <osThreadNew+0x11a>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d07b      	beq.n	80064b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80063ba:	2380      	movs	r3, #128	@ 0x80
 80063bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80063be:	2318      	movs	r3, #24
 80063c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80063c6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d045      	beq.n	800645e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <osThreadNew+0x48>
        name = attr->name;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d008      	beq.n	8006406 <osThreadNew+0x6e>
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	2b38      	cmp	r3, #56	@ 0x38
 80063f8:	d805      	bhi.n	8006406 <osThreadNew+0x6e>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <osThreadNew+0x72>
        return (NULL);
 8006406:	2300      	movs	r3, #0
 8006408:	e054      	b.n	80064b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	089b      	lsrs	r3, r3, #2
 8006418:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00e      	beq.n	8006440 <osThreadNew+0xa8>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	2b5b      	cmp	r3, #91	@ 0x5b
 8006428:	d90a      	bls.n	8006440 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800642e:	2b00      	cmp	r3, #0
 8006430:	d006      	beq.n	8006440 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <osThreadNew+0xa8>
        mem = 1;
 800643a:	2301      	movs	r3, #1
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	e010      	b.n	8006462 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10c      	bne.n	8006462 <osThreadNew+0xca>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d108      	bne.n	8006462 <osThreadNew+0xca>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d104      	bne.n	8006462 <osThreadNew+0xca>
          mem = 0;
 8006458:	2300      	movs	r3, #0
 800645a:	61bb      	str	r3, [r7, #24]
 800645c:	e001      	b.n	8006462 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d110      	bne.n	800648a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006470:	9202      	str	r2, [sp, #8]
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fe1a 	bl	80070b8 <xTaskCreateStatic>
 8006484:	4603      	mov	r3, r0
 8006486:	613b      	str	r3, [r7, #16]
 8006488:	e013      	b.n	80064b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d110      	bne.n	80064b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	b29a      	uxth	r2, r3
 8006494:	f107 0310 	add.w	r3, r7, #16
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fe68 	bl	8007178 <xTaskCreate>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d001      	beq.n	80064b2 <osThreadNew+0x11a>
            hTask = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80064b2:	693b      	ldr	r3, [r7, #16]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3728      	adds	r7, #40	@ 0x28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064c4:	f3ef 8305 	mrs	r3, IPSR
 80064c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80064ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <osDelay+0x1c>
    stat = osErrorISR;
 80064d0:	f06f 0305 	mvn.w	r3, #5
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	e007      	b.n	80064e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 f80e 	bl	8007504 <vTaskDelay>
    }
  }

  return (stat);
 80064e8:	68fb      	ldr	r3, [r7, #12]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4a07      	ldr	r2, [pc, #28]	@ (8006520 <vApplicationGetIdleTaskMemory+0x2c>)
 8006504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4a06      	ldr	r2, [pc, #24]	@ (8006524 <vApplicationGetIdleTaskMemory+0x30>)
 800650a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2280      	movs	r2, #128	@ 0x80
 8006510:	601a      	str	r2, [r3, #0]
}
 8006512:	bf00      	nop
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	20000720 	.word	0x20000720
 8006524:	2000077c 	.word	0x2000077c

08006528 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4a07      	ldr	r2, [pc, #28]	@ (8006554 <vApplicationGetTimerTaskMemory+0x2c>)
 8006538:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4a06      	ldr	r2, [pc, #24]	@ (8006558 <vApplicationGetTimerTaskMemory+0x30>)
 800653e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006546:	601a      	str	r2, [r3, #0]
}
 8006548:	bf00      	nop
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	2000097c 	.word	0x2000097c
 8006558:	200009d8 	.word	0x200009d8

0800655c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f103 0208 	add.w	r2, r3, #8
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f04f 32ff 	mov.w	r2, #4294967295
 8006574:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f103 0208 	add.w	r2, r3, #8
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f103 0208 	add.w	r2, r3, #8
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065aa:	bf00      	nop
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	601a      	str	r2, [r3, #0]
}
 80065f2:	bf00      	nop
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065fe:	b480      	push	{r7}
 8006600:	b085      	sub	sp, #20
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d103      	bne.n	800661e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	e00c      	b.n	8006638 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3308      	adds	r3, #8
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	e002      	b.n	800662c <vListInsert+0x2e>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	429a      	cmp	r2, r3
 8006636:	d2f6      	bcs.n	8006626 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	601a      	str	r2, [r3, #0]
}
 8006664:	bf00      	nop
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6892      	ldr	r2, [r2, #8]
 8006686:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6852      	ldr	r2, [r2, #4]
 8006690:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	429a      	cmp	r2, r3
 800669a:	d103      	bne.n	80066a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	1e5a      	subs	r2, r3, #1
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10b      	bne.n	80066f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80066ea:	bf00      	nop
 80066ec:	bf00      	nop
 80066ee:	e7fd      	b.n	80066ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80066f0:	f002 f8fa 	bl	80088e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fc:	68f9      	ldr	r1, [r7, #12]
 80066fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006700:	fb01 f303 	mul.w	r3, r1, r3
 8006704:	441a      	add	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006720:	3b01      	subs	r3, #1
 8006722:	68f9      	ldr	r1, [r7, #12]
 8006724:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006726:	fb01 f303 	mul.w	r3, r1, r3
 800672a:	441a      	add	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	22ff      	movs	r2, #255	@ 0xff
 8006734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	22ff      	movs	r2, #255	@ 0xff
 800673c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d114      	bne.n	8006770 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d01a      	beq.n	8006784 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3310      	adds	r3, #16
 8006752:	4618      	mov	r0, r3
 8006754:	f001 f99a 	bl	8007a8c <xTaskRemoveFromEventList>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d012      	beq.n	8006784 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800675e:	4b0d      	ldr	r3, [pc, #52]	@ (8006794 <xQueueGenericReset+0xd0>)
 8006760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	e009      	b.n	8006784 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3310      	adds	r3, #16
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff fef1 	bl	800655c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3324      	adds	r3, #36	@ 0x24
 800677e:	4618      	mov	r0, r3
 8006780:	f7ff feec 	bl	800655c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006784:	f002 f8e2 	bl	800894c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006788:	2301      	movs	r3, #1
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	e000ed04 	.word	0xe000ed04

08006798 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08e      	sub	sp, #56	@ 0x38
 800679c:	af02      	add	r7, sp, #8
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10b      	bne.n	80067c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80067be:	bf00      	nop
 80067c0:	bf00      	nop
 80067c2:	e7fd      	b.n	80067c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10b      	bne.n	80067e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	e7fd      	b.n	80067de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <xQueueGenericCreateStatic+0x56>
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <xQueueGenericCreateStatic+0x5a>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <xQueueGenericCreateStatic+0x5c>
 80067f2:	2300      	movs	r3, #0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10b      	bne.n	8006810 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	623b      	str	r3, [r7, #32]
}
 800680a:	bf00      	nop
 800680c:	bf00      	nop
 800680e:	e7fd      	b.n	800680c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d102      	bne.n	800681c <xQueueGenericCreateStatic+0x84>
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <xQueueGenericCreateStatic+0x88>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <xQueueGenericCreateStatic+0x8a>
 8006820:	2300      	movs	r3, #0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10b      	bne.n	800683e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	61fb      	str	r3, [r7, #28]
}
 8006838:	bf00      	nop
 800683a:	bf00      	nop
 800683c:	e7fd      	b.n	800683a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800683e:	2350      	movs	r3, #80	@ 0x50
 8006840:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b50      	cmp	r3, #80	@ 0x50
 8006846:	d00b      	beq.n	8006860 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	61bb      	str	r3, [r7, #24]
}
 800685a:	bf00      	nop
 800685c:	bf00      	nop
 800685e:	e7fd      	b.n	800685c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006860:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00d      	beq.n	8006888 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800686c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006874:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	4613      	mov	r3, r2
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	68b9      	ldr	r1, [r7, #8]
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 f805 	bl	8006892 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800688a:	4618      	mov	r0, r3
 800688c:	3730      	adds	r7, #48	@ 0x30
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	607a      	str	r2, [r7, #4]
 800689e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d103      	bne.n	80068ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	e002      	b.n	80068b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068c0:	2101      	movs	r1, #1
 80068c2:	69b8      	ldr	r0, [r7, #24]
 80068c4:	f7ff fefe 	bl	80066c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	78fa      	ldrb	r2, [r7, #3]
 80068cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08e      	sub	sp, #56	@ 0x38
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068e6:	2300      	movs	r3, #0
 80068e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10b      	bne.n	800690c <xQueueGenericSend+0x34>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006906:	bf00      	nop
 8006908:	bf00      	nop
 800690a:	e7fd      	b.n	8006908 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d103      	bne.n	800691a <xQueueGenericSend+0x42>
 8006912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <xQueueGenericSend+0x46>
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <xQueueGenericSend+0x48>
 800691e:	2300      	movs	r3, #0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10b      	bne.n	800693c <xQueueGenericSend+0x64>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006936:	bf00      	nop
 8006938:	bf00      	nop
 800693a:	e7fd      	b.n	8006938 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d103      	bne.n	800694a <xQueueGenericSend+0x72>
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <xQueueGenericSend+0x76>
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <xQueueGenericSend+0x78>
 800694e:	2300      	movs	r3, #0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10b      	bne.n	800696c <xQueueGenericSend+0x94>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	623b      	str	r3, [r7, #32]
}
 8006966:	bf00      	nop
 8006968:	bf00      	nop
 800696a:	e7fd      	b.n	8006968 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800696c:	f001 fa4e 	bl	8007e0c <xTaskGetSchedulerState>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d102      	bne.n	800697c <xQueueGenericSend+0xa4>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <xQueueGenericSend+0xa8>
 800697c:	2301      	movs	r3, #1
 800697e:	e000      	b.n	8006982 <xQueueGenericSend+0xaa>
 8006980:	2300      	movs	r3, #0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10b      	bne.n	800699e <xQueueGenericSend+0xc6>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	61fb      	str	r3, [r7, #28]
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	e7fd      	b.n	800699a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800699e:	f001 ffa3 	bl	80088e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d302      	bcc.n	80069b4 <xQueueGenericSend+0xdc>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d129      	bne.n	8006a08 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	68b9      	ldr	r1, [r7, #8]
 80069b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069ba:	f000 fa0f 	bl	8006ddc <prvCopyDataToQueue>
 80069be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d010      	beq.n	80069ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ca:	3324      	adds	r3, #36	@ 0x24
 80069cc:	4618      	mov	r0, r3
 80069ce:	f001 f85d 	bl	8007a8c <xTaskRemoveFromEventList>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d013      	beq.n	8006a00 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069d8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ad8 <xQueueGenericSend+0x200>)
 80069da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	e00a      	b.n	8006a00 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d007      	beq.n	8006a00 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069f0:	4b39      	ldr	r3, [pc, #228]	@ (8006ad8 <xQueueGenericSend+0x200>)
 80069f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a00:	f001 ffa4 	bl	800894c <vPortExitCritical>
				return pdPASS;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e063      	b.n	8006ad0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d103      	bne.n	8006a16 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a0e:	f001 ff9d 	bl	800894c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	e05c      	b.n	8006ad0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a1c:	f107 0314 	add.w	r3, r7, #20
 8006a20:	4618      	mov	r0, r3
 8006a22:	f001 f897 	bl	8007b54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a26:	2301      	movs	r3, #1
 8006a28:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a2a:	f001 ff8f 	bl	800894c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a2e:	f000 fe07 	bl	8007640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a32:	f001 ff59 	bl	80088e8 <vPortEnterCritical>
 8006a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a3c:	b25b      	sxtb	r3, r3
 8006a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a42:	d103      	bne.n	8006a4c <xQueueGenericSend+0x174>
 8006a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a52:	b25b      	sxtb	r3, r3
 8006a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a58:	d103      	bne.n	8006a62 <xQueueGenericSend+0x18a>
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a62:	f001 ff73 	bl	800894c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a66:	1d3a      	adds	r2, r7, #4
 8006a68:	f107 0314 	add.w	r3, r7, #20
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 f886 	bl	8007b80 <xTaskCheckForTimeOut>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d124      	bne.n	8006ac4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a7c:	f000 faa6 	bl	8006fcc <prvIsQueueFull>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d018      	beq.n	8006ab8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a88:	3310      	adds	r3, #16
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 ffaa 	bl	80079e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a96:	f000 fa31 	bl	8006efc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a9a:	f000 fddf 	bl	800765c <xTaskResumeAll>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f47f af7c 	bne.w	800699e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad8 <xQueueGenericSend+0x200>)
 8006aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	e772      	b.n	800699e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006aba:	f000 fa1f 	bl	8006efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006abe:	f000 fdcd 	bl	800765c <xTaskResumeAll>
 8006ac2:	e76c      	b.n	800699e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ac6:	f000 fa19 	bl	8006efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006aca:	f000 fdc7 	bl	800765c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ace:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3738      	adds	r7, #56	@ 0x38
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b090      	sub	sp, #64	@ 0x40
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10b      	bne.n	8006b0c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b06:	bf00      	nop
 8006b08:	bf00      	nop
 8006b0a:	e7fd      	b.n	8006b08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d103      	bne.n	8006b1a <xQueueGenericSendFromISR+0x3e>
 8006b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <xQueueGenericSendFromISR+0x42>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e000      	b.n	8006b20 <xQueueGenericSendFromISR+0x44>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10b      	bne.n	8006b3c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b36:	bf00      	nop
 8006b38:	bf00      	nop
 8006b3a:	e7fd      	b.n	8006b38 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d103      	bne.n	8006b4a <xQueueGenericSendFromISR+0x6e>
 8006b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <xQueueGenericSendFromISR+0x72>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e000      	b.n	8006b50 <xQueueGenericSendFromISR+0x74>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10b      	bne.n	8006b6c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	623b      	str	r3, [r7, #32]
}
 8006b66:	bf00      	nop
 8006b68:	bf00      	nop
 8006b6a:	e7fd      	b.n	8006b68 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b6c:	f001 ff9c 	bl	8008aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b70:	f3ef 8211 	mrs	r2, BASEPRI
 8006b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	61fa      	str	r2, [r7, #28]
 8006b86:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b88:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b8a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d302      	bcc.n	8006b9e <xQueueGenericSendFromISR+0xc2>
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d12f      	bne.n	8006bfe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ba4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	68b9      	ldr	r1, [r7, #8]
 8006bb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006bb4:	f000 f912 	bl	8006ddc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bb8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc0:	d112      	bne.n	8006be8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bcc:	3324      	adds	r3, #36	@ 0x24
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 ff5c 	bl	8007a8c <xTaskRemoveFromEventList>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00e      	beq.n	8006bf8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	e007      	b.n	8006bf8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006be8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006bec:	3301      	adds	r3, #1
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	b25a      	sxtb	r2, r3
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006bfc:	e001      	b.n	8006c02 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c04:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3740      	adds	r7, #64	@ 0x40
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08c      	sub	sp, #48	@ 0x30
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c24:	2300      	movs	r3, #0
 8006c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10b      	bne.n	8006c4a <xQueueReceive+0x32>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	623b      	str	r3, [r7, #32]
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	e7fd      	b.n	8006c46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d103      	bne.n	8006c58 <xQueueReceive+0x40>
 8006c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <xQueueReceive+0x44>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e000      	b.n	8006c5e <xQueueReceive+0x46>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10b      	bne.n	8006c7a <xQueueReceive+0x62>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	61fb      	str	r3, [r7, #28]
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop
 8006c78:	e7fd      	b.n	8006c76 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c7a:	f001 f8c7 	bl	8007e0c <xTaskGetSchedulerState>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d102      	bne.n	8006c8a <xQueueReceive+0x72>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <xQueueReceive+0x76>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <xQueueReceive+0x78>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10b      	bne.n	8006cac <xQueueReceive+0x94>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	61bb      	str	r3, [r7, #24]
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	e7fd      	b.n	8006ca8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cac:	f001 fe1c 	bl	80088e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d01f      	beq.n	8006cfc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cc0:	f000 f8f6 	bl	8006eb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc6:	1e5a      	subs	r2, r3, #1
 8006cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00f      	beq.n	8006cf4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd6:	3310      	adds	r3, #16
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fed7 	bl	8007a8c <xTaskRemoveFromEventList>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d007      	beq.n	8006cf4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ce4:	4b3c      	ldr	r3, [pc, #240]	@ (8006dd8 <xQueueReceive+0x1c0>)
 8006ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cf4:	f001 fe2a 	bl	800894c <vPortExitCritical>
				return pdPASS;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e069      	b.n	8006dd0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d103      	bne.n	8006d0a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d02:	f001 fe23 	bl	800894c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d06:	2300      	movs	r3, #0
 8006d08:	e062      	b.n	8006dd0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d106      	bne.n	8006d1e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d10:	f107 0310 	add.w	r3, r7, #16
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 ff1d 	bl	8007b54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d1e:	f001 fe15 	bl	800894c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d22:	f000 fc8d 	bl	8007640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d26:	f001 fddf 	bl	80088e8 <vPortEnterCritical>
 8006d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d30:	b25b      	sxtb	r3, r3
 8006d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d36:	d103      	bne.n	8006d40 <xQueueReceive+0x128>
 8006d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d46:	b25b      	sxtb	r3, r3
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4c:	d103      	bne.n	8006d56 <xQueueReceive+0x13e>
 8006d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d56:	f001 fdf9 	bl	800894c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d5a:	1d3a      	adds	r2, r7, #4
 8006d5c:	f107 0310 	add.w	r3, r7, #16
 8006d60:	4611      	mov	r1, r2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 ff0c 	bl	8007b80 <xTaskCheckForTimeOut>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d123      	bne.n	8006db6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d70:	f000 f916 	bl	8006fa0 <prvIsQueueEmpty>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d017      	beq.n	8006daa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7c:	3324      	adds	r3, #36	@ 0x24
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	4611      	mov	r1, r2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fe30 	bl	80079e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d8a:	f000 f8b7 	bl	8006efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d8e:	f000 fc65 	bl	800765c <xTaskResumeAll>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d189      	bne.n	8006cac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006d98:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd8 <xQueueReceive+0x1c0>)
 8006d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	e780      	b.n	8006cac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006daa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dac:	f000 f8a6 	bl	8006efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006db0:	f000 fc54 	bl	800765c <xTaskResumeAll>
 8006db4:	e77a      	b.n	8006cac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006db6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006db8:	f000 f8a0 	bl	8006efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dbc:	f000 fc4e 	bl	800765c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dc2:	f000 f8ed 	bl	8006fa0 <prvIsQueueEmpty>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f43f af6f 	beq.w	8006cac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006dce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3730      	adds	r7, #48	@ 0x30
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10d      	bne.n	8006e16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d14d      	bne.n	8006e9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f001 f81e 	bl	8007e48 <xTaskPriorityDisinherit>
 8006e0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	609a      	str	r2, [r3, #8]
 8006e14:	e043      	b.n	8006e9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d119      	bne.n	8006e50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6858      	ldr	r0, [r3, #4]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e24:	461a      	mov	r2, r3
 8006e26:	68b9      	ldr	r1, [r7, #8]
 8006e28:	f002 f89a 	bl	8008f60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	441a      	add	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d32b      	bcc.n	8006e9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	605a      	str	r2, [r3, #4]
 8006e4e:	e026      	b.n	8006e9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	68d8      	ldr	r0, [r3, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e58:	461a      	mov	r2, r3
 8006e5a:	68b9      	ldr	r1, [r7, #8]
 8006e5c:	f002 f880 	bl	8008f60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	68da      	ldr	r2, [r3, #12]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e68:	425b      	negs	r3, r3
 8006e6a:	441a      	add	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	68da      	ldr	r2, [r3, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d207      	bcs.n	8006e8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e84:	425b      	negs	r3, r3
 8006e86:	441a      	add	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d105      	bne.n	8006e9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006ea6:	697b      	ldr	r3, [r7, #20]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d018      	beq.n	8006ef4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eca:	441a      	add	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68da      	ldr	r2, [r3, #12]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d303      	bcc.n	8006ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68d9      	ldr	r1, [r3, #12]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eec:	461a      	mov	r2, r3
 8006eee:	6838      	ldr	r0, [r7, #0]
 8006ef0:	f002 f836 	bl	8008f60 <memcpy>
	}
}
 8006ef4:	bf00      	nop
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f04:	f001 fcf0 	bl	80088e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f10:	e011      	b.n	8006f36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d012      	beq.n	8006f40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	3324      	adds	r3, #36	@ 0x24
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 fdb4 	bl	8007a8c <xTaskRemoveFromEventList>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f2a:	f000 fe8d 	bl	8007c48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	dce9      	bgt.n	8006f12 <prvUnlockQueue+0x16>
 8006f3e:	e000      	b.n	8006f42 <prvUnlockQueue+0x46>
					break;
 8006f40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	22ff      	movs	r2, #255	@ 0xff
 8006f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006f4a:	f001 fcff 	bl	800894c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f4e:	f001 fccb 	bl	80088e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f5a:	e011      	b.n	8006f80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d012      	beq.n	8006f8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3310      	adds	r3, #16
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fd8f 	bl	8007a8c <xTaskRemoveFromEventList>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f74:	f000 fe68 	bl	8007c48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	dce9      	bgt.n	8006f5c <prvUnlockQueue+0x60>
 8006f88:	e000      	b.n	8006f8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	22ff      	movs	r2, #255	@ 0xff
 8006f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006f94:	f001 fcda 	bl	800894c <vPortExitCritical>
}
 8006f98:	bf00      	nop
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fa8:	f001 fc9e 	bl	80088e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d102      	bne.n	8006fba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	e001      	b.n	8006fbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fbe:	f001 fcc5 	bl	800894c <vPortExitCritical>

	return xReturn;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fd4:	f001 fc88 	bl	80088e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d102      	bne.n	8006fea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	e001      	b.n	8006fee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fee:	f001 fcad 	bl	800894c <vPortExitCritical>

	return xReturn;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	e014      	b.n	8007036 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800700c:	4a0f      	ldr	r2, [pc, #60]	@ (800704c <vQueueAddToRegistry+0x50>)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10b      	bne.n	8007030 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007018:	490c      	ldr	r1, [pc, #48]	@ (800704c <vQueueAddToRegistry+0x50>)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007022:	4a0a      	ldr	r2, [pc, #40]	@ (800704c <vQueueAddToRegistry+0x50>)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	4413      	add	r3, r2
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800702e:	e006      	b.n	800703e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3301      	adds	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b07      	cmp	r3, #7
 800703a:	d9e7      	bls.n	800700c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	20000dd8 	.word	0x20000dd8

08007050 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007060:	f001 fc42 	bl	80088e8 <vPortEnterCritical>
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800706a:	b25b      	sxtb	r3, r3
 800706c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007070:	d103      	bne.n	800707a <vQueueWaitForMessageRestricted+0x2a>
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007080:	b25b      	sxtb	r3, r3
 8007082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007086:	d103      	bne.n	8007090 <vQueueWaitForMessageRestricted+0x40>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007090:	f001 fc5c 	bl	800894c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	3324      	adds	r3, #36	@ 0x24
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	68b9      	ldr	r1, [r7, #8]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fcc5 	bl	8007a34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070aa:	6978      	ldr	r0, [r7, #20]
 80070ac:	f7ff ff26 	bl	8006efc <prvUnlockQueue>
	}
 80070b0:	bf00      	nop
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08e      	sub	sp, #56	@ 0x38
 80070bc:	af04      	add	r7, sp, #16
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10b      	bne.n	80070e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	623b      	str	r3, [r7, #32]
}
 80070de:	bf00      	nop
 80070e0:	bf00      	nop
 80070e2:	e7fd      	b.n	80070e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10b      	bne.n	8007102 <xTaskCreateStatic+0x4a>
	__asm volatile
 80070ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	61fb      	str	r3, [r7, #28]
}
 80070fc:	bf00      	nop
 80070fe:	bf00      	nop
 8007100:	e7fd      	b.n	80070fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007102:	235c      	movs	r3, #92	@ 0x5c
 8007104:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	2b5c      	cmp	r3, #92	@ 0x5c
 800710a:	d00b      	beq.n	8007124 <xTaskCreateStatic+0x6c>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	61bb      	str	r3, [r7, #24]
}
 800711e:	bf00      	nop
 8007120:	bf00      	nop
 8007122:	e7fd      	b.n	8007120 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007124:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01e      	beq.n	800716a <xTaskCreateStatic+0xb2>
 800712c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800712e:	2b00      	cmp	r3, #0
 8007130:	d01b      	beq.n	800716a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007134:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007138:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800713a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800713c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713e:	2202      	movs	r2, #2
 8007140:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007144:	2300      	movs	r3, #0
 8007146:	9303      	str	r3, [sp, #12]
 8007148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714a:	9302      	str	r3, [sp, #8]
 800714c:	f107 0314 	add.w	r3, r7, #20
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	68b9      	ldr	r1, [r7, #8]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f850 	bl	8007202 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007162:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007164:	f000 f8de 	bl	8007324 <prvAddNewTaskToReadyList>
 8007168:	e001      	b.n	800716e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800716e:	697b      	ldr	r3, [r7, #20]
	}
 8007170:	4618      	mov	r0, r3
 8007172:	3728      	adds	r7, #40	@ 0x28
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007178:	b580      	push	{r7, lr}
 800717a:	b08c      	sub	sp, #48	@ 0x30
 800717c:	af04      	add	r7, sp, #16
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	4613      	mov	r3, r2
 8007186:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007188:	88fb      	ldrh	r3, [r7, #6]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4618      	mov	r0, r3
 800718e:	f001 fccd 	bl	8008b2c <pvPortMalloc>
 8007192:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00e      	beq.n	80071b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800719a:	205c      	movs	r0, #92	@ 0x5c
 800719c:	f001 fcc6 	bl	8008b2c <pvPortMalloc>
 80071a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80071ae:	e005      	b.n	80071bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071b0:	6978      	ldr	r0, [r7, #20]
 80071b2:	f001 fd89 	bl	8008cc8 <vPortFree>
 80071b6:	e001      	b.n	80071bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071b8:	2300      	movs	r3, #0
 80071ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d017      	beq.n	80071f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071ca:	88fa      	ldrh	r2, [r7, #6]
 80071cc:	2300      	movs	r3, #0
 80071ce:	9303      	str	r3, [sp, #12]
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	9302      	str	r3, [sp, #8]
 80071d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	68b9      	ldr	r1, [r7, #8]
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 f80e 	bl	8007202 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071e6:	69f8      	ldr	r0, [r7, #28]
 80071e8:	f000 f89c 	bl	8007324 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071ec:	2301      	movs	r3, #1
 80071ee:	61bb      	str	r3, [r7, #24]
 80071f0:	e002      	b.n	80071f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071f2:	f04f 33ff 	mov.w	r3, #4294967295
 80071f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071f8:	69bb      	ldr	r3, [r7, #24]
	}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3720      	adds	r7, #32
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b088      	sub	sp, #32
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	607a      	str	r2, [r7, #4]
 800720e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007212:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	461a      	mov	r2, r3
 800721a:	21a5      	movs	r1, #165	@ 0xa5
 800721c:	f001 fe74 	bl	8008f08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007222:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800722a:	3b01      	subs	r3, #1
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	f023 0307 	bic.w	r3, r3, #7
 8007238:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	617b      	str	r3, [r7, #20]
}
 8007256:	bf00      	nop
 8007258:	bf00      	nop
 800725a:	e7fd      	b.n	8007258 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d01f      	beq.n	80072a2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007262:	2300      	movs	r3, #0
 8007264:	61fb      	str	r3, [r7, #28]
 8007266:	e012      	b.n	800728e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	7819      	ldrb	r1, [r3, #0]
 8007270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	4413      	add	r3, r2
 8007276:	3334      	adds	r3, #52	@ 0x34
 8007278:	460a      	mov	r2, r1
 800727a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	4413      	add	r3, r2
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d006      	beq.n	8007296 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	3301      	adds	r3, #1
 800728c:	61fb      	str	r3, [r7, #28]
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	2b0f      	cmp	r3, #15
 8007292:	d9e9      	bls.n	8007268 <prvInitialiseNewTask+0x66>
 8007294:	e000      	b.n	8007298 <prvInitialiseNewTask+0x96>
			{
				break;
 8007296:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072a0:	e003      	b.n	80072aa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ac:	2b37      	cmp	r3, #55	@ 0x37
 80072ae:	d901      	bls.n	80072b4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072b0:	2337      	movs	r3, #55	@ 0x37
 80072b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072be:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	2200      	movs	r2, #0
 80072c4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c8:	3304      	adds	r3, #4
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7ff f966 	bl	800659c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d2:	3318      	adds	r3, #24
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7ff f961 	bl	800659c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80072e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f2:	2200      	movs	r2, #0
 80072f4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	68f9      	ldr	r1, [r7, #12]
 8007302:	69b8      	ldr	r0, [r7, #24]
 8007304:	f001 f9be 	bl	8008684 <pxPortInitialiseStack>
 8007308:	4602      	mov	r2, r0
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800730e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007310:	2b00      	cmp	r3, #0
 8007312:	d002      	beq.n	800731a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007318:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800731a:	bf00      	nop
 800731c:	3720      	adds	r7, #32
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800732c:	f001 fadc 	bl	80088e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007330:	4b2d      	ldr	r3, [pc, #180]	@ (80073e8 <prvAddNewTaskToReadyList+0xc4>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3301      	adds	r3, #1
 8007336:	4a2c      	ldr	r2, [pc, #176]	@ (80073e8 <prvAddNewTaskToReadyList+0xc4>)
 8007338:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800733a:	4b2c      	ldr	r3, [pc, #176]	@ (80073ec <prvAddNewTaskToReadyList+0xc8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d109      	bne.n	8007356 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007342:	4a2a      	ldr	r2, [pc, #168]	@ (80073ec <prvAddNewTaskToReadyList+0xc8>)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007348:	4b27      	ldr	r3, [pc, #156]	@ (80073e8 <prvAddNewTaskToReadyList+0xc4>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d110      	bne.n	8007372 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007350:	f000 fc9e 	bl	8007c90 <prvInitialiseTaskLists>
 8007354:	e00d      	b.n	8007372 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007356:	4b26      	ldr	r3, [pc, #152]	@ (80073f0 <prvAddNewTaskToReadyList+0xcc>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d109      	bne.n	8007372 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800735e:	4b23      	ldr	r3, [pc, #140]	@ (80073ec <prvAddNewTaskToReadyList+0xc8>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007368:	429a      	cmp	r2, r3
 800736a:	d802      	bhi.n	8007372 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800736c:	4a1f      	ldr	r2, [pc, #124]	@ (80073ec <prvAddNewTaskToReadyList+0xc8>)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007372:	4b20      	ldr	r3, [pc, #128]	@ (80073f4 <prvAddNewTaskToReadyList+0xd0>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3301      	adds	r3, #1
 8007378:	4a1e      	ldr	r2, [pc, #120]	@ (80073f4 <prvAddNewTaskToReadyList+0xd0>)
 800737a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800737c:	4b1d      	ldr	r3, [pc, #116]	@ (80073f4 <prvAddNewTaskToReadyList+0xd0>)
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007388:	4b1b      	ldr	r3, [pc, #108]	@ (80073f8 <prvAddNewTaskToReadyList+0xd4>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	429a      	cmp	r2, r3
 800738e:	d903      	bls.n	8007398 <prvAddNewTaskToReadyList+0x74>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007394:	4a18      	ldr	r2, [pc, #96]	@ (80073f8 <prvAddNewTaskToReadyList+0xd4>)
 8007396:	6013      	str	r3, [r2, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800739c:	4613      	mov	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4a15      	ldr	r2, [pc, #84]	@ (80073fc <prvAddNewTaskToReadyList+0xd8>)
 80073a6:	441a      	add	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3304      	adds	r3, #4
 80073ac:	4619      	mov	r1, r3
 80073ae:	4610      	mov	r0, r2
 80073b0:	f7ff f901 	bl	80065b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073b4:	f001 faca 	bl	800894c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073b8:	4b0d      	ldr	r3, [pc, #52]	@ (80073f0 <prvAddNewTaskToReadyList+0xcc>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00e      	beq.n	80073de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073c0:	4b0a      	ldr	r3, [pc, #40]	@ (80073ec <prvAddNewTaskToReadyList+0xc8>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d207      	bcs.n	80073de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007400 <prvAddNewTaskToReadyList+0xdc>)
 80073d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073de:	bf00      	nop
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	200012ec 	.word	0x200012ec
 80073ec:	20000e18 	.word	0x20000e18
 80073f0:	200012f8 	.word	0x200012f8
 80073f4:	20001308 	.word	0x20001308
 80073f8:	200012f4 	.word	0x200012f4
 80073fc:	20000e1c 	.word	0x20000e1c
 8007400:	e000ed04 	.word	0xe000ed04

08007404 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08a      	sub	sp, #40	@ 0x28
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800740e:	2300      	movs	r3, #0
 8007410:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10b      	bne.n	8007430 <vTaskDelayUntil+0x2c>
	__asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	617b      	str	r3, [r7, #20]
}
 800742a:	bf00      	nop
 800742c:	bf00      	nop
 800742e:	e7fd      	b.n	800742c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10b      	bne.n	800744e <vTaskDelayUntil+0x4a>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	613b      	str	r3, [r7, #16]
}
 8007448:	bf00      	nop
 800744a:	bf00      	nop
 800744c:	e7fd      	b.n	800744a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800744e:	4b2a      	ldr	r3, [pc, #168]	@ (80074f8 <vTaskDelayUntil+0xf4>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00b      	beq.n	800746e <vTaskDelayUntil+0x6a>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	60fb      	str	r3, [r7, #12]
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	e7fd      	b.n	800746a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800746e:	f000 f8e7 	bl	8007640 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007472:	4b22      	ldr	r3, [pc, #136]	@ (80074fc <vTaskDelayUntil+0xf8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	4413      	add	r3, r2
 8007480:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6a3a      	ldr	r2, [r7, #32]
 8007488:	429a      	cmp	r2, r3
 800748a:	d20b      	bcs.n	80074a4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	69fa      	ldr	r2, [r7, #28]
 8007492:	429a      	cmp	r2, r3
 8007494:	d211      	bcs.n	80074ba <vTaskDelayUntil+0xb6>
 8007496:	69fa      	ldr	r2, [r7, #28]
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	429a      	cmp	r2, r3
 800749c:	d90d      	bls.n	80074ba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800749e:	2301      	movs	r3, #1
 80074a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80074a2:	e00a      	b.n	80074ba <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	69fa      	ldr	r2, [r7, #28]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d303      	bcc.n	80074b6 <vTaskDelayUntil+0xb2>
 80074ae:	69fa      	ldr	r2, [r7, #28]
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d901      	bls.n	80074ba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80074b6:	2301      	movs	r3, #1
 80074b8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	69fa      	ldr	r2, [r7, #28]
 80074be:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80074c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d006      	beq.n	80074d4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2100      	movs	r1, #0
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 fd2a 	bl	8007f28 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80074d4:	f000 f8c2 	bl	800765c <xTaskResumeAll>
 80074d8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d107      	bne.n	80074f0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80074e0:	4b07      	ldr	r3, [pc, #28]	@ (8007500 <vTaskDelayUntil+0xfc>)
 80074e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074f0:	bf00      	nop
 80074f2:	3728      	adds	r7, #40	@ 0x28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	20001314 	.word	0x20001314
 80074fc:	200012f0 	.word	0x200012f0
 8007500:	e000ed04 	.word	0xe000ed04

08007504 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d018      	beq.n	8007548 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007516:	4b14      	ldr	r3, [pc, #80]	@ (8007568 <vTaskDelay+0x64>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00b      	beq.n	8007536 <vTaskDelay+0x32>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	60bb      	str	r3, [r7, #8]
}
 8007530:	bf00      	nop
 8007532:	bf00      	nop
 8007534:	e7fd      	b.n	8007532 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007536:	f000 f883 	bl	8007640 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800753a:	2100      	movs	r1, #0
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fcf3 	bl	8007f28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007542:	f000 f88b 	bl	800765c <xTaskResumeAll>
 8007546:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d107      	bne.n	800755e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800754e:	4b07      	ldr	r3, [pc, #28]	@ (800756c <vTaskDelay+0x68>)
 8007550:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800755e:	bf00      	nop
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20001314 	.word	0x20001314
 800756c:	e000ed04 	.word	0xe000ed04

08007570 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08a      	sub	sp, #40	@ 0x28
 8007574:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007576:	2300      	movs	r3, #0
 8007578:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800757e:	463a      	mov	r2, r7
 8007580:	1d39      	adds	r1, r7, #4
 8007582:	f107 0308 	add.w	r3, r7, #8
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe ffb4 	bl	80064f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	9202      	str	r2, [sp, #8]
 8007594:	9301      	str	r3, [sp, #4]
 8007596:	2300      	movs	r3, #0
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	2300      	movs	r3, #0
 800759c:	460a      	mov	r2, r1
 800759e:	4922      	ldr	r1, [pc, #136]	@ (8007628 <vTaskStartScheduler+0xb8>)
 80075a0:	4822      	ldr	r0, [pc, #136]	@ (800762c <vTaskStartScheduler+0xbc>)
 80075a2:	f7ff fd89 	bl	80070b8 <xTaskCreateStatic>
 80075a6:	4603      	mov	r3, r0
 80075a8:	4a21      	ldr	r2, [pc, #132]	@ (8007630 <vTaskStartScheduler+0xc0>)
 80075aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075ac:	4b20      	ldr	r3, [pc, #128]	@ (8007630 <vTaskStartScheduler+0xc0>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075b4:	2301      	movs	r3, #1
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	e001      	b.n	80075be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d102      	bne.n	80075ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075c4:	f000 fd04 	bl	8007fd0 <xTimerCreateTimerTask>
 80075c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d116      	bne.n	80075fe <vTaskStartScheduler+0x8e>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	613b      	str	r3, [r7, #16]
}
 80075e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80075e4:	4b13      	ldr	r3, [pc, #76]	@ (8007634 <vTaskStartScheduler+0xc4>)
 80075e6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075ec:	4b12      	ldr	r3, [pc, #72]	@ (8007638 <vTaskStartScheduler+0xc8>)
 80075ee:	2201      	movs	r2, #1
 80075f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075f2:	4b12      	ldr	r3, [pc, #72]	@ (800763c <vTaskStartScheduler+0xcc>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075f8:	f001 f8d2 	bl	80087a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075fc:	e00f      	b.n	800761e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007604:	d10b      	bne.n	800761e <vTaskStartScheduler+0xae>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	60fb      	str	r3, [r7, #12]
}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	e7fd      	b.n	800761a <vTaskStartScheduler+0xaa>
}
 800761e:	bf00      	nop
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	08008fc0 	.word	0x08008fc0
 800762c:	08007c61 	.word	0x08007c61
 8007630:	20001310 	.word	0x20001310
 8007634:	2000130c 	.word	0x2000130c
 8007638:	200012f8 	.word	0x200012f8
 800763c:	200012f0 	.word	0x200012f0

08007640 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007644:	4b04      	ldr	r3, [pc, #16]	@ (8007658 <vTaskSuspendAll+0x18>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3301      	adds	r3, #1
 800764a:	4a03      	ldr	r2, [pc, #12]	@ (8007658 <vTaskSuspendAll+0x18>)
 800764c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800764e:	bf00      	nop
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	20001314 	.word	0x20001314

0800765c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007666:	2300      	movs	r3, #0
 8007668:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800766a:	4b42      	ldr	r3, [pc, #264]	@ (8007774 <xTaskResumeAll+0x118>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10b      	bne.n	800768a <xTaskResumeAll+0x2e>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	603b      	str	r3, [r7, #0]
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop
 8007688:	e7fd      	b.n	8007686 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800768a:	f001 f92d 	bl	80088e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800768e:	4b39      	ldr	r3, [pc, #228]	@ (8007774 <xTaskResumeAll+0x118>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3b01      	subs	r3, #1
 8007694:	4a37      	ldr	r2, [pc, #220]	@ (8007774 <xTaskResumeAll+0x118>)
 8007696:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007698:	4b36      	ldr	r3, [pc, #216]	@ (8007774 <xTaskResumeAll+0x118>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d162      	bne.n	8007766 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076a0:	4b35      	ldr	r3, [pc, #212]	@ (8007778 <xTaskResumeAll+0x11c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d05e      	beq.n	8007766 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076a8:	e02f      	b.n	800770a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076aa:	4b34      	ldr	r3, [pc, #208]	@ (800777c <xTaskResumeAll+0x120>)
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3318      	adds	r3, #24
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fe ffda 	bl	8006670 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3304      	adds	r3, #4
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fe ffd5 	bl	8006670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ca:	4b2d      	ldr	r3, [pc, #180]	@ (8007780 <xTaskResumeAll+0x124>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d903      	bls.n	80076da <xTaskResumeAll+0x7e>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007780 <xTaskResumeAll+0x124>)
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076de:	4613      	mov	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4a27      	ldr	r2, [pc, #156]	@ (8007784 <xTaskResumeAll+0x128>)
 80076e8:	441a      	add	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3304      	adds	r3, #4
 80076ee:	4619      	mov	r1, r3
 80076f0:	4610      	mov	r0, r2
 80076f2:	f7fe ff60 	bl	80065b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076fa:	4b23      	ldr	r3, [pc, #140]	@ (8007788 <xTaskResumeAll+0x12c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007700:	429a      	cmp	r2, r3
 8007702:	d302      	bcc.n	800770a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007704:	4b21      	ldr	r3, [pc, #132]	@ (800778c <xTaskResumeAll+0x130>)
 8007706:	2201      	movs	r2, #1
 8007708:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800770a:	4b1c      	ldr	r3, [pc, #112]	@ (800777c <xTaskResumeAll+0x120>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1cb      	bne.n	80076aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007718:	f000 fb58 	bl	8007dcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800771c:	4b1c      	ldr	r3, [pc, #112]	@ (8007790 <xTaskResumeAll+0x134>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d010      	beq.n	800774a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007728:	f000 f846 	bl	80077b8 <xTaskIncrementTick>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007732:	4b16      	ldr	r3, [pc, #88]	@ (800778c <xTaskResumeAll+0x130>)
 8007734:	2201      	movs	r2, #1
 8007736:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3b01      	subs	r3, #1
 800773c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1f1      	bne.n	8007728 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007744:	4b12      	ldr	r3, [pc, #72]	@ (8007790 <xTaskResumeAll+0x134>)
 8007746:	2200      	movs	r2, #0
 8007748:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800774a:	4b10      	ldr	r3, [pc, #64]	@ (800778c <xTaskResumeAll+0x130>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d009      	beq.n	8007766 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007752:	2301      	movs	r3, #1
 8007754:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007756:	4b0f      	ldr	r3, [pc, #60]	@ (8007794 <xTaskResumeAll+0x138>)
 8007758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007766:	f001 f8f1 	bl	800894c <vPortExitCritical>

	return xAlreadyYielded;
 800776a:	68bb      	ldr	r3, [r7, #8]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	20001314 	.word	0x20001314
 8007778:	200012ec 	.word	0x200012ec
 800777c:	200012ac 	.word	0x200012ac
 8007780:	200012f4 	.word	0x200012f4
 8007784:	20000e1c 	.word	0x20000e1c
 8007788:	20000e18 	.word	0x20000e18
 800778c:	20001300 	.word	0x20001300
 8007790:	200012fc 	.word	0x200012fc
 8007794:	e000ed04 	.word	0xe000ed04

08007798 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800779e:	4b05      	ldr	r3, [pc, #20]	@ (80077b4 <xTaskGetTickCount+0x1c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077a4:	687b      	ldr	r3, [r7, #4]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	200012f0 	.word	0x200012f0

080077b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077be:	2300      	movs	r3, #0
 80077c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077c2:	4b4f      	ldr	r3, [pc, #316]	@ (8007900 <xTaskIncrementTick+0x148>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f040 8090 	bne.w	80078ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077cc:	4b4d      	ldr	r3, [pc, #308]	@ (8007904 <xTaskIncrementTick+0x14c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3301      	adds	r3, #1
 80077d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077d4:	4a4b      	ldr	r2, [pc, #300]	@ (8007904 <xTaskIncrementTick+0x14c>)
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d121      	bne.n	8007824 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80077e0:	4b49      	ldr	r3, [pc, #292]	@ (8007908 <xTaskIncrementTick+0x150>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00b      	beq.n	8007802 <xTaskIncrementTick+0x4a>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	603b      	str	r3, [r7, #0]
}
 80077fc:	bf00      	nop
 80077fe:	bf00      	nop
 8007800:	e7fd      	b.n	80077fe <xTaskIncrementTick+0x46>
 8007802:	4b41      	ldr	r3, [pc, #260]	@ (8007908 <xTaskIncrementTick+0x150>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	4b40      	ldr	r3, [pc, #256]	@ (800790c <xTaskIncrementTick+0x154>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a3e      	ldr	r2, [pc, #248]	@ (8007908 <xTaskIncrementTick+0x150>)
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	4a3e      	ldr	r2, [pc, #248]	@ (800790c <xTaskIncrementTick+0x154>)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6013      	str	r3, [r2, #0]
 8007816:	4b3e      	ldr	r3, [pc, #248]	@ (8007910 <xTaskIncrementTick+0x158>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3301      	adds	r3, #1
 800781c:	4a3c      	ldr	r2, [pc, #240]	@ (8007910 <xTaskIncrementTick+0x158>)
 800781e:	6013      	str	r3, [r2, #0]
 8007820:	f000 fad4 	bl	8007dcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007824:	4b3b      	ldr	r3, [pc, #236]	@ (8007914 <xTaskIncrementTick+0x15c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	429a      	cmp	r2, r3
 800782c:	d349      	bcc.n	80078c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800782e:	4b36      	ldr	r3, [pc, #216]	@ (8007908 <xTaskIncrementTick+0x150>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d104      	bne.n	8007842 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007838:	4b36      	ldr	r3, [pc, #216]	@ (8007914 <xTaskIncrementTick+0x15c>)
 800783a:	f04f 32ff 	mov.w	r2, #4294967295
 800783e:	601a      	str	r2, [r3, #0]
					break;
 8007840:	e03f      	b.n	80078c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007842:	4b31      	ldr	r3, [pc, #196]	@ (8007908 <xTaskIncrementTick+0x150>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	429a      	cmp	r2, r3
 8007858:	d203      	bcs.n	8007862 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800785a:	4a2e      	ldr	r2, [pc, #184]	@ (8007914 <xTaskIncrementTick+0x15c>)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007860:	e02f      	b.n	80078c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	3304      	adds	r3, #4
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe ff02 	bl	8006670 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007870:	2b00      	cmp	r3, #0
 8007872:	d004      	beq.n	800787e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	3318      	adds	r3, #24
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe fef9 	bl	8006670 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007882:	4b25      	ldr	r3, [pc, #148]	@ (8007918 <xTaskIncrementTick+0x160>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	429a      	cmp	r2, r3
 8007888:	d903      	bls.n	8007892 <xTaskIncrementTick+0xda>
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788e:	4a22      	ldr	r2, [pc, #136]	@ (8007918 <xTaskIncrementTick+0x160>)
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4a1f      	ldr	r2, [pc, #124]	@ (800791c <xTaskIncrementTick+0x164>)
 80078a0:	441a      	add	r2, r3
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	3304      	adds	r3, #4
 80078a6:	4619      	mov	r1, r3
 80078a8:	4610      	mov	r0, r2
 80078aa:	f7fe fe84 	bl	80065b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007920 <xTaskIncrementTick+0x168>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d3b8      	bcc.n	800782e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80078bc:	2301      	movs	r3, #1
 80078be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078c0:	e7b5      	b.n	800782e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078c2:	4b17      	ldr	r3, [pc, #92]	@ (8007920 <xTaskIncrementTick+0x168>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c8:	4914      	ldr	r1, [pc, #80]	@ (800791c <xTaskIncrementTick+0x164>)
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d901      	bls.n	80078de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80078da:	2301      	movs	r3, #1
 80078dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80078de:	4b11      	ldr	r3, [pc, #68]	@ (8007924 <xTaskIncrementTick+0x16c>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d007      	beq.n	80078f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80078e6:	2301      	movs	r3, #1
 80078e8:	617b      	str	r3, [r7, #20]
 80078ea:	e004      	b.n	80078f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80078ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007928 <xTaskIncrementTick+0x170>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3301      	adds	r3, #1
 80078f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007928 <xTaskIncrementTick+0x170>)
 80078f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80078f6:	697b      	ldr	r3, [r7, #20]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	20001314 	.word	0x20001314
 8007904:	200012f0 	.word	0x200012f0
 8007908:	200012a4 	.word	0x200012a4
 800790c:	200012a8 	.word	0x200012a8
 8007910:	20001304 	.word	0x20001304
 8007914:	2000130c 	.word	0x2000130c
 8007918:	200012f4 	.word	0x200012f4
 800791c:	20000e1c 	.word	0x20000e1c
 8007920:	20000e18 	.word	0x20000e18
 8007924:	20001300 	.word	0x20001300
 8007928:	200012fc 	.word	0x200012fc

0800792c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007932:	4b28      	ldr	r3, [pc, #160]	@ (80079d4 <vTaskSwitchContext+0xa8>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800793a:	4b27      	ldr	r3, [pc, #156]	@ (80079d8 <vTaskSwitchContext+0xac>)
 800793c:	2201      	movs	r2, #1
 800793e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007940:	e042      	b.n	80079c8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007942:	4b25      	ldr	r3, [pc, #148]	@ (80079d8 <vTaskSwitchContext+0xac>)
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007948:	4b24      	ldr	r3, [pc, #144]	@ (80079dc <vTaskSwitchContext+0xb0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	e011      	b.n	8007974 <vTaskSwitchContext+0x48>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10b      	bne.n	800796e <vTaskSwitchContext+0x42>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	607b      	str	r3, [r7, #4]
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	e7fd      	b.n	800796a <vTaskSwitchContext+0x3e>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3b01      	subs	r3, #1
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	491a      	ldr	r1, [pc, #104]	@ (80079e0 <vTaskSwitchContext+0xb4>)
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4613      	mov	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	440b      	add	r3, r1
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0e3      	beq.n	8007950 <vTaskSwitchContext+0x24>
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4613      	mov	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4a13      	ldr	r2, [pc, #76]	@ (80079e0 <vTaskSwitchContext+0xb4>)
 8007994:	4413      	add	r3, r2
 8007996:	60bb      	str	r3, [r7, #8]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	605a      	str	r2, [r3, #4]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	3308      	adds	r3, #8
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d104      	bne.n	80079b8 <vTaskSwitchContext+0x8c>
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	605a      	str	r2, [r3, #4]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	4a09      	ldr	r2, [pc, #36]	@ (80079e4 <vTaskSwitchContext+0xb8>)
 80079c0:	6013      	str	r3, [r2, #0]
 80079c2:	4a06      	ldr	r2, [pc, #24]	@ (80079dc <vTaskSwitchContext+0xb0>)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6013      	str	r3, [r2, #0]
}
 80079c8:	bf00      	nop
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	20001314 	.word	0x20001314
 80079d8:	20001300 	.word	0x20001300
 80079dc:	200012f4 	.word	0x200012f4
 80079e0:	20000e1c 	.word	0x20000e1c
 80079e4:	20000e18 	.word	0x20000e18

080079e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10b      	bne.n	8007a10 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	60fb      	str	r3, [r7, #12]
}
 8007a0a:	bf00      	nop
 8007a0c:	bf00      	nop
 8007a0e:	e7fd      	b.n	8007a0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a10:	4b07      	ldr	r3, [pc, #28]	@ (8007a30 <vTaskPlaceOnEventList+0x48>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3318      	adds	r3, #24
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7fe fdf0 	bl	80065fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a1e:	2101      	movs	r1, #1
 8007a20:	6838      	ldr	r0, [r7, #0]
 8007a22:	f000 fa81 	bl	8007f28 <prvAddCurrentTaskToDelayedList>
}
 8007a26:	bf00      	nop
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000e18 	.word	0x20000e18

08007a34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10b      	bne.n	8007a5e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	617b      	str	r3, [r7, #20]
}
 8007a58:	bf00      	nop
 8007a5a:	bf00      	nop
 8007a5c:	e7fd      	b.n	8007a5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <vTaskPlaceOnEventListRestricted+0x54>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3318      	adds	r3, #24
 8007a64:	4619      	mov	r1, r3
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7fe fda5 	bl	80065b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d002      	beq.n	8007a78 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007a72:	f04f 33ff 	mov.w	r3, #4294967295
 8007a76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a78:	6879      	ldr	r1, [r7, #4]
 8007a7a:	68b8      	ldr	r0, [r7, #8]
 8007a7c:	f000 fa54 	bl	8007f28 <prvAddCurrentTaskToDelayedList>
	}
 8007a80:	bf00      	nop
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	20000e18 	.word	0x20000e18

08007a8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10b      	bne.n	8007aba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	60fb      	str	r3, [r7, #12]
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	e7fd      	b.n	8007ab6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	3318      	adds	r3, #24
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe fdd6 	bl	8006670 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8007b3c <xTaskRemoveFromEventList+0xb0>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d11d      	bne.n	8007b08 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	3304      	adds	r3, #4
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe fdcd 	bl	8006670 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ada:	4b19      	ldr	r3, [pc, #100]	@ (8007b40 <xTaskRemoveFromEventList+0xb4>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d903      	bls.n	8007aea <xTaskRemoveFromEventList+0x5e>
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae6:	4a16      	ldr	r2, [pc, #88]	@ (8007b40 <xTaskRemoveFromEventList+0xb4>)
 8007ae8:	6013      	str	r3, [r2, #0]
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aee:	4613      	mov	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4a13      	ldr	r2, [pc, #76]	@ (8007b44 <xTaskRemoveFromEventList+0xb8>)
 8007af8:	441a      	add	r2, r3
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	3304      	adds	r3, #4
 8007afe:	4619      	mov	r1, r3
 8007b00:	4610      	mov	r0, r2
 8007b02:	f7fe fd58 	bl	80065b6 <vListInsertEnd>
 8007b06:	e005      	b.n	8007b14 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	3318      	adds	r3, #24
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	480e      	ldr	r0, [pc, #56]	@ (8007b48 <xTaskRemoveFromEventList+0xbc>)
 8007b10:	f7fe fd51 	bl	80065b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b18:	4b0c      	ldr	r3, [pc, #48]	@ (8007b4c <xTaskRemoveFromEventList+0xc0>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d905      	bls.n	8007b2e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b22:	2301      	movs	r3, #1
 8007b24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b26:	4b0a      	ldr	r3, [pc, #40]	@ (8007b50 <xTaskRemoveFromEventList+0xc4>)
 8007b28:	2201      	movs	r2, #1
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	e001      	b.n	8007b32 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b32:	697b      	ldr	r3, [r7, #20]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	20001314 	.word	0x20001314
 8007b40:	200012f4 	.word	0x200012f4
 8007b44:	20000e1c 	.word	0x20000e1c
 8007b48:	200012ac 	.word	0x200012ac
 8007b4c:	20000e18 	.word	0x20000e18
 8007b50:	20001300 	.word	0x20001300

08007b54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b5c:	4b06      	ldr	r3, [pc, #24]	@ (8007b78 <vTaskInternalSetTimeOutState+0x24>)
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b64:	4b05      	ldr	r3, [pc, #20]	@ (8007b7c <vTaskInternalSetTimeOutState+0x28>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	605a      	str	r2, [r3, #4]
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	20001304 	.word	0x20001304
 8007b7c:	200012f0 	.word	0x200012f0

08007b80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b088      	sub	sp, #32
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10b      	bne.n	8007ba8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	613b      	str	r3, [r7, #16]
}
 8007ba2:	bf00      	nop
 8007ba4:	bf00      	nop
 8007ba6:	e7fd      	b.n	8007ba4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10b      	bne.n	8007bc6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	60fb      	str	r3, [r7, #12]
}
 8007bc0:	bf00      	nop
 8007bc2:	bf00      	nop
 8007bc4:	e7fd      	b.n	8007bc2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007bc6:	f000 fe8f 	bl	80088e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007bca:	4b1d      	ldr	r3, [pc, #116]	@ (8007c40 <xTaskCheckForTimeOut+0xc0>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be2:	d102      	bne.n	8007bea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007be4:	2300      	movs	r3, #0
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	e023      	b.n	8007c32 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	4b15      	ldr	r3, [pc, #84]	@ (8007c44 <xTaskCheckForTimeOut+0xc4>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d007      	beq.n	8007c06 <xTaskCheckForTimeOut+0x86>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d302      	bcc.n	8007c06 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c00:	2301      	movs	r3, #1
 8007c02:	61fb      	str	r3, [r7, #28]
 8007c04:	e015      	b.n	8007c32 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d20b      	bcs.n	8007c28 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	1ad2      	subs	r2, r2, r3
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff ff99 	bl	8007b54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c22:	2300      	movs	r3, #0
 8007c24:	61fb      	str	r3, [r7, #28]
 8007c26:	e004      	b.n	8007c32 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c32:	f000 fe8b 	bl	800894c <vPortExitCritical>

	return xReturn;
 8007c36:	69fb      	ldr	r3, [r7, #28]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3720      	adds	r7, #32
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	200012f0 	.word	0x200012f0
 8007c44:	20001304 	.word	0x20001304

08007c48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c48:	b480      	push	{r7}
 8007c4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c4c:	4b03      	ldr	r3, [pc, #12]	@ (8007c5c <vTaskMissedYield+0x14>)
 8007c4e:	2201      	movs	r2, #1
 8007c50:	601a      	str	r2, [r3, #0]
}
 8007c52:	bf00      	nop
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	20001300 	.word	0x20001300

08007c60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c68:	f000 f852 	bl	8007d10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c6c:	4b06      	ldr	r3, [pc, #24]	@ (8007c88 <prvIdleTask+0x28>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d9f9      	bls.n	8007c68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c74:	4b05      	ldr	r3, [pc, #20]	@ (8007c8c <prvIdleTask+0x2c>)
 8007c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c84:	e7f0      	b.n	8007c68 <prvIdleTask+0x8>
 8007c86:	bf00      	nop
 8007c88:	20000e1c 	.word	0x20000e1c
 8007c8c:	e000ed04 	.word	0xe000ed04

08007c90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c96:	2300      	movs	r3, #0
 8007c98:	607b      	str	r3, [r7, #4]
 8007c9a:	e00c      	b.n	8007cb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4a12      	ldr	r2, [pc, #72]	@ (8007cf0 <prvInitialiseTaskLists+0x60>)
 8007ca8:	4413      	add	r3, r2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fc56 	bl	800655c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	607b      	str	r3, [r7, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b37      	cmp	r3, #55	@ 0x37
 8007cba:	d9ef      	bls.n	8007c9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007cbc:	480d      	ldr	r0, [pc, #52]	@ (8007cf4 <prvInitialiseTaskLists+0x64>)
 8007cbe:	f7fe fc4d 	bl	800655c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007cc2:	480d      	ldr	r0, [pc, #52]	@ (8007cf8 <prvInitialiseTaskLists+0x68>)
 8007cc4:	f7fe fc4a 	bl	800655c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007cc8:	480c      	ldr	r0, [pc, #48]	@ (8007cfc <prvInitialiseTaskLists+0x6c>)
 8007cca:	f7fe fc47 	bl	800655c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007cce:	480c      	ldr	r0, [pc, #48]	@ (8007d00 <prvInitialiseTaskLists+0x70>)
 8007cd0:	f7fe fc44 	bl	800655c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007cd4:	480b      	ldr	r0, [pc, #44]	@ (8007d04 <prvInitialiseTaskLists+0x74>)
 8007cd6:	f7fe fc41 	bl	800655c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007cda:	4b0b      	ldr	r3, [pc, #44]	@ (8007d08 <prvInitialiseTaskLists+0x78>)
 8007cdc:	4a05      	ldr	r2, [pc, #20]	@ (8007cf4 <prvInitialiseTaskLists+0x64>)
 8007cde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8007d0c <prvInitialiseTaskLists+0x7c>)
 8007ce2:	4a05      	ldr	r2, [pc, #20]	@ (8007cf8 <prvInitialiseTaskLists+0x68>)
 8007ce4:	601a      	str	r2, [r3, #0]
}
 8007ce6:	bf00      	nop
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20000e1c 	.word	0x20000e1c
 8007cf4:	2000127c 	.word	0x2000127c
 8007cf8:	20001290 	.word	0x20001290
 8007cfc:	200012ac 	.word	0x200012ac
 8007d00:	200012c0 	.word	0x200012c0
 8007d04:	200012d8 	.word	0x200012d8
 8007d08:	200012a4 	.word	0x200012a4
 8007d0c:	200012a8 	.word	0x200012a8

08007d10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d16:	e019      	b.n	8007d4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d18:	f000 fde6 	bl	80088e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d1c:	4b10      	ldr	r3, [pc, #64]	@ (8007d60 <prvCheckTasksWaitingTermination+0x50>)
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3304      	adds	r3, #4
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7fe fca1 	bl	8006670 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d64 <prvCheckTasksWaitingTermination+0x54>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	4a0b      	ldr	r2, [pc, #44]	@ (8007d64 <prvCheckTasksWaitingTermination+0x54>)
 8007d36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d38:	4b0b      	ldr	r3, [pc, #44]	@ (8007d68 <prvCheckTasksWaitingTermination+0x58>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8007d68 <prvCheckTasksWaitingTermination+0x58>)
 8007d40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d42:	f000 fe03 	bl	800894c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f810 	bl	8007d6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d4c:	4b06      	ldr	r3, [pc, #24]	@ (8007d68 <prvCheckTasksWaitingTermination+0x58>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e1      	bne.n	8007d18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	200012c0 	.word	0x200012c0
 8007d64:	200012ec 	.word	0x200012ec
 8007d68:	200012d4 	.word	0x200012d4

08007d6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d108      	bne.n	8007d90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 ffa0 	bl	8008cc8 <vPortFree>
				vPortFree( pxTCB );
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 ff9d 	bl	8008cc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d8e:	e019      	b.n	8007dc4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d103      	bne.n	8007da2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 ff94 	bl	8008cc8 <vPortFree>
	}
 8007da0:	e010      	b.n	8007dc4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d00b      	beq.n	8007dc4 <prvDeleteTCB+0x58>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	60fb      	str	r3, [r7, #12]
}
 8007dbe:	bf00      	nop
 8007dc0:	bf00      	nop
 8007dc2:	e7fd      	b.n	8007dc0 <prvDeleteTCB+0x54>
	}
 8007dc4:	bf00      	nop
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8007e04 <prvResetNextTaskUnblockTime+0x38>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d104      	bne.n	8007de6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8007e08 <prvResetNextTaskUnblockTime+0x3c>)
 8007dde:	f04f 32ff 	mov.w	r2, #4294967295
 8007de2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007de4:	e008      	b.n	8007df8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007de6:	4b07      	ldr	r3, [pc, #28]	@ (8007e04 <prvResetNextTaskUnblockTime+0x38>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	4a04      	ldr	r2, [pc, #16]	@ (8007e08 <prvResetNextTaskUnblockTime+0x3c>)
 8007df6:	6013      	str	r3, [r2, #0]
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	200012a4 	.word	0x200012a4
 8007e08:	2000130c 	.word	0x2000130c

08007e0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e12:	4b0b      	ldr	r3, [pc, #44]	@ (8007e40 <xTaskGetSchedulerState+0x34>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d102      	bne.n	8007e20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	607b      	str	r3, [r7, #4]
 8007e1e:	e008      	b.n	8007e32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e20:	4b08      	ldr	r3, [pc, #32]	@ (8007e44 <xTaskGetSchedulerState+0x38>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d102      	bne.n	8007e2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e28:	2302      	movs	r3, #2
 8007e2a:	607b      	str	r3, [r7, #4]
 8007e2c:	e001      	b.n	8007e32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e32:	687b      	ldr	r3, [r7, #4]
	}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	200012f8 	.word	0x200012f8
 8007e44:	20001314 	.word	0x20001314

08007e48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e54:	2300      	movs	r3, #0
 8007e56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d058      	beq.n	8007f10 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8007f1c <xTaskPriorityDisinherit+0xd4>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d00b      	beq.n	8007e80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	60fb      	str	r3, [r7, #12]
}
 8007e7a:	bf00      	nop
 8007e7c:	bf00      	nop
 8007e7e:	e7fd      	b.n	8007e7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10b      	bne.n	8007ea0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	60bb      	str	r3, [r7, #8]
}
 8007e9a:	bf00      	nop
 8007e9c:	bf00      	nop
 8007e9e:	e7fd      	b.n	8007e9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ea4:	1e5a      	subs	r2, r3, #1
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d02c      	beq.n	8007f10 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d128      	bne.n	8007f10 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe fbd4 	bl	8006670 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8007f20 <xTaskPriorityDisinherit+0xd8>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d903      	bls.n	8007ef0 <xTaskPriorityDisinherit+0xa8>
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eec:	4a0c      	ldr	r2, [pc, #48]	@ (8007f20 <xTaskPriorityDisinherit+0xd8>)
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4a09      	ldr	r2, [pc, #36]	@ (8007f24 <xTaskPriorityDisinherit+0xdc>)
 8007efe:	441a      	add	r2, r3
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	3304      	adds	r3, #4
 8007f04:	4619      	mov	r1, r3
 8007f06:	4610      	mov	r0, r2
 8007f08:	f7fe fb55 	bl	80065b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f10:	697b      	ldr	r3, [r7, #20]
	}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20000e18 	.word	0x20000e18
 8007f20:	200012f4 	.word	0x200012f4
 8007f24:	20000e1c 	.word	0x20000e1c

08007f28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f32:	4b21      	ldr	r3, [pc, #132]	@ (8007fb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f38:	4b20      	ldr	r3, [pc, #128]	@ (8007fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe fb96 	bl	8006670 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4a:	d10a      	bne.n	8007f62 <prvAddCurrentTaskToDelayedList+0x3a>
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d007      	beq.n	8007f62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f52:	4b1a      	ldr	r3, [pc, #104]	@ (8007fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4819      	ldr	r0, [pc, #100]	@ (8007fc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f5c:	f7fe fb2b 	bl	80065b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f60:	e026      	b.n	8007fb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4413      	add	r3, r2
 8007f68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f6a:	4b14      	ldr	r3, [pc, #80]	@ (8007fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d209      	bcs.n	8007f8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f7a:	4b12      	ldr	r3, [pc, #72]	@ (8007fc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8007fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3304      	adds	r3, #4
 8007f84:	4619      	mov	r1, r3
 8007f86:	4610      	mov	r0, r2
 8007f88:	f7fe fb39 	bl	80065fe <vListInsert>
}
 8007f8c:	e010      	b.n	8007fb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007fc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	4b0a      	ldr	r3, [pc, #40]	@ (8007fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	f7fe fb2f 	bl	80065fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8007fcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d202      	bcs.n	8007fb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007faa:	4a08      	ldr	r2, [pc, #32]	@ (8007fcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	6013      	str	r3, [r2, #0]
}
 8007fb0:	bf00      	nop
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	200012f0 	.word	0x200012f0
 8007fbc:	20000e18 	.word	0x20000e18
 8007fc0:	200012d8 	.word	0x200012d8
 8007fc4:	200012a8 	.word	0x200012a8
 8007fc8:	200012a4 	.word	0x200012a4
 8007fcc:	2000130c 	.word	0x2000130c

08007fd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08a      	sub	sp, #40	@ 0x28
 8007fd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007fda:	f000 fb13 	bl	8008604 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007fde:	4b1d      	ldr	r3, [pc, #116]	@ (8008054 <xTimerCreateTimerTask+0x84>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d021      	beq.n	800802a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007fee:	1d3a      	adds	r2, r7, #4
 8007ff0:	f107 0108 	add.w	r1, r7, #8
 8007ff4:	f107 030c 	add.w	r3, r7, #12
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe fa95 	bl	8006528 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	9202      	str	r2, [sp, #8]
 8008006:	9301      	str	r3, [sp, #4]
 8008008:	2302      	movs	r3, #2
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	2300      	movs	r3, #0
 800800e:	460a      	mov	r2, r1
 8008010:	4911      	ldr	r1, [pc, #68]	@ (8008058 <xTimerCreateTimerTask+0x88>)
 8008012:	4812      	ldr	r0, [pc, #72]	@ (800805c <xTimerCreateTimerTask+0x8c>)
 8008014:	f7ff f850 	bl	80070b8 <xTaskCreateStatic>
 8008018:	4603      	mov	r3, r0
 800801a:	4a11      	ldr	r2, [pc, #68]	@ (8008060 <xTimerCreateTimerTask+0x90>)
 800801c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800801e:	4b10      	ldr	r3, [pc, #64]	@ (8008060 <xTimerCreateTimerTask+0x90>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008026:	2301      	movs	r3, #1
 8008028:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10b      	bne.n	8008048 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	613b      	str	r3, [r7, #16]
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	e7fd      	b.n	8008044 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008048:	697b      	ldr	r3, [r7, #20]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20001348 	.word	0x20001348
 8008058:	08008fc8 	.word	0x08008fc8
 800805c:	0800819d 	.word	0x0800819d
 8008060:	2000134c 	.word	0x2000134c

08008064 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08a      	sub	sp, #40	@ 0x28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008072:	2300      	movs	r3, #0
 8008074:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10b      	bne.n	8008094 <xTimerGenericCommand+0x30>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	623b      	str	r3, [r7, #32]
}
 800808e:	bf00      	nop
 8008090:	bf00      	nop
 8008092:	e7fd      	b.n	8008090 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008094:	4b19      	ldr	r3, [pc, #100]	@ (80080fc <xTimerGenericCommand+0x98>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d02a      	beq.n	80080f2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b05      	cmp	r3, #5
 80080ac:	dc18      	bgt.n	80080e0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080ae:	f7ff fead 	bl	8007e0c <xTaskGetSchedulerState>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d109      	bne.n	80080cc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80080b8:	4b10      	ldr	r3, [pc, #64]	@ (80080fc <xTimerGenericCommand+0x98>)
 80080ba:	6818      	ldr	r0, [r3, #0]
 80080bc:	f107 0110 	add.w	r1, r7, #16
 80080c0:	2300      	movs	r3, #0
 80080c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080c4:	f7fe fc08 	bl	80068d8 <xQueueGenericSend>
 80080c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80080ca:	e012      	b.n	80080f2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080cc:	4b0b      	ldr	r3, [pc, #44]	@ (80080fc <xTimerGenericCommand+0x98>)
 80080ce:	6818      	ldr	r0, [r3, #0]
 80080d0:	f107 0110 	add.w	r1, r7, #16
 80080d4:	2300      	movs	r3, #0
 80080d6:	2200      	movs	r2, #0
 80080d8:	f7fe fbfe 	bl	80068d8 <xQueueGenericSend>
 80080dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80080de:	e008      	b.n	80080f2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080e0:	4b06      	ldr	r3, [pc, #24]	@ (80080fc <xTimerGenericCommand+0x98>)
 80080e2:	6818      	ldr	r0, [r3, #0]
 80080e4:	f107 0110 	add.w	r1, r7, #16
 80080e8:	2300      	movs	r3, #0
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	f7fe fcf6 	bl	8006adc <xQueueGenericSendFromISR>
 80080f0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80080f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3728      	adds	r7, #40	@ 0x28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20001348 	.word	0x20001348

08008100 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af02      	add	r7, sp, #8
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800810a:	4b23      	ldr	r3, [pc, #140]	@ (8008198 <prvProcessExpiredTimer+0x98>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	3304      	adds	r3, #4
 8008118:	4618      	mov	r0, r3
 800811a:	f7fe faa9 	bl	8006670 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b00      	cmp	r3, #0
 800812a:	d023      	beq.n	8008174 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	699a      	ldr	r2, [r3, #24]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	18d1      	adds	r1, r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	6978      	ldr	r0, [r7, #20]
 800813a:	f000 f8d5 	bl	80082e8 <prvInsertTimerInActiveList>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d020      	beq.n	8008186 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008144:	2300      	movs	r3, #0
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	2300      	movs	r3, #0
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	2100      	movs	r1, #0
 800814e:	6978      	ldr	r0, [r7, #20]
 8008150:	f7ff ff88 	bl	8008064 <xTimerGenericCommand>
 8008154:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d114      	bne.n	8008186 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	60fb      	str	r3, [r7, #12]
}
 800816e:	bf00      	nop
 8008170:	bf00      	nop
 8008172:	e7fd      	b.n	8008170 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800817a:	f023 0301 	bic.w	r3, r3, #1
 800817e:	b2da      	uxtb	r2, r3
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	6978      	ldr	r0, [r7, #20]
 800818c:	4798      	blx	r3
}
 800818e:	bf00      	nop
 8008190:	3718      	adds	r7, #24
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	20001340 	.word	0x20001340

0800819c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081a4:	f107 0308 	add.w	r3, r7, #8
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 f859 	bl	8008260 <prvGetNextExpireTime>
 80081ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4619      	mov	r1, r3
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 f805 	bl	80081c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80081ba:	f000 f8d7 	bl	800836c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081be:	bf00      	nop
 80081c0:	e7f0      	b.n	80081a4 <prvTimerTask+0x8>
	...

080081c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80081ce:	f7ff fa37 	bl	8007640 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081d2:	f107 0308 	add.w	r3, r7, #8
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 f866 	bl	80082a8 <prvSampleTimeNow>
 80081dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d130      	bne.n	8008246 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <prvProcessTimerOrBlockTask+0x3c>
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d806      	bhi.n	8008200 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80081f2:	f7ff fa33 	bl	800765c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80081f6:	68f9      	ldr	r1, [r7, #12]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff ff81 	bl	8008100 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081fe:	e024      	b.n	800824a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d008      	beq.n	8008218 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008206:	4b13      	ldr	r3, [pc, #76]	@ (8008254 <prvProcessTimerOrBlockTask+0x90>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <prvProcessTimerOrBlockTask+0x50>
 8008210:	2301      	movs	r3, #1
 8008212:	e000      	b.n	8008216 <prvProcessTimerOrBlockTask+0x52>
 8008214:	2300      	movs	r3, #0
 8008216:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008218:	4b0f      	ldr	r3, [pc, #60]	@ (8008258 <prvProcessTimerOrBlockTask+0x94>)
 800821a:	6818      	ldr	r0, [r3, #0]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	4619      	mov	r1, r3
 8008226:	f7fe ff13 	bl	8007050 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800822a:	f7ff fa17 	bl	800765c <xTaskResumeAll>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008234:	4b09      	ldr	r3, [pc, #36]	@ (800825c <prvProcessTimerOrBlockTask+0x98>)
 8008236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	f3bf 8f6f 	isb	sy
}
 8008244:	e001      	b.n	800824a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008246:	f7ff fa09 	bl	800765c <xTaskResumeAll>
}
 800824a:	bf00      	nop
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20001344 	.word	0x20001344
 8008258:	20001348 	.word	0x20001348
 800825c:	e000ed04 	.word	0xe000ed04

08008260 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008268:	4b0e      	ldr	r3, [pc, #56]	@ (80082a4 <prvGetNextExpireTime+0x44>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <prvGetNextExpireTime+0x16>
 8008272:	2201      	movs	r2, #1
 8008274:	e000      	b.n	8008278 <prvGetNextExpireTime+0x18>
 8008276:	2200      	movs	r2, #0
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d105      	bne.n	8008290 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008284:	4b07      	ldr	r3, [pc, #28]	@ (80082a4 <prvGetNextExpireTime+0x44>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	e001      	b.n	8008294 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008294:	68fb      	ldr	r3, [r7, #12]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	20001340 	.word	0x20001340

080082a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80082b0:	f7ff fa72 	bl	8007798 <xTaskGetTickCount>
 80082b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80082b6:	4b0b      	ldr	r3, [pc, #44]	@ (80082e4 <prvSampleTimeNow+0x3c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d205      	bcs.n	80082cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80082c0:	f000 f93a 	bl	8008538 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	601a      	str	r2, [r3, #0]
 80082ca:	e002      	b.n	80082d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80082d2:	4a04      	ldr	r2, [pc, #16]	@ (80082e4 <prvSampleTimeNow+0x3c>)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80082d8:	68fb      	ldr	r3, [r7, #12]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	20001350 	.word	0x20001350

080082e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	429a      	cmp	r2, r3
 800830c:	d812      	bhi.n	8008334 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	1ad2      	subs	r2, r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	429a      	cmp	r2, r3
 800831a:	d302      	bcc.n	8008322 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800831c:	2301      	movs	r3, #1
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	e01b      	b.n	800835a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008322:	4b10      	ldr	r3, [pc, #64]	@ (8008364 <prvInsertTimerInActiveList+0x7c>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3304      	adds	r3, #4
 800832a:	4619      	mov	r1, r3
 800832c:	4610      	mov	r0, r2
 800832e:	f7fe f966 	bl	80065fe <vListInsert>
 8008332:	e012      	b.n	800835a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	429a      	cmp	r2, r3
 800833a:	d206      	bcs.n	800834a <prvInsertTimerInActiveList+0x62>
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	429a      	cmp	r2, r3
 8008342:	d302      	bcc.n	800834a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008344:	2301      	movs	r3, #1
 8008346:	617b      	str	r3, [r7, #20]
 8008348:	e007      	b.n	800835a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800834a:	4b07      	ldr	r3, [pc, #28]	@ (8008368 <prvInsertTimerInActiveList+0x80>)
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3304      	adds	r3, #4
 8008352:	4619      	mov	r1, r3
 8008354:	4610      	mov	r0, r2
 8008356:	f7fe f952 	bl	80065fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800835a:	697b      	ldr	r3, [r7, #20]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	20001344 	.word	0x20001344
 8008368:	20001340 	.word	0x20001340

0800836c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b08e      	sub	sp, #56	@ 0x38
 8008370:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008372:	e0ce      	b.n	8008512 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	da19      	bge.n	80083ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800837a:	1d3b      	adds	r3, r7, #4
 800837c:	3304      	adds	r3, #4
 800837e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10b      	bne.n	800839e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	61fb      	str	r3, [r7, #28]
}
 8008398:	bf00      	nop
 800839a:	bf00      	nop
 800839c:	e7fd      	b.n	800839a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800839e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083a4:	6850      	ldr	r0, [r2, #4]
 80083a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083a8:	6892      	ldr	r2, [r2, #8]
 80083aa:	4611      	mov	r1, r2
 80083ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f2c0 80ae 	blt.w	8008512 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80083ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d004      	beq.n	80083cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c4:	3304      	adds	r3, #4
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fe f952 	bl	8006670 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083cc:	463b      	mov	r3, r7
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff ff6a 	bl	80082a8 <prvSampleTimeNow>
 80083d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b09      	cmp	r3, #9
 80083da:	f200 8097 	bhi.w	800850c <prvProcessReceivedCommands+0x1a0>
 80083de:	a201      	add	r2, pc, #4	@ (adr r2, 80083e4 <prvProcessReceivedCommands+0x78>)
 80083e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e4:	0800840d 	.word	0x0800840d
 80083e8:	0800840d 	.word	0x0800840d
 80083ec:	0800840d 	.word	0x0800840d
 80083f0:	08008483 	.word	0x08008483
 80083f4:	08008497 	.word	0x08008497
 80083f8:	080084e3 	.word	0x080084e3
 80083fc:	0800840d 	.word	0x0800840d
 8008400:	0800840d 	.word	0x0800840d
 8008404:	08008483 	.word	0x08008483
 8008408:	08008497 	.word	0x08008497
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800840c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008412:	f043 0301 	orr.w	r3, r3, #1
 8008416:	b2da      	uxtb	r2, r3
 8008418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	18d1      	adds	r1, r2, r3
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800842a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800842c:	f7ff ff5c 	bl	80082e8 <prvInsertTimerInActiveList>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d06c      	beq.n	8008510 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800843c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800843e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008440:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d061      	beq.n	8008510 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	441a      	add	r2, r3
 8008454:	2300      	movs	r3, #0
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	2300      	movs	r3, #0
 800845a:	2100      	movs	r1, #0
 800845c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800845e:	f7ff fe01 	bl	8008064 <xTimerGenericCommand>
 8008462:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d152      	bne.n	8008510 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	61bb      	str	r3, [r7, #24]
}
 800847c:	bf00      	nop
 800847e:	bf00      	nop
 8008480:	e7fd      	b.n	800847e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008488:	f023 0301 	bic.w	r3, r3, #1
 800848c:	b2da      	uxtb	r2, r3
 800848e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008490:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008494:	e03d      	b.n	8008512 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800849c:	f043 0301 	orr.w	r3, r3, #1
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80084ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10b      	bne.n	80084ce <prvProcessReceivedCommands+0x162>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	617b      	str	r3, [r7, #20]
}
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
 80084cc:	e7fd      	b.n	80084ca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80084ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d0:	699a      	ldr	r2, [r3, #24]
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d4:	18d1      	adds	r1, r2, r3
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084dc:	f7ff ff04 	bl	80082e8 <prvInsertTimerInActiveList>
					break;
 80084e0:	e017      	b.n	8008512 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80084e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d103      	bne.n	80084f8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80084f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084f2:	f000 fbe9 	bl	8008cc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084f6:	e00c      	b.n	8008512 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084fe:	f023 0301 	bic.w	r3, r3, #1
 8008502:	b2da      	uxtb	r2, r3
 8008504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008506:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800850a:	e002      	b.n	8008512 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800850c:	bf00      	nop
 800850e:	e000      	b.n	8008512 <prvProcessReceivedCommands+0x1a6>
					break;
 8008510:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008512:	4b08      	ldr	r3, [pc, #32]	@ (8008534 <prvProcessReceivedCommands+0x1c8>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	1d39      	adds	r1, r7, #4
 8008518:	2200      	movs	r2, #0
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe fb7c 	bl	8006c18 <xQueueReceive>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	f47f af26 	bne.w	8008374 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008528:	bf00      	nop
 800852a:	bf00      	nop
 800852c:	3730      	adds	r7, #48	@ 0x30
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20001348 	.word	0x20001348

08008538 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800853e:	e049      	b.n	80085d4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008540:	4b2e      	ldr	r3, [pc, #184]	@ (80085fc <prvSwitchTimerLists+0xc4>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800854a:	4b2c      	ldr	r3, [pc, #176]	@ (80085fc <prvSwitchTimerLists+0xc4>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	3304      	adds	r3, #4
 8008558:	4618      	mov	r0, r3
 800855a:	f7fe f889 	bl	8006670 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800856c:	f003 0304 	and.w	r3, r3, #4
 8008570:	2b00      	cmp	r3, #0
 8008572:	d02f      	beq.n	80085d4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	4413      	add	r3, r2
 800857c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	429a      	cmp	r2, r3
 8008584:	d90e      	bls.n	80085a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008592:	4b1a      	ldr	r3, [pc, #104]	@ (80085fc <prvSwitchTimerLists+0xc4>)
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3304      	adds	r3, #4
 800859a:	4619      	mov	r1, r3
 800859c:	4610      	mov	r0, r2
 800859e:	f7fe f82e 	bl	80065fe <vListInsert>
 80085a2:	e017      	b.n	80085d4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085a4:	2300      	movs	r3, #0
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	2300      	movs	r3, #0
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	2100      	movs	r1, #0
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7ff fd58 	bl	8008064 <xTimerGenericCommand>
 80085b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10b      	bne.n	80085d4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	603b      	str	r3, [r7, #0]
}
 80085ce:	bf00      	nop
 80085d0:	bf00      	nop
 80085d2:	e7fd      	b.n	80085d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085d4:	4b09      	ldr	r3, [pc, #36]	@ (80085fc <prvSwitchTimerLists+0xc4>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1b0      	bne.n	8008540 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80085de:	4b07      	ldr	r3, [pc, #28]	@ (80085fc <prvSwitchTimerLists+0xc4>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80085e4:	4b06      	ldr	r3, [pc, #24]	@ (8008600 <prvSwitchTimerLists+0xc8>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a04      	ldr	r2, [pc, #16]	@ (80085fc <prvSwitchTimerLists+0xc4>)
 80085ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80085ec:	4a04      	ldr	r2, [pc, #16]	@ (8008600 <prvSwitchTimerLists+0xc8>)
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	6013      	str	r3, [r2, #0]
}
 80085f2:	bf00      	nop
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20001340 	.word	0x20001340
 8008600:	20001344 	.word	0x20001344

08008604 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800860a:	f000 f96d 	bl	80088e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800860e:	4b15      	ldr	r3, [pc, #84]	@ (8008664 <prvCheckForValidListAndQueue+0x60>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d120      	bne.n	8008658 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008616:	4814      	ldr	r0, [pc, #80]	@ (8008668 <prvCheckForValidListAndQueue+0x64>)
 8008618:	f7fd ffa0 	bl	800655c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800861c:	4813      	ldr	r0, [pc, #76]	@ (800866c <prvCheckForValidListAndQueue+0x68>)
 800861e:	f7fd ff9d 	bl	800655c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008622:	4b13      	ldr	r3, [pc, #76]	@ (8008670 <prvCheckForValidListAndQueue+0x6c>)
 8008624:	4a10      	ldr	r2, [pc, #64]	@ (8008668 <prvCheckForValidListAndQueue+0x64>)
 8008626:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008628:	4b12      	ldr	r3, [pc, #72]	@ (8008674 <prvCheckForValidListAndQueue+0x70>)
 800862a:	4a10      	ldr	r2, [pc, #64]	@ (800866c <prvCheckForValidListAndQueue+0x68>)
 800862c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800862e:	2300      	movs	r3, #0
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	4b11      	ldr	r3, [pc, #68]	@ (8008678 <prvCheckForValidListAndQueue+0x74>)
 8008634:	4a11      	ldr	r2, [pc, #68]	@ (800867c <prvCheckForValidListAndQueue+0x78>)
 8008636:	2110      	movs	r1, #16
 8008638:	200a      	movs	r0, #10
 800863a:	f7fe f8ad 	bl	8006798 <xQueueGenericCreateStatic>
 800863e:	4603      	mov	r3, r0
 8008640:	4a08      	ldr	r2, [pc, #32]	@ (8008664 <prvCheckForValidListAndQueue+0x60>)
 8008642:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008644:	4b07      	ldr	r3, [pc, #28]	@ (8008664 <prvCheckForValidListAndQueue+0x60>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d005      	beq.n	8008658 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800864c:	4b05      	ldr	r3, [pc, #20]	@ (8008664 <prvCheckForValidListAndQueue+0x60>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	490b      	ldr	r1, [pc, #44]	@ (8008680 <prvCheckForValidListAndQueue+0x7c>)
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe fcd2 	bl	8006ffc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008658:	f000 f978 	bl	800894c <vPortExitCritical>
}
 800865c:	bf00      	nop
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	20001348 	.word	0x20001348
 8008668:	20001318 	.word	0x20001318
 800866c:	2000132c 	.word	0x2000132c
 8008670:	20001340 	.word	0x20001340
 8008674:	20001344 	.word	0x20001344
 8008678:	200013f4 	.word	0x200013f4
 800867c:	20001354 	.word	0x20001354
 8008680:	08008fd0 	.word	0x08008fd0

08008684 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3b04      	subs	r3, #4
 8008694:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800869c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3b04      	subs	r3, #4
 80086a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f023 0201 	bic.w	r2, r3, #1
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3b04      	subs	r3, #4
 80086b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086b4:	4a0c      	ldr	r2, [pc, #48]	@ (80086e8 <pxPortInitialiseStack+0x64>)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3b14      	subs	r3, #20
 80086be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3b04      	subs	r3, #4
 80086ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f06f 0202 	mvn.w	r2, #2
 80086d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3b20      	subs	r3, #32
 80086d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086da:	68fb      	ldr	r3, [r7, #12]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	080086ed 	.word	0x080086ed

080086ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086f6:	4b13      	ldr	r3, [pc, #76]	@ (8008744 <prvTaskExitError+0x58>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086fe:	d00b      	beq.n	8008718 <prvTaskExitError+0x2c>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	60fb      	str	r3, [r7, #12]
}
 8008712:	bf00      	nop
 8008714:	bf00      	nop
 8008716:	e7fd      	b.n	8008714 <prvTaskExitError+0x28>
	__asm volatile
 8008718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	60bb      	str	r3, [r7, #8]
}
 800872a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800872c:	bf00      	nop
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d0fc      	beq.n	800872e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008734:	bf00      	nop
 8008736:	bf00      	nop
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	2000000c 	.word	0x2000000c
	...

08008750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008750:	4b07      	ldr	r3, [pc, #28]	@ (8008770 <pxCurrentTCBConst2>)
 8008752:	6819      	ldr	r1, [r3, #0]
 8008754:	6808      	ldr	r0, [r1, #0]
 8008756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875a:	f380 8809 	msr	PSP, r0
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f04f 0000 	mov.w	r0, #0
 8008766:	f380 8811 	msr	BASEPRI, r0
 800876a:	4770      	bx	lr
 800876c:	f3af 8000 	nop.w

08008770 <pxCurrentTCBConst2>:
 8008770:	20000e18 	.word	0x20000e18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop

08008778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008778:	4808      	ldr	r0, [pc, #32]	@ (800879c <prvPortStartFirstTask+0x24>)
 800877a:	6800      	ldr	r0, [r0, #0]
 800877c:	6800      	ldr	r0, [r0, #0]
 800877e:	f380 8808 	msr	MSP, r0
 8008782:	f04f 0000 	mov.w	r0, #0
 8008786:	f380 8814 	msr	CONTROL, r0
 800878a:	b662      	cpsie	i
 800878c:	b661      	cpsie	f
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	df00      	svc	0
 8008798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800879a:	bf00      	nop
 800879c:	e000ed08 	.word	0xe000ed08

080087a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80087a6:	4b47      	ldr	r3, [pc, #284]	@ (80088c4 <xPortStartScheduler+0x124>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a47      	ldr	r2, [pc, #284]	@ (80088c8 <xPortStartScheduler+0x128>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d10b      	bne.n	80087c8 <xPortStartScheduler+0x28>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	613b      	str	r3, [r7, #16]
}
 80087c2:	bf00      	nop
 80087c4:	bf00      	nop
 80087c6:	e7fd      	b.n	80087c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087c8:	4b3e      	ldr	r3, [pc, #248]	@ (80088c4 <xPortStartScheduler+0x124>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a3f      	ldr	r2, [pc, #252]	@ (80088cc <xPortStartScheduler+0x12c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d10b      	bne.n	80087ea <xPortStartScheduler+0x4a>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	60fb      	str	r3, [r7, #12]
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop
 80087e8:	e7fd      	b.n	80087e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087ea:	4b39      	ldr	r3, [pc, #228]	@ (80088d0 <xPortStartScheduler+0x130>)
 80087ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	22ff      	movs	r2, #255	@ 0xff
 80087fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	b2db      	uxtb	r3, r3
 8008802:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008804:	78fb      	ldrb	r3, [r7, #3]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800880c:	b2da      	uxtb	r2, r3
 800880e:	4b31      	ldr	r3, [pc, #196]	@ (80088d4 <xPortStartScheduler+0x134>)
 8008810:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008812:	4b31      	ldr	r3, [pc, #196]	@ (80088d8 <xPortStartScheduler+0x138>)
 8008814:	2207      	movs	r2, #7
 8008816:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008818:	e009      	b.n	800882e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800881a:	4b2f      	ldr	r3, [pc, #188]	@ (80088d8 <xPortStartScheduler+0x138>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3b01      	subs	r3, #1
 8008820:	4a2d      	ldr	r2, [pc, #180]	@ (80088d8 <xPortStartScheduler+0x138>)
 8008822:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	b2db      	uxtb	r3, r3
 8008828:	005b      	lsls	r3, r3, #1
 800882a:	b2db      	uxtb	r3, r3
 800882c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800882e:	78fb      	ldrb	r3, [r7, #3]
 8008830:	b2db      	uxtb	r3, r3
 8008832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008836:	2b80      	cmp	r3, #128	@ 0x80
 8008838:	d0ef      	beq.n	800881a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800883a:	4b27      	ldr	r3, [pc, #156]	@ (80088d8 <xPortStartScheduler+0x138>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f1c3 0307 	rsb	r3, r3, #7
 8008842:	2b04      	cmp	r3, #4
 8008844:	d00b      	beq.n	800885e <xPortStartScheduler+0xbe>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	60bb      	str	r3, [r7, #8]
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	e7fd      	b.n	800885a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800885e:	4b1e      	ldr	r3, [pc, #120]	@ (80088d8 <xPortStartScheduler+0x138>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	021b      	lsls	r3, r3, #8
 8008864:	4a1c      	ldr	r2, [pc, #112]	@ (80088d8 <xPortStartScheduler+0x138>)
 8008866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008868:	4b1b      	ldr	r3, [pc, #108]	@ (80088d8 <xPortStartScheduler+0x138>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008870:	4a19      	ldr	r2, [pc, #100]	@ (80088d8 <xPortStartScheduler+0x138>)
 8008872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	b2da      	uxtb	r2, r3
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800887c:	4b17      	ldr	r3, [pc, #92]	@ (80088dc <xPortStartScheduler+0x13c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a16      	ldr	r2, [pc, #88]	@ (80088dc <xPortStartScheduler+0x13c>)
 8008882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008888:	4b14      	ldr	r3, [pc, #80]	@ (80088dc <xPortStartScheduler+0x13c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a13      	ldr	r2, [pc, #76]	@ (80088dc <xPortStartScheduler+0x13c>)
 800888e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008894:	f000 f8da 	bl	8008a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008898:	4b11      	ldr	r3, [pc, #68]	@ (80088e0 <xPortStartScheduler+0x140>)
 800889a:	2200      	movs	r2, #0
 800889c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800889e:	f000 f8f9 	bl	8008a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088a2:	4b10      	ldr	r3, [pc, #64]	@ (80088e4 <xPortStartScheduler+0x144>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a0f      	ldr	r2, [pc, #60]	@ (80088e4 <xPortStartScheduler+0x144>)
 80088a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80088ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088ae:	f7ff ff63 	bl	8008778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088b2:	f7ff f83b 	bl	800792c <vTaskSwitchContext>
	prvTaskExitError();
 80088b6:	f7ff ff19 	bl	80086ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	e000ed00 	.word	0xe000ed00
 80088c8:	410fc271 	.word	0x410fc271
 80088cc:	410fc270 	.word	0x410fc270
 80088d0:	e000e400 	.word	0xe000e400
 80088d4:	20001444 	.word	0x20001444
 80088d8:	20001448 	.word	0x20001448
 80088dc:	e000ed20 	.word	0xe000ed20
 80088e0:	2000000c 	.word	0x2000000c
 80088e4:	e000ef34 	.word	0xe000ef34

080088e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	607b      	str	r3, [r7, #4]
}
 8008900:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008902:	4b10      	ldr	r3, [pc, #64]	@ (8008944 <vPortEnterCritical+0x5c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3301      	adds	r3, #1
 8008908:	4a0e      	ldr	r2, [pc, #56]	@ (8008944 <vPortEnterCritical+0x5c>)
 800890a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800890c:	4b0d      	ldr	r3, [pc, #52]	@ (8008944 <vPortEnterCritical+0x5c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d110      	bne.n	8008936 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008914:	4b0c      	ldr	r3, [pc, #48]	@ (8008948 <vPortEnterCritical+0x60>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00b      	beq.n	8008936 <vPortEnterCritical+0x4e>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	603b      	str	r3, [r7, #0]
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	e7fd      	b.n	8008932 <vPortEnterCritical+0x4a>
	}
}
 8008936:	bf00      	nop
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	2000000c 	.word	0x2000000c
 8008948:	e000ed04 	.word	0xe000ed04

0800894c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008952:	4b12      	ldr	r3, [pc, #72]	@ (800899c <vPortExitCritical+0x50>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10b      	bne.n	8008972 <vPortExitCritical+0x26>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	607b      	str	r3, [r7, #4]
}
 800896c:	bf00      	nop
 800896e:	bf00      	nop
 8008970:	e7fd      	b.n	800896e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008972:	4b0a      	ldr	r3, [pc, #40]	@ (800899c <vPortExitCritical+0x50>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3b01      	subs	r3, #1
 8008978:	4a08      	ldr	r2, [pc, #32]	@ (800899c <vPortExitCritical+0x50>)
 800897a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800897c:	4b07      	ldr	r3, [pc, #28]	@ (800899c <vPortExitCritical+0x50>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d105      	bne.n	8008990 <vPortExitCritical+0x44>
 8008984:	2300      	movs	r3, #0
 8008986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	f383 8811 	msr	BASEPRI, r3
}
 800898e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	2000000c 	.word	0x2000000c

080089a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089a0:	f3ef 8009 	mrs	r0, PSP
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	4b15      	ldr	r3, [pc, #84]	@ (8008a00 <pxCurrentTCBConst>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	f01e 0f10 	tst.w	lr, #16
 80089b0:	bf08      	it	eq
 80089b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ba:	6010      	str	r0, [r2, #0]
 80089bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80089c4:	f380 8811 	msr	BASEPRI, r0
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f7fe ffac 	bl	800792c <vTaskSwitchContext>
 80089d4:	f04f 0000 	mov.w	r0, #0
 80089d8:	f380 8811 	msr	BASEPRI, r0
 80089dc:	bc09      	pop	{r0, r3}
 80089de:	6819      	ldr	r1, [r3, #0]
 80089e0:	6808      	ldr	r0, [r1, #0]
 80089e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e6:	f01e 0f10 	tst.w	lr, #16
 80089ea:	bf08      	it	eq
 80089ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089f0:	f380 8809 	msr	PSP, r0
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	f3af 8000 	nop.w

08008a00 <pxCurrentTCBConst>:
 8008a00:	20000e18 	.word	0x20000e18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop

08008a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	607b      	str	r3, [r7, #4]
}
 8008a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a22:	f7fe fec9 	bl	80077b8 <xTaskIncrementTick>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a2c:	4b06      	ldr	r3, [pc, #24]	@ (8008a48 <xPortSysTickHandler+0x40>)
 8008a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	2300      	movs	r3, #0
 8008a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	f383 8811 	msr	BASEPRI, r3
}
 8008a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a40:	bf00      	nop
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	e000ed04 	.word	0xe000ed04

08008a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a50:	4b0b      	ldr	r3, [pc, #44]	@ (8008a80 <vPortSetupTimerInterrupt+0x34>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a56:	4b0b      	ldr	r3, [pc, #44]	@ (8008a84 <vPortSetupTimerInterrupt+0x38>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a88 <vPortSetupTimerInterrupt+0x3c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a0a      	ldr	r2, [pc, #40]	@ (8008a8c <vPortSetupTimerInterrupt+0x40>)
 8008a62:	fba2 2303 	umull	r2, r3, r2, r3
 8008a66:	099b      	lsrs	r3, r3, #6
 8008a68:	4a09      	ldr	r2, [pc, #36]	@ (8008a90 <vPortSetupTimerInterrupt+0x44>)
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a6e:	4b04      	ldr	r3, [pc, #16]	@ (8008a80 <vPortSetupTimerInterrupt+0x34>)
 8008a70:	2207      	movs	r2, #7
 8008a72:	601a      	str	r2, [r3, #0]
}
 8008a74:	bf00      	nop
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	e000e010 	.word	0xe000e010
 8008a84:	e000e018 	.word	0xe000e018
 8008a88:	20000000 	.word	0x20000000
 8008a8c:	10624dd3 	.word	0x10624dd3
 8008a90:	e000e014 	.word	0xe000e014

08008a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008aa4 <vPortEnableVFP+0x10>
 8008a98:	6801      	ldr	r1, [r0, #0]
 8008a9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008a9e:	6001      	str	r1, [r0, #0]
 8008aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008aa2:	bf00      	nop
 8008aa4:	e000ed88 	.word	0xe000ed88

08008aa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008aae:	f3ef 8305 	mrs	r3, IPSR
 8008ab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b0f      	cmp	r3, #15
 8008ab8:	d915      	bls.n	8008ae6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008aba:	4a18      	ldr	r2, [pc, #96]	@ (8008b1c <vPortValidateInterruptPriority+0x74>)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4413      	add	r3, r2
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ac4:	4b16      	ldr	r3, [pc, #88]	@ (8008b20 <vPortValidateInterruptPriority+0x78>)
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	7afa      	ldrb	r2, [r7, #11]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d20b      	bcs.n	8008ae6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	607b      	str	r3, [r7, #4]
}
 8008ae0:	bf00      	nop
 8008ae2:	bf00      	nop
 8008ae4:	e7fd      	b.n	8008ae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b24 <vPortValidateInterruptPriority+0x7c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008aee:	4b0e      	ldr	r3, [pc, #56]	@ (8008b28 <vPortValidateInterruptPriority+0x80>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d90b      	bls.n	8008b0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	603b      	str	r3, [r7, #0]
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop
 8008b0c:	e7fd      	b.n	8008b0a <vPortValidateInterruptPriority+0x62>
	}
 8008b0e:	bf00      	nop
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	e000e3f0 	.word	0xe000e3f0
 8008b20:	20001444 	.word	0x20001444
 8008b24:	e000ed0c 	.word	0xe000ed0c
 8008b28:	20001448 	.word	0x20001448

08008b2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08a      	sub	sp, #40	@ 0x28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b34:	2300      	movs	r3, #0
 8008b36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b38:	f7fe fd82 	bl	8007640 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b3c:	4b5c      	ldr	r3, [pc, #368]	@ (8008cb0 <pvPortMalloc+0x184>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b44:	f000 f924 	bl	8008d90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b48:	4b5a      	ldr	r3, [pc, #360]	@ (8008cb4 <pvPortMalloc+0x188>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f040 8095 	bne.w	8008c80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d01e      	beq.n	8008b9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008b5c:	2208      	movs	r2, #8
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4413      	add	r3, r2
 8008b62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d015      	beq.n	8008b9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f023 0307 	bic.w	r3, r3, #7
 8008b74:	3308      	adds	r3, #8
 8008b76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f003 0307 	and.w	r3, r3, #7
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00b      	beq.n	8008b9a <pvPortMalloc+0x6e>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	617b      	str	r3, [r7, #20]
}
 8008b94:	bf00      	nop
 8008b96:	bf00      	nop
 8008b98:	e7fd      	b.n	8008b96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d06f      	beq.n	8008c80 <pvPortMalloc+0x154>
 8008ba0:	4b45      	ldr	r3, [pc, #276]	@ (8008cb8 <pvPortMalloc+0x18c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d86a      	bhi.n	8008c80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008baa:	4b44      	ldr	r3, [pc, #272]	@ (8008cbc <pvPortMalloc+0x190>)
 8008bac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008bae:	4b43      	ldr	r3, [pc, #268]	@ (8008cbc <pvPortMalloc+0x190>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bb4:	e004      	b.n	8008bc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d903      	bls.n	8008bd2 <pvPortMalloc+0xa6>
 8008bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1f1      	bne.n	8008bb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008bd2:	4b37      	ldr	r3, [pc, #220]	@ (8008cb0 <pvPortMalloc+0x184>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d051      	beq.n	8008c80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2208      	movs	r2, #8
 8008be2:	4413      	add	r3, r2
 8008be4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	1ad2      	subs	r2, r2, r3
 8008bf6:	2308      	movs	r3, #8
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d920      	bls.n	8008c40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4413      	add	r3, r2
 8008c04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00b      	beq.n	8008c28 <pvPortMalloc+0xfc>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	613b      	str	r3, [r7, #16]
}
 8008c22:	bf00      	nop
 8008c24:	bf00      	nop
 8008c26:	e7fd      	b.n	8008c24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	1ad2      	subs	r2, r2, r3
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c3a:	69b8      	ldr	r0, [r7, #24]
 8008c3c:	f000 f90a 	bl	8008e54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c40:	4b1d      	ldr	r3, [pc, #116]	@ (8008cb8 <pvPortMalloc+0x18c>)
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8008cb8 <pvPortMalloc+0x18c>)
 8008c4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8008cb8 <pvPortMalloc+0x18c>)
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc0 <pvPortMalloc+0x194>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d203      	bcs.n	8008c62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c5a:	4b17      	ldr	r3, [pc, #92]	@ (8008cb8 <pvPortMalloc+0x18c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a18      	ldr	r2, [pc, #96]	@ (8008cc0 <pvPortMalloc+0x194>)
 8008c60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	4b13      	ldr	r3, [pc, #76]	@ (8008cb4 <pvPortMalloc+0x188>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c72:	2200      	movs	r2, #0
 8008c74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c76:	4b13      	ldr	r3, [pc, #76]	@ (8008cc4 <pvPortMalloc+0x198>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	4a11      	ldr	r2, [pc, #68]	@ (8008cc4 <pvPortMalloc+0x198>)
 8008c7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c80:	f7fe fcec 	bl	800765c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00b      	beq.n	8008ca6 <pvPortMalloc+0x17a>
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	60fb      	str	r3, [r7, #12]
}
 8008ca0:	bf00      	nop
 8008ca2:	bf00      	nop
 8008ca4:	e7fd      	b.n	8008ca2 <pvPortMalloc+0x176>
	return pvReturn;
 8008ca6:	69fb      	ldr	r3, [r7, #28]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3728      	adds	r7, #40	@ 0x28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	20005054 	.word	0x20005054
 8008cb4:	20005068 	.word	0x20005068
 8008cb8:	20005058 	.word	0x20005058
 8008cbc:	2000504c 	.word	0x2000504c
 8008cc0:	2000505c 	.word	0x2000505c
 8008cc4:	20005060 	.word	0x20005060

08008cc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d04f      	beq.n	8008d7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cda:	2308      	movs	r3, #8
 8008cdc:	425b      	negs	r3, r3
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	4b25      	ldr	r3, [pc, #148]	@ (8008d84 <vPortFree+0xbc>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10b      	bne.n	8008d0e <vPortFree+0x46>
	__asm volatile
 8008cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	60fb      	str	r3, [r7, #12]
}
 8008d08:	bf00      	nop
 8008d0a:	bf00      	nop
 8008d0c:	e7fd      	b.n	8008d0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00b      	beq.n	8008d2e <vPortFree+0x66>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	60bb      	str	r3, [r7, #8]
}
 8008d28:	bf00      	nop
 8008d2a:	bf00      	nop
 8008d2c:	e7fd      	b.n	8008d2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	685a      	ldr	r2, [r3, #4]
 8008d32:	4b14      	ldr	r3, [pc, #80]	@ (8008d84 <vPortFree+0xbc>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4013      	ands	r3, r2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d01e      	beq.n	8008d7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d11a      	bne.n	8008d7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	4b0e      	ldr	r3, [pc, #56]	@ (8008d84 <vPortFree+0xbc>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	43db      	mvns	r3, r3
 8008d4e:	401a      	ands	r2, r3
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d54:	f7fe fc74 	bl	8007640 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d88 <vPortFree+0xc0>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4413      	add	r3, r2
 8008d62:	4a09      	ldr	r2, [pc, #36]	@ (8008d88 <vPortFree+0xc0>)
 8008d64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d66:	6938      	ldr	r0, [r7, #16]
 8008d68:	f000 f874 	bl	8008e54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d6c:	4b07      	ldr	r3, [pc, #28]	@ (8008d8c <vPortFree+0xc4>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3301      	adds	r3, #1
 8008d72:	4a06      	ldr	r2, [pc, #24]	@ (8008d8c <vPortFree+0xc4>)
 8008d74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d76:	f7fe fc71 	bl	800765c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d7a:	bf00      	nop
 8008d7c:	3718      	adds	r7, #24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	20005068 	.word	0x20005068
 8008d88:	20005058 	.word	0x20005058
 8008d8c:	20005064 	.word	0x20005064

08008d90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008d9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d9c:	4b27      	ldr	r3, [pc, #156]	@ (8008e3c <prvHeapInit+0xac>)
 8008d9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f003 0307 	and.w	r3, r3, #7
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00c      	beq.n	8008dc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	3307      	adds	r3, #7
 8008dae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 0307 	bic.w	r3, r3, #7
 8008db6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8008e3c <prvHeapInit+0xac>)
 8008dc0:	4413      	add	r3, r2
 8008dc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e40 <prvHeapInit+0xb0>)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008dce:	4b1c      	ldr	r3, [pc, #112]	@ (8008e40 <prvHeapInit+0xb0>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	4413      	add	r3, r2
 8008dda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ddc:	2208      	movs	r2, #8
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	1a9b      	subs	r3, r3, r2
 8008de2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f023 0307 	bic.w	r3, r3, #7
 8008dea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4a15      	ldr	r2, [pc, #84]	@ (8008e44 <prvHeapInit+0xb4>)
 8008df0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008df2:	4b14      	ldr	r3, [pc, #80]	@ (8008e44 <prvHeapInit+0xb4>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2200      	movs	r2, #0
 8008df8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dfa:	4b12      	ldr	r3, [pc, #72]	@ (8008e44 <prvHeapInit+0xb4>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	1ad2      	subs	r2, r2, r3
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e10:	4b0c      	ldr	r3, [pc, #48]	@ (8008e44 <prvHeapInit+0xb4>)
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8008e48 <prvHeapInit+0xb8>)
 8008e1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	4a09      	ldr	r2, [pc, #36]	@ (8008e4c <prvHeapInit+0xbc>)
 8008e26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e28:	4b09      	ldr	r3, [pc, #36]	@ (8008e50 <prvHeapInit+0xc0>)
 8008e2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008e2e:	601a      	str	r2, [r3, #0]
}
 8008e30:	bf00      	nop
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	2000144c 	.word	0x2000144c
 8008e40:	2000504c 	.word	0x2000504c
 8008e44:	20005054 	.word	0x20005054
 8008e48:	2000505c 	.word	0x2000505c
 8008e4c:	20005058 	.word	0x20005058
 8008e50:	20005068 	.word	0x20005068

08008e54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e5c:	4b28      	ldr	r3, [pc, #160]	@ (8008f00 <prvInsertBlockIntoFreeList+0xac>)
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	e002      	b.n	8008e68 <prvInsertBlockIntoFreeList+0x14>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d8f7      	bhi.n	8008e62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d108      	bne.n	8008e96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	685a      	ldr	r2, [r3, #4]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	441a      	add	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	68ba      	ldr	r2, [r7, #8]
 8008ea0:	441a      	add	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d118      	bne.n	8008edc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	4b15      	ldr	r3, [pc, #84]	@ (8008f04 <prvInsertBlockIntoFreeList+0xb0>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d00d      	beq.n	8008ed2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	441a      	add	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	e008      	b.n	8008ee4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8008f04 <prvInsertBlockIntoFreeList+0xb0>)
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	e003      	b.n	8008ee4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d002      	beq.n	8008ef2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ef2:	bf00      	nop
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	2000504c 	.word	0x2000504c
 8008f04:	20005054 	.word	0x20005054

08008f08 <memset>:
 8008f08:	4402      	add	r2, r0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d100      	bne.n	8008f12 <memset+0xa>
 8008f10:	4770      	bx	lr
 8008f12:	f803 1b01 	strb.w	r1, [r3], #1
 8008f16:	e7f9      	b.n	8008f0c <memset+0x4>

08008f18 <__libc_init_array>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	4d0d      	ldr	r5, [pc, #52]	@ (8008f50 <__libc_init_array+0x38>)
 8008f1c:	4c0d      	ldr	r4, [pc, #52]	@ (8008f54 <__libc_init_array+0x3c>)
 8008f1e:	1b64      	subs	r4, r4, r5
 8008f20:	10a4      	asrs	r4, r4, #2
 8008f22:	2600      	movs	r6, #0
 8008f24:	42a6      	cmp	r6, r4
 8008f26:	d109      	bne.n	8008f3c <__libc_init_array+0x24>
 8008f28:	4d0b      	ldr	r5, [pc, #44]	@ (8008f58 <__libc_init_array+0x40>)
 8008f2a:	4c0c      	ldr	r4, [pc, #48]	@ (8008f5c <__libc_init_array+0x44>)
 8008f2c:	f000 f826 	bl	8008f7c <_init>
 8008f30:	1b64      	subs	r4, r4, r5
 8008f32:	10a4      	asrs	r4, r4, #2
 8008f34:	2600      	movs	r6, #0
 8008f36:	42a6      	cmp	r6, r4
 8008f38:	d105      	bne.n	8008f46 <__libc_init_array+0x2e>
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
 8008f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f40:	4798      	blx	r3
 8008f42:	3601      	adds	r6, #1
 8008f44:	e7ee      	b.n	8008f24 <__libc_init_array+0xc>
 8008f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f4a:	4798      	blx	r3
 8008f4c:	3601      	adds	r6, #1
 8008f4e:	e7f2      	b.n	8008f36 <__libc_init_array+0x1e>
 8008f50:	08009090 	.word	0x08009090
 8008f54:	08009090 	.word	0x08009090
 8008f58:	08009090 	.word	0x08009090
 8008f5c:	08009094 	.word	0x08009094

08008f60 <memcpy>:
 8008f60:	440a      	add	r2, r1
 8008f62:	4291      	cmp	r1, r2
 8008f64:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f68:	d100      	bne.n	8008f6c <memcpy+0xc>
 8008f6a:	4770      	bx	lr
 8008f6c:	b510      	push	{r4, lr}
 8008f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f76:	4291      	cmp	r1, r2
 8008f78:	d1f9      	bne.n	8008f6e <memcpy+0xe>
 8008f7a:	bd10      	pop	{r4, pc}

08008f7c <_init>:
 8008f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7e:	bf00      	nop
 8008f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f82:	bc08      	pop	{r3}
 8008f84:	469e      	mov	lr, r3
 8008f86:	4770      	bx	lr

08008f88 <_fini>:
 8008f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8a:	bf00      	nop
 8008f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8e:	bc08      	pop	{r3}
 8008f90:	469e      	mov	lr, r3
 8008f92:	4770      	bx	lr
