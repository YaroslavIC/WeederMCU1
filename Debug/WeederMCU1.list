
WeederMCU1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08008a50  08008a50  00009a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b44  08008b44  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008b44  08008b44  00009b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b4c  08008b4c  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b4c  08008b4c  00009b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b50  08008b50  00009b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008b54  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000053bc  20000060  08008bb4  0000a060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000541c  08008bb4  0000a41c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0f3  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003930  00000000  00000000  00025183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  00028ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012e7  00000000  00000000  0002a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039d4  00000000  00000000  0002b5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8d3  00000000  00000000  0002efa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5de3  00000000  00000000  0004a876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0659  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b80  00000000  00000000  000f069c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000f721c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a38 	.word	0x08008a38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08008a38 	.word	0x08008a38

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a30:	f000 b96a 	b.w	8000d08 <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9d08      	ldr	r5, [sp, #32]
 8000a52:	460c      	mov	r4, r1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d14e      	bne.n	8000af6 <__udivmoddi4+0xaa>
 8000a58:	4694      	mov	ip, r2
 8000a5a:	458c      	cmp	ip, r1
 8000a5c:	4686      	mov	lr, r0
 8000a5e:	fab2 f282 	clz	r2, r2
 8000a62:	d962      	bls.n	8000b2a <__udivmoddi4+0xde>
 8000a64:	b14a      	cbz	r2, 8000a7a <__udivmoddi4+0x2e>
 8000a66:	f1c2 0320 	rsb	r3, r2, #32
 8000a6a:	4091      	lsls	r1, r2
 8000a6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a74:	4319      	orrs	r1, r3
 8000a76:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a7e:	fa1f f68c 	uxth.w	r6, ip
 8000a82:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a86:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a8a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a92:	fb04 f106 	mul.w	r1, r4, r6
 8000a96:	4299      	cmp	r1, r3
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x64>
 8000a9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000aa2:	f080 8112 	bcs.w	8000cca <__udivmoddi4+0x27e>
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	f240 810f 	bls.w	8000cca <__udivmoddi4+0x27e>
 8000aac:	3c02      	subs	r4, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	1a59      	subs	r1, r3, r1
 8000ab2:	fa1f f38e 	uxth.w	r3, lr
 8000ab6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aba:	fb07 1110 	mls	r1, r7, r0, r1
 8000abe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ac2:	fb00 f606 	mul.w	r6, r0, r6
 8000ac6:	429e      	cmp	r6, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x94>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ad2:	f080 80fc 	bcs.w	8000cce <__udivmoddi4+0x282>
 8000ad6:	429e      	cmp	r6, r3
 8000ad8:	f240 80f9 	bls.w	8000cce <__udivmoddi4+0x282>
 8000adc:	4463      	add	r3, ip
 8000ade:	3802      	subs	r0, #2
 8000ae0:	1b9b      	subs	r3, r3, r6
 8000ae2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	b11d      	cbz	r5, 8000af2 <__udivmoddi4+0xa6>
 8000aea:	40d3      	lsrs	r3, r2
 8000aec:	2200      	movs	r2, #0
 8000aee:	e9c5 3200 	strd	r3, r2, [r5]
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d905      	bls.n	8000b06 <__udivmoddi4+0xba>
 8000afa:	b10d      	cbz	r5, 8000b00 <__udivmoddi4+0xb4>
 8000afc:	e9c5 0100 	strd	r0, r1, [r5]
 8000b00:	2100      	movs	r1, #0
 8000b02:	4608      	mov	r0, r1
 8000b04:	e7f5      	b.n	8000af2 <__udivmoddi4+0xa6>
 8000b06:	fab3 f183 	clz	r1, r3
 8000b0a:	2900      	cmp	r1, #0
 8000b0c:	d146      	bne.n	8000b9c <__udivmoddi4+0x150>
 8000b0e:	42a3      	cmp	r3, r4
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xcc>
 8000b12:	4290      	cmp	r0, r2
 8000b14:	f0c0 80f0 	bcc.w	8000cf8 <__udivmoddi4+0x2ac>
 8000b18:	1a86      	subs	r6, r0, r2
 8000b1a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d0e6      	beq.n	8000af2 <__udivmoddi4+0xa6>
 8000b24:	e9c5 6300 	strd	r6, r3, [r5]
 8000b28:	e7e3      	b.n	8000af2 <__udivmoddi4+0xa6>
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	f040 8090 	bne.w	8000c50 <__udivmoddi4+0x204>
 8000b30:	eba1 040c 	sub.w	r4, r1, ip
 8000b34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b38:	fa1f f78c 	uxth.w	r7, ip
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b46:	fb08 4416 	mls	r4, r8, r6, r4
 8000b4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b4e:	fb07 f006 	mul.w	r0, r7, r6
 8000b52:	4298      	cmp	r0, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x11c>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x11a>
 8000b60:	4298      	cmp	r0, r3
 8000b62:	f200 80cd 	bhi.w	8000d00 <__udivmoddi4+0x2b4>
 8000b66:	4626      	mov	r6, r4
 8000b68:	1a1c      	subs	r4, r3, r0
 8000b6a:	fa1f f38e 	uxth.w	r3, lr
 8000b6e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b72:	fb08 4410 	mls	r4, r8, r0, r4
 8000b76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b7a:	fb00 f707 	mul.w	r7, r0, r7
 8000b7e:	429f      	cmp	r7, r3
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x148>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b8a:	d202      	bcs.n	8000b92 <__udivmoddi4+0x146>
 8000b8c:	429f      	cmp	r7, r3
 8000b8e:	f200 80b0 	bhi.w	8000cf2 <__udivmoddi4+0x2a6>
 8000b92:	4620      	mov	r0, r4
 8000b94:	1bdb      	subs	r3, r3, r7
 8000b96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b9a:	e7a5      	b.n	8000ae8 <__udivmoddi4+0x9c>
 8000b9c:	f1c1 0620 	rsb	r6, r1, #32
 8000ba0:	408b      	lsls	r3, r1
 8000ba2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ba6:	431f      	orrs	r7, r3
 8000ba8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bac:	fa04 f301 	lsl.w	r3, r4, r1
 8000bb0:	ea43 030c 	orr.w	r3, r3, ip
 8000bb4:	40f4      	lsrs	r4, r6
 8000bb6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bba:	0c38      	lsrs	r0, r7, #16
 8000bbc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bc0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bc4:	fa1f fc87 	uxth.w	ip, r7
 8000bc8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bcc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bd0:	fb0e f90c 	mul.w	r9, lr, ip
 8000bd4:	45a1      	cmp	r9, r4
 8000bd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bda:	d90a      	bls.n	8000bf2 <__udivmoddi4+0x1a6>
 8000bdc:	193c      	adds	r4, r7, r4
 8000bde:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000be2:	f080 8084 	bcs.w	8000cee <__udivmoddi4+0x2a2>
 8000be6:	45a1      	cmp	r9, r4
 8000be8:	f240 8081 	bls.w	8000cee <__udivmoddi4+0x2a2>
 8000bec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bf0:	443c      	add	r4, r7
 8000bf2:	eba4 0409 	sub.w	r4, r4, r9
 8000bf6:	fa1f f983 	uxth.w	r9, r3
 8000bfa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bfe:	fb00 4413 	mls	r4, r0, r3, r4
 8000c02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x1d2>
 8000c0e:	193c      	adds	r4, r7, r4
 8000c10:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c14:	d267      	bcs.n	8000ce6 <__udivmoddi4+0x29a>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	d965      	bls.n	8000ce6 <__udivmoddi4+0x29a>
 8000c1a:	3b02      	subs	r3, #2
 8000c1c:	443c      	add	r4, r7
 8000c1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c22:	fba0 9302 	umull	r9, r3, r0, r2
 8000c26:	eba4 040c 	sub.w	r4, r4, ip
 8000c2a:	429c      	cmp	r4, r3
 8000c2c:	46ce      	mov	lr, r9
 8000c2e:	469c      	mov	ip, r3
 8000c30:	d351      	bcc.n	8000cd6 <__udivmoddi4+0x28a>
 8000c32:	d04e      	beq.n	8000cd2 <__udivmoddi4+0x286>
 8000c34:	b155      	cbz	r5, 8000c4c <__udivmoddi4+0x200>
 8000c36:	ebb8 030e 	subs.w	r3, r8, lr
 8000c3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c42:	40cb      	lsrs	r3, r1
 8000c44:	431e      	orrs	r6, r3
 8000c46:	40cc      	lsrs	r4, r1
 8000c48:	e9c5 6400 	strd	r6, r4, [r5]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	e750      	b.n	8000af2 <__udivmoddi4+0xa6>
 8000c50:	f1c2 0320 	rsb	r3, r2, #32
 8000c54:	fa20 f103 	lsr.w	r1, r0, r3
 8000c58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c60:	4094      	lsls	r4, r2
 8000c62:	430c      	orrs	r4, r1
 8000c64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6c:	fa1f f78c 	uxth.w	r7, ip
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3110 	mls	r1, r8, r0, r3
 8000c78:	0c23      	lsrs	r3, r4, #16
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f107 	mul.w	r1, r0, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x24c>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c8e:	d22c      	bcs.n	8000cea <__udivmoddi4+0x29e>
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d92a      	bls.n	8000cea <__udivmoddi4+0x29e>
 8000c94:	3802      	subs	r0, #2
 8000c96:	4463      	add	r3, ip
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ca0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb01 f307 	mul.w	r3, r1, r7
 8000cac:	42a3      	cmp	r3, r4
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x276>
 8000cb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cb8:	d213      	bcs.n	8000ce2 <__udivmoddi4+0x296>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d911      	bls.n	8000ce2 <__udivmoddi4+0x296>
 8000cbe:	3902      	subs	r1, #2
 8000cc0:	4464      	add	r4, ip
 8000cc2:	1ae4      	subs	r4, r4, r3
 8000cc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cc8:	e739      	b.n	8000b3e <__udivmoddi4+0xf2>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	e6f0      	b.n	8000ab0 <__udivmoddi4+0x64>
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e706      	b.n	8000ae0 <__udivmoddi4+0x94>
 8000cd2:	45c8      	cmp	r8, r9
 8000cd4:	d2ae      	bcs.n	8000c34 <__udivmoddi4+0x1e8>
 8000cd6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cda:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cde:	3801      	subs	r0, #1
 8000ce0:	e7a8      	b.n	8000c34 <__udivmoddi4+0x1e8>
 8000ce2:	4631      	mov	r1, r6
 8000ce4:	e7ed      	b.n	8000cc2 <__udivmoddi4+0x276>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	e799      	b.n	8000c1e <__udivmoddi4+0x1d2>
 8000cea:	4630      	mov	r0, r6
 8000cec:	e7d4      	b.n	8000c98 <__udivmoddi4+0x24c>
 8000cee:	46d6      	mov	lr, sl
 8000cf0:	e77f      	b.n	8000bf2 <__udivmoddi4+0x1a6>
 8000cf2:	4463      	add	r3, ip
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	e74d      	b.n	8000b94 <__udivmoddi4+0x148>
 8000cf8:	4606      	mov	r6, r0
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	e70f      	b.n	8000b20 <__udivmoddi4+0xd4>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	4463      	add	r3, ip
 8000d04:	e730      	b.n	8000b68 <__udivmoddi4+0x11c>
 8000d06:	bf00      	nop

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <HAL_ReadAS5600_I2Cx>:
/* USER CODE BEGIN 0 */



float HAL_ReadAS5600_I2Cx(I2C_HandleTypeDef hi2cX) // pulling 0.5 ms
{
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af04      	add	r7, sp, #16
 8000d14:	f107 0c10 	add.w	ip, r7, #16
 8000d18:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t regData[2];
  HAL_I2C_Mem_Read(&hi2cX, (I2C_AS5600 << 1) , AS5600_ANGLE_H	, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&regData , 2, 0x10000);
 8000d1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	2302      	movs	r3, #2
 8000d24:	9301      	str	r3, [sp, #4]
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	220e      	movs	r2, #14
 8000d2e:	216c      	movs	r1, #108	@ 0x6c
 8000d30:	f107 0010 	add.w	r0, r7, #16
 8000d34:	f002 fd7e 	bl	8003834 <HAL_I2C_Mem_Read>
  return ((float)(((uint16_t)regData[0]<<8 | (uint16_t)regData[1]) & (uint16_t)0xFFF))/4096*360;
 8000d38:	793b      	ldrb	r3, [r7, #4]
 8000d3a:	021b      	lsls	r3, r3, #8
 8000d3c:	797a      	ldrb	r2, [r7, #5]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d4c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000d6c <HAL_ReadAS5600_I2Cx+0x60>
 8000d50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d54:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000d70 <HAL_ReadAS5600_I2Cx+0x64>
 8000d58:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr
 8000d6c:	45800000 	.word	0x45800000
 8000d70:	43b40000 	.word	0x43b40000

08000d74 <Motor_Init>:
	RightW.PWM[i] = RightW.PWM_Value;
  }

}
void Motor_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	  LeftW.hi2c = hi2c2;
 8000d78:	4b69      	ldr	r3, [pc, #420]	@ (8000f20 <Motor_Init+0x1ac>)
 8000d7a:	4a6a      	ldr	r2, [pc, #424]	@ (8000f24 <Motor_Init+0x1b0>)
 8000d7c:	334c      	adds	r3, #76	@ 0x4c
 8000d7e:	4611      	mov	r1, r2
 8000d80:	2254      	movs	r2, #84	@ 0x54
 8000d82:	4618      	mov	r0, r3
 8000d84:	f007 fdf4 	bl	8008970 <memcpy>
	  LeftW.htim = htim1;
 8000d88:	4b65      	ldr	r3, [pc, #404]	@ (8000f20 <Motor_Init+0x1ac>)
 8000d8a:	4a67      	ldr	r2, [pc, #412]	@ (8000f28 <Motor_Init+0x1b4>)
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	4611      	mov	r1, r2
 8000d90:	2248      	movs	r2, #72	@ 0x48
 8000d92:	4618      	mov	r0, r3
 8000d94:	f007 fdec 	bl	8008970 <memcpy>
	  LeftW.PWM_Channel = TIM_CHANNEL_1;
 8000d98:	4b61      	ldr	r3, [pc, #388]	@ (8000f20 <Motor_Init+0x1ac>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f8c3 2248 	str.w	r2, [r3, #584]	@ 0x248
	  LeftW.PWM_Value = 0;
 8000da0:	4b5f      	ldr	r3, [pc, #380]	@ (8000f20 <Motor_Init+0x1ac>)
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
	  LeftW.GPIOx_INA = GPIOB;
 8000daa:	4b5d      	ldr	r3, [pc, #372]	@ (8000f20 <Motor_Init+0x1ac>)
 8000dac:	4a5f      	ldr	r2, [pc, #380]	@ (8000f2c <Motor_Init+0x1b8>)
 8000dae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	  LeftW.GPIOx_INB = GPIOB;
 8000db2:	4b5b      	ldr	r3, [pc, #364]	@ (8000f20 <Motor_Init+0x1ac>)
 8000db4:	4a5d      	ldr	r2, [pc, #372]	@ (8000f2c <Motor_Init+0x1b8>)
 8000db6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	  LeftW.GPIO_Pin_INA = R_INA_Pin;
 8000dba:	4b59      	ldr	r3, [pc, #356]	@ (8000f20 <Motor_Init+0x1ac>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	  LeftW.GPIO_Pin_INB = R_INB_Pin;
 8000dc2:	4b57      	ldr	r3, [pc, #348]	@ (8000f20 <Motor_Init+0x1ac>)
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	  LeftW.PinState_INA    = GPIO_PIN_RESET;
 8000dca:	4b55      	ldr	r3, [pc, #340]	@ (8000f20 <Motor_Init+0x1ac>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	  LeftW.PinState_INB    = GPIO_PIN_RESET;
 8000dd2:	4b53      	ldr	r3, [pc, #332]	@ (8000f20 <Motor_Init+0x1ac>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae

	  LeftW.PID_P = 0.01;
 8000dda:	4b51      	ldr	r3, [pc, #324]	@ (8000f20 <Motor_Init+0x1ac>)
 8000ddc:	4a54      	ldr	r2, [pc, #336]	@ (8000f30 <Motor_Init+0x1bc>)
 8000dde:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
	  LeftW.PID_I = 0;
 8000de2:	4b4f      	ldr	r3, [pc, #316]	@ (8000f20 <Motor_Init+0x1ac>)
 8000de4:	f04f 0200 	mov.w	r2, #0
 8000de8:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
	  LeftW.PID_D = 0;
 8000dec:	4b4c      	ldr	r3, [pc, #304]	@ (8000f20 <Motor_Init+0x1ac>)
 8000dee:	f04f 0200 	mov.w	r2, #0
 8000df2:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	  HAL_TIM_PWM_Start(&LeftW.htim, LeftW.PWM_Channel);
 8000df6:	4b4a      	ldr	r3, [pc, #296]	@ (8000f20 <Motor_Init+0x1ac>)
 8000df8:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	484d      	ldr	r0, [pc, #308]	@ (8000f34 <Motor_Init+0x1c0>)
 8000e00:	f004 f83e 	bl	8004e80 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel, 0 );
 8000e04:	4b46      	ldr	r3, [pc, #280]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e06:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d104      	bne.n	8000e18 <Motor_Init+0xa4>
 8000e0e:	4b44      	ldr	r3, [pc, #272]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e16:	e017      	b.n	8000e48 <Motor_Init+0xd4>
 8000e18:	4b41      	ldr	r3, [pc, #260]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e1a:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	d104      	bne.n	8000e2c <Motor_Init+0xb8>
 8000e22:	4b3f      	ldr	r3, [pc, #252]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	2300      	movs	r3, #0
 8000e28:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e2a:	e00d      	b.n	8000e48 <Motor_Init+0xd4>
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e2e:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	d104      	bne.n	8000e40 <Motor_Init+0xcc>
 8000e36:	4b3a      	ldr	r3, [pc, #232]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e3e:	e003      	b.n	8000e48 <Motor_Init+0xd4>
 8000e40:	4b37      	ldr	r3, [pc, #220]	@ (8000f20 <Motor_Init+0x1ac>)
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	2300      	movs	r3, #0
 8000e46:	6413      	str	r3, [r2, #64]	@ 0x40


	  RightW.hi2c = hi2c1;
 8000e48:	4b3b      	ldr	r3, [pc, #236]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e4a:	4a3c      	ldr	r2, [pc, #240]	@ (8000f3c <Motor_Init+0x1c8>)
 8000e4c:	334c      	adds	r3, #76	@ 0x4c
 8000e4e:	4611      	mov	r1, r2
 8000e50:	2254      	movs	r2, #84	@ 0x54
 8000e52:	4618      	mov	r0, r3
 8000e54:	f007 fd8c 	bl	8008970 <memcpy>
	  RightW.htim = htim1;
 8000e58:	4b37      	ldr	r3, [pc, #220]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e5a:	4a33      	ldr	r2, [pc, #204]	@ (8000f28 <Motor_Init+0x1b4>)
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	4611      	mov	r1, r2
 8000e60:	2248      	movs	r2, #72	@ 0x48
 8000e62:	4618      	mov	r0, r3
 8000e64:	f007 fd84 	bl	8008970 <memcpy>
	  RightW.PWM_Channel = TIM_CHANNEL_4;
 8000e68:	4b33      	ldr	r3, [pc, #204]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	f8c3 2248 	str.w	r2, [r3, #584]	@ 0x248
	  RightW.PWM_Value = 0;
 8000e70:	4b31      	ldr	r3, [pc, #196]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
	  RightW.GPIOx_INA = GPIOA;
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e7c:	4a30      	ldr	r2, [pc, #192]	@ (8000f40 <Motor_Init+0x1cc>)
 8000e7e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	  RightW.GPIOx_INB = GPIOA;
 8000e82:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e84:	4a2e      	ldr	r2, [pc, #184]	@ (8000f40 <Motor_Init+0x1cc>)
 8000e86:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	  RightW.GPIO_Pin_INA = L_INA_Pin;
 8000e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e90:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	  RightW.GPIO_Pin_INB = L_INB_Pin;
 8000e94:	4b28      	ldr	r3, [pc, #160]	@ (8000f38 <Motor_Init+0x1c4>)
 8000e96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e9a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	  RightW.PinState_INA   = GPIO_PIN_RESET;
 8000e9e:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <Motor_Init+0x1c4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	  RightW.PinState_INB   = GPIO_PIN_RESET;
 8000ea6:	4b24      	ldr	r3, [pc, #144]	@ (8000f38 <Motor_Init+0x1c4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae

	  RightW.PID_P = 0.01;
 8000eae:	4b22      	ldr	r3, [pc, #136]	@ (8000f38 <Motor_Init+0x1c4>)
 8000eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8000f30 <Motor_Init+0x1bc>)
 8000eb2:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
	  RightW.PID_I = 0;
 8000eb6:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <Motor_Init+0x1c4>)
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
	  RightW.PID_D = 0;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f38 <Motor_Init+0x1c4>)
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	  HAL_TIM_PWM_Start(&RightW.htim, RightW.PWM_Channel);
 8000eca:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <Motor_Init+0x1c4>)
 8000ecc:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	481c      	ldr	r0, [pc, #112]	@ (8000f44 <Motor_Init+0x1d0>)
 8000ed4:	f003 ffd4 	bl	8004e80 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, 0 );
 8000ed8:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <Motor_Init+0x1c4>)
 8000eda:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d104      	bne.n	8000eec <Motor_Init+0x178>
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <Motor_Init+0x1c4>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000eea:	e017      	b.n	8000f1c <Motor_Init+0x1a8>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, 0 );
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <Motor_Init+0x1c4>)
 8000eee:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	d104      	bne.n	8000f00 <Motor_Init+0x18c>
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <Motor_Init+0x1c4>)
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	2300      	movs	r3, #0
 8000efc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000efe:	e00d      	b.n	8000f1c <Motor_Init+0x1a8>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, 0 );
 8000f00:	4b0d      	ldr	r3, [pc, #52]	@ (8000f38 <Motor_Init+0x1c4>)
 8000f02:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	d104      	bne.n	8000f14 <Motor_Init+0x1a0>
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <Motor_Init+0x1c4>)
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000f12:	e003      	b.n	8000f1c <Motor_Init+0x1a8>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, 0 );
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <Motor_Init+0x1c4>)
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200002c8 	.word	0x200002c8
 8000f24:	20000178 	.word	0x20000178
 8000f28:	20000224 	.word	0x20000224
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	3c23d70a 	.word	0x3c23d70a
 8000f34:	200002cc 	.word	0x200002cc
 8000f38:	200005b0 	.word	0x200005b0
 8000f3c:	20000124 	.word	0x20000124
 8000f40:	40020000 	.word	0x40020000
 8000f44:	200005b4 	.word	0x200005b4

08000f48 <SetDir_Speed>:

void SetDir_Speed(float Speed) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	ed87 0a01 	vstr	s0, [r7, #4]

	if ((Speed==LeftW.Target_speed) && (Speed==RightW.Target_speed)) {return;};
 8000f52:	4b64      	ldr	r3, [pc, #400]	@ (80010e4 <SetDir_Speed+0x19c>)
 8000f54:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8000f58:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f5c:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f64:	d10a      	bne.n	8000f7c <SetDir_Speed+0x34>
 8000f66:	4b60      	ldr	r3, [pc, #384]	@ (80010e8 <SetDir_Speed+0x1a0>)
 8000f68:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8000f6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f70:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f78:	f000 80b0 	beq.w	80010dc <SetDir_Speed+0x194>

	RightW.Target_speed = Speed;
 8000f7c:	4a5a      	ldr	r2, [pc, #360]	@ (80010e8 <SetDir_Speed+0x1a0>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
	LeftW.Target_speed  = Speed;
 8000f84:	4a57      	ldr	r2, [pc, #348]	@ (80010e4 <SetDir_Speed+0x19c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4

	if (LeftW.Target_speed > 0) {
 8000f8c:	4b55      	ldr	r3, [pc, #340]	@ (80010e4 <SetDir_Speed+0x19c>)
 8000f8e:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8000f92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9a:	dd0a      	ble.n	8000fb2 <SetDir_Speed+0x6a>
		LeftW.PinState_INA = GPIO_PIN_RESET;
 8000f9c:	4b51      	ldr	r3, [pc, #324]	@ (80010e4 <SetDir_Speed+0x19c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		LeftW.PinState_INB = GPIO_PIN_SET;
 8000fa4:	4b4f      	ldr	r3, [pc, #316]	@ (80010e4 <SetDir_Speed+0x19c>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		LeftW.Direction = WH_CW;
 8000fac:	4b4d      	ldr	r3, [pc, #308]	@ (80010e4 <SetDir_Speed+0x19c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
	};
	if (LeftW.Target_speed < 0) {
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	@ (80010e4 <SetDir_Speed+0x19c>)
 8000fb4:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8000fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	d50a      	bpl.n	8000fd8 <SetDir_Speed+0x90>
		LeftW.PinState_INA = GPIO_PIN_SET;
 8000fc2:	4b48      	ldr	r3, [pc, #288]	@ (80010e4 <SetDir_Speed+0x19c>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		LeftW.PinState_INB = GPIO_PIN_RESET;
 8000fca:	4b46      	ldr	r3, [pc, #280]	@ (80010e4 <SetDir_Speed+0x19c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		LeftW.Direction = WH_CCW;
 8000fd2:	4b44      	ldr	r3, [pc, #272]	@ (80010e4 <SetDir_Speed+0x19c>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
	};

	if (LeftW.Target_speed == 0) {
 8000fd8:	4b42      	ldr	r3, [pc, #264]	@ (80010e4 <SetDir_Speed+0x19c>)
 8000fda:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8000fde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe6:	d10a      	bne.n	8000ffe <SetDir_Speed+0xb6>
		LeftW.PinState_INA = GPIO_PIN_RESET;
 8000fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80010e4 <SetDir_Speed+0x19c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		LeftW.PinState_INB = GPIO_PIN_RESET;
 8000ff0:	4b3c      	ldr	r3, [pc, #240]	@ (80010e4 <SetDir_Speed+0x19c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		LeftW.Direction = WH_STOP;
 8000ff8:	4b3a      	ldr	r3, [pc, #232]	@ (80010e4 <SetDir_Speed+0x19c>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	701a      	strb	r2, [r3, #0]
	};
	HAL_GPIO_WritePin(LeftW.GPIOx_INA, LeftW.GPIO_Pin_INA, LeftW.PinState_INA);
 8000ffe:	4b39      	ldr	r3, [pc, #228]	@ (80010e4 <SetDir_Speed+0x19c>)
 8001000:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001004:	4a37      	ldr	r2, [pc, #220]	@ (80010e4 <SetDir_Speed+0x19c>)
 8001006:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 800100a:	4a36      	ldr	r2, [pc, #216]	@ (80010e4 <SetDir_Speed+0x19c>)
 800100c:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 8001010:	4618      	mov	r0, r3
 8001012:	f002 fa97 	bl	8003544 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LeftW.GPIOx_INB, LeftW.GPIO_Pin_INB, LeftW.PinState_INB);
 8001016:	4b33      	ldr	r3, [pc, #204]	@ (80010e4 <SetDir_Speed+0x19c>)
 8001018:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800101c:	4a31      	ldr	r2, [pc, #196]	@ (80010e4 <SetDir_Speed+0x19c>)
 800101e:	f8b2 10ac 	ldrh.w	r1, [r2, #172]	@ 0xac
 8001022:	4a30      	ldr	r2, [pc, #192]	@ (80010e4 <SetDir_Speed+0x19c>)
 8001024:	f892 20ae 	ldrb.w	r2, [r2, #174]	@ 0xae
 8001028:	4618      	mov	r0, r3
 800102a:	f002 fa8b 	bl	8003544 <HAL_GPIO_WritePin>



	if (RightW.Target_speed > 0) {
 800102e:	4b2e      	ldr	r3, [pc, #184]	@ (80010e8 <SetDir_Speed+0x1a0>)
 8001030:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8001034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103c:	dd0a      	ble.n	8001054 <SetDir_Speed+0x10c>
		RightW.PinState_INA = GPIO_PIN_SET;
 800103e:	4b2a      	ldr	r3, [pc, #168]	@ (80010e8 <SetDir_Speed+0x1a0>)
 8001040:	2201      	movs	r2, #1
 8001042:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		RightW.PinState_INB = GPIO_PIN_RESET;
 8001046:	4b28      	ldr	r3, [pc, #160]	@ (80010e8 <SetDir_Speed+0x1a0>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		RightW.Direction = WH_CW;
 800104e:	4b26      	ldr	r3, [pc, #152]	@ (80010e8 <SetDir_Speed+0x1a0>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
	};
	if (RightW.Target_speed < 0) {
 8001054:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <SetDir_Speed+0x1a0>)
 8001056:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 800105a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001062:	d50a      	bpl.n	800107a <SetDir_Speed+0x132>
		RightW.PinState_INA = GPIO_PIN_RESET;
 8001064:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <SetDir_Speed+0x1a0>)
 8001066:	2200      	movs	r2, #0
 8001068:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		RightW.PinState_INB = GPIO_PIN_SET;
 800106c:	4b1e      	ldr	r3, [pc, #120]	@ (80010e8 <SetDir_Speed+0x1a0>)
 800106e:	2201      	movs	r2, #1
 8001070:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		RightW.Direction = WH_CCW;
 8001074:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <SetDir_Speed+0x1a0>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
	};

	if (RightW.Target_speed == 0) {
 800107a:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <SetDir_Speed+0x1a0>)
 800107c:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8001080:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001088:	d10f      	bne.n	80010aa <SetDir_Speed+0x162>
		RightW.PinState_INA = GPIO_PIN_RESET;
 800108a:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <SetDir_Speed+0x1a0>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		RightW.PinState_INB = GPIO_PIN_RESET;
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <SetDir_Speed+0x1a0>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		RightW.PWM_Value = 0;
 800109a:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <SetDir_Speed+0x1a0>)
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
		RightW.Direction = WH_STOP;
 80010a4:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <SetDir_Speed+0x1a0>)
 80010a6:	2202      	movs	r2, #2
 80010a8:	701a      	strb	r2, [r3, #0]

	};
	HAL_GPIO_WritePin(RightW.GPIOx_INA, RightW.GPIO_Pin_INA,RightW.PinState_INA);
 80010aa:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <SetDir_Speed+0x1a0>)
 80010ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80010b0:	4a0d      	ldr	r2, [pc, #52]	@ (80010e8 <SetDir_Speed+0x1a0>)
 80010b2:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 80010b6:	4a0c      	ldr	r2, [pc, #48]	@ (80010e8 <SetDir_Speed+0x1a0>)
 80010b8:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 fa41 	bl	8003544 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RightW.GPIOx_INB, RightW.GPIO_Pin_INB,RightW.PinState_INB);
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <SetDir_Speed+0x1a0>)
 80010c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80010c8:	4a07      	ldr	r2, [pc, #28]	@ (80010e8 <SetDir_Speed+0x1a0>)
 80010ca:	f8b2 10ac 	ldrh.w	r1, [r2, #172]	@ 0xac
 80010ce:	4a06      	ldr	r2, [pc, #24]	@ (80010e8 <SetDir_Speed+0x1a0>)
 80010d0:	f892 20ae 	ldrb.w	r2, [r2, #174]	@ 0xae
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 fa35 	bl	8003544 <HAL_GPIO_WritePin>
 80010da:	e000      	b.n	80010de <SetDir_Speed+0x196>
	if ((Speed==LeftW.Target_speed) && (Speed==RightW.Target_speed)) {return;};
 80010dc:	bf00      	nop
}
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200002c8 	.word	0x200002c8
 80010e8:	200005b0 	.word	0x200005b0

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f0:	f001 fa34 	bl	800255c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f4:	f000 f868 	bl	80011c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f8:	f000 fad2 	bl	80016a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010fc:	f000 fab0 	bl	8001660 <MX_DMA_Init>
  MX_I2C1_Init();
 8001100:	f000 f922 	bl	8001348 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001104:	f000 f8c0 	bl	8001288 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001108:	f000 f94c 	bl	80013a4 <MX_I2C2_Init>
  MX_TIM2_Init();
 800110c:	f000 fa5a 	bl	80015c4 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001110:	f000 f9ac 	bl	800146c <MX_TIM1_Init>
  MX_SPI2_Init();
 8001114:	f000 f974 	bl	8001400 <MX_SPI2_Init>





  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8001118:	481d      	ldr	r0, [pc, #116]	@ (8001190 <main+0xa4>)
 800111a:	f003 fdf5 	bl	8004d08 <HAL_TIM_Base_Start_IT>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <main+0x3c>
  {
    /* Starting Error */
    Error_Handler();
 8001124:	f000 ff32 	bl	8001f8c <Error_Handler>
  }

  Motor_Init();
 8001128:	f7ff fe24 	bl	8000d74 <Motor_Init>




  speedr =  0;
 800112c:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <main+0xa8>)
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
  SetDir_Speed(speedr);
 8001134:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <main+0xa8>)
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	eeb0 0a67 	vmov.f32	s0, s15
 800113e:	f7ff ff03 	bl	8000f48 <SetDir_Speed>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001142:	f004 fddf 	bl	8005d04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001146:	4a14      	ldr	r2, [pc, #80]	@ (8001198 <main+0xac>)
 8001148:	2100      	movs	r1, #0
 800114a:	4814      	ldr	r0, [pc, #80]	@ (800119c <main+0xb0>)
 800114c:	f004 fe24 	bl	8005d98 <osThreadNew>
 8001150:	4603      	mov	r3, r0
 8001152:	4a13      	ldr	r2, [pc, #76]	@ (80011a0 <main+0xb4>)
 8001154:	6013      	str	r3, [r2, #0]

  /* creation of Task1ms */
  Task1msHandle = osThreadNew(Task1msHandler, NULL, &Task1ms_attributes);
 8001156:	4a13      	ldr	r2, [pc, #76]	@ (80011a4 <main+0xb8>)
 8001158:	2100      	movs	r1, #0
 800115a:	4813      	ldr	r0, [pc, #76]	@ (80011a8 <main+0xbc>)
 800115c:	f004 fe1c 	bl	8005d98 <osThreadNew>
 8001160:	4603      	mov	r3, r0
 8001162:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <main+0xc0>)
 8001164:	6013      	str	r3, [r2, #0]

  /* creation of Task10ms */
  Task10msHandle = osThreadNew(Task10msHandler, NULL, &Task10ms_attributes);
 8001166:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <main+0xc4>)
 8001168:	2100      	movs	r1, #0
 800116a:	4812      	ldr	r0, [pc, #72]	@ (80011b4 <main+0xc8>)
 800116c:	f004 fe14 	bl	8005d98 <osThreadNew>
 8001170:	4603      	mov	r3, r0
 8001172:	4a11      	ldr	r2, [pc, #68]	@ (80011b8 <main+0xcc>)
 8001174:	6013      	str	r3, [r2, #0]

  /* creation of Task100ms */
  Task100msHandle = osThreadNew(Task100msHandler, NULL, &Task100ms_attributes);
 8001176:	4a11      	ldr	r2, [pc, #68]	@ (80011bc <main+0xd0>)
 8001178:	2100      	movs	r1, #0
 800117a:	4811      	ldr	r0, [pc, #68]	@ (80011c0 <main+0xd4>)
 800117c:	f004 fe0c 	bl	8005d98 <osThreadNew>
 8001180:	4603      	mov	r3, r0
 8001182:	4a10      	ldr	r2, [pc, #64]	@ (80011c4 <main+0xd8>)
 8001184:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001186:	f004 fde1 	bl	8005d4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800118a:	bf00      	nop
 800118c:	e7fd      	b.n	800118a <main+0x9e>
 800118e:	bf00      	nop
 8001190:	2000026c 	.word	0x2000026c
 8001194:	200008a4 	.word	0x200008a4
 8001198:	08008a94 	.word	0x08008a94
 800119c:	080017e9 	.word	0x080017e9
 80011a0:	200002b4 	.word	0x200002b4
 80011a4:	08008ab8 	.word	0x08008ab8
 80011a8:	080017f9 	.word	0x080017f9
 80011ac:	200002b8 	.word	0x200002b8
 80011b0:	08008adc 	.word	0x08008adc
 80011b4:	08001811 	.word	0x08001811
 80011b8:	200002bc 	.word	0x200002bc
 80011bc:	08008b00 	.word	0x08008b00
 80011c0:	08001829 	.word	0x08001829
 80011c4:	200002c0 	.word	0x200002c0

080011c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b094      	sub	sp, #80	@ 0x50
 80011cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ce:	f107 0320 	add.w	r3, r7, #32
 80011d2:	2230      	movs	r2, #48	@ 0x30
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f007 fb46 	bl	8008868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	4b23      	ldr	r3, [pc, #140]	@ (8001280 <SystemClock_Config+0xb8>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f4:	4a22      	ldr	r2, [pc, #136]	@ (8001280 <SystemClock_Config+0xb8>)
 80011f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fc:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <SystemClock_Config+0xb8>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <SystemClock_Config+0xbc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001214:	4a1b      	ldr	r2, [pc, #108]	@ (8001284 <SystemClock_Config+0xbc>)
 8001216:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <SystemClock_Config+0xbc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001228:	2302      	movs	r3, #2
 800122a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122c:	2301      	movs	r3, #1
 800122e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001230:	2310      	movs	r3, #16
 8001232:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001234:	2300      	movs	r3, #0
 8001236:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	4618      	mov	r0, r3
 800123e:	f003 f801 	bl	8004244 <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001248:	f000 fea0 	bl	8001f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
 800124e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fa64 	bl	8004734 <HAL_RCC_ClockConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001272:	f000 fe8b 	bl	8001f8c <Error_Handler>
  }
}
 8001276:	bf00      	nop
 8001278:	3750      	adds	r7, #80	@ 0x50
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	40007000 	.word	0x40007000

08001288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800129a:	4b28      	ldr	r3, [pc, #160]	@ (800133c <MX_ADC1_Init+0xb4>)
 800129c:	4a28      	ldr	r2, [pc, #160]	@ (8001340 <MX_ADC1_Init+0xb8>)
 800129e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012a0:	4b26      	ldr	r3, [pc, #152]	@ (800133c <MX_ADC1_Init+0xb4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012a6:	4b25      	ldr	r3, [pc, #148]	@ (800133c <MX_ADC1_Init+0xb4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012ac:	4b23      	ldr	r3, [pc, #140]	@ (800133c <MX_ADC1_Init+0xb4>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012b2:	4b22      	ldr	r3, [pc, #136]	@ (800133c <MX_ADC1_Init+0xb4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012b8:	4b20      	ldr	r3, [pc, #128]	@ (800133c <MX_ADC1_Init+0xb4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <MX_ADC1_Init+0xb4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <MX_ADC1_Init+0xb4>)
 80012c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001344 <MX_ADC1_Init+0xbc>)
 80012ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <MX_ADC1_Init+0xb4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <MX_ADC1_Init+0xb4>)
 80012d4:	2202      	movs	r2, #2
 80012d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d8:	4b18      	ldr	r3, [pc, #96]	@ (800133c <MX_ADC1_Init+0xb4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e0:	4b16      	ldr	r3, [pc, #88]	@ (800133c <MX_ADC1_Init+0xb4>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e6:	4815      	ldr	r0, [pc, #84]	@ (800133c <MX_ADC1_Init+0xb4>)
 80012e8:	f001 f97a 	bl	80025e0 <HAL_ADC_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012f2:	f000 fe4b 	bl	8001f8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012fa:	2301      	movs	r3, #1
 80012fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80012fe:	2303      	movs	r3, #3
 8001300:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	480d      	ldr	r0, [pc, #52]	@ (800133c <MX_ADC1_Init+0xb4>)
 8001308:	f001 f9ae 	bl	8002668 <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001312:	f000 fe3b 	bl	8001f8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001316:	2301      	movs	r3, #1
 8001318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800131a:	2302      	movs	r3, #2
 800131c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	@ (800133c <MX_ADC1_Init+0xb4>)
 8001324:	f001 f9a0 	bl	8002668 <HAL_ADC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800132e:	f000 fe2d 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000007c 	.word	0x2000007c
 8001340:	40012000 	.word	0x40012000
 8001344:	0f000001 	.word	0x0f000001

08001348 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <MX_I2C1_Init+0x50>)
 800134e:	4a13      	ldr	r2, [pc, #76]	@ (800139c <MX_I2C1_Init+0x54>)
 8001350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_I2C1_Init+0x50>)
 8001354:	4a12      	ldr	r2, [pc, #72]	@ (80013a0 <MX_I2C1_Init+0x58>)
 8001356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <MX_I2C1_Init+0x50>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_I2C1_Init+0x50>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MX_I2C1_Init+0x50>)
 8001366:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800136a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800136c:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <MX_I2C1_Init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <MX_I2C1_Init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001378:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <MX_I2C1_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_I2C1_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001384:	4804      	ldr	r0, [pc, #16]	@ (8001398 <MX_I2C1_Init+0x50>)
 8001386:	f002 f911 	bl	80035ac <HAL_I2C_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001390:	f000 fdfc 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000124 	.word	0x20000124
 800139c:	40005400 	.word	0x40005400
 80013a0:	000186a0 	.word	0x000186a0

080013a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013a8:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <MX_I2C2_Init+0x50>)
 80013aa:	4a13      	ldr	r2, [pc, #76]	@ (80013f8 <MX_I2C2_Init+0x54>)
 80013ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013ae:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <MX_I2C2_Init+0x50>)
 80013b0:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <MX_I2C2_Init+0x58>)
 80013b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <MX_I2C2_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <MX_I2C2_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <MX_I2C2_Init+0x50>)
 80013c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c8:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <MX_I2C2_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <MX_I2C2_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d4:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <MX_I2C2_Init+0x50>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <MX_I2C2_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013e0:	4804      	ldr	r0, [pc, #16]	@ (80013f4 <MX_I2C2_Init+0x50>)
 80013e2:	f002 f8e3 	bl	80035ac <HAL_I2C_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013ec:	f000 fdce 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000178 	.word	0x20000178
 80013f8:	40005800 	.word	0x40005800
 80013fc:	000186a0 	.word	0x000186a0

08001400 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001404:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <MX_SPI2_Init+0x64>)
 8001406:	4a18      	ldr	r2, [pc, #96]	@ (8001468 <MX_SPI2_Init+0x68>)
 8001408:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800140a:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <MX_SPI2_Init+0x64>)
 800140c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001410:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001412:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_SPI2_Init+0x64>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <MX_SPI2_Init+0x64>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_SPI2_Init+0x64>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_SPI2_Init+0x64>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_SPI2_Init+0x64>)
 800142c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001430:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001432:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_SPI2_Init+0x64>)
 8001434:	2200      	movs	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <MX_SPI2_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_SPI2_Init+0x64>)
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001444:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <MX_SPI2_Init+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_SPI2_Init+0x64>)
 800144c:	220a      	movs	r2, #10
 800144e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	@ (8001464 <MX_SPI2_Init+0x64>)
 8001452:	f003 fb81 	bl	8004b58 <HAL_SPI_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800145c:	f000 fd96 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200001cc 	.word	0x200001cc
 8001468:	40003800 	.word	0x40003800

0800146c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b096      	sub	sp, #88	@ 0x58
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2220      	movs	r2, #32
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f007 f9df 	bl	8008868 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014aa:	4b44      	ldr	r3, [pc, #272]	@ (80015bc <MX_TIM1_Init+0x150>)
 80014ac:	4a44      	ldr	r2, [pc, #272]	@ (80015c0 <MX_TIM1_Init+0x154>)
 80014ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014b0:	4b42      	ldr	r3, [pc, #264]	@ (80015bc <MX_TIM1_Init+0x150>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b6:	4b41      	ldr	r3, [pc, #260]	@ (80015bc <MX_TIM1_Init+0x150>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014bc:	4b3f      	ldr	r3, [pc, #252]	@ (80015bc <MX_TIM1_Init+0x150>)
 80014be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c4:	4b3d      	ldr	r3, [pc, #244]	@ (80015bc <MX_TIM1_Init+0x150>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ca:	4b3c      	ldr	r3, [pc, #240]	@ (80015bc <MX_TIM1_Init+0x150>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d0:	4b3a      	ldr	r3, [pc, #232]	@ (80015bc <MX_TIM1_Init+0x150>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d6:	4839      	ldr	r0, [pc, #228]	@ (80015bc <MX_TIM1_Init+0x150>)
 80014d8:	f003 fbc7 	bl	8004c6a <HAL_TIM_Base_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014e2:	f000 fd53 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014f0:	4619      	mov	r1, r3
 80014f2:	4832      	ldr	r0, [pc, #200]	@ (80015bc <MX_TIM1_Init+0x150>)
 80014f4:	f003 ff26 	bl	8005344 <HAL_TIM_ConfigClockSource>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014fe:	f000 fd45 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001502:	482e      	ldr	r0, [pc, #184]	@ (80015bc <MX_TIM1_Init+0x150>)
 8001504:	f003 fc62 	bl	8004dcc <HAL_TIM_PWM_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800150e:	f000 fd3d 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800151a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800151e:	4619      	mov	r1, r3
 8001520:	4826      	ldr	r0, [pc, #152]	@ (80015bc <MX_TIM1_Init+0x150>)
 8001522:	f004 fad7 	bl	8005ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800152c:	f000 fd2e 	bl	8001f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001530:	2360      	movs	r3, #96	@ 0x60
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800153c:	2300      	movs	r3, #0
 800153e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	4819      	ldr	r0, [pc, #100]	@ (80015bc <MX_TIM1_Init+0x150>)
 8001556:	f003 fe33 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001560:	f000 fd14 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001568:	220c      	movs	r2, #12
 800156a:	4619      	mov	r1, r3
 800156c:	4813      	ldr	r0, [pc, #76]	@ (80015bc <MX_TIM1_Init+0x150>)
 800156e:	f003 fe27 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001578:	f000 fd08 	bl	8001f8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001590:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001594:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	4619      	mov	r1, r3
 800159e:	4807      	ldr	r0, [pc, #28]	@ (80015bc <MX_TIM1_Init+0x150>)
 80015a0:	f004 fb06 	bl	8005bb0 <HAL_TIMEx_ConfigBreakDeadTime>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80015aa:	f000 fcef 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015ae:	4803      	ldr	r0, [pc, #12]	@ (80015bc <MX_TIM1_Init+0x150>)
 80015b0:	f000 feae 	bl	8002310 <HAL_TIM_MspPostInit>

}
 80015b4:	bf00      	nop
 80015b6:	3758      	adds	r7, #88	@ 0x58
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000224 	.word	0x20000224
 80015c0:	40010000 	.word	0x40010000

080015c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	463b      	mov	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	@ (800165c <MX_TIM2_Init+0x98>)
 80015e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <MX_TIM2_Init+0x98>)
 80015ea:	f240 623f 	movw	r2, #1599	@ 0x63f
 80015ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <MX_TIM2_Init+0x98>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <MX_TIM2_Init+0x98>)
 80015f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fe:	4b17      	ldr	r3, [pc, #92]	@ (800165c <MX_TIM2_Init+0x98>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001604:	4b15      	ldr	r3, [pc, #84]	@ (800165c <MX_TIM2_Init+0x98>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800160a:	4814      	ldr	r0, [pc, #80]	@ (800165c <MX_TIM2_Init+0x98>)
 800160c:	f003 fb2d 	bl	8004c6a <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001616:	f000 fcb9 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	4619      	mov	r1, r3
 8001626:	480d      	ldr	r0, [pc, #52]	@ (800165c <MX_TIM2_Init+0x98>)
 8001628:	f003 fe8c 	bl	8005344 <HAL_TIM_ConfigClockSource>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001632:	f000 fcab 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800163e:	463b      	mov	r3, r7
 8001640:	4619      	mov	r1, r3
 8001642:	4806      	ldr	r0, [pc, #24]	@ (800165c <MX_TIM2_Init+0x98>)
 8001644:	f004 fa46 	bl	8005ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800164e:	f000 fc9d 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000026c 	.word	0x2000026c

08001660 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <MX_DMA_Init+0x3c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	4a0b      	ldr	r2, [pc, #44]	@ (800169c <MX_DMA_Init+0x3c>)
 8001670:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001674:	6313      	str	r3, [r2, #48]	@ 0x30
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <MX_DMA_Init+0x3c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2105      	movs	r1, #5
 8001686:	2038      	movs	r0, #56	@ 0x38
 8001688:	f001 fac4 	bl	8002c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800168c:	2038      	movs	r0, #56	@ 0x38
 800168e:	f001 fadd 	bl	8002c4c <HAL_NVIC_EnableIRQ>

}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	@ 0x28
 80016a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b47      	ldr	r3, [pc, #284]	@ (80017d8 <MX_GPIO_Init+0x138>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a46      	ldr	r2, [pc, #280]	@ (80017d8 <MX_GPIO_Init+0x138>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b44      	ldr	r3, [pc, #272]	@ (80017d8 <MX_GPIO_Init+0x138>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b40      	ldr	r3, [pc, #256]	@ (80017d8 <MX_GPIO_Init+0x138>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a3f      	ldr	r2, [pc, #252]	@ (80017d8 <MX_GPIO_Init+0x138>)
 80016dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b3d      	ldr	r3, [pc, #244]	@ (80017d8 <MX_GPIO_Init+0x138>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	4b39      	ldr	r3, [pc, #228]	@ (80017d8 <MX_GPIO_Init+0x138>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a38      	ldr	r2, [pc, #224]	@ (80017d8 <MX_GPIO_Init+0x138>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b36      	ldr	r3, [pc, #216]	@ (80017d8 <MX_GPIO_Init+0x138>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	4b32      	ldr	r3, [pc, #200]	@ (80017d8 <MX_GPIO_Init+0x138>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a31      	ldr	r2, [pc, #196]	@ (80017d8 <MX_GPIO_Init+0x138>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b2f      	ldr	r3, [pc, #188]	@ (80017d8 <MX_GPIO_Init+0x138>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUELED_GPIO_Port, BLUELED_Pin, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800172c:	482b      	ldr	r0, [pc, #172]	@ (80017dc <MX_GPIO_Init+0x13c>)
 800172e:	f001 ff09 	bl	8003544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_INA_Pin|R_INB_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	2103      	movs	r1, #3
 8001736:	482a      	ldr	r0, [pc, #168]	@ (80017e0 <MX_GPIO_Init+0x140>)
 8001738:	f001 ff04 	bl	8003544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_INB_Pin|L_INA_Pin, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001742:	4828      	ldr	r0, [pc, #160]	@ (80017e4 <MX_GPIO_Init+0x144>)
 8001744:	f001 fefe 	bl	8003544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUELED_Pin */
  GPIO_InitStruct.Pin = BLUELED_Pin;
 8001748:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUELED_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	481e      	ldr	r0, [pc, #120]	@ (80017dc <MX_GPIO_Init+0x13c>)
 8001762:	f001 fd6b 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001766:	2380      	movs	r3, #128	@ 0x80
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	481a      	ldr	r0, [pc, #104]	@ (80017e4 <MX_GPIO_Init+0x144>)
 800177a:	f001 fd5f 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : R_INA_Pin R_INB_Pin */
  GPIO_InitStruct.Pin = R_INA_Pin|R_INB_Pin;
 800177e:	2303      	movs	r3, #3
 8001780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	2301      	movs	r3, #1
 8001784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	4812      	ldr	r0, [pc, #72]	@ (80017e0 <MX_GPIO_Init+0x140>)
 8001796:	f001 fd51 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : L_INB_Pin L_INA_Pin */
  GPIO_InitStruct.Pin = L_INB_Pin|L_INA_Pin;
 800179a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	480c      	ldr	r0, [pc, #48]	@ (80017e4 <MX_GPIO_Init+0x144>)
 80017b4:	f001 fd42 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017b8:	2310      	movs	r3, #16
 80017ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <MX_GPIO_Init+0x140>)
 80017cc:	f001 fd36 	bl	800323c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	@ 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020400 	.word	0x40020400
 80017e4:	40020000 	.word	0x40020000

080017e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f004 fb63 	bl	8005ebc <osDelay>
 80017f6:	e7fb      	b.n	80017f0 <StartDefaultTask+0x8>

080017f8 <Task1msHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1msHandler */
void Task1msHandler(void *argument)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1msHandler */
  /* Infinite loop */
  for(;;)
  {
	  task1msCnt++;
 8001800:	4b02      	ldr	r3, [pc, #8]	@ (800180c <Task1msHandler+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	4a01      	ldr	r2, [pc, #4]	@ (800180c <Task1msHandler+0x14>)
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e7f9      	b.n	8001800 <Task1msHandler+0x8>
 800180c:	20000898 	.word	0x20000898

08001810 <Task10msHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task10msHandler */
void Task10msHandler(void *argument)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task10msHandler */
  /* Infinite loop */
  for(;;)
  {
	  task10msCnt++;
 8001818:	4b02      	ldr	r3, [pc, #8]	@ (8001824 <Task10msHandler+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	4a01      	ldr	r2, [pc, #4]	@ (8001824 <Task10msHandler+0x14>)
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e7f9      	b.n	8001818 <Task10msHandler+0x8>
 8001824:	2000089c 	.word	0x2000089c

08001828 <Task100msHandler>:
* @brief Function implementing the Task100ms thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task100msHandler */
void Task100msHandler(void *argument) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task100msHandler */
	/* Infinite loop */
	for (;;) {

		task100msCnt++;
 8001830:	4baa      	ldr	r3, [pc, #680]	@ (8001adc <Task100msHandler+0x2b4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	4aa9      	ldr	r2, [pc, #676]	@ (8001adc <Task100msHandler+0x2b4>)
 8001838:	6013      	str	r3, [r2, #0]


		if (fabsf(LeftW.Target_speed) > 0) {
 800183a:	4ba9      	ldr	r3, [pc, #676]	@ (8001ae0 <Task100msHandler+0x2b8>)
 800183c:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8001840:	eef0 7ae7 	vabs.f32	s15, s15
 8001844:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184c:	f340 80be 	ble.w	80019cc <Task100msHandler+0x1a4>
			LeftW.PID_value_P =  LeftW.PID_P * (LeftW.Target_speed - LeftW.CurrentSpeed);
 8001850:	4ba3      	ldr	r3, [pc, #652]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001852:	ed93 7a96 	vldr	s14, [r3, #600]	@ 0x258
 8001856:	4ba2      	ldr	r3, [pc, #648]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001858:	edd3 6a2d 	vldr	s13, [r3, #180]	@ 0xb4
 800185c:	4ba0      	ldr	r3, [pc, #640]	@ (8001ae0 <Task100msHandler+0x2b8>)
 800185e:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8001862:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186a:	4b9d      	ldr	r3, [pc, #628]	@ (8001ae0 <Task100msHandler+0x2b8>)
 800186c:	edc3 7a94 	vstr	s15, [r3, #592]	@ 0x250

			if (LeftW.PID_value_P > 20)  { LeftW.PID_value_P = 20;  };
 8001870:	4b9b      	ldr	r3, [pc, #620]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001872:	edd3 7a94 	vldr	s15, [r3, #592]	@ 0x250
 8001876:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800187a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001882:	dd03      	ble.n	800188c <Task100msHandler+0x64>
 8001884:	4b96      	ldr	r3, [pc, #600]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001886:	4a97      	ldr	r2, [pc, #604]	@ (8001ae4 <Task100msHandler+0x2bc>)
 8001888:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
			if (LeftW.PID_value_P < -20) { LeftW.PID_value_P = -20;	};
 800188c:	4b94      	ldr	r3, [pc, #592]	@ (8001ae0 <Task100msHandler+0x2b8>)
 800188e:	edd3 7a94 	vldr	s15, [r3, #592]	@ 0x250
 8001892:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8001896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189e:	d503      	bpl.n	80018a8 <Task100msHandler+0x80>
 80018a0:	4b8f      	ldr	r3, [pc, #572]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80018a2:	4a91      	ldr	r2, [pc, #580]	@ (8001ae8 <Task100msHandler+0x2c0>)
 80018a4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250

			LeftW.PID_sum_I = 0;
 80018a8:	4b8d      	ldr	r3, [pc, #564]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
			for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	e011      	b.n	80018dc <Task100msHandler+0xb4>
				LeftW.PID_sum_I = LeftW.PID_sum_I + LeftW.sumI[i];
 80018b8:	4b89      	ldr	r3, [pc, #548]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80018ba:	ed93 7a99 	vldr	s14, [r3, #612]	@ 0x264
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	4a87      	ldr	r2, [pc, #540]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80018c2:	337e      	adds	r3, #126	@ 0x7e
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d0:	4b83      	ldr	r3, [pc, #524]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80018d2:	edc3 7a99 	vstr	s15, [r3, #612]	@ 0x264
			for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	3301      	adds	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2b13      	cmp	r3, #19
 80018e0:	d9ea      	bls.n	80018b8 <Task100msHandler+0x90>
			}

			LeftW.PWM_Value = LeftW.PWM_Value + LeftW.PID_value_P  + LeftW.PID_I * LeftW.PID_sum_I;
 80018e2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80018e4:	ed93 7a93 	vldr	s14, [r3, #588]	@ 0x24c
 80018e8:	4b7d      	ldr	r3, [pc, #500]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80018ea:	edd3 7a94 	vldr	s15, [r3, #592]	@ 0x250
 80018ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018f2:	4b7b      	ldr	r3, [pc, #492]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80018f4:	edd3 6a97 	vldr	s13, [r3, #604]	@ 0x25c
 80018f8:	4b79      	ldr	r3, [pc, #484]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80018fa:	edd3 7a99 	vldr	s15, [r3, #612]	@ 0x264
 80018fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001906:	4b76      	ldr	r3, [pc, #472]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001908:	edc3 7a93 	vstr	s15, [r3, #588]	@ 0x24c

			if (LeftW.PWM_Value < 0)     { LeftW.PWM_Value = 0;	};
 800190c:	4b74      	ldr	r3, [pc, #464]	@ (8001ae0 <Task100msHandler+0x2b8>)
 800190e:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001912:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191a:	d504      	bpl.n	8001926 <Task100msHandler+0xfe>
 800191c:	4b70      	ldr	r3, [pc, #448]	@ (8001ae0 <Task100msHandler+0x2b8>)
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
			if (LeftW.PWM_Value > 50000) { LeftW.PWM_Value = 50000; };
 8001926:	4b6e      	ldr	r3, [pc, #440]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001928:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 800192c:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8001aec <Task100msHandler+0x2c4>
 8001930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001938:	dd03      	ble.n	8001942 <Task100msHandler+0x11a>
 800193a:	4b69      	ldr	r3, [pc, #420]	@ (8001ae0 <Task100msHandler+0x2b8>)
 800193c:	4a6c      	ldr	r2, [pc, #432]	@ (8001af0 <Task100msHandler+0x2c8>)
 800193e:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c

			LeftW.PWM[MAX_ANGLE_WHEEL_ARRAY - 1] = (uint32_t) LeftW.PWM_Value;
 8001942:	4b67      	ldr	r3, [pc, #412]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001944:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800194c:	ee17 2a90 	vmov	r2, s15
 8001950:	4b63      	ldr	r3, [pc, #396]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001952:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4

			__HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel,
 8001956:	4b62      	ldr	r3, [pc, #392]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001958:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10a      	bne.n	8001976 <Task100msHandler+0x14e>
 8001960:	4b5f      	ldr	r3, [pc, #380]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001962:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001966:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800196e:	ee17 2a90 	vmov	r2, s15
 8001972:	635a      	str	r2, [r3, #52]	@ 0x34
 8001974:	e073      	b.n	8001a5e <Task100msHandler+0x236>
 8001976:	4b5a      	ldr	r3, [pc, #360]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001978:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 800197c:	2b04      	cmp	r3, #4
 800197e:	d10a      	bne.n	8001996 <Task100msHandler+0x16e>
 8001980:	4b57      	ldr	r3, [pc, #348]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001982:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001986:	4b56      	ldr	r3, [pc, #344]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800198e:	ee17 3a90 	vmov	r3, s15
 8001992:	6393      	str	r3, [r2, #56]	@ 0x38
 8001994:	e063      	b.n	8001a5e <Task100msHandler+0x236>
 8001996:	4b52      	ldr	r3, [pc, #328]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001998:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 800199c:	2b08      	cmp	r3, #8
 800199e:	d10a      	bne.n	80019b6 <Task100msHandler+0x18e>
 80019a0:	4b4f      	ldr	r3, [pc, #316]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80019a2:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 80019a6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ae:	ee17 3a90 	vmov	r3, s15
 80019b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80019b4:	e053      	b.n	8001a5e <Task100msHandler+0x236>
 80019b6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80019b8:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 80019bc:	4b48      	ldr	r3, [pc, #288]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c4:	ee17 3a90 	vmov	r3, s15
 80019c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ca:	e048      	b.n	8001a5e <Task100msHandler+0x236>
					(uint32_t) LeftW.PWM_Value);
		} else {

			LeftW.PWM_Value = 0;
 80019cc:	4b44      	ldr	r3, [pc, #272]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
			LeftW.PWM[MAX_ANGLE_WHEEL_ARRAY - 1] = (uint32_t) LeftW.PWM_Value;
 80019d6:	4b42      	ldr	r3, [pc, #264]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80019d8:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 80019dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019e0:	ee17 2a90 	vmov	r2, s15
 80019e4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80019e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4

			__HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel,
 80019ea:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80019ec:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10a      	bne.n	8001a0a <Task100msHandler+0x1e2>
 80019f4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80019f6:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 80019fa:	4b39      	ldr	r3, [pc, #228]	@ (8001ae0 <Task100msHandler+0x2b8>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a02:	ee17 2a90 	vmov	r2, s15
 8001a06:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a08:	e029      	b.n	8001a5e <Task100msHandler+0x236>
 8001a0a:	4b35      	ldr	r3, [pc, #212]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001a0c:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d10a      	bne.n	8001a2a <Task100msHandler+0x202>
 8001a14:	4b32      	ldr	r3, [pc, #200]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001a16:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001a1a:	4b31      	ldr	r3, [pc, #196]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a22:	ee17 3a90 	vmov	r3, s15
 8001a26:	6393      	str	r3, [r2, #56]	@ 0x38
 8001a28:	e019      	b.n	8001a5e <Task100msHandler+0x236>
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001a2c:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d10a      	bne.n	8001a4a <Task100msHandler+0x222>
 8001a34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001a36:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001a3a:	4b29      	ldr	r3, [pc, #164]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a42:	ee17 3a90 	vmov	r3, s15
 8001a46:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001a48:	e009      	b.n	8001a5e <Task100msHandler+0x236>
 8001a4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001a4c:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001a50:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <Task100msHandler+0x2b8>)
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a58:	ee17 3a90 	vmov	r3, s15
 8001a5c:	6413      	str	r3, [r2, #64]	@ 0x40

		}



		if (fabs(RightW.Target_speed) > 0) {
 8001a5e:	4b25      	ldr	r3, [pc, #148]	@ (8001af4 <Task100msHandler+0x2cc>)
 8001a60:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8001a64:	eef0 7ae7 	vabs.f32	s15, s15
 8001a68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	f340 80cc 	ble.w	8001c0c <Task100msHandler+0x3e4>

			RightW.PID_value_P =  RightW.PID_P * (RightW.Target_speed - RightW.CurrentSpeed);
 8001a74:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <Task100msHandler+0x2cc>)
 8001a76:	ed93 7a96 	vldr	s14, [r3, #600]	@ 0x258
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <Task100msHandler+0x2cc>)
 8001a7c:	edd3 6a2d 	vldr	s13, [r3, #180]	@ 0xb4
 8001a80:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <Task100msHandler+0x2cc>)
 8001a82:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8001a86:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8e:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <Task100msHandler+0x2cc>)
 8001a90:	edc3 7a94 	vstr	s15, [r3, #592]	@ 0x250

			if (RightW.PID_value_P > 20)  { RightW.PID_value_P = 20;  };
 8001a94:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <Task100msHandler+0x2cc>)
 8001a96:	edd3 7a94 	vldr	s15, [r3, #592]	@ 0x250
 8001a9a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa6:	dd03      	ble.n	8001ab0 <Task100msHandler+0x288>
 8001aa8:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <Task100msHandler+0x2cc>)
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae4 <Task100msHandler+0x2bc>)
 8001aac:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
			if (RightW.PID_value_P < -20) { RightW.PID_value_P = -20;	};
 8001ab0:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <Task100msHandler+0x2cc>)
 8001ab2:	edd3 7a94 	vldr	s15, [r3, #592]	@ 0x250
 8001ab6:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8001aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac2:	d503      	bpl.n	8001acc <Task100msHandler+0x2a4>
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <Task100msHandler+0x2cc>)
 8001ac6:	4a08      	ldr	r2, [pc, #32]	@ (8001ae8 <Task100msHandler+0x2c0>)
 8001ac8:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250

			RightW.PID_sum_I = 0;
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <Task100msHandler+0x2cc>)
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
			for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73bb      	strb	r3, [r7, #14]
 8001ada:	e01f      	b.n	8001b1c <Task100msHandler+0x2f4>
 8001adc:	200008a0 	.word	0x200008a0
 8001ae0:	200002c8 	.word	0x200002c8
 8001ae4:	41a00000 	.word	0x41a00000
 8001ae8:	c1a00000 	.word	0xc1a00000
 8001aec:	47435000 	.word	0x47435000
 8001af0:	47435000 	.word	0x47435000
 8001af4:	200005b0 	.word	0x200005b0
				RightW.PID_sum_I = RightW.PID_sum_I + RightW.sumI[i];
 8001af8:	4b6d      	ldr	r3, [pc, #436]	@ (8001cb0 <Task100msHandler+0x488>)
 8001afa:	ed93 7a99 	vldr	s14, [r3, #612]	@ 0x264
 8001afe:	7bbb      	ldrb	r3, [r7, #14]
 8001b00:	4a6b      	ldr	r2, [pc, #428]	@ (8001cb0 <Task100msHandler+0x488>)
 8001b02:	337e      	adds	r3, #126	@ 0x7e
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b10:	4b67      	ldr	r3, [pc, #412]	@ (8001cb0 <Task100msHandler+0x488>)
 8001b12:	edc3 7a99 	vstr	s15, [r3, #612]	@ 0x264
			for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8001b16:	7bbb      	ldrb	r3, [r7, #14]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	73bb      	strb	r3, [r7, #14]
 8001b1c:	7bbb      	ldrb	r3, [r7, #14]
 8001b1e:	2b13      	cmp	r3, #19
 8001b20:	d9ea      	bls.n	8001af8 <Task100msHandler+0x2d0>
			}

			RightW.PWM_Value = RightW.PWM_Value + RightW.PID_value_P  + RightW.PID_I * RightW.PID_sum_I;
 8001b22:	4b63      	ldr	r3, [pc, #396]	@ (8001cb0 <Task100msHandler+0x488>)
 8001b24:	ed93 7a93 	vldr	s14, [r3, #588]	@ 0x24c
 8001b28:	4b61      	ldr	r3, [pc, #388]	@ (8001cb0 <Task100msHandler+0x488>)
 8001b2a:	edd3 7a94 	vldr	s15, [r3, #592]	@ 0x250
 8001b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b32:	4b5f      	ldr	r3, [pc, #380]	@ (8001cb0 <Task100msHandler+0x488>)
 8001b34:	edd3 6a97 	vldr	s13, [r3, #604]	@ 0x25c
 8001b38:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb0 <Task100msHandler+0x488>)
 8001b3a:	edd3 7a99 	vldr	s15, [r3, #612]	@ 0x264
 8001b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b46:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb0 <Task100msHandler+0x488>)
 8001b48:	edc3 7a93 	vstr	s15, [r3, #588]	@ 0x24c

			if (RightW.PWM_Value < 0)     { RightW.PWM_Value = 0;	};
 8001b4c:	4b58      	ldr	r3, [pc, #352]	@ (8001cb0 <Task100msHandler+0x488>)
 8001b4e:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001b52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5a:	d504      	bpl.n	8001b66 <Task100msHandler+0x33e>
 8001b5c:	4b54      	ldr	r3, [pc, #336]	@ (8001cb0 <Task100msHandler+0x488>)
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
			if (RightW.PWM_Value > 50000) { RightW.PWM_Value = 50000; };
 8001b66:	4b52      	ldr	r3, [pc, #328]	@ (8001cb0 <Task100msHandler+0x488>)
 8001b68:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001b6c:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001cb4 <Task100msHandler+0x48c>
 8001b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	dd03      	ble.n	8001b82 <Task100msHandler+0x35a>
 8001b7a:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb0 <Task100msHandler+0x488>)
 8001b7c:	4a4e      	ldr	r2, [pc, #312]	@ (8001cb8 <Task100msHandler+0x490>)
 8001b7e:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c

			RightW.PWM[MAX_ANGLE_WHEEL_ARRAY - 1] = (uint32_t) RightW.PWM_Value;
 8001b82:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb0 <Task100msHandler+0x488>)
 8001b84:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b8c:	ee17 2a90 	vmov	r2, s15
 8001b90:	4b47      	ldr	r3, [pc, #284]	@ (8001cb0 <Task100msHandler+0x488>)
 8001b92:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4


			__HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel,
 8001b96:	4b46      	ldr	r3, [pc, #280]	@ (8001cb0 <Task100msHandler+0x488>)
 8001b98:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10a      	bne.n	8001bb6 <Task100msHandler+0x38e>
 8001ba0:	4b43      	ldr	r3, [pc, #268]	@ (8001cb0 <Task100msHandler+0x488>)
 8001ba2:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001ba6:	4b42      	ldr	r3, [pc, #264]	@ (8001cb0 <Task100msHandler+0x488>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bae:	ee17 2a90 	vmov	r2, s15
 8001bb2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bb4:	e073      	b.n	8001c9e <Task100msHandler+0x476>
 8001bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb0 <Task100msHandler+0x488>)
 8001bb8:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d10a      	bne.n	8001bd6 <Task100msHandler+0x3ae>
 8001bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb0 <Task100msHandler+0x488>)
 8001bc2:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb0 <Task100msHandler+0x488>)
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bce:	ee17 3a90 	vmov	r3, s15
 8001bd2:	6393      	str	r3, [r2, #56]	@ 0x38
 8001bd4:	e063      	b.n	8001c9e <Task100msHandler+0x476>
 8001bd6:	4b36      	ldr	r3, [pc, #216]	@ (8001cb0 <Task100msHandler+0x488>)
 8001bd8:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d10a      	bne.n	8001bf6 <Task100msHandler+0x3ce>
 8001be0:	4b33      	ldr	r3, [pc, #204]	@ (8001cb0 <Task100msHandler+0x488>)
 8001be2:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001be6:	4b32      	ldr	r3, [pc, #200]	@ (8001cb0 <Task100msHandler+0x488>)
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bee:	ee17 3a90 	vmov	r3, s15
 8001bf2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001bf4:	e053      	b.n	8001c9e <Task100msHandler+0x476>
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb0 <Task100msHandler+0x488>)
 8001bf8:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb0 <Task100msHandler+0x488>)
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c04:	ee17 3a90 	vmov	r3, s15
 8001c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0a:	e048      	b.n	8001c9e <Task100msHandler+0x476>
					RightW.PWM_Value);
		} else {

			RightW.PWM_Value = 0;
 8001c0c:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <Task100msHandler+0x488>)
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
			RightW.PWM[MAX_ANGLE_WHEEL_ARRAY - 1] = (uint32_t) RightW.PWM_Value;
 8001c16:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <Task100msHandler+0x488>)
 8001c18:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c20:	ee17 2a90 	vmov	r2, s15
 8001c24:	4b22      	ldr	r3, [pc, #136]	@ (8001cb0 <Task100msHandler+0x488>)
 8001c26:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4

			__HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel,
 8001c2a:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <Task100msHandler+0x488>)
 8001c2c:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10a      	bne.n	8001c4a <Task100msHandler+0x422>
 8001c34:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <Task100msHandler+0x488>)
 8001c36:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <Task100msHandler+0x488>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c42:	ee17 2a90 	vmov	r2, s15
 8001c46:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c48:	e029      	b.n	8001c9e <Task100msHandler+0x476>
 8001c4a:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <Task100msHandler+0x488>)
 8001c4c:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d10a      	bne.n	8001c6a <Task100msHandler+0x442>
 8001c54:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <Task100msHandler+0x488>)
 8001c56:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001c5a:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <Task100msHandler+0x488>)
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c62:	ee17 3a90 	vmov	r3, s15
 8001c66:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c68:	e019      	b.n	8001c9e <Task100msHandler+0x476>
 8001c6a:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <Task100msHandler+0x488>)
 8001c6c:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d10a      	bne.n	8001c8a <Task100msHandler+0x462>
 8001c74:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <Task100msHandler+0x488>)
 8001c76:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb0 <Task100msHandler+0x488>)
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c82:	ee17 3a90 	vmov	r3, s15
 8001c86:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001c88:	e009      	b.n	8001c9e <Task100msHandler+0x476>
 8001c8a:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <Task100msHandler+0x488>)
 8001c8c:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8001c90:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <Task100msHandler+0x488>)
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c98:	ee17 3a90 	vmov	r3, s15
 8001c9c:	6413      	str	r3, [r2, #64]	@ 0x40
					(uint32_t) RightW.PWM_Value);

		}

		SetDir_Speed(speedr);
 8001c9e:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <Task100msHandler+0x494>)
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca8:	f7ff f94e 	bl	8000f48 <SetDir_Speed>
		task100msCnt++;
 8001cac:	e5c0      	b.n	8001830 <Task100msHandler+0x8>
 8001cae:	bf00      	nop
 8001cb0:	200005b0 	.word	0x200005b0
 8001cb4:	47435000 	.word	0x47435000
 8001cb8:	47435000 	.word	0x47435000
 8001cbc:	200008a4 	.word	0x200008a4

08001cc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc0:	b5b0      	push	{r4, r5, r7, lr}
 8001cc2:	b09a      	sub	sp, #104	@ 0x68
 8001cc4:	af12      	add	r7, sp, #72	@ 0x48
 8001cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4aa8      	ldr	r2, [pc, #672]	@ (8001f70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cd2:	f000 fc65 	bl	80025a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2) {
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cde:	f040 8143 	bne.w	8001f68 <HAL_TIM_PeriodElapsedCallback+0x2a8>

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);  // мигаем светодиодом
 8001ce2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ce6:	48a3      	ldr	r0, [pc, #652]	@ (8001f74 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001ce8:	f001 fc45 	bl	8003576 <HAL_GPIO_TogglePin>

		// записывае время и угол каждого колеса
		uint32_t LeftWtime_ms_wheel = HAL_GetTick();
 8001cec:	f000 fc6c 	bl	80025c8 <HAL_GetTick>
 8001cf0:	61b8      	str	r0, [r7, #24]
		float LeftWangle= HAL_ReadAS5600_I2Cx(LeftW.hi2c);
 8001cf2:	4ca1      	ldr	r4, [pc, #644]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001cf4:	4668      	mov	r0, sp
 8001cf6:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8001cfa:	2244      	movs	r2, #68	@ 0x44
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f006 fe37 	bl	8008970 <memcpy>
 8001d02:	f104 034c 	add.w	r3, r4, #76	@ 0x4c
 8001d06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d08:	f7ff f800 	bl	8000d0c <HAL_ReadAS5600_I2Cx>
 8001d0c:	ed87 0a05 	vstr	s0, [r7, #20]

		uint32_t RightWtime_ms_wheel = HAL_GetTick();
 8001d10:	f000 fc5a 	bl	80025c8 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]
		float RightWangle = HAL_ReadAS5600_I2Cx(RightW.hi2c);
 8001d16:	4c99      	ldr	r4, [pc, #612]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d18:	4668      	mov	r0, sp
 8001d1a:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8001d1e:	2244      	movs	r2, #68	@ 0x44
 8001d20:	4619      	mov	r1, r3
 8001d22:	f006 fe25 	bl	8008970 <memcpy>
 8001d26:	f104 034c 	add.w	r3, r4, #76	@ 0x4c
 8001d2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d2c:	f7fe ffee 	bl	8000d0c <HAL_ReadAS5600_I2Cx>
 8001d30:	ed87 0a03 	vstr	s0, [r7, #12]

		// вычисляем скорость и записываем ее в временную переменную
		LeftW.CurrentSpeed = fabsf((1000
				* (LeftWangle - LeftW.angle[MAX_ANGLE_WHEEL_ARRAY - 1]))
 8001d34:	6978      	ldr	r0, [r7, #20]
 8001d36:	f7fe fbb7 	bl	80004a8 <__aeabi_f2d>
 8001d3a:	4b8f      	ldr	r3, [pc, #572]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d3c:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	@ 0x1a0
 8001d40:	f7fe fa52 	bl	80001e8 <__aeabi_dsub>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4b8b      	ldr	r3, [pc, #556]	@ (8001f80 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d52:	f7fe fc01 	bl	8000558 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4614      	mov	r4, r2
 8001d5c:	461d      	mov	r5, r3
				/ (LeftWtime_ms_wheel  - LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1])) / 360 * 60;
 8001d5e:	4b86      	ldr	r3, [pc, #536]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d60:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fb7b 	bl	8000464 <__aeabi_ui2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4620      	mov	r0, r4
 8001d74:	4629      	mov	r1, r5
 8001d76:	f7fe fd19 	bl	80007ac <__aeabi_ddiv>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7fe fdfb 	bl	800097c <__aeabi_d2f>
 8001d86:	ee07 0a90 	vmov	s15, r0
		LeftW.CurrentSpeed = fabsf((1000
 8001d8a:	eeb0 7ae7 	vabs.f32	s14, s15
				/ (LeftWtime_ms_wheel  - LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1])) / 360 * 60;
 8001d8e:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8001f84 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 8001d92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d96:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8001f88 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8001d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
		LeftW.CurrentSpeed = fabsf((1000
 8001d9e:	4b76      	ldr	r3, [pc, #472]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001da0:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0

		RightW.CurrentSpeed = fabsf((1000
				* (RightWangle - RightW.angle[MAX_ANGLE_WHEEL_ARRAY - 1]))
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f7fe fb7f 	bl	80004a8 <__aeabi_f2d>
 8001daa:	4b74      	ldr	r3, [pc, #464]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001dac:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	@ 0x1a0
 8001db0:	f7fe fa1a 	bl	80001e8 <__aeabi_dsub>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	4b6f      	ldr	r3, [pc, #444]	@ (8001f80 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001dc2:	f7fe fbc9 	bl	8000558 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4614      	mov	r4, r2
 8001dcc:	461d      	mov	r5, r3
				/ (RightWtime_ms_wheel - RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1]))/ 360 * 60;
 8001dce:	4b6b      	ldr	r3, [pc, #428]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001dd0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fb43 	bl	8000464 <__aeabi_ui2d>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4620      	mov	r0, r4
 8001de4:	4629      	mov	r1, r5
 8001de6:	f7fe fce1 	bl	80007ac <__aeabi_ddiv>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	f7fe fdc3 	bl	800097c <__aeabi_d2f>
 8001df6:	ee07 0a90 	vmov	s15, r0
		RightW.CurrentSpeed = fabsf((1000
 8001dfa:	eeb0 7ae7 	vabs.f32	s14, s15
				/ (RightWtime_ms_wheel - RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY - 1]))/ 360 * 60;
 8001dfe:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8001f84 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 8001e02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e06:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8001f88 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8001e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
		RightW.CurrentSpeed = fabsf((1000
 8001e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001e10:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0

		// сдвигаем в массиве все в сторону 0, в последнюю ячейку запишим новые данные
		for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8001e14:	2301      	movs	r3, #1
 8001e16:	77fb      	strb	r3, [r7, #31]
 8001e18:	e080      	b.n	8001f1c <HAL_TIM_PeriodElapsedCallback+0x25c>
		  LeftW.angle[i - 1] = LeftW.angle[i];
 8001e1a:	7ffb      	ldrb	r3, [r7, #31]
 8001e1c:	7ffa      	ldrb	r2, [r7, #31]
 8001e1e:	1e51      	subs	r1, r2, #1
 8001e20:	4a55      	ldr	r2, [pc, #340]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e22:	3321      	adds	r3, #33	@ 0x21
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	4852      	ldr	r0, [pc, #328]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e2e:	3121      	adds	r1, #33	@ 0x21
 8001e30:	00c9      	lsls	r1, r1, #3
 8001e32:	4401      	add	r1, r0
 8001e34:	e9c1 2300 	strd	r2, r3, [r1]
		  LeftW.time_ms_wheel[i - 1] = LeftW.time_ms_wheel[i];
 8001e38:	7ffa      	ldrb	r2, [r7, #31]
 8001e3a:	7ffb      	ldrb	r3, [r7, #31]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	494e      	ldr	r1, [pc, #312]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e40:	322e      	adds	r2, #46	@ 0x2e
 8001e42:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001e46:	494c      	ldr	r1, [pc, #304]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e48:	332e      	adds	r3, #46	@ 0x2e
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  LeftW.speed[i - 1] = LeftW.speed[i];
 8001e4e:	7ffa      	ldrb	r2, [r7, #31]
 8001e50:	7ffb      	ldrb	r3, [r7, #31]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	4948      	ldr	r1, [pc, #288]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e56:	326a      	adds	r2, #106	@ 0x6a
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	440a      	add	r2, r1
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	4946      	ldr	r1, [pc, #280]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e60:	336a      	adds	r3, #106	@ 0x6a
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	601a      	str	r2, [r3, #0]
 		  LeftW.PWM[i - 1] = LeftW.PWM[i];
 8001e68:	7ffa      	ldrb	r2, [r7, #31]
 8001e6a:	7ffb      	ldrb	r3, [r7, #31]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	4942      	ldr	r1, [pc, #264]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e70:	329a      	adds	r2, #154	@ 0x9a
 8001e72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001e76:	4940      	ldr	r1, [pc, #256]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e78:	339a      	adds	r3, #154	@ 0x9a
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  LeftW.sumI[i - 1] = LeftW.sumI[i];
 8001e7e:	7ffa      	ldrb	r2, [r7, #31]
 8001e80:	7ffb      	ldrb	r3, [r7, #31]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	493c      	ldr	r1, [pc, #240]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e86:	327e      	adds	r2, #126	@ 0x7e
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	440a      	add	r2, r1
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	493a      	ldr	r1, [pc, #232]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e90:	337e      	adds	r3, #126	@ 0x7e
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	601a      	str	r2, [r3, #0]

		  RightW.angle[i - 1] = RightW.angle[i];
 8001e98:	7ffb      	ldrb	r3, [r7, #31]
 8001e9a:	7ffa      	ldrb	r2, [r7, #31]
 8001e9c:	1e51      	subs	r1, r2, #1
 8001e9e:	4a37      	ldr	r2, [pc, #220]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001ea0:	3321      	adds	r3, #33	@ 0x21
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eaa:	4834      	ldr	r0, [pc, #208]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001eac:	3121      	adds	r1, #33	@ 0x21
 8001eae:	00c9      	lsls	r1, r1, #3
 8001eb0:	4401      	add	r1, r0
 8001eb2:	e9c1 2300 	strd	r2, r3, [r1]
		  RightW.time_ms_wheel[i - 1] = RightW.time_ms_wheel[i];
 8001eb6:	7ffa      	ldrb	r2, [r7, #31]
 8001eb8:	7ffb      	ldrb	r3, [r7, #31]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	492f      	ldr	r1, [pc, #188]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001ebe:	322e      	adds	r2, #46	@ 0x2e
 8001ec0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ec4:	492d      	ldr	r1, [pc, #180]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001ec6:	332e      	adds	r3, #46	@ 0x2e
 8001ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  RightW.speed[i - 1] = RightW.speed[i];
 8001ecc:	7ffa      	ldrb	r2, [r7, #31]
 8001ece:	7ffb      	ldrb	r3, [r7, #31]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	492a      	ldr	r1, [pc, #168]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001ed4:	326a      	adds	r2, #106	@ 0x6a
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	440a      	add	r2, r1
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	4927      	ldr	r1, [pc, #156]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001ede:	336a      	adds	r3, #106	@ 0x6a
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	601a      	str	r2, [r3, #0]
		  RightW.PWM[i - 1] = RightW.PWM[i];
 8001ee6:	7ffa      	ldrb	r2, [r7, #31]
 8001ee8:	7ffb      	ldrb	r3, [r7, #31]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	4923      	ldr	r1, [pc, #140]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001eee:	329a      	adds	r2, #154	@ 0x9a
 8001ef0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ef4:	4921      	ldr	r1, [pc, #132]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001ef6:	339a      	adds	r3, #154	@ 0x9a
 8001ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  RightW.sumI[i - 1] = RightW.sumI[i];
 8001efc:	7ffa      	ldrb	r2, [r7, #31]
 8001efe:	7ffb      	ldrb	r3, [r7, #31]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	491e      	ldr	r1, [pc, #120]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001f04:	327e      	adds	r2, #126	@ 0x7e
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	440a      	add	r2, r1
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	491b      	ldr	r1, [pc, #108]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001f0e:	337e      	adds	r3, #126	@ 0x7e
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 1; i < MAX_ANGLE_WHEEL_ARRAY; i++) {
 8001f16:	7ffb      	ldrb	r3, [r7, #31]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	77fb      	strb	r3, [r7, #31]
 8001f1c:	7ffb      	ldrb	r3, [r7, #31]
 8001f1e:	2b13      	cmp	r3, #19
 8001f20:	f67f af7b 	bls.w	8001e1a <HAL_TIM_PeriodElapsedCallback+0x15a>
		};


		LeftW.speed[MAX_ANGLE_WHEEL_ARRAY - 1] = LeftW.CurrentSpeed;
 8001f24:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001f2a:	4a13      	ldr	r2, [pc, #76]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f2c:	f8c2 31f4 	str.w	r3, [r2, #500]	@ 0x1f4
		LeftW.sumI[MAX_ANGLE_WHEEL_ARRAY  - 1] = LeftW.CurrentSpeed - LeftW.Target_speed;
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f32:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 8001f36:	4b10      	ldr	r3, [pc, #64]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f38:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8001f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f40:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f42:	edc3 7a91 	vstr	s15, [r3, #580]	@ 0x244

		RightW.speed[MAX_ANGLE_WHEEL_ARRAY - 1] = RightW.CurrentSpeed;
 8001f46:	4b0d      	ldr	r3, [pc, #52]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001f48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001f4e:	f8c2 31f4 	str.w	r3, [r2, #500]	@ 0x1f4
		RightW.sumI[MAX_ANGLE_WHEEL_ARRAY  - 1] = RightW.CurrentSpeed - RightW.Target_speed;
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001f54:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 8001f58:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001f5a:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8001f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f62:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001f64:	edc3 7a91 	vstr	s15, [r3, #580]	@ 0x244


	} // end of TIM2
  /* USER CODE END Callback 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f70:	40014800 	.word	0x40014800
 8001f74:	40020800 	.word	0x40020800
 8001f78:	200002c8 	.word	0x200002c8
 8001f7c:	200005b0 	.word	0x200005b0
 8001f80:	408f4000 	.word	0x408f4000
 8001f84:	43b40000 	.word	0x43b40000
 8001f88:	42700000 	.word	0x42700000

08001f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <Error_Handler+0x8>

08001f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b12      	ldr	r3, [pc, #72]	@ (8001fec <HAL_MspInit+0x54>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	4a11      	ldr	r2, [pc, #68]	@ (8001fec <HAL_MspInit+0x54>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fae:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <HAL_MspInit+0x54>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <HAL_MspInit+0x54>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fec <HAL_MspInit+0x54>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fca:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <HAL_MspInit+0x54>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	210f      	movs	r1, #15
 8001fda:	f06f 0001 	mvn.w	r0, #1
 8001fde:	f000 fe19 	bl	8002c14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800

08001ff0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	@ 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a2e      	ldr	r2, [pc, #184]	@ (80020c8 <HAL_ADC_MspInit+0xd8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d156      	bne.n	80020c0 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b2d      	ldr	r3, [pc, #180]	@ (80020cc <HAL_ADC_MspInit+0xdc>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	4a2c      	ldr	r2, [pc, #176]	@ (80020cc <HAL_ADC_MspInit+0xdc>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002020:	6453      	str	r3, [r2, #68]	@ 0x44
 8002022:	4b2a      	ldr	r3, [pc, #168]	@ (80020cc <HAL_ADC_MspInit+0xdc>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b26      	ldr	r3, [pc, #152]	@ (80020cc <HAL_ADC_MspInit+0xdc>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a25      	ldr	r2, [pc, #148]	@ (80020cc <HAL_ADC_MspInit+0xdc>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b23      	ldr	r3, [pc, #140]	@ (80020cc <HAL_ADC_MspInit+0xdc>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800204a:	2303      	movs	r3, #3
 800204c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800204e:	2303      	movs	r3, #3
 8002050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	4619      	mov	r1, r3
 800205c:	481c      	ldr	r0, [pc, #112]	@ (80020d0 <HAL_ADC_MspInit+0xe0>)
 800205e:	f001 f8ed 	bl	800323c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002062:	4b1c      	ldr	r3, [pc, #112]	@ (80020d4 <HAL_ADC_MspInit+0xe4>)
 8002064:	4a1c      	ldr	r2, [pc, #112]	@ (80020d8 <HAL_ADC_MspInit+0xe8>)
 8002066:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002068:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <HAL_ADC_MspInit+0xe4>)
 800206a:	2200      	movs	r2, #0
 800206c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800206e:	4b19      	ldr	r3, [pc, #100]	@ (80020d4 <HAL_ADC_MspInit+0xe4>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002074:	4b17      	ldr	r3, [pc, #92]	@ (80020d4 <HAL_ADC_MspInit+0xe4>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800207a:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <HAL_ADC_MspInit+0xe4>)
 800207c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002080:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002082:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <HAL_ADC_MspInit+0xe4>)
 8002084:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002088:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800208a:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <HAL_ADC_MspInit+0xe4>)
 800208c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002090:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002092:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <HAL_ADC_MspInit+0xe4>)
 8002094:	2200      	movs	r2, #0
 8002096:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002098:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <HAL_ADC_MspInit+0xe4>)
 800209a:	2200      	movs	r2, #0
 800209c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800209e:	4b0d      	ldr	r3, [pc, #52]	@ (80020d4 <HAL_ADC_MspInit+0xe4>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020a4:	480b      	ldr	r0, [pc, #44]	@ (80020d4 <HAL_ADC_MspInit+0xe4>)
 80020a6:	f000 fddf 	bl	8002c68 <HAL_DMA_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80020b0:	f7ff ff6c 	bl	8001f8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a07      	ldr	r2, [pc, #28]	@ (80020d4 <HAL_ADC_MspInit+0xe4>)
 80020b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80020ba:	4a06      	ldr	r2, [pc, #24]	@ (80020d4 <HAL_ADC_MspInit+0xe4>)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020c0:	bf00      	nop
 80020c2:	3728      	adds	r7, #40	@ 0x28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40012000 	.word	0x40012000
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020000 	.word	0x40020000
 80020d4:	200000c4 	.word	0x200000c4
 80020d8:	40026410 	.word	0x40026410

080020dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08c      	sub	sp, #48	@ 0x30
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a3b      	ldr	r2, [pc, #236]	@ (80021e8 <HAL_I2C_MspInit+0x10c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d12d      	bne.n	800215a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	4b3a      	ldr	r3, [pc, #232]	@ (80021ec <HAL_I2C_MspInit+0x110>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	4a39      	ldr	r2, [pc, #228]	@ (80021ec <HAL_I2C_MspInit+0x110>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	6313      	str	r3, [r2, #48]	@ 0x30
 800210e:	4b37      	ldr	r3, [pc, #220]	@ (80021ec <HAL_I2C_MspInit+0x110>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800211a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002120:	2312      	movs	r3, #18
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800212c:	2304      	movs	r3, #4
 800212e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	4619      	mov	r1, r3
 8002136:	482e      	ldr	r0, [pc, #184]	@ (80021f0 <HAL_I2C_MspInit+0x114>)
 8002138:	f001 f880 	bl	800323c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	4b2a      	ldr	r3, [pc, #168]	@ (80021ec <HAL_I2C_MspInit+0x110>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	4a29      	ldr	r2, [pc, #164]	@ (80021ec <HAL_I2C_MspInit+0x110>)
 8002146:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800214a:	6413      	str	r3, [r2, #64]	@ 0x40
 800214c:	4b27      	ldr	r3, [pc, #156]	@ (80021ec <HAL_I2C_MspInit+0x110>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002158:	e041      	b.n	80021de <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a25      	ldr	r2, [pc, #148]	@ (80021f4 <HAL_I2C_MspInit+0x118>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d13c      	bne.n	80021de <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <HAL_I2C_MspInit+0x110>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216c:	4a1f      	ldr	r2, [pc, #124]	@ (80021ec <HAL_I2C_MspInit+0x110>)
 800216e:	f043 0302 	orr.w	r3, r3, #2
 8002172:	6313      	str	r3, [r2, #48]	@ 0x30
 8002174:	4b1d      	ldr	r3, [pc, #116]	@ (80021ec <HAL_I2C_MspInit+0x110>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002180:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002186:	2312      	movs	r3, #18
 8002188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218e:	2303      	movs	r3, #3
 8002190:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002192:	2304      	movs	r3, #4
 8002194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	4814      	ldr	r0, [pc, #80]	@ (80021f0 <HAL_I2C_MspInit+0x114>)
 800219e:	f001 f84d 	bl	800323c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021a2:	2308      	movs	r3, #8
 80021a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a6:	2312      	movs	r3, #18
 80021a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80021b2:	2309      	movs	r3, #9
 80021b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b6:	f107 031c 	add.w	r3, r7, #28
 80021ba:	4619      	mov	r1, r3
 80021bc:	480c      	ldr	r0, [pc, #48]	@ (80021f0 <HAL_I2C_MspInit+0x114>)
 80021be:	f001 f83d 	bl	800323c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <HAL_I2C_MspInit+0x110>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	4a08      	ldr	r2, [pc, #32]	@ (80021ec <HAL_I2C_MspInit+0x110>)
 80021cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d2:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <HAL_I2C_MspInit+0x110>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
}
 80021de:	bf00      	nop
 80021e0:	3730      	adds	r7, #48	@ 0x30
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40005400 	.word	0x40005400
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020400 	.word	0x40020400
 80021f4:	40005800 	.word	0x40005800

080021f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	@ 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a19      	ldr	r2, [pc, #100]	@ (800227c <HAL_SPI_MspInit+0x84>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d12c      	bne.n	8002274 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	4b18      	ldr	r3, [pc, #96]	@ (8002280 <HAL_SPI_MspInit+0x88>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	4a17      	ldr	r2, [pc, #92]	@ (8002280 <HAL_SPI_MspInit+0x88>)
 8002224:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002228:	6413      	str	r3, [r2, #64]	@ 0x40
 800222a:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <HAL_SPI_MspInit+0x88>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <HAL_SPI_MspInit+0x88>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	4a10      	ldr	r2, [pc, #64]	@ (8002280 <HAL_SPI_MspInit+0x88>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6313      	str	r3, [r2, #48]	@ 0x30
 8002246:	4b0e      	ldr	r3, [pc, #56]	@ (8002280 <HAL_SPI_MspInit+0x88>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002252:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002264:	2305      	movs	r3, #5
 8002266:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	4619      	mov	r1, r3
 800226e:	4805      	ldr	r0, [pc, #20]	@ (8002284 <HAL_SPI_MspInit+0x8c>)
 8002270:	f000 ffe4 	bl	800323c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002274:	bf00      	nop
 8002276:	3728      	adds	r7, #40	@ 0x28
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40003800 	.word	0x40003800
 8002280:	40023800 	.word	0x40023800
 8002284:	40020400 	.word	0x40020400

08002288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1c      	ldr	r2, [pc, #112]	@ (8002308 <HAL_TIM_Base_MspInit+0x80>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d116      	bne.n	80022c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <HAL_TIM_Base_MspInit+0x84>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	4a1a      	ldr	r2, [pc, #104]	@ (800230c <HAL_TIM_Base_MspInit+0x84>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022aa:	4b18      	ldr	r3, [pc, #96]	@ (800230c <HAL_TIM_Base_MspInit+0x84>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	210f      	movs	r1, #15
 80022ba:	201a      	movs	r0, #26
 80022bc:	f000 fcaa 	bl	8002c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80022c0:	201a      	movs	r0, #26
 80022c2:	f000 fcc3 	bl	8002c4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022c6:	e01a      	b.n	80022fe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022d0:	d115      	bne.n	80022fe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	4b0d      	ldr	r3, [pc, #52]	@ (800230c <HAL_TIM_Base_MspInit+0x84>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	4a0c      	ldr	r2, [pc, #48]	@ (800230c <HAL_TIM_Base_MspInit+0x84>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e2:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <HAL_TIM_Base_MspInit+0x84>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2105      	movs	r1, #5
 80022f2:	201c      	movs	r0, #28
 80022f4:	f000 fc8e 	bl	8002c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022f8:	201c      	movs	r0, #28
 80022fa:	f000 fca7 	bl	8002c4c <HAL_NVIC_EnableIRQ>
}
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40010000 	.word	0x40010000
 800230c:	40023800 	.word	0x40023800

08002310 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <HAL_TIM_MspPostInit+0x68>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d11e      	bne.n	8002370 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	4b11      	ldr	r3, [pc, #68]	@ (800237c <HAL_TIM_MspPostInit+0x6c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	4a10      	ldr	r2, [pc, #64]	@ (800237c <HAL_TIM_MspPostInit+0x6c>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6313      	str	r3, [r2, #48]	@ 0x30
 8002342:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <HAL_TIM_MspPostInit+0x6c>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800234e:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8002352:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800235c:	2302      	movs	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002360:	2301      	movs	r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	4619      	mov	r1, r3
 800236a:	4805      	ldr	r0, [pc, #20]	@ (8002380 <HAL_TIM_MspPostInit+0x70>)
 800236c:	f000 ff66 	bl	800323c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002370:	bf00      	nop
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40010000 	.word	0x40010000
 800237c:	40023800 	.word	0x40023800
 8002380:	40020000 	.word	0x40020000

08002384 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	@ 0x30
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	4b2e      	ldr	r3, [pc, #184]	@ (8002454 <HAL_InitTick+0xd0>)
 800239a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239c:	4a2d      	ldr	r2, [pc, #180]	@ (8002454 <HAL_InitTick+0xd0>)
 800239e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002454 <HAL_InitTick+0xd0>)
 80023a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023b0:	f107 020c 	add.w	r2, r7, #12
 80023b4:	f107 0310 	add.w	r3, r7, #16
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 fb9a 	bl	8004af4 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80023c0:	f002 fb84 	bl	8004acc <HAL_RCC_GetPCLK2Freq>
 80023c4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c8:	4a23      	ldr	r2, [pc, #140]	@ (8002458 <HAL_InitTick+0xd4>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	0c9b      	lsrs	r3, r3, #18
 80023d0:	3b01      	subs	r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80023d4:	4b21      	ldr	r3, [pc, #132]	@ (800245c <HAL_InitTick+0xd8>)
 80023d6:	4a22      	ldr	r2, [pc, #136]	@ (8002460 <HAL_InitTick+0xdc>)
 80023d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80023da:	4b20      	ldr	r3, [pc, #128]	@ (800245c <HAL_InitTick+0xd8>)
 80023dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023e0:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80023e2:	4a1e      	ldr	r2, [pc, #120]	@ (800245c <HAL_InitTick+0xd8>)
 80023e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e6:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80023e8:	4b1c      	ldr	r3, [pc, #112]	@ (800245c <HAL_InitTick+0xd8>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ee:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <HAL_InitTick+0xd8>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f4:	4b19      	ldr	r3, [pc, #100]	@ (800245c <HAL_InitTick+0xd8>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 80023fa:	4818      	ldr	r0, [pc, #96]	@ (800245c <HAL_InitTick+0xd8>)
 80023fc:	f002 fc35 	bl	8004c6a <HAL_TIM_Base_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002406:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800240a:	2b00      	cmp	r3, #0
 800240c:	d11b      	bne.n	8002446 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 800240e:	4813      	ldr	r0, [pc, #76]	@ (800245c <HAL_InitTick+0xd8>)
 8002410:	f002 fc7a 	bl	8004d08 <HAL_TIM_Base_Start_IT>
 8002414:	4603      	mov	r3, r0
 8002416:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800241a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800241e:	2b00      	cmp	r3, #0
 8002420:	d111      	bne.n	8002446 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002422:	201a      	movs	r0, #26
 8002424:	f000 fc12 	bl	8002c4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b0f      	cmp	r3, #15
 800242c:	d808      	bhi.n	8002440 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 800242e:	2200      	movs	r2, #0
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	201a      	movs	r0, #26
 8002434:	f000 fbee 	bl	8002c14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002438:	4a0a      	ldr	r2, [pc, #40]	@ (8002464 <HAL_InitTick+0xe0>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e002      	b.n	8002446 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002446:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800244a:	4618      	mov	r0, r3
 800244c:	3730      	adds	r7, #48	@ 0x30
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	431bde83 	.word	0x431bde83
 800245c:	200008a8 	.word	0x200008a8
 8002460:	40014800 	.word	0x40014800
 8002464:	20000004 	.word	0x20000004

08002468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <NMI_Handler+0x4>

08002470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002474:	bf00      	nop
 8002476:	e7fd      	b.n	8002474 <HardFault_Handler+0x4>

08002478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <MemManage_Handler+0x4>

08002480 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <BusFault_Handler+0x4>

08002488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <UsageFault_Handler+0x4>

08002490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024a4:	4803      	ldr	r0, [pc, #12]	@ (80024b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80024a6:	f002 fd9b 	bl	8004fe0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80024aa:	4803      	ldr	r0, [pc, #12]	@ (80024b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80024ac:	f002 fd98 	bl	8004fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000224 	.word	0x20000224
 80024b8:	200008a8 	.word	0x200008a8

080024bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024c0:	4802      	ldr	r0, [pc, #8]	@ (80024cc <TIM2_IRQHandler+0x10>)
 80024c2:	f002 fd8d 	bl	8004fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	2000026c 	.word	0x2000026c

080024d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024d4:	4802      	ldr	r0, [pc, #8]	@ (80024e0 <DMA2_Stream0_IRQHandler+0x10>)
 80024d6:	f000 fc75 	bl	8002dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200000c4 	.word	0x200000c4

080024e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <SystemInit+0x20>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ee:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <SystemInit+0x20>)
 80024f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002540 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800250c:	f7ff ffea 	bl	80024e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002510:	480c      	ldr	r0, [pc, #48]	@ (8002544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002512:	490d      	ldr	r1, [pc, #52]	@ (8002548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002514:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002518:	e002      	b.n	8002520 <LoopCopyDataInit>

0800251a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800251a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800251c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251e:	3304      	adds	r3, #4

08002520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002524:	d3f9      	bcc.n	800251a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002526:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002528:	4c0a      	ldr	r4, [pc, #40]	@ (8002554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800252c:	e001      	b.n	8002532 <LoopFillZerobss>

0800252e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002530:	3204      	adds	r2, #4

08002532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002534:	d3fb      	bcc.n	800252e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002536:	f006 f9f5 	bl	8008924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800253a:	f7fe fdd7 	bl	80010ec <main>
  bx  lr    
 800253e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002540:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002548:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800254c:	08008b54 	.word	0x08008b54
  ldr r2, =_sbss
 8002550:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002554:	2000541c 	.word	0x2000541c

08002558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002558:	e7fe      	b.n	8002558 <ADC_IRQHandler>
	...

0800255c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002560:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <HAL_Init+0x40>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0d      	ldr	r2, [pc, #52]	@ (800259c <HAL_Init+0x40>)
 8002566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800256a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_Init+0x40>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <HAL_Init+0x40>)
 8002572:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002576:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <HAL_Init+0x40>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a07      	ldr	r2, [pc, #28]	@ (800259c <HAL_Init+0x40>)
 800257e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002584:	2003      	movs	r0, #3
 8002586:	f000 fb3a 	bl	8002bfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800258a:	200f      	movs	r0, #15
 800258c:	f7ff fefa 	bl	8002384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002590:	f7ff fd02 	bl	8001f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023c00 	.word	0x40023c00

080025a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a4:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_IncTick+0x20>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_IncTick+0x24>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	4a04      	ldr	r2, [pc, #16]	@ (80025c4 <HAL_IncTick+0x24>)
 80025b2:	6013      	str	r3, [r2, #0]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000008 	.word	0x20000008
 80025c4:	200008f0 	.word	0x200008f0

080025c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return uwTick;
 80025cc:	4b03      	ldr	r3, [pc, #12]	@ (80025dc <HAL_GetTick+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	200008f0 	.word	0x200008f0

080025e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e033      	b.n	800265e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff fcf6 	bl	8001ff0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	d118      	bne.n	8002650 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002626:	f023 0302 	bic.w	r3, r3, #2
 800262a:	f043 0202 	orr.w	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f93a 	bl	80028ac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	f023 0303 	bic.w	r3, r3, #3
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	641a      	str	r2, [r3, #64]	@ 0x40
 800264e:	e001      	b.n	8002654 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x1c>
 8002680:	2302      	movs	r3, #2
 8002682:	e105      	b.n	8002890 <HAL_ADC_ConfigChannel+0x228>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b09      	cmp	r3, #9
 8002692:	d925      	bls.n	80026e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68d9      	ldr	r1, [r3, #12]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	3b1e      	subs	r3, #30
 80026aa:	2207      	movs	r2, #7
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43da      	mvns	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	400a      	ands	r2, r1
 80026b8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68d9      	ldr	r1, [r3, #12]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	4603      	mov	r3, r0
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4403      	add	r3, r0
 80026d2:	3b1e      	subs	r3, #30
 80026d4:	409a      	lsls	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	e022      	b.n	8002726 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6919      	ldr	r1, [r3, #16]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	2207      	movs	r2, #7
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	400a      	ands	r2, r1
 8002702:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6919      	ldr	r1, [r3, #16]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	4618      	mov	r0, r3
 8002716:	4603      	mov	r3, r0
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4403      	add	r3, r0
 800271c:	409a      	lsls	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b06      	cmp	r3, #6
 800272c:	d824      	bhi.n	8002778 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	3b05      	subs	r3, #5
 8002740:	221f      	movs	r2, #31
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	400a      	ands	r2, r1
 800274e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	3b05      	subs	r3, #5
 800276a:	fa00 f203 	lsl.w	r2, r0, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	635a      	str	r2, [r3, #52]	@ 0x34
 8002776:	e04c      	b.n	8002812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b0c      	cmp	r3, #12
 800277e:	d824      	bhi.n	80027ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b23      	subs	r3, #35	@ 0x23
 8002792:	221f      	movs	r2, #31
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43da      	mvns	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	400a      	ands	r2, r1
 80027a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	4618      	mov	r0, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	3b23      	subs	r3, #35	@ 0x23
 80027bc:	fa00 f203 	lsl.w	r2, r0, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80027c8:	e023      	b.n	8002812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	3b41      	subs	r3, #65	@ 0x41
 80027dc:	221f      	movs	r2, #31
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	400a      	ands	r2, r1
 80027ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4618      	mov	r0, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	3b41      	subs	r3, #65	@ 0x41
 8002806:	fa00 f203 	lsl.w	r2, r0, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002812:	4b22      	ldr	r3, [pc, #136]	@ (800289c <HAL_ADC_ConfigChannel+0x234>)
 8002814:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a21      	ldr	r2, [pc, #132]	@ (80028a0 <HAL_ADC_ConfigChannel+0x238>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d109      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1cc>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b12      	cmp	r3, #18
 8002826:	d105      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a19      	ldr	r2, [pc, #100]	@ (80028a0 <HAL_ADC_ConfigChannel+0x238>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d123      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x21e>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b10      	cmp	r3, #16
 8002844:	d003      	beq.n	800284e <HAL_ADC_ConfigChannel+0x1e6>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b11      	cmp	r3, #17
 800284c:	d11b      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b10      	cmp	r3, #16
 8002860:	d111      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <HAL_ADC_ConfigChannel+0x23c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a10      	ldr	r2, [pc, #64]	@ (80028a8 <HAL_ADC_ConfigChannel+0x240>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	0c9a      	lsrs	r2, r3, #18
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002878:	e002      	b.n	8002880 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3b01      	subs	r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f9      	bne.n	800287a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	40012300 	.word	0x40012300
 80028a0:	40012000 	.word	0x40012000
 80028a4:	20000000 	.word	0x20000000
 80028a8:	431bde83 	.word	0x431bde83

080028ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028b4:	4b79      	ldr	r3, [pc, #484]	@ (8002a9c <ADC_Init+0x1f0>)
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	021a      	lsls	r2, r3, #8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002904:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6899      	ldr	r1, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293e:	4a58      	ldr	r2, [pc, #352]	@ (8002aa0 <ADC_Init+0x1f4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d022      	beq.n	800298a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002952:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6899      	ldr	r1, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002974:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6899      	ldr	r1, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	e00f      	b.n	80029aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002998:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0202 	bic.w	r2, r2, #2
 80029b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6899      	ldr	r1, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7e1b      	ldrb	r3, [r3, #24]
 80029c4:	005a      	lsls	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01b      	beq.n	8002a10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029e6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a02:	3b01      	subs	r3, #1
 8002a04:	035a      	lsls	r2, r3, #13
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	e007      	b.n	8002a20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a1e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	051a      	lsls	r2, r3, #20
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6899      	ldr	r1, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a62:	025a      	lsls	r2, r3, #9
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6899      	ldr	r1, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	029a      	lsls	r2, r3, #10
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	609a      	str	r2, [r3, #8]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	40012300 	.word	0x40012300
 8002aa0:	0f000001 	.word	0x0f000001

08002aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad6:	4a04      	ldr	r2, [pc, #16]	@ (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	60d3      	str	r3, [r2, #12]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af0:	4b04      	ldr	r3, [pc, #16]	@ (8002b04 <__NVIC_GetPriorityGrouping+0x18>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	f003 0307 	and.w	r3, r3, #7
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	db0b      	blt.n	8002b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	f003 021f 	and.w	r2, r3, #31
 8002b20:	4907      	ldr	r1, [pc, #28]	@ (8002b40 <__NVIC_EnableIRQ+0x38>)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	2001      	movs	r0, #1
 8002b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000e100 	.word	0xe000e100

08002b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	db0a      	blt.n	8002b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	490c      	ldr	r1, [pc, #48]	@ (8002b90 <__NVIC_SetPriority+0x4c>)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	0112      	lsls	r2, r2, #4
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	440b      	add	r3, r1
 8002b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b6c:	e00a      	b.n	8002b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4908      	ldr	r1, [pc, #32]	@ (8002b94 <__NVIC_SetPriority+0x50>)
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	3b04      	subs	r3, #4
 8002b7c:	0112      	lsls	r2, r2, #4
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	440b      	add	r3, r1
 8002b82:	761a      	strb	r2, [r3, #24]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000e100 	.word	0xe000e100
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	@ 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f1c3 0307 	rsb	r3, r3, #7
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	bf28      	it	cs
 8002bb6:	2304      	movcs	r3, #4
 8002bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d902      	bls.n	8002bc8 <NVIC_EncodePriority+0x30>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3b03      	subs	r3, #3
 8002bc6:	e000      	b.n	8002bca <NVIC_EncodePriority+0x32>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	401a      	ands	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be0:	f04f 31ff 	mov.w	r1, #4294967295
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	43d9      	mvns	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	4313      	orrs	r3, r2
         );
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3724      	adds	r7, #36	@ 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ff4c 	bl	8002aa4 <__NVIC_SetPriorityGrouping>
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c26:	f7ff ff61 	bl	8002aec <__NVIC_GetPriorityGrouping>
 8002c2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	6978      	ldr	r0, [r7, #20]
 8002c32:	f7ff ffb1 	bl	8002b98 <NVIC_EncodePriority>
 8002c36:	4602      	mov	r2, r0
 8002c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ff80 	bl	8002b44 <__NVIC_SetPriority>
}
 8002c44:	bf00      	nop
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff54 	bl	8002b08 <__NVIC_EnableIRQ>
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff fca8 	bl	80025c8 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e099      	b.n	8002db8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca4:	e00f      	b.n	8002cc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ca6:	f7ff fc8f 	bl	80025c8 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	d908      	bls.n	8002cc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e078      	b.n	8002db8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e8      	bne.n	8002ca6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4b38      	ldr	r3, [pc, #224]	@ (8002dc0 <HAL_DMA_Init+0x158>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d107      	bne.n	8002d30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f023 0307 	bic.w	r3, r3, #7
 8002d46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d117      	bne.n	8002d8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00e      	beq.n	8002d8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f9e9 	bl	8003144 <DMA_CheckFifoParam>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2240      	movs	r2, #64	@ 0x40
 8002d7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d86:	2301      	movs	r3, #1
 8002d88:	e016      	b.n	8002db8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f9a0 	bl	80030d8 <DMA_CalcBaseAndBitshift>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da0:	223f      	movs	r2, #63	@ 0x3f
 8002da2:	409a      	lsls	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	f010803f 	.word	0xf010803f

08002dc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dd0:	4b8e      	ldr	r3, [pc, #568]	@ (800300c <HAL_DMA_IRQHandler+0x248>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a8e      	ldr	r2, [pc, #568]	@ (8003010 <HAL_DMA_IRQHandler+0x24c>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	0a9b      	lsrs	r3, r3, #10
 8002ddc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dee:	2208      	movs	r2, #8
 8002df0:	409a      	lsls	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01a      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d013      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0204 	bic.w	r2, r2, #4
 8002e16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e28:	f043 0201 	orr.w	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e34:	2201      	movs	r2, #1
 8002e36:	409a      	lsls	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d012      	beq.n	8002e66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e52:	2201      	movs	r2, #1
 8002e54:	409a      	lsls	r2, r3
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5e:	f043 0202 	orr.w	r2, r3, #2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d012      	beq.n	8002e9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00b      	beq.n	8002e9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e88:	2204      	movs	r2, #4
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e94:	f043 0204 	orr.w	r2, r3, #4
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d043      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d03c      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ebe:	2210      	movs	r2, #16
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d018      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d108      	bne.n	8002ef4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d024      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	4798      	blx	r3
 8002ef2:	e01f      	b.n	8002f34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01b      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4798      	blx	r3
 8002f04:	e016      	b.n	8002f34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d107      	bne.n	8002f24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0208 	bic.w	r2, r2, #8
 8002f22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f38:	2220      	movs	r2, #32
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 808f 	beq.w	8003064 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8087 	beq.w	8003064 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b05      	cmp	r3, #5
 8002f6c:	d136      	bne.n	8002fdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0216 	bic.w	r2, r2, #22
 8002f7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d103      	bne.n	8002f9e <HAL_DMA_IRQHandler+0x1da>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0208 	bic.w	r2, r2, #8
 8002fac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb2:	223f      	movs	r2, #63	@ 0x3f
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d07e      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
        }
        return;
 8002fda:	e079      	b.n	80030d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01d      	beq.n	8003026 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10d      	bne.n	8003014 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d031      	beq.n	8003064 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
 8003008:	e02c      	b.n	8003064 <HAL_DMA_IRQHandler+0x2a0>
 800300a:	bf00      	nop
 800300c:	20000000 	.word	0x20000000
 8003010:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d023      	beq.n	8003064 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
 8003024:	e01e      	b.n	8003064 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10f      	bne.n	8003054 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0210 	bic.w	r2, r2, #16
 8003042:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d032      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d022      	beq.n	80030be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2205      	movs	r2, #5
 800307c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	3301      	adds	r3, #1
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	429a      	cmp	r2, r3
 800309a:	d307      	bcc.n	80030ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f2      	bne.n	8003090 <HAL_DMA_IRQHandler+0x2cc>
 80030aa:	e000      	b.n	80030ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	4798      	blx	r3
 80030ce:	e000      	b.n	80030d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030d0:	bf00      	nop
    }
  }
}
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	3b10      	subs	r3, #16
 80030e8:	4a14      	ldr	r2, [pc, #80]	@ (800313c <DMA_CalcBaseAndBitshift+0x64>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030f2:	4a13      	ldr	r2, [pc, #76]	@ (8003140 <DMA_CalcBaseAndBitshift+0x68>)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d909      	bls.n	800311a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800310e:	f023 0303 	bic.w	r3, r3, #3
 8003112:	1d1a      	adds	r2, r3, #4
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	659a      	str	r2, [r3, #88]	@ 0x58
 8003118:	e007      	b.n	800312a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003122:	f023 0303 	bic.w	r3, r3, #3
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	aaaaaaab 	.word	0xaaaaaaab
 8003140:	08008b3c 	.word	0x08008b3c

08003144 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d11f      	bne.n	800319e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d856      	bhi.n	8003212 <DMA_CheckFifoParam+0xce>
 8003164:	a201      	add	r2, pc, #4	@ (adr r2, 800316c <DMA_CheckFifoParam+0x28>)
 8003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316a:	bf00      	nop
 800316c:	0800317d 	.word	0x0800317d
 8003170:	0800318f 	.word	0x0800318f
 8003174:	0800317d 	.word	0x0800317d
 8003178:	08003213 	.word	0x08003213
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d046      	beq.n	8003216 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318c:	e043      	b.n	8003216 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003192:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003196:	d140      	bne.n	800321a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800319c:	e03d      	b.n	800321a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a6:	d121      	bne.n	80031ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d837      	bhi.n	800321e <DMA_CheckFifoParam+0xda>
 80031ae:	a201      	add	r2, pc, #4	@ (adr r2, 80031b4 <DMA_CheckFifoParam+0x70>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031cb 	.word	0x080031cb
 80031bc:	080031c5 	.word	0x080031c5
 80031c0:	080031dd 	.word	0x080031dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e030      	b.n	800322c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d025      	beq.n	8003222 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031da:	e022      	b.n	8003222 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031e4:	d11f      	bne.n	8003226 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031ea:	e01c      	b.n	8003226 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d903      	bls.n	80031fa <DMA_CheckFifoParam+0xb6>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d003      	beq.n	8003200 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031f8:	e018      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
      break;
 80031fe:	e015      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00e      	beq.n	800322a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      break;
 8003210:	e00b      	b.n	800322a <DMA_CheckFifoParam+0xe6>
      break;
 8003212:	bf00      	nop
 8003214:	e00a      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 8003216:	bf00      	nop
 8003218:	e008      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 800321a:	bf00      	nop
 800321c:	e006      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 800321e:	bf00      	nop
 8003220:	e004      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;   
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 800322a:	bf00      	nop
    }
  } 
  
  return status; 
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop

0800323c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800323c:	b480      	push	{r7}
 800323e:	b089      	sub	sp, #36	@ 0x24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e159      	b.n	800350c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003258:	2201      	movs	r2, #1
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4013      	ands	r3, r2
 800326a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	429a      	cmp	r2, r3
 8003272:	f040 8148 	bne.w	8003506 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d005      	beq.n	800328e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328a:	2b02      	cmp	r3, #2
 800328c:	d130      	bne.n	80032f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	2203      	movs	r2, #3
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c4:	2201      	movs	r2, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 0201 	and.w	r2, r3, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d017      	beq.n	800332c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d123      	bne.n	8003380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	08da      	lsrs	r2, r3, #3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3208      	adds	r2, #8
 8003340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	220f      	movs	r2, #15
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	08da      	lsrs	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3208      	adds	r2, #8
 800337a:	69b9      	ldr	r1, [r7, #24]
 800337c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	2203      	movs	r2, #3
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0203 	and.w	r2, r3, #3
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80a2 	beq.w	8003506 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	4b57      	ldr	r3, [pc, #348]	@ (8003524 <HAL_GPIO_Init+0x2e8>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ca:	4a56      	ldr	r2, [pc, #344]	@ (8003524 <HAL_GPIO_Init+0x2e8>)
 80033cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80033d2:	4b54      	ldr	r3, [pc, #336]	@ (8003524 <HAL_GPIO_Init+0x2e8>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033de:	4a52      	ldr	r2, [pc, #328]	@ (8003528 <HAL_GPIO_Init+0x2ec>)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	089b      	lsrs	r3, r3, #2
 80033e4:	3302      	adds	r3, #2
 80033e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	220f      	movs	r2, #15
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a49      	ldr	r2, [pc, #292]	@ (800352c <HAL_GPIO_Init+0x2f0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d019      	beq.n	800343e <HAL_GPIO_Init+0x202>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a48      	ldr	r2, [pc, #288]	@ (8003530 <HAL_GPIO_Init+0x2f4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d013      	beq.n	800343a <HAL_GPIO_Init+0x1fe>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a47      	ldr	r2, [pc, #284]	@ (8003534 <HAL_GPIO_Init+0x2f8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00d      	beq.n	8003436 <HAL_GPIO_Init+0x1fa>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a46      	ldr	r2, [pc, #280]	@ (8003538 <HAL_GPIO_Init+0x2fc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d007      	beq.n	8003432 <HAL_GPIO_Init+0x1f6>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a45      	ldr	r2, [pc, #276]	@ (800353c <HAL_GPIO_Init+0x300>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d101      	bne.n	800342e <HAL_GPIO_Init+0x1f2>
 800342a:	2304      	movs	r3, #4
 800342c:	e008      	b.n	8003440 <HAL_GPIO_Init+0x204>
 800342e:	2307      	movs	r3, #7
 8003430:	e006      	b.n	8003440 <HAL_GPIO_Init+0x204>
 8003432:	2303      	movs	r3, #3
 8003434:	e004      	b.n	8003440 <HAL_GPIO_Init+0x204>
 8003436:	2302      	movs	r3, #2
 8003438:	e002      	b.n	8003440 <HAL_GPIO_Init+0x204>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_GPIO_Init+0x204>
 800343e:	2300      	movs	r3, #0
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	f002 0203 	and.w	r2, r2, #3
 8003446:	0092      	lsls	r2, r2, #2
 8003448:	4093      	lsls	r3, r2
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003450:	4935      	ldr	r1, [pc, #212]	@ (8003528 <HAL_GPIO_Init+0x2ec>)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	3302      	adds	r3, #2
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800345e:	4b38      	ldr	r3, [pc, #224]	@ (8003540 <HAL_GPIO_Init+0x304>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003482:	4a2f      	ldr	r2, [pc, #188]	@ (8003540 <HAL_GPIO_Init+0x304>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003488:	4b2d      	ldr	r3, [pc, #180]	@ (8003540 <HAL_GPIO_Init+0x304>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034ac:	4a24      	ldr	r2, [pc, #144]	@ (8003540 <HAL_GPIO_Init+0x304>)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034b2:	4b23      	ldr	r3, [pc, #140]	@ (8003540 <HAL_GPIO_Init+0x304>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4013      	ands	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003540 <HAL_GPIO_Init+0x304>)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034dc:	4b18      	ldr	r3, [pc, #96]	@ (8003540 <HAL_GPIO_Init+0x304>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003500:	4a0f      	ldr	r2, [pc, #60]	@ (8003540 <HAL_GPIO_Init+0x304>)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3301      	adds	r3, #1
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	f67f aea2 	bls.w	8003258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	3724      	adds	r7, #36	@ 0x24
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800
 8003528:	40013800 	.word	0x40013800
 800352c:	40020000 	.word	0x40020000
 8003530:	40020400 	.word	0x40020400
 8003534:	40020800 	.word	0x40020800
 8003538:	40020c00 	.word	0x40020c00
 800353c:	40021000 	.word	0x40021000
 8003540:	40013c00 	.word	0x40013c00

08003544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	807b      	strh	r3, [r7, #2]
 8003550:	4613      	mov	r3, r2
 8003552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003554:	787b      	ldrb	r3, [r7, #1]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800355a:	887a      	ldrh	r2, [r7, #2]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003560:	e003      	b.n	800356a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003562:	887b      	ldrh	r3, [r7, #2]
 8003564:	041a      	lsls	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	619a      	str	r2, [r3, #24]
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003576:	b480      	push	{r7}
 8003578:	b085      	sub	sp, #20
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003588:	887a      	ldrh	r2, [r7, #2]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4013      	ands	r3, r2
 800358e:	041a      	lsls	r2, r3, #16
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	43d9      	mvns	r1, r3
 8003594:	887b      	ldrh	r3, [r7, #2]
 8003596:	400b      	ands	r3, r1
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	619a      	str	r2, [r3, #24]
}
 800359e:	bf00      	nop
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e12b      	b.n	8003816 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fe fd82 	bl	80020dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2224      	movs	r2, #36	@ 0x24
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0201 	bic.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800360e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003610:	f001 fa48 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 8003614:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4a81      	ldr	r2, [pc, #516]	@ (8003820 <HAL_I2C_Init+0x274>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d807      	bhi.n	8003630 <HAL_I2C_Init+0x84>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a80      	ldr	r2, [pc, #512]	@ (8003824 <HAL_I2C_Init+0x278>)
 8003624:	4293      	cmp	r3, r2
 8003626:	bf94      	ite	ls
 8003628:	2301      	movls	r3, #1
 800362a:	2300      	movhi	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	e006      	b.n	800363e <HAL_I2C_Init+0x92>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4a7d      	ldr	r2, [pc, #500]	@ (8003828 <HAL_I2C_Init+0x27c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	bf94      	ite	ls
 8003638:	2301      	movls	r3, #1
 800363a:	2300      	movhi	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0e7      	b.n	8003816 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a78      	ldr	r2, [pc, #480]	@ (800382c <HAL_I2C_Init+0x280>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	0c9b      	lsrs	r3, r3, #18
 8003650:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4a6a      	ldr	r2, [pc, #424]	@ (8003820 <HAL_I2C_Init+0x274>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d802      	bhi.n	8003680 <HAL_I2C_Init+0xd4>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	3301      	adds	r3, #1
 800367e:	e009      	b.n	8003694 <HAL_I2C_Init+0xe8>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	4a69      	ldr	r2, [pc, #420]	@ (8003830 <HAL_I2C_Init+0x284>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	099b      	lsrs	r3, r3, #6
 8003692:	3301      	adds	r3, #1
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	430b      	orrs	r3, r1
 800369a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	495c      	ldr	r1, [pc, #368]	@ (8003820 <HAL_I2C_Init+0x274>)
 80036b0:	428b      	cmp	r3, r1
 80036b2:	d819      	bhi.n	80036e8 <HAL_I2C_Init+0x13c>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	1e59      	subs	r1, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	fbb1 f3f3 	udiv	r3, r1, r3
 80036c2:	1c59      	adds	r1, r3, #1
 80036c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036c8:	400b      	ands	r3, r1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_I2C_Init+0x138>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1e59      	subs	r1, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80036dc:	3301      	adds	r3, #1
 80036de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e2:	e051      	b.n	8003788 <HAL_I2C_Init+0x1dc>
 80036e4:	2304      	movs	r3, #4
 80036e6:	e04f      	b.n	8003788 <HAL_I2C_Init+0x1dc>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d111      	bne.n	8003714 <HAL_I2C_Init+0x168>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1e58      	subs	r0, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	440b      	add	r3, r1
 80036fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003702:	3301      	adds	r3, #1
 8003704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e012      	b.n	800373a <HAL_I2C_Init+0x18e>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1e58      	subs	r0, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	0099      	lsls	r1, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	fbb0 f3f3 	udiv	r3, r0, r3
 800372a:	3301      	adds	r3, #1
 800372c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf0c      	ite	eq
 8003734:	2301      	moveq	r3, #1
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Init+0x196>
 800373e:	2301      	movs	r3, #1
 8003740:	e022      	b.n	8003788 <HAL_I2C_Init+0x1dc>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10e      	bne.n	8003768 <HAL_I2C_Init+0x1bc>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1e58      	subs	r0, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6859      	ldr	r1, [r3, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	440b      	add	r3, r1
 8003758:	fbb0 f3f3 	udiv	r3, r0, r3
 800375c:	3301      	adds	r3, #1
 800375e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003766:	e00f      	b.n	8003788 <HAL_I2C_Init+0x1dc>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1e58      	subs	r0, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	0099      	lsls	r1, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	fbb0 f3f3 	udiv	r3, r0, r3
 800377e:	3301      	adds	r3, #1
 8003780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003784:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	6809      	ldr	r1, [r1, #0]
 800378c:	4313      	orrs	r3, r2
 800378e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69da      	ldr	r2, [r3, #28]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6911      	ldr	r1, [r2, #16]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	68d2      	ldr	r2, [r2, #12]
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	000186a0 	.word	0x000186a0
 8003824:	001e847f 	.word	0x001e847f
 8003828:	003d08ff 	.word	0x003d08ff
 800382c:	431bde83 	.word	0x431bde83
 8003830:	10624dd3 	.word	0x10624dd3

08003834 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08c      	sub	sp, #48	@ 0x30
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	4608      	mov	r0, r1
 800383e:	4611      	mov	r1, r2
 8003840:	461a      	mov	r2, r3
 8003842:	4603      	mov	r3, r0
 8003844:	817b      	strh	r3, [r7, #10]
 8003846:	460b      	mov	r3, r1
 8003848:	813b      	strh	r3, [r7, #8]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800384e:	f7fe febb 	bl	80025c8 <HAL_GetTick>
 8003852:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b20      	cmp	r3, #32
 800385e:	f040 8214 	bne.w	8003c8a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	2319      	movs	r3, #25
 8003868:	2201      	movs	r2, #1
 800386a:	497b      	ldr	r1, [pc, #492]	@ (8003a58 <HAL_I2C_Mem_Read+0x224>)
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fafb 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
 800387a:	e207      	b.n	8003c8c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_I2C_Mem_Read+0x56>
 8003886:	2302      	movs	r3, #2
 8003888:	e200      	b.n	8003c8c <HAL_I2C_Mem_Read+0x458>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b01      	cmp	r3, #1
 800389e:	d007      	beq.n	80038b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2222      	movs	r2, #34	@ 0x22
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2240      	movs	r2, #64	@ 0x40
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80038e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4a5b      	ldr	r2, [pc, #364]	@ (8003a5c <HAL_I2C_Mem_Read+0x228>)
 80038f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038f2:	88f8      	ldrh	r0, [r7, #6]
 80038f4:	893a      	ldrh	r2, [r7, #8]
 80038f6:	8979      	ldrh	r1, [r7, #10]
 80038f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	4603      	mov	r3, r0
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f9c8 	bl	8003c98 <I2C_RequestMemoryRead>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e1bc      	b.n	8003c8c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003916:	2b00      	cmp	r3, #0
 8003918:	d113      	bne.n	8003942 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391a:	2300      	movs	r3, #0
 800391c:	623b      	str	r3, [r7, #32]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	623b      	str	r3, [r7, #32]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	623b      	str	r3, [r7, #32]
 800392e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	e190      	b.n	8003c64 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003946:	2b01      	cmp	r3, #1
 8003948:	d11b      	bne.n	8003982 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003958:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	61fb      	str	r3, [r7, #28]
 800396e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e170      	b.n	8003c64 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003986:	2b02      	cmp	r3, #2
 8003988:	d11b      	bne.n	80039c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003998:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039aa:	2300      	movs	r3, #0
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	e150      	b.n	8003c64 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039d8:	e144      	b.n	8003c64 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039de:	2b03      	cmp	r3, #3
 80039e0:	f200 80f1 	bhi.w	8003bc6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d123      	bne.n	8003a34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fb9b 	bl	800412c <I2C_WaitOnRXNEFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e145      	b.n	8003c8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a32:	e117      	b.n	8003c64 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d14e      	bne.n	8003ada <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a42:	2200      	movs	r2, #0
 8003a44:	4906      	ldr	r1, [pc, #24]	@ (8003a60 <HAL_I2C_Mem_Read+0x22c>)
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fa0e 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e11a      	b.n	8003c8c <HAL_I2C_Mem_Read+0x458>
 8003a56:	bf00      	nop
 8003a58:	00100002 	.word	0x00100002
 8003a5c:	ffff0000 	.word	0xffff0000
 8003a60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ad8:	e0c4      	b.n	8003c64 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	496c      	ldr	r1, [pc, #432]	@ (8003c94 <HAL_I2C_Mem_Read+0x460>)
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f9bf 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0cb      	b.n	8003c8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	4955      	ldr	r1, [pc, #340]	@ (8003c94 <HAL_I2C_Mem_Read+0x460>)
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f991 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e09d      	b.n	8003c8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bc4:	e04e      	b.n	8003c64 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 faae 	bl	800412c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e058      	b.n	8003c8c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d124      	bne.n	8003c64 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d107      	bne.n	8003c32 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c30:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f47f aeb6 	bne.w	80039da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e000      	b.n	8003c8c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003c8a:	2302      	movs	r3, #2
  }
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3728      	adds	r7, #40	@ 0x28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	00010004 	.word	0x00010004

08003c98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	817b      	strh	r3, [r7, #10]
 8003caa:	460b      	mov	r3, r1
 8003cac:	813b      	strh	r3, [r7, #8]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cc0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f8c2 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00d      	beq.n	8003d06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf8:	d103      	bne.n	8003d02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e0aa      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d06:	897b      	ldrh	r3, [r7, #10]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	6a3a      	ldr	r2, [r7, #32]
 8003d1a:	4952      	ldr	r1, [pc, #328]	@ (8003e64 <I2C_RequestMemoryRead+0x1cc>)
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 f91d 	bl	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e097      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d44:	6a39      	ldr	r1, [r7, #32]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f9a8 	bl	800409c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d107      	bne.n	8003d6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e076      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d105      	bne.n	8003d80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d74:	893b      	ldrh	r3, [r7, #8]
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	611a      	str	r2, [r3, #16]
 8003d7e:	e021      	b.n	8003dc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d80:	893b      	ldrh	r3, [r7, #8]
 8003d82:	0a1b      	lsrs	r3, r3, #8
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d90:	6a39      	ldr	r1, [r7, #32]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f982 	bl	800409c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00d      	beq.n	8003dba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d107      	bne.n	8003db6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e050      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dba:	893b      	ldrh	r3, [r7, #8]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc6:	6a39      	ldr	r1, [r7, #32]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f967 	bl	800409c <I2C_WaitOnTXEFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00d      	beq.n	8003df0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d107      	bne.n	8003dec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e035      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dfe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f82b 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00d      	beq.n	8003e34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e26:	d103      	bne.n	8003e30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e013      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e34:	897b      	ldrh	r3, [r7, #10]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	6a3a      	ldr	r2, [r7, #32]
 8003e48:	4906      	ldr	r1, [pc, #24]	@ (8003e64 <I2C_RequestMemoryRead+0x1cc>)
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f886 	bl	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	00010002 	.word	0x00010002

08003e68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	4613      	mov	r3, r2
 8003e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e78:	e048      	b.n	8003f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e80:	d044      	beq.n	8003f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e82:	f7fe fba1 	bl	80025c8 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d302      	bcc.n	8003e98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d139      	bne.n	8003f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	0c1b      	lsrs	r3, r3, #16
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d10d      	bne.n	8003ebe <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	43da      	mvns	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	4013      	ands	r3, r2
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	461a      	mov	r2, r3
 8003ebc:	e00c      	b.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	43da      	mvns	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d116      	bne.n	8003f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e023      	b.n	8003f54 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	0c1b      	lsrs	r3, r3, #16
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d10d      	bne.n	8003f32 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	43da      	mvns	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4013      	ands	r3, r2
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	e00c      	b.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	43da      	mvns	r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bf0c      	ite	eq
 8003f44:	2301      	moveq	r3, #1
 8003f46:	2300      	movne	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d093      	beq.n	8003e7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f6a:	e071      	b.n	8004050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f7a:	d123      	bne.n	8003fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb0:	f043 0204 	orr.w	r2, r3, #4
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e067      	b.n	8004094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fca:	d041      	beq.n	8004050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fcc:	f7fe fafc 	bl	80025c8 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d302      	bcc.n	8003fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d136      	bne.n	8004050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	0c1b      	lsrs	r3, r3, #16
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d10c      	bne.n	8004006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bf14      	ite	ne
 8003ffe:	2301      	movne	r3, #1
 8004000:	2300      	moveq	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	e00b      	b.n	800401e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	43da      	mvns	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4013      	ands	r3, r2
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d016      	beq.n	8004050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	f043 0220 	orr.w	r2, r3, #32
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e021      	b.n	8004094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	0c1b      	lsrs	r3, r3, #16
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b01      	cmp	r3, #1
 8004058:	d10c      	bne.n	8004074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	43da      	mvns	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4013      	ands	r3, r2
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	bf14      	ite	ne
 800406c:	2301      	movne	r3, #1
 800406e:	2300      	moveq	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	e00b      	b.n	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	43da      	mvns	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4013      	ands	r3, r2
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	bf14      	ite	ne
 8004086:	2301      	movne	r3, #1
 8004088:	2300      	moveq	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	f47f af6d 	bne.w	8003f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040a8:	e034      	b.n	8004114 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f89b 	bl	80041e6 <I2C_IsAcknowledgeFailed>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e034      	b.n	8004124 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d028      	beq.n	8004114 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c2:	f7fe fa81 	bl	80025c8 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d302      	bcc.n	80040d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d11d      	bne.n	8004114 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e2:	2b80      	cmp	r3, #128	@ 0x80
 80040e4:	d016      	beq.n	8004114 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004100:	f043 0220 	orr.w	r2, r3, #32
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e007      	b.n	8004124 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800411e:	2b80      	cmp	r3, #128	@ 0x80
 8004120:	d1c3      	bne.n	80040aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004138:	e049      	b.n	80041ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b10      	cmp	r3, #16
 8004146:	d119      	bne.n	800417c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0210 	mvn.w	r2, #16
 8004150:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e030      	b.n	80041de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417c:	f7fe fa24 	bl	80025c8 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	429a      	cmp	r2, r3
 800418a:	d302      	bcc.n	8004192 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d11d      	bne.n	80041ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419c:	2b40      	cmp	r3, #64	@ 0x40
 800419e:	d016      	beq.n	80041ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	f043 0220 	orr.w	r2, r3, #32
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e007      	b.n	80041de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d8:	2b40      	cmp	r3, #64	@ 0x40
 80041da:	d1ae      	bne.n	800413a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041fc:	d11b      	bne.n	8004236 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004206:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	f043 0204 	orr.w	r2, r3, #4
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e267      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d075      	beq.n	800434e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004262:	4b88      	ldr	r3, [pc, #544]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b04      	cmp	r3, #4
 800426c:	d00c      	beq.n	8004288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800426e:	4b85      	ldr	r3, [pc, #532]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004276:	2b08      	cmp	r3, #8
 8004278:	d112      	bne.n	80042a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427a:	4b82      	ldr	r3, [pc, #520]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004282:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004286:	d10b      	bne.n	80042a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004288:	4b7e      	ldr	r3, [pc, #504]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d05b      	beq.n	800434c <HAL_RCC_OscConfig+0x108>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d157      	bne.n	800434c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e242      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a8:	d106      	bne.n	80042b8 <HAL_RCC_OscConfig+0x74>
 80042aa:	4b76      	ldr	r3, [pc, #472]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a75      	ldr	r2, [pc, #468]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	e01d      	b.n	80042f4 <HAL_RCC_OscConfig+0xb0>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042c0:	d10c      	bne.n	80042dc <HAL_RCC_OscConfig+0x98>
 80042c2:	4b70      	ldr	r3, [pc, #448]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a6f      	ldr	r2, [pc, #444]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a6c      	ldr	r2, [pc, #432]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e00b      	b.n	80042f4 <HAL_RCC_OscConfig+0xb0>
 80042dc:	4b69      	ldr	r3, [pc, #420]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a68      	ldr	r2, [pc, #416]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4b66      	ldr	r3, [pc, #408]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a65      	ldr	r2, [pc, #404]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d013      	beq.n	8004324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fe f964 	bl	80025c8 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004304:	f7fe f960 	bl	80025c8 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	@ 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e207      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004316:	4b5b      	ldr	r3, [pc, #364]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0xc0>
 8004322:	e014      	b.n	800434e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004324:	f7fe f950 	bl	80025c8 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800432c:	f7fe f94c 	bl	80025c8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	@ 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e1f3      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433e:	4b51      	ldr	r3, [pc, #324]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0xe8>
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d063      	beq.n	8004422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800435a:	4b4a      	ldr	r3, [pc, #296]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004366:	4b47      	ldr	r3, [pc, #284]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800436e:	2b08      	cmp	r3, #8
 8004370:	d11c      	bne.n	80043ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004372:	4b44      	ldr	r3, [pc, #272]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d116      	bne.n	80043ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437e:	4b41      	ldr	r3, [pc, #260]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_RCC_OscConfig+0x152>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d001      	beq.n	8004396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e1c7      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004396:	4b3b      	ldr	r3, [pc, #236]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4937      	ldr	r1, [pc, #220]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043aa:	e03a      	b.n	8004422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b4:	4b34      	ldr	r3, [pc, #208]	@ (8004488 <HAL_RCC_OscConfig+0x244>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fe f905 	bl	80025c8 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c2:	f7fe f901 	bl	80025c8 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e1a8      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e0:	4b28      	ldr	r3, [pc, #160]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4925      	ldr	r1, [pc, #148]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]
 80043f4:	e015      	b.n	8004422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f6:	4b24      	ldr	r3, [pc, #144]	@ (8004488 <HAL_RCC_OscConfig+0x244>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fe f8e4 	bl	80025c8 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004404:	f7fe f8e0 	bl	80025c8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e187      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004416:	4b1b      	ldr	r3, [pc, #108]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d036      	beq.n	800449c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d016      	beq.n	8004464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004436:	4b15      	ldr	r3, [pc, #84]	@ (800448c <HAL_RCC_OscConfig+0x248>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443c:	f7fe f8c4 	bl	80025c8 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004444:	f7fe f8c0 	bl	80025c8 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e167      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004456:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x200>
 8004462:	e01b      	b.n	800449c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004464:	4b09      	ldr	r3, [pc, #36]	@ (800448c <HAL_RCC_OscConfig+0x248>)
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800446a:	f7fe f8ad 	bl	80025c8 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004470:	e00e      	b.n	8004490 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004472:	f7fe f8a9 	bl	80025c8 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d907      	bls.n	8004490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e150      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
 8004484:	40023800 	.word	0x40023800
 8004488:	42470000 	.word	0x42470000
 800448c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004490:	4b88      	ldr	r3, [pc, #544]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1ea      	bne.n	8004472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 8097 	beq.w	80045d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044aa:	2300      	movs	r3, #0
 80044ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ae:	4b81      	ldr	r3, [pc, #516]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10f      	bne.n	80044da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	4b7d      	ldr	r3, [pc, #500]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	4a7c      	ldr	r2, [pc, #496]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80044c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ca:	4b7a      	ldr	r3, [pc, #488]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044da:	4b77      	ldr	r3, [pc, #476]	@ (80046b8 <HAL_RCC_OscConfig+0x474>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d118      	bne.n	8004518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044e6:	4b74      	ldr	r3, [pc, #464]	@ (80046b8 <HAL_RCC_OscConfig+0x474>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a73      	ldr	r2, [pc, #460]	@ (80046b8 <HAL_RCC_OscConfig+0x474>)
 80044ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f2:	f7fe f869 	bl	80025c8 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fa:	f7fe f865 	bl	80025c8 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e10c      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	4b6a      	ldr	r3, [pc, #424]	@ (80046b8 <HAL_RCC_OscConfig+0x474>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0f0      	beq.n	80044fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d106      	bne.n	800452e <HAL_RCC_OscConfig+0x2ea>
 8004520:	4b64      	ldr	r3, [pc, #400]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004524:	4a63      	ldr	r2, [pc, #396]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	6713      	str	r3, [r2, #112]	@ 0x70
 800452c:	e01c      	b.n	8004568 <HAL_RCC_OscConfig+0x324>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b05      	cmp	r3, #5
 8004534:	d10c      	bne.n	8004550 <HAL_RCC_OscConfig+0x30c>
 8004536:	4b5f      	ldr	r3, [pc, #380]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453a:	4a5e      	ldr	r2, [pc, #376]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 800453c:	f043 0304 	orr.w	r3, r3, #4
 8004540:	6713      	str	r3, [r2, #112]	@ 0x70
 8004542:	4b5c      	ldr	r3, [pc, #368]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004546:	4a5b      	ldr	r2, [pc, #364]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	6713      	str	r3, [r2, #112]	@ 0x70
 800454e:	e00b      	b.n	8004568 <HAL_RCC_OscConfig+0x324>
 8004550:	4b58      	ldr	r3, [pc, #352]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004554:	4a57      	ldr	r2, [pc, #348]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	6713      	str	r3, [r2, #112]	@ 0x70
 800455c:	4b55      	ldr	r3, [pc, #340]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004560:	4a54      	ldr	r2, [pc, #336]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004562:	f023 0304 	bic.w	r3, r3, #4
 8004566:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d015      	beq.n	800459c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004570:	f7fe f82a 	bl	80025c8 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004576:	e00a      	b.n	800458e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004578:	f7fe f826 	bl	80025c8 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e0cb      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458e:	4b49      	ldr	r3, [pc, #292]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0ee      	beq.n	8004578 <HAL_RCC_OscConfig+0x334>
 800459a:	e014      	b.n	80045c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459c:	f7fe f814 	bl	80025c8 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045a4:	f7fe f810 	bl	80025c8 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e0b5      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ba:	4b3e      	ldr	r3, [pc, #248]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1ee      	bne.n	80045a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d105      	bne.n	80045d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045cc:	4b39      	ldr	r3, [pc, #228]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80045ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d0:	4a38      	ldr	r2, [pc, #224]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80045d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80a1 	beq.w	8004724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045e2:	4b34      	ldr	r3, [pc, #208]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d05c      	beq.n	80046a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d141      	bne.n	800467a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f6:	4b31      	ldr	r3, [pc, #196]	@ (80046bc <HAL_RCC_OscConfig+0x478>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fc:	f7fd ffe4 	bl	80025c8 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004604:	f7fd ffe0 	bl	80025c8 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e087      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004616:	4b27      	ldr	r3, [pc, #156]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69da      	ldr	r2, [r3, #28]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004630:	019b      	lsls	r3, r3, #6
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	3b01      	subs	r3, #1
 800463c:	041b      	lsls	r3, r3, #16
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004644:	061b      	lsls	r3, r3, #24
 8004646:	491b      	ldr	r1, [pc, #108]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004648:	4313      	orrs	r3, r2
 800464a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800464c:	4b1b      	ldr	r3, [pc, #108]	@ (80046bc <HAL_RCC_OscConfig+0x478>)
 800464e:	2201      	movs	r2, #1
 8004650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004652:	f7fd ffb9 	bl	80025c8 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465a:	f7fd ffb5 	bl	80025c8 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e05c      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466c:	4b11      	ldr	r3, [pc, #68]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x416>
 8004678:	e054      	b.n	8004724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467a:	4b10      	ldr	r3, [pc, #64]	@ (80046bc <HAL_RCC_OscConfig+0x478>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004680:	f7fd ffa2 	bl	80025c8 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004688:	f7fd ff9e 	bl	80025c8 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e045      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469a:	4b06      	ldr	r3, [pc, #24]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x444>
 80046a6:	e03d      	b.n	8004724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d107      	bne.n	80046c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e038      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
 80046b4:	40023800 	.word	0x40023800
 80046b8:	40007000 	.word	0x40007000
 80046bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004730 <HAL_RCC_OscConfig+0x4ec>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d028      	beq.n	8004720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d8:	429a      	cmp	r2, r3
 80046da:	d121      	bne.n	8004720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d11a      	bne.n	8004720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d111      	bne.n	8004720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	3b01      	subs	r3, #1
 800470a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d107      	bne.n	8004720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800471c:	429a      	cmp	r2, r3
 800471e:	d001      	beq.n	8004724 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40023800 	.word	0x40023800

08004734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0cc      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004748:	4b68      	ldr	r3, [pc, #416]	@ (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d90c      	bls.n	8004770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004756:	4b65      	ldr	r3, [pc, #404]	@ (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b63      	ldr	r3, [pc, #396]	@ (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0b8      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d020      	beq.n	80047be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004788:	4b59      	ldr	r3, [pc, #356]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	4a58      	ldr	r2, [pc, #352]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a0:	4b53      	ldr	r3, [pc, #332]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	4a52      	ldr	r2, [pc, #328]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ac:	4b50      	ldr	r3, [pc, #320]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	494d      	ldr	r1, [pc, #308]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d044      	beq.n	8004854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d107      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d2:	4b47      	ldr	r3, [pc, #284]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d119      	bne.n	8004812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e07f      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d003      	beq.n	80047f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d107      	bne.n	8004802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f2:	4b3f      	ldr	r3, [pc, #252]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e06f      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004802:	4b3b      	ldr	r3, [pc, #236]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e067      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004812:	4b37      	ldr	r3, [pc, #220]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f023 0203 	bic.w	r2, r3, #3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4934      	ldr	r1, [pc, #208]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	4313      	orrs	r3, r2
 8004822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004824:	f7fd fed0 	bl	80025c8 <HAL_GetTick>
 8004828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482a:	e00a      	b.n	8004842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800482c:	f7fd fecc 	bl	80025c8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e04f      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004842:	4b2b      	ldr	r3, [pc, #172]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 020c 	and.w	r2, r3, #12
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	429a      	cmp	r2, r3
 8004852:	d1eb      	bne.n	800482c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004854:	4b25      	ldr	r3, [pc, #148]	@ (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d20c      	bcs.n	800487c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004862:	4b22      	ldr	r3, [pc, #136]	@ (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b20      	ldr	r3, [pc, #128]	@ (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e032      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004888:	4b19      	ldr	r3, [pc, #100]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4916      	ldr	r1, [pc, #88]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048a6:	4b12      	ldr	r3, [pc, #72]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	490e      	ldr	r1, [pc, #56]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048ba:	f000 f821 	bl	8004900 <HAL_RCC_GetSysClockFreq>
 80048be:	4602      	mov	r2, r0
 80048c0:	4b0b      	ldr	r3, [pc, #44]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	091b      	lsrs	r3, r3, #4
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	490a      	ldr	r1, [pc, #40]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 80048cc:	5ccb      	ldrb	r3, [r1, r3]
 80048ce:	fa22 f303 	lsr.w	r3, r2, r3
 80048d2:	4a09      	ldr	r2, [pc, #36]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048d6:	4b09      	ldr	r3, [pc, #36]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fd fd52 	bl	8002384 <HAL_InitTick>

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40023c00 	.word	0x40023c00
 80048f0:	40023800 	.word	0x40023800
 80048f4:	08008b24 	.word	0x08008b24
 80048f8:	20000000 	.word	0x20000000
 80048fc:	20000004 	.word	0x20000004

08004900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004904:	b090      	sub	sp, #64	@ 0x40
 8004906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	637b      	str	r3, [r7, #52]	@ 0x34
 800490c:	2300      	movs	r3, #0
 800490e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004910:	2300      	movs	r3, #0
 8004912:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004918:	4b59      	ldr	r3, [pc, #356]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 030c 	and.w	r3, r3, #12
 8004920:	2b08      	cmp	r3, #8
 8004922:	d00d      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x40>
 8004924:	2b08      	cmp	r3, #8
 8004926:	f200 80a1 	bhi.w	8004a6c <HAL_RCC_GetSysClockFreq+0x16c>
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_RCC_GetSysClockFreq+0x34>
 800492e:	2b04      	cmp	r3, #4
 8004930:	d003      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0x3a>
 8004932:	e09b      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004934:	4b53      	ldr	r3, [pc, #332]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8004936:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004938:	e09b      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800493a:	4b53      	ldr	r3, [pc, #332]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800493c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800493e:	e098      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004940:	4b4f      	ldr	r3, [pc, #316]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004948:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800494a:	4b4d      	ldr	r3, [pc, #308]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d028      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004956:	4b4a      	ldr	r3, [pc, #296]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	099b      	lsrs	r3, r3, #6
 800495c:	2200      	movs	r2, #0
 800495e:	623b      	str	r3, [r7, #32]
 8004960:	627a      	str	r2, [r7, #36]	@ 0x24
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004968:	2100      	movs	r1, #0
 800496a:	4b47      	ldr	r3, [pc, #284]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800496c:	fb03 f201 	mul.w	r2, r3, r1
 8004970:	2300      	movs	r3, #0
 8004972:	fb00 f303 	mul.w	r3, r0, r3
 8004976:	4413      	add	r3, r2
 8004978:	4a43      	ldr	r2, [pc, #268]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800497a:	fba0 1202 	umull	r1, r2, r0, r2
 800497e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004980:	460a      	mov	r2, r1
 8004982:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004984:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004986:	4413      	add	r3, r2
 8004988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800498a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800498c:	2200      	movs	r2, #0
 800498e:	61bb      	str	r3, [r7, #24]
 8004990:	61fa      	str	r2, [r7, #28]
 8004992:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004996:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800499a:	f7fc f83f 	bl	8000a1c <__aeabi_uldivmod>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4613      	mov	r3, r2
 80049a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049a6:	e053      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a8:	4b35      	ldr	r3, [pc, #212]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x180>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	099b      	lsrs	r3, r3, #6
 80049ae:	2200      	movs	r2, #0
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	617a      	str	r2, [r7, #20]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80049ba:	f04f 0b00 	mov.w	fp, #0
 80049be:	4652      	mov	r2, sl
 80049c0:	465b      	mov	r3, fp
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f04f 0100 	mov.w	r1, #0
 80049ca:	0159      	lsls	r1, r3, #5
 80049cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049d0:	0150      	lsls	r0, r2, #5
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	ebb2 080a 	subs.w	r8, r2, sl
 80049da:	eb63 090b 	sbc.w	r9, r3, fp
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80049ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80049ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80049f2:	ebb2 0408 	subs.w	r4, r2, r8
 80049f6:	eb63 0509 	sbc.w	r5, r3, r9
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	00eb      	lsls	r3, r5, #3
 8004a04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a08:	00e2      	lsls	r2, r4, #3
 8004a0a:	4614      	mov	r4, r2
 8004a0c:	461d      	mov	r5, r3
 8004a0e:	eb14 030a 	adds.w	r3, r4, sl
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	eb45 030b 	adc.w	r3, r5, fp
 8004a18:	607b      	str	r3, [r7, #4]
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a26:	4629      	mov	r1, r5
 8004a28:	028b      	lsls	r3, r1, #10
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a30:	4621      	mov	r1, r4
 8004a32:	028a      	lsls	r2, r1, #10
 8004a34:	4610      	mov	r0, r2
 8004a36:	4619      	mov	r1, r3
 8004a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	60fa      	str	r2, [r7, #12]
 8004a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a44:	f7fb ffea 	bl	8000a1c <__aeabi_uldivmod>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a50:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	0c1b      	lsrs	r3, r3, #16
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004a60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a6a:	e002      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a6c:	4b05      	ldr	r3, [pc, #20]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3740      	adds	r7, #64	@ 0x40
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7e:	bf00      	nop
 8004a80:	40023800 	.word	0x40023800
 8004a84:	00f42400 	.word	0x00f42400
 8004a88:	017d7840 	.word	0x017d7840

08004a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a90:	4b03      	ldr	r3, [pc, #12]	@ (8004aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a92:	681b      	ldr	r3, [r3, #0]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000000 	.word	0x20000000

08004aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aa8:	f7ff fff0 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004aac:	4602      	mov	r2, r0
 8004aae:	4b05      	ldr	r3, [pc, #20]	@ (8004ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	0a9b      	lsrs	r3, r3, #10
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	4903      	ldr	r1, [pc, #12]	@ (8004ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aba:	5ccb      	ldrb	r3, [r1, r3]
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	08008b34 	.word	0x08008b34

08004acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ad0:	f7ff ffdc 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b05      	ldr	r3, [pc, #20]	@ (8004aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	0b5b      	lsrs	r3, r3, #13
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	4903      	ldr	r1, [pc, #12]	@ (8004af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ae2:	5ccb      	ldrb	r3, [r1, r3]
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40023800 	.word	0x40023800
 8004af0:	08008b34 	.word	0x08008b34

08004af4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	220f      	movs	r2, #15
 8004b02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b04:	4b12      	ldr	r3, [pc, #72]	@ (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 0203 	and.w	r2, r3, #3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b10:	4b0f      	ldr	r3, [pc, #60]	@ (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b28:	4b09      	ldr	r3, [pc, #36]	@ (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	08db      	lsrs	r3, r3, #3
 8004b2e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b36:	4b07      	ldr	r3, [pc, #28]	@ (8004b54 <HAL_RCC_GetClockConfig+0x60>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0207 	and.w	r2, r3, #7
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	601a      	str	r2, [r3, #0]
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40023800 	.word	0x40023800
 8004b54:	40023c00 	.word	0x40023c00

08004b58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e07b      	b.n	8004c62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d108      	bne.n	8004b84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b7a:	d009      	beq.n	8004b90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	61da      	str	r2, [r3, #28]
 8004b82:	e005      	b.n	8004b90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fd fb24 	bl	80021f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c14:	ea42 0103 	orr.w	r1, r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	f003 0104 	and.w	r1, r3, #4
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c36:	f003 0210 	and.w	r2, r3, #16
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b082      	sub	sp, #8
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e041      	b.n	8004d00 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d106      	bne.n	8004c96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fd faf9 	bl	8002288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2202      	movs	r2, #2
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f000 fc3b 	bl	8005524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d001      	beq.n	8004d20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e044      	b.n	8004daa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004db8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d018      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x6c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4a:	d013      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x6c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1a      	ldr	r2, [pc, #104]	@ (8004dbc <HAL_TIM_Base_Start_IT+0xb4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00e      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x6c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a19      	ldr	r2, [pc, #100]	@ (8004dc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x6c>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a17      	ldr	r2, [pc, #92]	@ (8004dc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x6c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a16      	ldr	r2, [pc, #88]	@ (8004dc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d111      	bne.n	8004d98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b06      	cmp	r3, #6
 8004d84:	d010      	beq.n	8004da8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d96:	e007      	b.n	8004da8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	40014000 	.word	0x40014000

08004dcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e041      	b.n	8004e62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f839 	bl	8004e6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	f000 fb8a 	bl	8005524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
	...

08004e80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d109      	bne.n	8004ea4 <HAL_TIM_PWM_Start+0x24>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	bf14      	ite	ne
 8004e9c:	2301      	movne	r3, #1
 8004e9e:	2300      	moveq	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	e022      	b.n	8004eea <HAL_TIM_PWM_Start+0x6a>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d109      	bne.n	8004ebe <HAL_TIM_PWM_Start+0x3e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	bf14      	ite	ne
 8004eb6:	2301      	movne	r3, #1
 8004eb8:	2300      	moveq	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	e015      	b.n	8004eea <HAL_TIM_PWM_Start+0x6a>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d109      	bne.n	8004ed8 <HAL_TIM_PWM_Start+0x58>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	bf14      	ite	ne
 8004ed0:	2301      	movne	r3, #1
 8004ed2:	2300      	moveq	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	e008      	b.n	8004eea <HAL_TIM_PWM_Start+0x6a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	bf14      	ite	ne
 8004ee4:	2301      	movne	r3, #1
 8004ee6:	2300      	moveq	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e068      	b.n	8004fc4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <HAL_TIM_PWM_Start+0x82>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f00:	e013      	b.n	8004f2a <HAL_TIM_PWM_Start+0xaa>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d104      	bne.n	8004f12 <HAL_TIM_PWM_Start+0x92>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f10:	e00b      	b.n	8004f2a <HAL_TIM_PWM_Start+0xaa>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d104      	bne.n	8004f22 <HAL_TIM_PWM_Start+0xa2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f20:	e003      	b.n	8004f2a <HAL_TIM_PWM_Start+0xaa>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	6839      	ldr	r1, [r7, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fda8 	bl	8005a88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a23      	ldr	r2, [pc, #140]	@ (8004fcc <HAL_TIM_PWM_Start+0x14c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d107      	bne.n	8004f52 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1d      	ldr	r2, [pc, #116]	@ (8004fcc <HAL_TIM_PWM_Start+0x14c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d018      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x10e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f64:	d013      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x10e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a19      	ldr	r2, [pc, #100]	@ (8004fd0 <HAL_TIM_PWM_Start+0x150>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00e      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x10e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a17      	ldr	r2, [pc, #92]	@ (8004fd4 <HAL_TIM_PWM_Start+0x154>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d009      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x10e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a16      	ldr	r2, [pc, #88]	@ (8004fd8 <HAL_TIM_PWM_Start+0x158>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d004      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x10e>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a14      	ldr	r2, [pc, #80]	@ (8004fdc <HAL_TIM_PWM_Start+0x15c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d111      	bne.n	8004fb2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b06      	cmp	r3, #6
 8004f9e:	d010      	beq.n	8004fc2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb0:	e007      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40010000 	.word	0x40010000
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	40000c00 	.word	0x40000c00
 8004fdc:	40014000 	.word	0x40014000

08004fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d020      	beq.n	8005044 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01b      	beq.n	8005044 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0202 	mvn.w	r2, #2
 8005014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa5b 	bl	80054e6 <HAL_TIM_IC_CaptureCallback>
 8005030:	e005      	b.n	800503e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fa4d 	bl	80054d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fa5e 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	d020      	beq.n	8005090 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01b      	beq.n	8005090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0204 	mvn.w	r2, #4
 8005060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2202      	movs	r2, #2
 8005066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fa35 	bl	80054e6 <HAL_TIM_IC_CaptureCallback>
 800507c:	e005      	b.n	800508a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fa27 	bl	80054d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fa38 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d020      	beq.n	80050dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01b      	beq.n	80050dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0208 	mvn.w	r2, #8
 80050ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2204      	movs	r2, #4
 80050b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fa0f 	bl	80054e6 <HAL_TIM_IC_CaptureCallback>
 80050c8:	e005      	b.n	80050d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fa01 	bl	80054d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fa12 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 0310 	and.w	r3, r3, #16
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d020      	beq.n	8005128 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01b      	beq.n	8005128 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0210 	mvn.w	r2, #16
 80050f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2208      	movs	r2, #8
 80050fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f9e9 	bl	80054e6 <HAL_TIM_IC_CaptureCallback>
 8005114:	e005      	b.n	8005122 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f9db 	bl	80054d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f9ec 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00c      	beq.n	800514c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d007      	beq.n	800514c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0201 	mvn.w	r2, #1
 8005144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fc fdba 	bl	8001cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00c      	beq.n	8005170 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515c:	2b00      	cmp	r3, #0
 800515e:	d007      	beq.n	8005170 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fd7c 	bl	8005c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00c      	beq.n	8005194 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800518c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f9bd 	bl	800550e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00c      	beq.n	80051b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d007      	beq.n	80051b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0220 	mvn.w	r2, #32
 80051b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fd4e 	bl	8005c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051b8:	bf00      	nop
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d101      	bne.n	80051de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051da:	2302      	movs	r3, #2
 80051dc:	e0ae      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b0c      	cmp	r3, #12
 80051ea:	f200 809f 	bhi.w	800532c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051ee:	a201      	add	r2, pc, #4	@ (adr r2, 80051f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	08005229 	.word	0x08005229
 80051f8:	0800532d 	.word	0x0800532d
 80051fc:	0800532d 	.word	0x0800532d
 8005200:	0800532d 	.word	0x0800532d
 8005204:	08005269 	.word	0x08005269
 8005208:	0800532d 	.word	0x0800532d
 800520c:	0800532d 	.word	0x0800532d
 8005210:	0800532d 	.word	0x0800532d
 8005214:	080052ab 	.word	0x080052ab
 8005218:	0800532d 	.word	0x0800532d
 800521c:	0800532d 	.word	0x0800532d
 8005220:	0800532d 	.word	0x0800532d
 8005224:	080052eb 	.word	0x080052eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fa04 	bl	800563c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0208 	orr.w	r2, r2, #8
 8005242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0204 	bic.w	r2, r2, #4
 8005252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6999      	ldr	r1, [r3, #24]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	691a      	ldr	r2, [r3, #16]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	619a      	str	r2, [r3, #24]
      break;
 8005266:	e064      	b.n	8005332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68b9      	ldr	r1, [r7, #8]
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fa4a 	bl	8005708 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699a      	ldr	r2, [r3, #24]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6999      	ldr	r1, [r3, #24]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	021a      	lsls	r2, r3, #8
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	619a      	str	r2, [r3, #24]
      break;
 80052a8:	e043      	b.n	8005332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fa95 	bl	80057e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0208 	orr.w	r2, r2, #8
 80052c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69da      	ldr	r2, [r3, #28]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0204 	bic.w	r2, r2, #4
 80052d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69d9      	ldr	r1, [r3, #28]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	61da      	str	r2, [r3, #28]
      break;
 80052e8:	e023      	b.n	8005332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fadf 	bl	80058b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69d9      	ldr	r1, [r3, #28]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	021a      	lsls	r2, r3, #8
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	61da      	str	r2, [r3, #28]
      break;
 800532a:	e002      	b.n	8005332 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	75fb      	strb	r3, [r7, #23]
      break;
 8005330:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800533a:	7dfb      	ldrb	r3, [r7, #23]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIM_ConfigClockSource+0x1c>
 800535c:	2302      	movs	r3, #2
 800535e:	e0b4      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x186>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800537e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005386:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005398:	d03e      	beq.n	8005418 <HAL_TIM_ConfigClockSource+0xd4>
 800539a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800539e:	f200 8087 	bhi.w	80054b0 <HAL_TIM_ConfigClockSource+0x16c>
 80053a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053a6:	f000 8086 	beq.w	80054b6 <HAL_TIM_ConfigClockSource+0x172>
 80053aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ae:	d87f      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x16c>
 80053b0:	2b70      	cmp	r3, #112	@ 0x70
 80053b2:	d01a      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0xa6>
 80053b4:	2b70      	cmp	r3, #112	@ 0x70
 80053b6:	d87b      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x16c>
 80053b8:	2b60      	cmp	r3, #96	@ 0x60
 80053ba:	d050      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x11a>
 80053bc:	2b60      	cmp	r3, #96	@ 0x60
 80053be:	d877      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x16c>
 80053c0:	2b50      	cmp	r3, #80	@ 0x50
 80053c2:	d03c      	beq.n	800543e <HAL_TIM_ConfigClockSource+0xfa>
 80053c4:	2b50      	cmp	r3, #80	@ 0x50
 80053c6:	d873      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x16c>
 80053c8:	2b40      	cmp	r3, #64	@ 0x40
 80053ca:	d058      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x13a>
 80053cc:	2b40      	cmp	r3, #64	@ 0x40
 80053ce:	d86f      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x16c>
 80053d0:	2b30      	cmp	r3, #48	@ 0x30
 80053d2:	d064      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x15a>
 80053d4:	2b30      	cmp	r3, #48	@ 0x30
 80053d6:	d86b      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x16c>
 80053d8:	2b20      	cmp	r3, #32
 80053da:	d060      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x15a>
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d867      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x16c>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d05c      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x15a>
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d05a      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x15a>
 80053e8:	e062      	b.n	80054b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053fa:	f000 fb25 	bl	8005a48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800540c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	609a      	str	r2, [r3, #8]
      break;
 8005416:	e04f      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005428:	f000 fb0e 	bl	8005a48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800543a:	609a      	str	r2, [r3, #8]
      break;
 800543c:	e03c      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800544a:	461a      	mov	r2, r3
 800544c:	f000 fa82 	bl	8005954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2150      	movs	r1, #80	@ 0x50
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fadb 	bl	8005a12 <TIM_ITRx_SetConfig>
      break;
 800545c:	e02c      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800546a:	461a      	mov	r2, r3
 800546c:	f000 faa1 	bl	80059b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2160      	movs	r1, #96	@ 0x60
 8005476:	4618      	mov	r0, r3
 8005478:	f000 facb 	bl	8005a12 <TIM_ITRx_SetConfig>
      break;
 800547c:	e01c      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800548a:	461a      	mov	r2, r3
 800548c:	f000 fa62 	bl	8005954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2140      	movs	r1, #64	@ 0x40
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fabb 	bl	8005a12 <TIM_ITRx_SetConfig>
      break;
 800549c:	e00c      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4619      	mov	r1, r3
 80054a8:	4610      	mov	r0, r2
 80054aa:	f000 fab2 	bl	8005a12 <TIM_ITRx_SetConfig>
      break;
 80054ae:	e003      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	73fb      	strb	r3, [r7, #15]
      break;
 80054b4:	e000      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a3a      	ldr	r2, [pc, #232]	@ (8005620 <TIM_Base_SetConfig+0xfc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00f      	beq.n	800555c <TIM_Base_SetConfig+0x38>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005542:	d00b      	beq.n	800555c <TIM_Base_SetConfig+0x38>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a37      	ldr	r2, [pc, #220]	@ (8005624 <TIM_Base_SetConfig+0x100>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d007      	beq.n	800555c <TIM_Base_SetConfig+0x38>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a36      	ldr	r2, [pc, #216]	@ (8005628 <TIM_Base_SetConfig+0x104>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d003      	beq.n	800555c <TIM_Base_SetConfig+0x38>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a35      	ldr	r2, [pc, #212]	@ (800562c <TIM_Base_SetConfig+0x108>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d108      	bne.n	800556e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a2b      	ldr	r2, [pc, #172]	@ (8005620 <TIM_Base_SetConfig+0xfc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d01b      	beq.n	80055ae <TIM_Base_SetConfig+0x8a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800557c:	d017      	beq.n	80055ae <TIM_Base_SetConfig+0x8a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a28      	ldr	r2, [pc, #160]	@ (8005624 <TIM_Base_SetConfig+0x100>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d013      	beq.n	80055ae <TIM_Base_SetConfig+0x8a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a27      	ldr	r2, [pc, #156]	@ (8005628 <TIM_Base_SetConfig+0x104>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00f      	beq.n	80055ae <TIM_Base_SetConfig+0x8a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a26      	ldr	r2, [pc, #152]	@ (800562c <TIM_Base_SetConfig+0x108>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00b      	beq.n	80055ae <TIM_Base_SetConfig+0x8a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a25      	ldr	r2, [pc, #148]	@ (8005630 <TIM_Base_SetConfig+0x10c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d007      	beq.n	80055ae <TIM_Base_SetConfig+0x8a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a24      	ldr	r2, [pc, #144]	@ (8005634 <TIM_Base_SetConfig+0x110>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d003      	beq.n	80055ae <TIM_Base_SetConfig+0x8a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a23      	ldr	r2, [pc, #140]	@ (8005638 <TIM_Base_SetConfig+0x114>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d108      	bne.n	80055c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a0e      	ldr	r2, [pc, #56]	@ (8005620 <TIM_Base_SetConfig+0xfc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d103      	bne.n	80055f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b01      	cmp	r3, #1
 8005604:	d105      	bne.n	8005612 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f023 0201 	bic.w	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	611a      	str	r2, [r3, #16]
  }
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40010000 	.word	0x40010000
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800
 800562c:	40000c00 	.word	0x40000c00
 8005630:	40014000 	.word	0x40014000
 8005634:	40014400 	.word	0x40014400
 8005638:	40014800 	.word	0x40014800

0800563c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f023 0201 	bic.w	r2, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800566a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0303 	bic.w	r3, r3, #3
 8005672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f023 0302 	bic.w	r3, r3, #2
 8005684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a1c      	ldr	r2, [pc, #112]	@ (8005704 <TIM_OC1_SetConfig+0xc8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d10c      	bne.n	80056b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f023 0308 	bic.w	r3, r3, #8
 800569e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f023 0304 	bic.w	r3, r3, #4
 80056b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a13      	ldr	r2, [pc, #76]	@ (8005704 <TIM_OC1_SetConfig+0xc8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d111      	bne.n	80056de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	621a      	str	r2, [r3, #32]
}
 80056f8:	bf00      	nop
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	40010000 	.word	0x40010000

08005708 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	f023 0210 	bic.w	r2, r3, #16
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800573e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	021b      	lsls	r3, r3, #8
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f023 0320 	bic.w	r3, r3, #32
 8005752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a1e      	ldr	r2, [pc, #120]	@ (80057dc <TIM_OC2_SetConfig+0xd4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d10d      	bne.n	8005784 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800576e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005782:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a15      	ldr	r2, [pc, #84]	@ (80057dc <TIM_OC2_SetConfig+0xd4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d113      	bne.n	80057b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005792:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800579a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40010000 	.word	0x40010000

080057e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0303 	bic.w	r3, r3, #3
 8005816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	021b      	lsls	r3, r3, #8
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a1d      	ldr	r2, [pc, #116]	@ (80058b0 <TIM_OC3_SetConfig+0xd0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d10d      	bne.n	800585a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	021b      	lsls	r3, r3, #8
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a14      	ldr	r2, [pc, #80]	@ (80058b0 <TIM_OC3_SetConfig+0xd0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d113      	bne.n	800588a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	621a      	str	r2, [r3, #32]
}
 80058a4:	bf00      	nop
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	40010000 	.word	0x40010000

080058b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	021b      	lsls	r3, r3, #8
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	031b      	lsls	r3, r3, #12
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a10      	ldr	r2, [pc, #64]	@ (8005950 <TIM_OC4_SetConfig+0x9c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d109      	bne.n	8005928 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800591a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	019b      	lsls	r3, r3, #6
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	621a      	str	r2, [r3, #32]
}
 8005942:	bf00      	nop
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40010000 	.word	0x40010000

08005954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f023 0201 	bic.w	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800597e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f023 030a 	bic.w	r3, r3, #10
 8005990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	621a      	str	r2, [r3, #32]
}
 80059a6:	bf00      	nop
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b087      	sub	sp, #28
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	f023 0210 	bic.w	r2, r3, #16
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	031b      	lsls	r3, r3, #12
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f043 0307 	orr.w	r3, r3, #7
 8005a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	609a      	str	r2, [r3, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	021a      	lsls	r2, r3, #8
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	609a      	str	r2, [r3, #8]
}
 8005a7c:	bf00      	nop
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f003 031f 	and.w	r3, r3, #31
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1a      	ldr	r2, [r3, #32]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	401a      	ands	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a1a      	ldr	r2, [r3, #32]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 031f 	and.w	r3, r3, #31
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e050      	b.n	8005b8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d018      	beq.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b38:	d013      	beq.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a18      	ldr	r2, [pc, #96]	@ (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00e      	beq.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a16      	ldr	r2, [pc, #88]	@ (8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d009      	beq.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a15      	ldr	r2, [pc, #84]	@ (8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d004      	beq.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a13      	ldr	r2, [pc, #76]	@ (8005bac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d10c      	bne.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40010000 	.word	0x40010000
 8005ba0:	40000400 	.word	0x40000400
 8005ba4:	40000800 	.word	0x40000800
 8005ba8:	40000c00 	.word	0x40000c00
 8005bac:	40014000 	.word	0x40014000

08005bb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e03d      	b.n	8005c48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <__NVIC_SetPriority>:
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	6039      	str	r1, [r7, #0]
 8005c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	db0a      	blt.n	8005ca6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	490c      	ldr	r1, [pc, #48]	@ (8005cc8 <__NVIC_SetPriority+0x4c>)
 8005c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9a:	0112      	lsls	r2, r2, #4
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005ca4:	e00a      	b.n	8005cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	4908      	ldr	r1, [pc, #32]	@ (8005ccc <__NVIC_SetPriority+0x50>)
 8005cac:	79fb      	ldrb	r3, [r7, #7]
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	3b04      	subs	r3, #4
 8005cb4:	0112      	lsls	r2, r2, #4
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	440b      	add	r3, r1
 8005cba:	761a      	strb	r2, [r3, #24]
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	e000e100 	.word	0xe000e100
 8005ccc:	e000ed00 	.word	0xe000ed00

08005cd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005cd4:	4b05      	ldr	r3, [pc, #20]	@ (8005cec <SysTick_Handler+0x1c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005cd8:	f001 fd46 	bl	8007768 <xTaskGetSchedulerState>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d001      	beq.n	8005ce6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005ce2:	f002 fb41 	bl	8008368 <xPortSysTickHandler>
  }
}
 8005ce6:	bf00      	nop
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	e000e010 	.word	0xe000e010

08005cf0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	f06f 0004 	mvn.w	r0, #4
 8005cfa:	f7ff ffbf 	bl	8005c7c <__NVIC_SetPriority>
#endif
}
 8005cfe:	bf00      	nop
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d0a:	f3ef 8305 	mrs	r3, IPSR
 8005d0e:	603b      	str	r3, [r7, #0]
  return(result);
 8005d10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d16:	f06f 0305 	mvn.w	r3, #5
 8005d1a:	607b      	str	r3, [r7, #4]
 8005d1c:	e00c      	b.n	8005d38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d48 <osKernelInitialize+0x44>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d105      	bne.n	8005d32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d26:	4b08      	ldr	r3, [pc, #32]	@ (8005d48 <osKernelInitialize+0x44>)
 8005d28:	2201      	movs	r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	607b      	str	r3, [r7, #4]
 8005d30:	e002      	b.n	8005d38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005d32:	f04f 33ff 	mov.w	r3, #4294967295
 8005d36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d38:	687b      	ldr	r3, [r7, #4]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	200008f4 	.word	0x200008f4

08005d4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d52:	f3ef 8305 	mrs	r3, IPSR
 8005d56:	603b      	str	r3, [r7, #0]
  return(result);
 8005d58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005d5e:	f06f 0305 	mvn.w	r3, #5
 8005d62:	607b      	str	r3, [r7, #4]
 8005d64:	e010      	b.n	8005d88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d66:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <osKernelStart+0x48>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d109      	bne.n	8005d82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d6e:	f7ff ffbf 	bl	8005cf0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d72:	4b08      	ldr	r3, [pc, #32]	@ (8005d94 <osKernelStart+0x48>)
 8005d74:	2202      	movs	r2, #2
 8005d76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d78:	f001 f892 	bl	8006ea0 <vTaskStartScheduler>
      stat = osOK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	607b      	str	r3, [r7, #4]
 8005d80:	e002      	b.n	8005d88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005d82:	f04f 33ff 	mov.w	r3, #4294967295
 8005d86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d88:	687b      	ldr	r3, [r7, #4]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	200008f4 	.word	0x200008f4

08005d98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08e      	sub	sp, #56	@ 0x38
 8005d9c:	af04      	add	r7, sp, #16
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da8:	f3ef 8305 	mrs	r3, IPSR
 8005dac:	617b      	str	r3, [r7, #20]
  return(result);
 8005dae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d17e      	bne.n	8005eb2 <osThreadNew+0x11a>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d07b      	beq.n	8005eb2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005dba:	2380      	movs	r3, #128	@ 0x80
 8005dbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005dbe:	2318      	movs	r3, #24
 8005dc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d045      	beq.n	8005e5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <osThreadNew+0x48>
        name = attr->name;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d008      	beq.n	8005e06 <osThreadNew+0x6e>
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	2b38      	cmp	r3, #56	@ 0x38
 8005df8:	d805      	bhi.n	8005e06 <osThreadNew+0x6e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <osThreadNew+0x72>
        return (NULL);
 8005e06:	2300      	movs	r3, #0
 8005e08:	e054      	b.n	8005eb4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	089b      	lsrs	r3, r3, #2
 8005e18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00e      	beq.n	8005e40 <osThreadNew+0xa8>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	2ba7      	cmp	r3, #167	@ 0xa7
 8005e28:	d90a      	bls.n	8005e40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d006      	beq.n	8005e40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <osThreadNew+0xa8>
        mem = 1;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	61bb      	str	r3, [r7, #24]
 8005e3e:	e010      	b.n	8005e62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10c      	bne.n	8005e62 <osThreadNew+0xca>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d108      	bne.n	8005e62 <osThreadNew+0xca>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d104      	bne.n	8005e62 <osThreadNew+0xca>
          mem = 0;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	61bb      	str	r3, [r7, #24]
 8005e5c:	e001      	b.n	8005e62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d110      	bne.n	8005e8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e70:	9202      	str	r2, [sp, #8]
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	6a3a      	ldr	r2, [r7, #32]
 8005e7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 fe1a 	bl	8006ab8 <xTaskCreateStatic>
 8005e84:	4603      	mov	r3, r0
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	e013      	b.n	8005eb2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d110      	bne.n	8005eb2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	f107 0310 	add.w	r3, r7, #16
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f000 fe68 	bl	8006b78 <xTaskCreate>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d001      	beq.n	8005eb2 <osThreadNew+0x11a>
            hTask = NULL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005eb2:	693b      	ldr	r3, [r7, #16]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3728      	adds	r7, #40	@ 0x28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ec4:	f3ef 8305 	mrs	r3, IPSR
 8005ec8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005eca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <osDelay+0x1c>
    stat = osErrorISR;
 8005ed0:	f06f 0305 	mvn.w	r3, #5
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	e007      	b.n	8005ee8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 ffa6 	bl	8006e34 <vTaskDelay>
    }
  }

  return (stat);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4a07      	ldr	r2, [pc, #28]	@ (8005f20 <vApplicationGetIdleTaskMemory+0x2c>)
 8005f04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	4a06      	ldr	r2, [pc, #24]	@ (8005f24 <vApplicationGetIdleTaskMemory+0x30>)
 8005f0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2280      	movs	r2, #128	@ 0x80
 8005f10:	601a      	str	r2, [r3, #0]
}
 8005f12:	bf00      	nop
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	200008f8 	.word	0x200008f8
 8005f24:	200009a0 	.word	0x200009a0

08005f28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4a07      	ldr	r2, [pc, #28]	@ (8005f54 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	4a06      	ldr	r2, [pc, #24]	@ (8005f58 <vApplicationGetTimerTaskMemory+0x30>)
 8005f3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f46:	601a      	str	r2, [r3, #0]
}
 8005f48:	bf00      	nop
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	20000ba0 	.word	0x20000ba0
 8005f58:	20000c48 	.word	0x20000c48

08005f5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f103 0208 	add.w	r2, r3, #8
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f04f 32ff 	mov.w	r2, #4294967295
 8005f74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f103 0208 	add.w	r2, r3, #8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f103 0208 	add.w	r2, r3, #8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	601a      	str	r2, [r3, #0]
}
 8005ff2:	bf00      	nop
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ffe:	b480      	push	{r7}
 8006000:	b085      	sub	sp, #20
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d103      	bne.n	800601e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e00c      	b.n	8006038 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3308      	adds	r3, #8
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	e002      	b.n	800602c <vListInsert+0x2e>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	d2f6      	bcs.n	8006026 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	601a      	str	r2, [r3, #0]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6892      	ldr	r2, [r2, #8]
 8006086:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6852      	ldr	r2, [r2, #4]
 8006090:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	429a      	cmp	r2, r3
 800609a:	d103      	bne.n	80060a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	1e5a      	subs	r2, r3, #1
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10b      	bne.n	80060f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80060ea:	bf00      	nop
 80060ec:	bf00      	nop
 80060ee:	e7fd      	b.n	80060ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80060f0:	f002 f8aa 	bl	8008248 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fc:	68f9      	ldr	r1, [r7, #12]
 80060fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006100:	fb01 f303 	mul.w	r3, r1, r3
 8006104:	441a      	add	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006120:	3b01      	subs	r3, #1
 8006122:	68f9      	ldr	r1, [r7, #12]
 8006124:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006126:	fb01 f303 	mul.w	r3, r1, r3
 800612a:	441a      	add	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	22ff      	movs	r2, #255	@ 0xff
 8006134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	22ff      	movs	r2, #255	@ 0xff
 800613c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d114      	bne.n	8006170 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d01a      	beq.n	8006184 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3310      	adds	r3, #16
 8006152:	4618      	mov	r0, r3
 8006154:	f001 f942 	bl	80073dc <xTaskRemoveFromEventList>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d012      	beq.n	8006184 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800615e:	4b0d      	ldr	r3, [pc, #52]	@ (8006194 <xQueueGenericReset+0xd0>)
 8006160:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	e009      	b.n	8006184 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3310      	adds	r3, #16
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff fef1 	bl	8005f5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3324      	adds	r3, #36	@ 0x24
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff feec 	bl	8005f5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006184:	f002 f892 	bl	80082ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006188:	2301      	movs	r3, #1
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	e000ed04 	.word	0xe000ed04

08006198 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08e      	sub	sp, #56	@ 0x38
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10b      	bne.n	80061c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80061ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80061be:	bf00      	nop
 80061c0:	bf00      	nop
 80061c2:	e7fd      	b.n	80061c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10b      	bne.n	80061e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	e7fd      	b.n	80061de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <xQueueGenericCreateStatic+0x56>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <xQueueGenericCreateStatic+0x5a>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <xQueueGenericCreateStatic+0x5c>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10b      	bne.n	8006210 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	623b      	str	r3, [r7, #32]
}
 800620a:	bf00      	nop
 800620c:	bf00      	nop
 800620e:	e7fd      	b.n	800620c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d102      	bne.n	800621c <xQueueGenericCreateStatic+0x84>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <xQueueGenericCreateStatic+0x88>
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <xQueueGenericCreateStatic+0x8a>
 8006220:	2300      	movs	r3, #0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10b      	bne.n	800623e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	61fb      	str	r3, [r7, #28]
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800623e:	2350      	movs	r3, #80	@ 0x50
 8006240:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b50      	cmp	r3, #80	@ 0x50
 8006246:	d00b      	beq.n	8006260 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	61bb      	str	r3, [r7, #24]
}
 800625a:	bf00      	nop
 800625c:	bf00      	nop
 800625e:	e7fd      	b.n	800625c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006260:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00d      	beq.n	8006288 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800626c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006274:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	4613      	mov	r3, r2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	68b9      	ldr	r1, [r7, #8]
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f805 	bl	8006292 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800628a:	4618      	mov	r0, r3
 800628c:	3730      	adds	r7, #48	@ 0x30
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	607a      	str	r2, [r7, #4]
 800629e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d103      	bne.n	80062ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	e002      	b.n	80062b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062c0:	2101      	movs	r1, #1
 80062c2:	69b8      	ldr	r0, [r7, #24]
 80062c4:	f7ff fefe 	bl	80060c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	78fa      	ldrb	r2, [r7, #3]
 80062cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08e      	sub	sp, #56	@ 0x38
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80062e6:	2300      	movs	r3, #0
 80062e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80062ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10b      	bne.n	800630c <xQueueGenericSend+0x34>
	__asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006306:	bf00      	nop
 8006308:	bf00      	nop
 800630a:	e7fd      	b.n	8006308 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d103      	bne.n	800631a <xQueueGenericSend+0x42>
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <xQueueGenericSend+0x46>
 800631a:	2301      	movs	r3, #1
 800631c:	e000      	b.n	8006320 <xQueueGenericSend+0x48>
 800631e:	2300      	movs	r3, #0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10b      	bne.n	800633c <xQueueGenericSend+0x64>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006336:	bf00      	nop
 8006338:	bf00      	nop
 800633a:	e7fd      	b.n	8006338 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b02      	cmp	r3, #2
 8006340:	d103      	bne.n	800634a <xQueueGenericSend+0x72>
 8006342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <xQueueGenericSend+0x76>
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <xQueueGenericSend+0x78>
 800634e:	2300      	movs	r3, #0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10b      	bne.n	800636c <xQueueGenericSend+0x94>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	623b      	str	r3, [r7, #32]
}
 8006366:	bf00      	nop
 8006368:	bf00      	nop
 800636a:	e7fd      	b.n	8006368 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800636c:	f001 f9fc 	bl	8007768 <xTaskGetSchedulerState>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <xQueueGenericSend+0xa4>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <xQueueGenericSend+0xa8>
 800637c:	2301      	movs	r3, #1
 800637e:	e000      	b.n	8006382 <xQueueGenericSend+0xaa>
 8006380:	2300      	movs	r3, #0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10b      	bne.n	800639e <xQueueGenericSend+0xc6>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	61fb      	str	r3, [r7, #28]
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	e7fd      	b.n	800639a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800639e:	f001 ff53 	bl	8008248 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d302      	bcc.n	80063b4 <xQueueGenericSend+0xdc>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d129      	bne.n	8006408 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	68b9      	ldr	r1, [r7, #8]
 80063b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063ba:	f000 fa0f 	bl	80067dc <prvCopyDataToQueue>
 80063be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d010      	beq.n	80063ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ca:	3324      	adds	r3, #36	@ 0x24
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 f805 	bl	80073dc <xTaskRemoveFromEventList>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d013      	beq.n	8006400 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80063d8:	4b3f      	ldr	r3, [pc, #252]	@ (80064d8 <xQueueGenericSend+0x200>)
 80063da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	e00a      	b.n	8006400 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80063ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d007      	beq.n	8006400 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80063f0:	4b39      	ldr	r3, [pc, #228]	@ (80064d8 <xQueueGenericSend+0x200>)
 80063f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006400:	f001 ff54 	bl	80082ac <vPortExitCritical>
				return pdPASS;
 8006404:	2301      	movs	r3, #1
 8006406:	e063      	b.n	80064d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d103      	bne.n	8006416 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800640e:	f001 ff4d 	bl	80082ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006412:	2300      	movs	r3, #0
 8006414:	e05c      	b.n	80064d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006418:	2b00      	cmp	r3, #0
 800641a:	d106      	bne.n	800642a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800641c:	f107 0314 	add.w	r3, r7, #20
 8006420:	4618      	mov	r0, r3
 8006422:	f001 f83f 	bl	80074a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006426:	2301      	movs	r3, #1
 8006428:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800642a:	f001 ff3f 	bl	80082ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800642e:	f000 fda7 	bl	8006f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006432:	f001 ff09 	bl	8008248 <vPortEnterCritical>
 8006436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006438:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800643c:	b25b      	sxtb	r3, r3
 800643e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006442:	d103      	bne.n	800644c <xQueueGenericSend+0x174>
 8006444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800644c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006452:	b25b      	sxtb	r3, r3
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006458:	d103      	bne.n	8006462 <xQueueGenericSend+0x18a>
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006462:	f001 ff23 	bl	80082ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006466:	1d3a      	adds	r2, r7, #4
 8006468:	f107 0314 	add.w	r3, r7, #20
 800646c:	4611      	mov	r1, r2
 800646e:	4618      	mov	r0, r3
 8006470:	f001 f82e 	bl	80074d0 <xTaskCheckForTimeOut>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d124      	bne.n	80064c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800647a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800647c:	f000 faa6 	bl	80069cc <prvIsQueueFull>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d018      	beq.n	80064b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	3310      	adds	r3, #16
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	4611      	mov	r1, r2
 800648e:	4618      	mov	r0, r3
 8006490:	f000 ff52 	bl	8007338 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006494:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006496:	f000 fa31 	bl	80068fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800649a:	f000 fd7f 	bl	8006f9c <xTaskResumeAll>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f47f af7c 	bne.w	800639e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80064a6:	4b0c      	ldr	r3, [pc, #48]	@ (80064d8 <xQueueGenericSend+0x200>)
 80064a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	e772      	b.n	800639e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064ba:	f000 fa1f 	bl	80068fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064be:	f000 fd6d 	bl	8006f9c <xTaskResumeAll>
 80064c2:	e76c      	b.n	800639e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064c6:	f000 fa19 	bl	80068fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064ca:	f000 fd67 	bl	8006f9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80064ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3738      	adds	r7, #56	@ 0x38
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	e000ed04 	.word	0xe000ed04

080064dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b090      	sub	sp, #64	@ 0x40
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80064ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10b      	bne.n	800650c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006506:	bf00      	nop
 8006508:	bf00      	nop
 800650a:	e7fd      	b.n	8006508 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d103      	bne.n	800651a <xQueueGenericSendFromISR+0x3e>
 8006512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <xQueueGenericSendFromISR+0x42>
 800651a:	2301      	movs	r3, #1
 800651c:	e000      	b.n	8006520 <xQueueGenericSendFromISR+0x44>
 800651e:	2300      	movs	r3, #0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10b      	bne.n	800653c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006536:	bf00      	nop
 8006538:	bf00      	nop
 800653a:	e7fd      	b.n	8006538 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d103      	bne.n	800654a <xQueueGenericSendFromISR+0x6e>
 8006542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <xQueueGenericSendFromISR+0x72>
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <xQueueGenericSendFromISR+0x74>
 800654e:	2300      	movs	r3, #0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10b      	bne.n	800656c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	623b      	str	r3, [r7, #32]
}
 8006566:	bf00      	nop
 8006568:	bf00      	nop
 800656a:	e7fd      	b.n	8006568 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800656c:	f001 ff4c 	bl	8008408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006570:	f3ef 8211 	mrs	r2, BASEPRI
 8006574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	61fa      	str	r2, [r7, #28]
 8006586:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006588:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800658a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800658c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006594:	429a      	cmp	r2, r3
 8006596:	d302      	bcc.n	800659e <xQueueGenericSendFromISR+0xc2>
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2b02      	cmp	r3, #2
 800659c:	d12f      	bne.n	80065fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800659e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	68b9      	ldr	r1, [r7, #8]
 80065b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80065b4:	f000 f912 	bl	80067dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80065bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c0:	d112      	bne.n	80065e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d016      	beq.n	80065f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065cc:	3324      	adds	r3, #36	@ 0x24
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 ff04 	bl	80073dc <xTaskRemoveFromEventList>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00e      	beq.n	80065f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00b      	beq.n	80065f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	e007      	b.n	80065f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80065e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80065ec:	3301      	adds	r3, #1
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	b25a      	sxtb	r2, r3
 80065f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80065f8:	2301      	movs	r3, #1
 80065fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80065fc:	e001      	b.n	8006602 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006604:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800660c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800660e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006610:	4618      	mov	r0, r3
 8006612:	3740      	adds	r7, #64	@ 0x40
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08c      	sub	sp, #48	@ 0x30
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006624:	2300      	movs	r3, #0
 8006626:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800662c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10b      	bne.n	800664a <xQueueReceive+0x32>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	623b      	str	r3, [r7, #32]
}
 8006644:	bf00      	nop
 8006646:	bf00      	nop
 8006648:	e7fd      	b.n	8006646 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d103      	bne.n	8006658 <xQueueReceive+0x40>
 8006650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <xQueueReceive+0x44>
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <xQueueReceive+0x46>
 800665c:	2300      	movs	r3, #0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10b      	bne.n	800667a <xQueueReceive+0x62>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	61fb      	str	r3, [r7, #28]
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop
 8006678:	e7fd      	b.n	8006676 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800667a:	f001 f875 	bl	8007768 <xTaskGetSchedulerState>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d102      	bne.n	800668a <xQueueReceive+0x72>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <xQueueReceive+0x76>
 800668a:	2301      	movs	r3, #1
 800668c:	e000      	b.n	8006690 <xQueueReceive+0x78>
 800668e:	2300      	movs	r3, #0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10b      	bne.n	80066ac <xQueueReceive+0x94>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	61bb      	str	r3, [r7, #24]
}
 80066a6:	bf00      	nop
 80066a8:	bf00      	nop
 80066aa:	e7fd      	b.n	80066a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066ac:	f001 fdcc 	bl	8008248 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d01f      	beq.n	80066fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066bc:	68b9      	ldr	r1, [r7, #8]
 80066be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066c0:	f000 f8f6 	bl	80068b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	1e5a      	subs	r2, r3, #1
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00f      	beq.n	80066f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d6:	3310      	adds	r3, #16
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fe7f 	bl	80073dc <xTaskRemoveFromEventList>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066e4:	4b3c      	ldr	r3, [pc, #240]	@ (80067d8 <xQueueReceive+0x1c0>)
 80066e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066f4:	f001 fdda 	bl	80082ac <vPortExitCritical>
				return pdPASS;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e069      	b.n	80067d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d103      	bne.n	800670a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006702:	f001 fdd3 	bl	80082ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006706:	2300      	movs	r3, #0
 8006708:	e062      	b.n	80067d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800670a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670c:	2b00      	cmp	r3, #0
 800670e:	d106      	bne.n	800671e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006710:	f107 0310 	add.w	r3, r7, #16
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fec5 	bl	80074a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800671a:	2301      	movs	r3, #1
 800671c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800671e:	f001 fdc5 	bl	80082ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006722:	f000 fc2d 	bl	8006f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006726:	f001 fd8f 	bl	8008248 <vPortEnterCritical>
 800672a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006730:	b25b      	sxtb	r3, r3
 8006732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006736:	d103      	bne.n	8006740 <xQueueReceive+0x128>
 8006738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006742:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006746:	b25b      	sxtb	r3, r3
 8006748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674c:	d103      	bne.n	8006756 <xQueueReceive+0x13e>
 800674e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006756:	f001 fda9 	bl	80082ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800675a:	1d3a      	adds	r2, r7, #4
 800675c:	f107 0310 	add.w	r3, r7, #16
 8006760:	4611      	mov	r1, r2
 8006762:	4618      	mov	r0, r3
 8006764:	f000 feb4 	bl	80074d0 <xTaskCheckForTimeOut>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d123      	bne.n	80067b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800676e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006770:	f000 f916 	bl	80069a0 <prvIsQueueEmpty>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d017      	beq.n	80067aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800677a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677c:	3324      	adds	r3, #36	@ 0x24
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	4611      	mov	r1, r2
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fdd8 	bl	8007338 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800678a:	f000 f8b7 	bl	80068fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800678e:	f000 fc05 	bl	8006f9c <xTaskResumeAll>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d189      	bne.n	80066ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006798:	4b0f      	ldr	r3, [pc, #60]	@ (80067d8 <xQueueReceive+0x1c0>)
 800679a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	e780      	b.n	80066ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067ac:	f000 f8a6 	bl	80068fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067b0:	f000 fbf4 	bl	8006f9c <xTaskResumeAll>
 80067b4:	e77a      	b.n	80066ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067b8:	f000 f8a0 	bl	80068fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067bc:	f000 fbee 	bl	8006f9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067c2:	f000 f8ed 	bl	80069a0 <prvIsQueueEmpty>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f43f af6f 	beq.w	80066ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3730      	adds	r7, #48	@ 0x30
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	e000ed04 	.word	0xe000ed04

080067dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80067e8:	2300      	movs	r3, #0
 80067ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10d      	bne.n	8006816 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d14d      	bne.n	800689e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	4618      	mov	r0, r3
 8006808:	f000 ffcc 	bl	80077a4 <xTaskPriorityDisinherit>
 800680c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	609a      	str	r2, [r3, #8]
 8006814:	e043      	b.n	800689e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d119      	bne.n	8006850 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6858      	ldr	r0, [r3, #4]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006824:	461a      	mov	r2, r3
 8006826:	68b9      	ldr	r1, [r7, #8]
 8006828:	f002 f8a2 	bl	8008970 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006834:	441a      	add	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	429a      	cmp	r2, r3
 8006844:	d32b      	bcc.n	800689e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	605a      	str	r2, [r3, #4]
 800684e:	e026      	b.n	800689e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	68d8      	ldr	r0, [r3, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006858:	461a      	mov	r2, r3
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	f002 f888 	bl	8008970 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006868:	425b      	negs	r3, r3
 800686a:	441a      	add	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d207      	bcs.n	800688c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006884:	425b      	negs	r3, r3
 8006886:	441a      	add	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b02      	cmp	r3, #2
 8006890:	d105      	bne.n	800689e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	3b01      	subs	r3, #1
 800689c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80068a6:	697b      	ldr	r3, [r7, #20]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d018      	beq.n	80068f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ca:	441a      	add	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d303      	bcc.n	80068e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68d9      	ldr	r1, [r3, #12]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ec:	461a      	mov	r2, r3
 80068ee:	6838      	ldr	r0, [r7, #0]
 80068f0:	f002 f83e 	bl	8008970 <memcpy>
	}
}
 80068f4:	bf00      	nop
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006904:	f001 fca0 	bl	8008248 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800690e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006910:	e011      	b.n	8006936 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	d012      	beq.n	8006940 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3324      	adds	r3, #36	@ 0x24
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fd5c 	bl	80073dc <xTaskRemoveFromEventList>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800692a:	f000 fe35 	bl	8007598 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	3b01      	subs	r3, #1
 8006932:	b2db      	uxtb	r3, r3
 8006934:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800693a:	2b00      	cmp	r3, #0
 800693c:	dce9      	bgt.n	8006912 <prvUnlockQueue+0x16>
 800693e:	e000      	b.n	8006942 <prvUnlockQueue+0x46>
					break;
 8006940:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	22ff      	movs	r2, #255	@ 0xff
 8006946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800694a:	f001 fcaf 	bl	80082ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800694e:	f001 fc7b 	bl	8008248 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006958:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800695a:	e011      	b.n	8006980 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d012      	beq.n	800698a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3310      	adds	r3, #16
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fd37 	bl	80073dc <xTaskRemoveFromEventList>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006974:	f000 fe10 	bl	8007598 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	3b01      	subs	r3, #1
 800697c:	b2db      	uxtb	r3, r3
 800697e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006984:	2b00      	cmp	r3, #0
 8006986:	dce9      	bgt.n	800695c <prvUnlockQueue+0x60>
 8006988:	e000      	b.n	800698c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800698a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	22ff      	movs	r2, #255	@ 0xff
 8006990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006994:	f001 fc8a 	bl	80082ac <vPortExitCritical>
}
 8006998:	bf00      	nop
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069a8:	f001 fc4e 	bl	8008248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d102      	bne.n	80069ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80069b4:	2301      	movs	r3, #1
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	e001      	b.n	80069be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069be:	f001 fc75 	bl	80082ac <vPortExitCritical>

	return xReturn;
 80069c2:	68fb      	ldr	r3, [r7, #12]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069d4:	f001 fc38 	bl	8008248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d102      	bne.n	80069ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80069e4:	2301      	movs	r3, #1
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	e001      	b.n	80069ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069ee:	f001 fc5d 	bl	80082ac <vPortExitCritical>

	return xReturn;
 80069f2:	68fb      	ldr	r3, [r7, #12]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	e014      	b.n	8006a36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8006a4c <vQueueAddToRegistry+0x50>)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10b      	bne.n	8006a30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a18:	490c      	ldr	r1, [pc, #48]	@ (8006a4c <vQueueAddToRegistry+0x50>)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a22:	4a0a      	ldr	r2, [pc, #40]	@ (8006a4c <vQueueAddToRegistry+0x50>)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	4413      	add	r3, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a2e:	e006      	b.n	8006a3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3301      	adds	r3, #1
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b07      	cmp	r3, #7
 8006a3a:	d9e7      	bls.n	8006a0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a3c:	bf00      	nop
 8006a3e:	bf00      	nop
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	20001048 	.word	0x20001048

08006a50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a60:	f001 fbf2 	bl	8008248 <vPortEnterCritical>
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a6a:	b25b      	sxtb	r3, r3
 8006a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a70:	d103      	bne.n	8006a7a <vQueueWaitForMessageRestricted+0x2a>
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a80:	b25b      	sxtb	r3, r3
 8006a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a86:	d103      	bne.n	8006a90 <vQueueWaitForMessageRestricted+0x40>
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a90:	f001 fc0c 	bl	80082ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d106      	bne.n	8006aaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	3324      	adds	r3, #36	@ 0x24
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fc6d 	bl	8007384 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006aaa:	6978      	ldr	r0, [r7, #20]
 8006aac:	f7ff ff26 	bl	80068fc <prvUnlockQueue>
	}
 8006ab0:	bf00      	nop
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08e      	sub	sp, #56	@ 0x38
 8006abc:	af04      	add	r7, sp, #16
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10b      	bne.n	8006ae4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	623b      	str	r3, [r7, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	e7fd      	b.n	8006ae0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10b      	bne.n	8006b02 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	61fb      	str	r3, [r7, #28]
}
 8006afc:	bf00      	nop
 8006afe:	bf00      	nop
 8006b00:	e7fd      	b.n	8006afe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b02:	23a8      	movs	r3, #168	@ 0xa8
 8006b04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	2ba8      	cmp	r3, #168	@ 0xa8
 8006b0a:	d00b      	beq.n	8006b24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	61bb      	str	r3, [r7, #24]
}
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
 8006b22:	e7fd      	b.n	8006b20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d01e      	beq.n	8006b6a <xTaskCreateStatic+0xb2>
 8006b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d01b      	beq.n	8006b6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b44:	2300      	movs	r3, #0
 8006b46:	9303      	str	r3, [sp, #12]
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	9302      	str	r3, [sp, #8]
 8006b4c:	f107 0314 	add.w	r3, r7, #20
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	68b9      	ldr	r1, [r7, #8]
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 f851 	bl	8006c04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b64:	f000 f8f6 	bl	8006d54 <prvAddNewTaskToReadyList>
 8006b68:	e001      	b.n	8006b6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b6e:	697b      	ldr	r3, [r7, #20]
	}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3728      	adds	r7, #40	@ 0x28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08c      	sub	sp, #48	@ 0x30
 8006b7c:	af04      	add	r7, sp, #16
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	4613      	mov	r3, r2
 8006b86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b88:	88fb      	ldrh	r3, [r7, #6]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f001 fc7d 	bl	800848c <pvPortMalloc>
 8006b92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00e      	beq.n	8006bb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b9a:	20a8      	movs	r0, #168	@ 0xa8
 8006b9c:	f001 fc76 	bl	800848c <pvPortMalloc>
 8006ba0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d003      	beq.n	8006bb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bae:	e005      	b.n	8006bbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bb0:	6978      	ldr	r0, [r7, #20]
 8006bb2:	f001 fd39 	bl	8008628 <vPortFree>
 8006bb6:	e001      	b.n	8006bbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d017      	beq.n	8006bf2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bca:	88fa      	ldrh	r2, [r7, #6]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9303      	str	r3, [sp, #12]
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	9302      	str	r3, [sp, #8]
 8006bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f80f 	bl	8006c04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006be6:	69f8      	ldr	r0, [r7, #28]
 8006be8:	f000 f8b4 	bl	8006d54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bec:	2301      	movs	r3, #1
 8006bee:	61bb      	str	r3, [r7, #24]
 8006bf0:	e002      	b.n	8006bf8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
	}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3720      	adds	r7, #32
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	21a5      	movs	r1, #165	@ 0xa5
 8006c1e:	f001 fe23 	bl	8008868 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	f023 0307 	bic.w	r3, r3, #7
 8006c3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00b      	beq.n	8006c5e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	617b      	str	r3, [r7, #20]
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop
 8006c5c:	e7fd      	b.n	8006c5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01f      	beq.n	8006ca4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c64:	2300      	movs	r3, #0
 8006c66:	61fb      	str	r3, [r7, #28]
 8006c68:	e012      	b.n	8006c90 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	4413      	add	r3, r2
 8006c70:	7819      	ldrb	r1, [r3, #0]
 8006c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	4413      	add	r3, r2
 8006c78:	3334      	adds	r3, #52	@ 0x34
 8006c7a:	460a      	mov	r2, r1
 8006c7c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	4413      	add	r3, r2
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d006      	beq.n	8006c98 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	2b0f      	cmp	r3, #15
 8006c94:	d9e9      	bls.n	8006c6a <prvInitialiseNewTask+0x66>
 8006c96:	e000      	b.n	8006c9a <prvInitialiseNewTask+0x96>
			{
				break;
 8006c98:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ca2:	e003      	b.n	8006cac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cae:	2b37      	cmp	r3, #55	@ 0x37
 8006cb0:	d901      	bls.n	8006cb6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cb2:	2337      	movs	r3, #55	@ 0x37
 8006cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cc0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff f965 	bl	8005f9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd4:	3318      	adds	r3, #24
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff f960 	bl	8005f9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ce0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cf0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	3354      	adds	r3, #84	@ 0x54
 8006d06:	224c      	movs	r2, #76	@ 0x4c
 8006d08:	2100      	movs	r1, #0
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f001 fdac 	bl	8008868 <memset>
 8006d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d12:	4a0d      	ldr	r2, [pc, #52]	@ (8006d48 <prvInitialiseNewTask+0x144>)
 8006d14:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	4a0c      	ldr	r2, [pc, #48]	@ (8006d4c <prvInitialiseNewTask+0x148>)
 8006d1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d50 <prvInitialiseNewTask+0x14c>)
 8006d20:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	68f9      	ldr	r1, [r7, #12]
 8006d26:	69b8      	ldr	r0, [r7, #24]
 8006d28:	f001 f95a 	bl	8007fe0 <pxPortInitialiseStack>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d3e:	bf00      	nop
 8006d40:	3720      	adds	r7, #32
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	200052dc 	.word	0x200052dc
 8006d4c:	20005344 	.word	0x20005344
 8006d50:	200053ac 	.word	0x200053ac

08006d54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d5c:	f001 fa74 	bl	8008248 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d60:	4b2d      	ldr	r3, [pc, #180]	@ (8006e18 <prvAddNewTaskToReadyList+0xc4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3301      	adds	r3, #1
 8006d66:	4a2c      	ldr	r2, [pc, #176]	@ (8006e18 <prvAddNewTaskToReadyList+0xc4>)
 8006d68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8006e1c <prvAddNewTaskToReadyList+0xc8>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d109      	bne.n	8006d86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d72:	4a2a      	ldr	r2, [pc, #168]	@ (8006e1c <prvAddNewTaskToReadyList+0xc8>)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d78:	4b27      	ldr	r3, [pc, #156]	@ (8006e18 <prvAddNewTaskToReadyList+0xc4>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d110      	bne.n	8006da2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d80:	f000 fc2e 	bl	80075e0 <prvInitialiseTaskLists>
 8006d84:	e00d      	b.n	8006da2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d86:	4b26      	ldr	r3, [pc, #152]	@ (8006e20 <prvAddNewTaskToReadyList+0xcc>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d109      	bne.n	8006da2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d8e:	4b23      	ldr	r3, [pc, #140]	@ (8006e1c <prvAddNewTaskToReadyList+0xc8>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d802      	bhi.n	8006da2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8006e1c <prvAddNewTaskToReadyList+0xc8>)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006da2:	4b20      	ldr	r3, [pc, #128]	@ (8006e24 <prvAddNewTaskToReadyList+0xd0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3301      	adds	r3, #1
 8006da8:	4a1e      	ldr	r2, [pc, #120]	@ (8006e24 <prvAddNewTaskToReadyList+0xd0>)
 8006daa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006dac:	4b1d      	ldr	r3, [pc, #116]	@ (8006e24 <prvAddNewTaskToReadyList+0xd0>)
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e28 <prvAddNewTaskToReadyList+0xd4>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d903      	bls.n	8006dc8 <prvAddNewTaskToReadyList+0x74>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc4:	4a18      	ldr	r2, [pc, #96]	@ (8006e28 <prvAddNewTaskToReadyList+0xd4>)
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dcc:	4613      	mov	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4a15      	ldr	r2, [pc, #84]	@ (8006e2c <prvAddNewTaskToReadyList+0xd8>)
 8006dd6:	441a      	add	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4610      	mov	r0, r2
 8006de0:	f7ff f8e9 	bl	8005fb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006de4:	f001 fa62 	bl	80082ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006de8:	4b0d      	ldr	r3, [pc, #52]	@ (8006e20 <prvAddNewTaskToReadyList+0xcc>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00e      	beq.n	8006e0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006df0:	4b0a      	ldr	r3, [pc, #40]	@ (8006e1c <prvAddNewTaskToReadyList+0xc8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d207      	bcs.n	8006e0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8006e30 <prvAddNewTaskToReadyList+0xdc>)
 8006e00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	2000155c 	.word	0x2000155c
 8006e1c:	20001088 	.word	0x20001088
 8006e20:	20001568 	.word	0x20001568
 8006e24:	20001578 	.word	0x20001578
 8006e28:	20001564 	.word	0x20001564
 8006e2c:	2000108c 	.word	0x2000108c
 8006e30:	e000ed04 	.word	0xe000ed04

08006e34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d018      	beq.n	8006e78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e46:	4b14      	ldr	r3, [pc, #80]	@ (8006e98 <vTaskDelay+0x64>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00b      	beq.n	8006e66 <vTaskDelay+0x32>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	60bb      	str	r3, [r7, #8]
}
 8006e60:	bf00      	nop
 8006e62:	bf00      	nop
 8006e64:	e7fd      	b.n	8006e62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e66:	f000 f88b 	bl	8006f80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fd09 	bl	8007884 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e72:	f000 f893 	bl	8006f9c <xTaskResumeAll>
 8006e76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d107      	bne.n	8006e8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006e7e:	4b07      	ldr	r3, [pc, #28]	@ (8006e9c <vTaskDelay+0x68>)
 8006e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e8e:	bf00      	nop
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20001584 	.word	0x20001584
 8006e9c:	e000ed04 	.word	0xe000ed04

08006ea0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08a      	sub	sp, #40	@ 0x28
 8006ea4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006eae:	463a      	mov	r2, r7
 8006eb0:	1d39      	adds	r1, r7, #4
 8006eb2:	f107 0308 	add.w	r3, r7, #8
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff f81c 	bl	8005ef4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	9202      	str	r2, [sp, #8]
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	460a      	mov	r2, r1
 8006ece:	4924      	ldr	r1, [pc, #144]	@ (8006f60 <vTaskStartScheduler+0xc0>)
 8006ed0:	4824      	ldr	r0, [pc, #144]	@ (8006f64 <vTaskStartScheduler+0xc4>)
 8006ed2:	f7ff fdf1 	bl	8006ab8 <xTaskCreateStatic>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	4a23      	ldr	r2, [pc, #140]	@ (8006f68 <vTaskStartScheduler+0xc8>)
 8006eda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006edc:	4b22      	ldr	r3, [pc, #136]	@ (8006f68 <vTaskStartScheduler+0xc8>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	617b      	str	r3, [r7, #20]
 8006ee8:	e001      	b.n	8006eee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d102      	bne.n	8006efa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ef4:	f000 fd1a 	bl	800792c <xTimerCreateTimerTask>
 8006ef8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d11b      	bne.n	8006f38 <vTaskStartScheduler+0x98>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	613b      	str	r3, [r7, #16]
}
 8006f12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f14:	4b15      	ldr	r3, [pc, #84]	@ (8006f6c <vTaskStartScheduler+0xcc>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3354      	adds	r3, #84	@ 0x54
 8006f1a:	4a15      	ldr	r2, [pc, #84]	@ (8006f70 <vTaskStartScheduler+0xd0>)
 8006f1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f1e:	4b15      	ldr	r3, [pc, #84]	@ (8006f74 <vTaskStartScheduler+0xd4>)
 8006f20:	f04f 32ff 	mov.w	r2, #4294967295
 8006f24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f26:	4b14      	ldr	r3, [pc, #80]	@ (8006f78 <vTaskStartScheduler+0xd8>)
 8006f28:	2201      	movs	r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f2c:	4b13      	ldr	r3, [pc, #76]	@ (8006f7c <vTaskStartScheduler+0xdc>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f32:	f001 f8e5 	bl	8008100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f36:	e00f      	b.n	8006f58 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3e:	d10b      	bne.n	8006f58 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	60fb      	str	r3, [r7, #12]
}
 8006f52:	bf00      	nop
 8006f54:	bf00      	nop
 8006f56:	e7fd      	b.n	8006f54 <vTaskStartScheduler+0xb4>
}
 8006f58:	bf00      	nop
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	08008a7c 	.word	0x08008a7c
 8006f64:	080075b1 	.word	0x080075b1
 8006f68:	20001580 	.word	0x20001580
 8006f6c:	20001088 	.word	0x20001088
 8006f70:	20000010 	.word	0x20000010
 8006f74:	2000157c 	.word	0x2000157c
 8006f78:	20001568 	.word	0x20001568
 8006f7c:	20001560 	.word	0x20001560

08006f80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f80:	b480      	push	{r7}
 8006f82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f84:	4b04      	ldr	r3, [pc, #16]	@ (8006f98 <vTaskSuspendAll+0x18>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	4a03      	ldr	r2, [pc, #12]	@ (8006f98 <vTaskSuspendAll+0x18>)
 8006f8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f8e:	bf00      	nop
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	20001584 	.word	0x20001584

08006f9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006faa:	4b42      	ldr	r3, [pc, #264]	@ (80070b4 <xTaskResumeAll+0x118>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10b      	bne.n	8006fca <xTaskResumeAll+0x2e>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	603b      	str	r3, [r7, #0]
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop
 8006fc8:	e7fd      	b.n	8006fc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fca:	f001 f93d 	bl	8008248 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fce:	4b39      	ldr	r3, [pc, #228]	@ (80070b4 <xTaskResumeAll+0x118>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	4a37      	ldr	r2, [pc, #220]	@ (80070b4 <xTaskResumeAll+0x118>)
 8006fd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fd8:	4b36      	ldr	r3, [pc, #216]	@ (80070b4 <xTaskResumeAll+0x118>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d162      	bne.n	80070a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fe0:	4b35      	ldr	r3, [pc, #212]	@ (80070b8 <xTaskResumeAll+0x11c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d05e      	beq.n	80070a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fe8:	e02f      	b.n	800704a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fea:	4b34      	ldr	r3, [pc, #208]	@ (80070bc <xTaskResumeAll+0x120>)
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3318      	adds	r3, #24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff f83a 	bl	8006070 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3304      	adds	r3, #4
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff f835 	bl	8006070 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800700a:	4b2d      	ldr	r3, [pc, #180]	@ (80070c0 <xTaskResumeAll+0x124>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	d903      	bls.n	800701a <xTaskResumeAll+0x7e>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007016:	4a2a      	ldr	r2, [pc, #168]	@ (80070c0 <xTaskResumeAll+0x124>)
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4a27      	ldr	r2, [pc, #156]	@ (80070c4 <xTaskResumeAll+0x128>)
 8007028:	441a      	add	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3304      	adds	r3, #4
 800702e:	4619      	mov	r1, r3
 8007030:	4610      	mov	r0, r2
 8007032:	f7fe ffc0 	bl	8005fb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800703a:	4b23      	ldr	r3, [pc, #140]	@ (80070c8 <xTaskResumeAll+0x12c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007040:	429a      	cmp	r2, r3
 8007042:	d302      	bcc.n	800704a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007044:	4b21      	ldr	r3, [pc, #132]	@ (80070cc <xTaskResumeAll+0x130>)
 8007046:	2201      	movs	r2, #1
 8007048:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800704a:	4b1c      	ldr	r3, [pc, #112]	@ (80070bc <xTaskResumeAll+0x120>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1cb      	bne.n	8006fea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007058:	f000 fb66 	bl	8007728 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800705c:	4b1c      	ldr	r3, [pc, #112]	@ (80070d0 <xTaskResumeAll+0x134>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d010      	beq.n	800708a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007068:	f000 f846 	bl	80070f8 <xTaskIncrementTick>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007072:	4b16      	ldr	r3, [pc, #88]	@ (80070cc <xTaskResumeAll+0x130>)
 8007074:	2201      	movs	r2, #1
 8007076:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3b01      	subs	r3, #1
 800707c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1f1      	bne.n	8007068 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007084:	4b12      	ldr	r3, [pc, #72]	@ (80070d0 <xTaskResumeAll+0x134>)
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800708a:	4b10      	ldr	r3, [pc, #64]	@ (80070cc <xTaskResumeAll+0x130>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d009      	beq.n	80070a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007092:	2301      	movs	r3, #1
 8007094:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007096:	4b0f      	ldr	r3, [pc, #60]	@ (80070d4 <xTaskResumeAll+0x138>)
 8007098:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070a6:	f001 f901 	bl	80082ac <vPortExitCritical>

	return xAlreadyYielded;
 80070aa:	68bb      	ldr	r3, [r7, #8]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20001584 	.word	0x20001584
 80070b8:	2000155c 	.word	0x2000155c
 80070bc:	2000151c 	.word	0x2000151c
 80070c0:	20001564 	.word	0x20001564
 80070c4:	2000108c 	.word	0x2000108c
 80070c8:	20001088 	.word	0x20001088
 80070cc:	20001570 	.word	0x20001570
 80070d0:	2000156c 	.word	0x2000156c
 80070d4:	e000ed04 	.word	0xe000ed04

080070d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070de:	4b05      	ldr	r3, [pc, #20]	@ (80070f4 <xTaskGetTickCount+0x1c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070e4:	687b      	ldr	r3, [r7, #4]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	20001560 	.word	0x20001560

080070f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070fe:	2300      	movs	r3, #0
 8007100:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007102:	4b4f      	ldr	r3, [pc, #316]	@ (8007240 <xTaskIncrementTick+0x148>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	f040 8090 	bne.w	800722c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800710c:	4b4d      	ldr	r3, [pc, #308]	@ (8007244 <xTaskIncrementTick+0x14c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3301      	adds	r3, #1
 8007112:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007114:	4a4b      	ldr	r2, [pc, #300]	@ (8007244 <xTaskIncrementTick+0x14c>)
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d121      	bne.n	8007164 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007120:	4b49      	ldr	r3, [pc, #292]	@ (8007248 <xTaskIncrementTick+0x150>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00b      	beq.n	8007142 <xTaskIncrementTick+0x4a>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	603b      	str	r3, [r7, #0]
}
 800713c:	bf00      	nop
 800713e:	bf00      	nop
 8007140:	e7fd      	b.n	800713e <xTaskIncrementTick+0x46>
 8007142:	4b41      	ldr	r3, [pc, #260]	@ (8007248 <xTaskIncrementTick+0x150>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	4b40      	ldr	r3, [pc, #256]	@ (800724c <xTaskIncrementTick+0x154>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a3e      	ldr	r2, [pc, #248]	@ (8007248 <xTaskIncrementTick+0x150>)
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	4a3e      	ldr	r2, [pc, #248]	@ (800724c <xTaskIncrementTick+0x154>)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	4b3e      	ldr	r3, [pc, #248]	@ (8007250 <xTaskIncrementTick+0x158>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3301      	adds	r3, #1
 800715c:	4a3c      	ldr	r2, [pc, #240]	@ (8007250 <xTaskIncrementTick+0x158>)
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	f000 fae2 	bl	8007728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007164:	4b3b      	ldr	r3, [pc, #236]	@ (8007254 <xTaskIncrementTick+0x15c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	429a      	cmp	r2, r3
 800716c:	d349      	bcc.n	8007202 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800716e:	4b36      	ldr	r3, [pc, #216]	@ (8007248 <xTaskIncrementTick+0x150>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d104      	bne.n	8007182 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007178:	4b36      	ldr	r3, [pc, #216]	@ (8007254 <xTaskIncrementTick+0x15c>)
 800717a:	f04f 32ff 	mov.w	r2, #4294967295
 800717e:	601a      	str	r2, [r3, #0]
					break;
 8007180:	e03f      	b.n	8007202 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007182:	4b31      	ldr	r3, [pc, #196]	@ (8007248 <xTaskIncrementTick+0x150>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	429a      	cmp	r2, r3
 8007198:	d203      	bcs.n	80071a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800719a:	4a2e      	ldr	r2, [pc, #184]	@ (8007254 <xTaskIncrementTick+0x15c>)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071a0:	e02f      	b.n	8007202 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	3304      	adds	r3, #4
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe ff62 	bl	8006070 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d004      	beq.n	80071be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	3318      	adds	r3, #24
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe ff59 	bl	8006070 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c2:	4b25      	ldr	r3, [pc, #148]	@ (8007258 <xTaskIncrementTick+0x160>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d903      	bls.n	80071d2 <xTaskIncrementTick+0xda>
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ce:	4a22      	ldr	r2, [pc, #136]	@ (8007258 <xTaskIncrementTick+0x160>)
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4a1f      	ldr	r2, [pc, #124]	@ (800725c <xTaskIncrementTick+0x164>)
 80071e0:	441a      	add	r2, r3
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	3304      	adds	r3, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7fe fee4 	bl	8005fb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007260 <xTaskIncrementTick+0x168>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d3b8      	bcc.n	800716e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80071fc:	2301      	movs	r3, #1
 80071fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007200:	e7b5      	b.n	800716e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007202:	4b17      	ldr	r3, [pc, #92]	@ (8007260 <xTaskIncrementTick+0x168>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007208:	4914      	ldr	r1, [pc, #80]	@ (800725c <xTaskIncrementTick+0x164>)
 800720a:	4613      	mov	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	440b      	add	r3, r1
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d901      	bls.n	800721e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800721a:	2301      	movs	r3, #1
 800721c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800721e:	4b11      	ldr	r3, [pc, #68]	@ (8007264 <xTaskIncrementTick+0x16c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d007      	beq.n	8007236 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007226:	2301      	movs	r3, #1
 8007228:	617b      	str	r3, [r7, #20]
 800722a:	e004      	b.n	8007236 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800722c:	4b0e      	ldr	r3, [pc, #56]	@ (8007268 <xTaskIncrementTick+0x170>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3301      	adds	r3, #1
 8007232:	4a0d      	ldr	r2, [pc, #52]	@ (8007268 <xTaskIncrementTick+0x170>)
 8007234:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007236:	697b      	ldr	r3, [r7, #20]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20001584 	.word	0x20001584
 8007244:	20001560 	.word	0x20001560
 8007248:	20001514 	.word	0x20001514
 800724c:	20001518 	.word	0x20001518
 8007250:	20001574 	.word	0x20001574
 8007254:	2000157c 	.word	0x2000157c
 8007258:	20001564 	.word	0x20001564
 800725c:	2000108c 	.word	0x2000108c
 8007260:	20001088 	.word	0x20001088
 8007264:	20001570 	.word	0x20001570
 8007268:	2000156c 	.word	0x2000156c

0800726c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007272:	4b2b      	ldr	r3, [pc, #172]	@ (8007320 <vTaskSwitchContext+0xb4>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800727a:	4b2a      	ldr	r3, [pc, #168]	@ (8007324 <vTaskSwitchContext+0xb8>)
 800727c:	2201      	movs	r2, #1
 800727e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007280:	e047      	b.n	8007312 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007282:	4b28      	ldr	r3, [pc, #160]	@ (8007324 <vTaskSwitchContext+0xb8>)
 8007284:	2200      	movs	r2, #0
 8007286:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007288:	4b27      	ldr	r3, [pc, #156]	@ (8007328 <vTaskSwitchContext+0xbc>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	e011      	b.n	80072b4 <vTaskSwitchContext+0x48>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10b      	bne.n	80072ae <vTaskSwitchContext+0x42>
	__asm volatile
 8007296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729a:	f383 8811 	msr	BASEPRI, r3
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	607b      	str	r3, [r7, #4]
}
 80072a8:	bf00      	nop
 80072aa:	bf00      	nop
 80072ac:	e7fd      	b.n	80072aa <vTaskSwitchContext+0x3e>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	491d      	ldr	r1, [pc, #116]	@ (800732c <vTaskSwitchContext+0xc0>)
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	440b      	add	r3, r1
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0e3      	beq.n	8007290 <vTaskSwitchContext+0x24>
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4a16      	ldr	r2, [pc, #88]	@ (800732c <vTaskSwitchContext+0xc0>)
 80072d4:	4413      	add	r3, r2
 80072d6:	60bb      	str	r3, [r7, #8]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	605a      	str	r2, [r3, #4]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	3308      	adds	r3, #8
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d104      	bne.n	80072f8 <vTaskSwitchContext+0x8c>
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	605a      	str	r2, [r3, #4]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	4a0c      	ldr	r2, [pc, #48]	@ (8007330 <vTaskSwitchContext+0xc4>)
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	4a09      	ldr	r2, [pc, #36]	@ (8007328 <vTaskSwitchContext+0xbc>)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007308:	4b09      	ldr	r3, [pc, #36]	@ (8007330 <vTaskSwitchContext+0xc4>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3354      	adds	r3, #84	@ 0x54
 800730e:	4a09      	ldr	r2, [pc, #36]	@ (8007334 <vTaskSwitchContext+0xc8>)
 8007310:	6013      	str	r3, [r2, #0]
}
 8007312:	bf00      	nop
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	20001584 	.word	0x20001584
 8007324:	20001570 	.word	0x20001570
 8007328:	20001564 	.word	0x20001564
 800732c:	2000108c 	.word	0x2000108c
 8007330:	20001088 	.word	0x20001088
 8007334:	20000010 	.word	0x20000010

08007338 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10b      	bne.n	8007360 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	60fb      	str	r3, [r7, #12]
}
 800735a:	bf00      	nop
 800735c:	bf00      	nop
 800735e:	e7fd      	b.n	800735c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007360:	4b07      	ldr	r3, [pc, #28]	@ (8007380 <vTaskPlaceOnEventList+0x48>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3318      	adds	r3, #24
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7fe fe48 	bl	8005ffe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800736e:	2101      	movs	r1, #1
 8007370:	6838      	ldr	r0, [r7, #0]
 8007372:	f000 fa87 	bl	8007884 <prvAddCurrentTaskToDelayedList>
}
 8007376:	bf00      	nop
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20001088 	.word	0x20001088

08007384 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10b      	bne.n	80073ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	617b      	str	r3, [r7, #20]
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	e7fd      	b.n	80073aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073ae:	4b0a      	ldr	r3, [pc, #40]	@ (80073d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3318      	adds	r3, #24
 80073b4:	4619      	mov	r1, r3
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7fe fdfd 	bl	8005fb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80073c2:	f04f 33ff 	mov.w	r3, #4294967295
 80073c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	68b8      	ldr	r0, [r7, #8]
 80073cc:	f000 fa5a 	bl	8007884 <prvAddCurrentTaskToDelayedList>
	}
 80073d0:	bf00      	nop
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	20001088 	.word	0x20001088

080073dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10b      	bne.n	800740a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	60fb      	str	r3, [r7, #12]
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	e7fd      	b.n	8007406 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3318      	adds	r3, #24
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fe2e 	bl	8006070 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007414:	4b1d      	ldr	r3, [pc, #116]	@ (800748c <xTaskRemoveFromEventList+0xb0>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d11d      	bne.n	8007458 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	3304      	adds	r3, #4
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe fe25 	bl	8006070 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800742a:	4b19      	ldr	r3, [pc, #100]	@ (8007490 <xTaskRemoveFromEventList+0xb4>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d903      	bls.n	800743a <xTaskRemoveFromEventList+0x5e>
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007436:	4a16      	ldr	r2, [pc, #88]	@ (8007490 <xTaskRemoveFromEventList+0xb4>)
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4a13      	ldr	r2, [pc, #76]	@ (8007494 <xTaskRemoveFromEventList+0xb8>)
 8007448:	441a      	add	r2, r3
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	3304      	adds	r3, #4
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7fe fdb0 	bl	8005fb6 <vListInsertEnd>
 8007456:	e005      	b.n	8007464 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	3318      	adds	r3, #24
 800745c:	4619      	mov	r1, r3
 800745e:	480e      	ldr	r0, [pc, #56]	@ (8007498 <xTaskRemoveFromEventList+0xbc>)
 8007460:	f7fe fda9 	bl	8005fb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007468:	4b0c      	ldr	r3, [pc, #48]	@ (800749c <xTaskRemoveFromEventList+0xc0>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746e:	429a      	cmp	r2, r3
 8007470:	d905      	bls.n	800747e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007472:	2301      	movs	r3, #1
 8007474:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007476:	4b0a      	ldr	r3, [pc, #40]	@ (80074a0 <xTaskRemoveFromEventList+0xc4>)
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	e001      	b.n	8007482 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007482:	697b      	ldr	r3, [r7, #20]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20001584 	.word	0x20001584
 8007490:	20001564 	.word	0x20001564
 8007494:	2000108c 	.word	0x2000108c
 8007498:	2000151c 	.word	0x2000151c
 800749c:	20001088 	.word	0x20001088
 80074a0:	20001570 	.word	0x20001570

080074a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074ac:	4b06      	ldr	r3, [pc, #24]	@ (80074c8 <vTaskInternalSetTimeOutState+0x24>)
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074b4:	4b05      	ldr	r3, [pc, #20]	@ (80074cc <vTaskInternalSetTimeOutState+0x28>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	605a      	str	r2, [r3, #4]
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	20001574 	.word	0x20001574
 80074cc:	20001560 	.word	0x20001560

080074d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10b      	bne.n	80074f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	613b      	str	r3, [r7, #16]
}
 80074f2:	bf00      	nop
 80074f4:	bf00      	nop
 80074f6:	e7fd      	b.n	80074f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10b      	bne.n	8007516 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	60fb      	str	r3, [r7, #12]
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop
 8007514:	e7fd      	b.n	8007512 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007516:	f000 fe97 	bl	8008248 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800751a:	4b1d      	ldr	r3, [pc, #116]	@ (8007590 <xTaskCheckForTimeOut+0xc0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007532:	d102      	bne.n	800753a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007534:	2300      	movs	r3, #0
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	e023      	b.n	8007582 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	4b15      	ldr	r3, [pc, #84]	@ (8007594 <xTaskCheckForTimeOut+0xc4>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	429a      	cmp	r2, r3
 8007544:	d007      	beq.n	8007556 <xTaskCheckForTimeOut+0x86>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	429a      	cmp	r2, r3
 800754e:	d302      	bcc.n	8007556 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007550:	2301      	movs	r3, #1
 8007552:	61fb      	str	r3, [r7, #28]
 8007554:	e015      	b.n	8007582 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	429a      	cmp	r2, r3
 800755e:	d20b      	bcs.n	8007578 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	1ad2      	subs	r2, r2, r3
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff ff99 	bl	80074a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007572:	2300      	movs	r3, #0
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	e004      	b.n	8007582 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800757e:	2301      	movs	r3, #1
 8007580:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007582:	f000 fe93 	bl	80082ac <vPortExitCritical>

	return xReturn;
 8007586:	69fb      	ldr	r3, [r7, #28]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3720      	adds	r7, #32
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	20001560 	.word	0x20001560
 8007594:	20001574 	.word	0x20001574

08007598 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800759c:	4b03      	ldr	r3, [pc, #12]	@ (80075ac <vTaskMissedYield+0x14>)
 800759e:	2201      	movs	r2, #1
 80075a0:	601a      	str	r2, [r3, #0]
}
 80075a2:	bf00      	nop
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	20001570 	.word	0x20001570

080075b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075b8:	f000 f852 	bl	8007660 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075bc:	4b06      	ldr	r3, [pc, #24]	@ (80075d8 <prvIdleTask+0x28>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d9f9      	bls.n	80075b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075c4:	4b05      	ldr	r3, [pc, #20]	@ (80075dc <prvIdleTask+0x2c>)
 80075c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075d4:	e7f0      	b.n	80075b8 <prvIdleTask+0x8>
 80075d6:	bf00      	nop
 80075d8:	2000108c 	.word	0x2000108c
 80075dc:	e000ed04 	.word	0xe000ed04

080075e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075e6:	2300      	movs	r3, #0
 80075e8:	607b      	str	r3, [r7, #4]
 80075ea:	e00c      	b.n	8007606 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4a12      	ldr	r2, [pc, #72]	@ (8007640 <prvInitialiseTaskLists+0x60>)
 80075f8:	4413      	add	r3, r2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fcae 	bl	8005f5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3301      	adds	r3, #1
 8007604:	607b      	str	r3, [r7, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b37      	cmp	r3, #55	@ 0x37
 800760a:	d9ef      	bls.n	80075ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800760c:	480d      	ldr	r0, [pc, #52]	@ (8007644 <prvInitialiseTaskLists+0x64>)
 800760e:	f7fe fca5 	bl	8005f5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007612:	480d      	ldr	r0, [pc, #52]	@ (8007648 <prvInitialiseTaskLists+0x68>)
 8007614:	f7fe fca2 	bl	8005f5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007618:	480c      	ldr	r0, [pc, #48]	@ (800764c <prvInitialiseTaskLists+0x6c>)
 800761a:	f7fe fc9f 	bl	8005f5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800761e:	480c      	ldr	r0, [pc, #48]	@ (8007650 <prvInitialiseTaskLists+0x70>)
 8007620:	f7fe fc9c 	bl	8005f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007624:	480b      	ldr	r0, [pc, #44]	@ (8007654 <prvInitialiseTaskLists+0x74>)
 8007626:	f7fe fc99 	bl	8005f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800762a:	4b0b      	ldr	r3, [pc, #44]	@ (8007658 <prvInitialiseTaskLists+0x78>)
 800762c:	4a05      	ldr	r2, [pc, #20]	@ (8007644 <prvInitialiseTaskLists+0x64>)
 800762e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007630:	4b0a      	ldr	r3, [pc, #40]	@ (800765c <prvInitialiseTaskLists+0x7c>)
 8007632:	4a05      	ldr	r2, [pc, #20]	@ (8007648 <prvInitialiseTaskLists+0x68>)
 8007634:	601a      	str	r2, [r3, #0]
}
 8007636:	bf00      	nop
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	2000108c 	.word	0x2000108c
 8007644:	200014ec 	.word	0x200014ec
 8007648:	20001500 	.word	0x20001500
 800764c:	2000151c 	.word	0x2000151c
 8007650:	20001530 	.word	0x20001530
 8007654:	20001548 	.word	0x20001548
 8007658:	20001514 	.word	0x20001514
 800765c:	20001518 	.word	0x20001518

08007660 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007666:	e019      	b.n	800769c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007668:	f000 fdee 	bl	8008248 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766c:	4b10      	ldr	r3, [pc, #64]	@ (80076b0 <prvCheckTasksWaitingTermination+0x50>)
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3304      	adds	r3, #4
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe fcf9 	bl	8006070 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800767e:	4b0d      	ldr	r3, [pc, #52]	@ (80076b4 <prvCheckTasksWaitingTermination+0x54>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3b01      	subs	r3, #1
 8007684:	4a0b      	ldr	r2, [pc, #44]	@ (80076b4 <prvCheckTasksWaitingTermination+0x54>)
 8007686:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007688:	4b0b      	ldr	r3, [pc, #44]	@ (80076b8 <prvCheckTasksWaitingTermination+0x58>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3b01      	subs	r3, #1
 800768e:	4a0a      	ldr	r2, [pc, #40]	@ (80076b8 <prvCheckTasksWaitingTermination+0x58>)
 8007690:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007692:	f000 fe0b 	bl	80082ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f810 	bl	80076bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800769c:	4b06      	ldr	r3, [pc, #24]	@ (80076b8 <prvCheckTasksWaitingTermination+0x58>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e1      	bne.n	8007668 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	20001530 	.word	0x20001530
 80076b4:	2000155c 	.word	0x2000155c
 80076b8:	20001544 	.word	0x20001544

080076bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3354      	adds	r3, #84	@ 0x54
 80076c8:	4618      	mov	r0, r3
 80076ca:	f001 f8d5 	bl	8008878 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d108      	bne.n	80076ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 ffa3 	bl	8008628 <vPortFree>
				vPortFree( pxTCB );
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 ffa0 	bl	8008628 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076e8:	e019      	b.n	800771e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d103      	bne.n	80076fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 ff97 	bl	8008628 <vPortFree>
	}
 80076fa:	e010      	b.n	800771e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007702:	2b02      	cmp	r3, #2
 8007704:	d00b      	beq.n	800771e <prvDeleteTCB+0x62>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	60fb      	str	r3, [r7, #12]
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	e7fd      	b.n	800771a <prvDeleteTCB+0x5e>
	}
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800772e:	4b0c      	ldr	r3, [pc, #48]	@ (8007760 <prvResetNextTaskUnblockTime+0x38>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d104      	bne.n	8007742 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007738:	4b0a      	ldr	r3, [pc, #40]	@ (8007764 <prvResetNextTaskUnblockTime+0x3c>)
 800773a:	f04f 32ff 	mov.w	r2, #4294967295
 800773e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007740:	e008      	b.n	8007754 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007742:	4b07      	ldr	r3, [pc, #28]	@ (8007760 <prvResetNextTaskUnblockTime+0x38>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	4a04      	ldr	r2, [pc, #16]	@ (8007764 <prvResetNextTaskUnblockTime+0x3c>)
 8007752:	6013      	str	r3, [r2, #0]
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	20001514 	.word	0x20001514
 8007764:	2000157c 	.word	0x2000157c

08007768 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800776e:	4b0b      	ldr	r3, [pc, #44]	@ (800779c <xTaskGetSchedulerState+0x34>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d102      	bne.n	800777c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007776:	2301      	movs	r3, #1
 8007778:	607b      	str	r3, [r7, #4]
 800777a:	e008      	b.n	800778e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800777c:	4b08      	ldr	r3, [pc, #32]	@ (80077a0 <xTaskGetSchedulerState+0x38>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d102      	bne.n	800778a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007784:	2302      	movs	r3, #2
 8007786:	607b      	str	r3, [r7, #4]
 8007788:	e001      	b.n	800778e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800778a:	2300      	movs	r3, #0
 800778c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800778e:	687b      	ldr	r3, [r7, #4]
	}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	20001568 	.word	0x20001568
 80077a0:	20001584 	.word	0x20001584

080077a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077b0:	2300      	movs	r3, #0
 80077b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d058      	beq.n	800786c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007878 <xTaskPriorityDisinherit+0xd4>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d00b      	beq.n	80077dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	60fb      	str	r3, [r7, #12]
}
 80077d6:	bf00      	nop
 80077d8:	bf00      	nop
 80077da:	e7fd      	b.n	80077d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10b      	bne.n	80077fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	60bb      	str	r3, [r7, #8]
}
 80077f6:	bf00      	nop
 80077f8:	bf00      	nop
 80077fa:	e7fd      	b.n	80077f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007800:	1e5a      	subs	r2, r3, #1
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800780e:	429a      	cmp	r2, r3
 8007810:	d02c      	beq.n	800786c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007816:	2b00      	cmp	r3, #0
 8007818:	d128      	bne.n	800786c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	3304      	adds	r3, #4
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe fc26 	bl	8006070 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007830:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800783c:	4b0f      	ldr	r3, [pc, #60]	@ (800787c <xTaskPriorityDisinherit+0xd8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d903      	bls.n	800784c <xTaskPriorityDisinherit+0xa8>
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007848:	4a0c      	ldr	r2, [pc, #48]	@ (800787c <xTaskPriorityDisinherit+0xd8>)
 800784a:	6013      	str	r3, [r2, #0]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4a09      	ldr	r2, [pc, #36]	@ (8007880 <xTaskPriorityDisinherit+0xdc>)
 800785a:	441a      	add	r2, r3
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	3304      	adds	r3, #4
 8007860:	4619      	mov	r1, r3
 8007862:	4610      	mov	r0, r2
 8007864:	f7fe fba7 	bl	8005fb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007868:	2301      	movs	r3, #1
 800786a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800786c:	697b      	ldr	r3, [r7, #20]
	}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20001088 	.word	0x20001088
 800787c:	20001564 	.word	0x20001564
 8007880:	2000108c 	.word	0x2000108c

08007884 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800788e:	4b21      	ldr	r3, [pc, #132]	@ (8007914 <prvAddCurrentTaskToDelayedList+0x90>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007894:	4b20      	ldr	r3, [pc, #128]	@ (8007918 <prvAddCurrentTaskToDelayedList+0x94>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3304      	adds	r3, #4
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fbe8 	bl	8006070 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a6:	d10a      	bne.n	80078be <prvAddCurrentTaskToDelayedList+0x3a>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d007      	beq.n	80078be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007918 <prvAddCurrentTaskToDelayedList+0x94>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3304      	adds	r3, #4
 80078b4:	4619      	mov	r1, r3
 80078b6:	4819      	ldr	r0, [pc, #100]	@ (800791c <prvAddCurrentTaskToDelayedList+0x98>)
 80078b8:	f7fe fb7d 	bl	8005fb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078bc:	e026      	b.n	800790c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4413      	add	r3, r2
 80078c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078c6:	4b14      	ldr	r3, [pc, #80]	@ (8007918 <prvAddCurrentTaskToDelayedList+0x94>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d209      	bcs.n	80078ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078d6:	4b12      	ldr	r3, [pc, #72]	@ (8007920 <prvAddCurrentTaskToDelayedList+0x9c>)
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	4b0f      	ldr	r3, [pc, #60]	@ (8007918 <prvAddCurrentTaskToDelayedList+0x94>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3304      	adds	r3, #4
 80078e0:	4619      	mov	r1, r3
 80078e2:	4610      	mov	r0, r2
 80078e4:	f7fe fb8b 	bl	8005ffe <vListInsert>
}
 80078e8:	e010      	b.n	800790c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007924 <prvAddCurrentTaskToDelayedList+0xa0>)
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007918 <prvAddCurrentTaskToDelayedList+0x94>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3304      	adds	r3, #4
 80078f4:	4619      	mov	r1, r3
 80078f6:	4610      	mov	r0, r2
 80078f8:	f7fe fb81 	bl	8005ffe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007928 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	429a      	cmp	r2, r3
 8007904:	d202      	bcs.n	800790c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007906:	4a08      	ldr	r2, [pc, #32]	@ (8007928 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	6013      	str	r3, [r2, #0]
}
 800790c:	bf00      	nop
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	20001560 	.word	0x20001560
 8007918:	20001088 	.word	0x20001088
 800791c:	20001548 	.word	0x20001548
 8007920:	20001518 	.word	0x20001518
 8007924:	20001514 	.word	0x20001514
 8007928:	2000157c 	.word	0x2000157c

0800792c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08a      	sub	sp, #40	@ 0x28
 8007930:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007932:	2300      	movs	r3, #0
 8007934:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007936:	f000 fb13 	bl	8007f60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800793a:	4b1d      	ldr	r3, [pc, #116]	@ (80079b0 <xTimerCreateTimerTask+0x84>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d021      	beq.n	8007986 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800794a:	1d3a      	adds	r2, r7, #4
 800794c:	f107 0108 	add.w	r1, r7, #8
 8007950:	f107 030c 	add.w	r3, r7, #12
 8007954:	4618      	mov	r0, r3
 8007956:	f7fe fae7 	bl	8005f28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	9202      	str	r2, [sp, #8]
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	2302      	movs	r3, #2
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	2300      	movs	r3, #0
 800796a:	460a      	mov	r2, r1
 800796c:	4911      	ldr	r1, [pc, #68]	@ (80079b4 <xTimerCreateTimerTask+0x88>)
 800796e:	4812      	ldr	r0, [pc, #72]	@ (80079b8 <xTimerCreateTimerTask+0x8c>)
 8007970:	f7ff f8a2 	bl	8006ab8 <xTaskCreateStatic>
 8007974:	4603      	mov	r3, r0
 8007976:	4a11      	ldr	r2, [pc, #68]	@ (80079bc <xTimerCreateTimerTask+0x90>)
 8007978:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800797a:	4b10      	ldr	r3, [pc, #64]	@ (80079bc <xTimerCreateTimerTask+0x90>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007982:	2301      	movs	r3, #1
 8007984:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10b      	bne.n	80079a4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	613b      	str	r3, [r7, #16]
}
 800799e:	bf00      	nop
 80079a0:	bf00      	nop
 80079a2:	e7fd      	b.n	80079a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80079a4:	697b      	ldr	r3, [r7, #20]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	200015b8 	.word	0x200015b8
 80079b4:	08008a84 	.word	0x08008a84
 80079b8:	08007af9 	.word	0x08007af9
 80079bc:	200015bc 	.word	0x200015bc

080079c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08a      	sub	sp, #40	@ 0x28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10b      	bne.n	80079f0 <xTimerGenericCommand+0x30>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	623b      	str	r3, [r7, #32]
}
 80079ea:	bf00      	nop
 80079ec:	bf00      	nop
 80079ee:	e7fd      	b.n	80079ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079f0:	4b19      	ldr	r3, [pc, #100]	@ (8007a58 <xTimerGenericCommand+0x98>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d02a      	beq.n	8007a4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2b05      	cmp	r3, #5
 8007a08:	dc18      	bgt.n	8007a3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a0a:	f7ff fead 	bl	8007768 <xTaskGetSchedulerState>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d109      	bne.n	8007a28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a14:	4b10      	ldr	r3, [pc, #64]	@ (8007a58 <xTimerGenericCommand+0x98>)
 8007a16:	6818      	ldr	r0, [r3, #0]
 8007a18:	f107 0110 	add.w	r1, r7, #16
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a20:	f7fe fc5a 	bl	80062d8 <xQueueGenericSend>
 8007a24:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a26:	e012      	b.n	8007a4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a28:	4b0b      	ldr	r3, [pc, #44]	@ (8007a58 <xTimerGenericCommand+0x98>)
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	f107 0110 	add.w	r1, r7, #16
 8007a30:	2300      	movs	r3, #0
 8007a32:	2200      	movs	r2, #0
 8007a34:	f7fe fc50 	bl	80062d8 <xQueueGenericSend>
 8007a38:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a3a:	e008      	b.n	8007a4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a3c:	4b06      	ldr	r3, [pc, #24]	@ (8007a58 <xTimerGenericCommand+0x98>)
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	f107 0110 	add.w	r1, r7, #16
 8007a44:	2300      	movs	r3, #0
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	f7fe fd48 	bl	80064dc <xQueueGenericSendFromISR>
 8007a4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3728      	adds	r7, #40	@ 0x28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	200015b8 	.word	0x200015b8

08007a5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a66:	4b23      	ldr	r3, [pc, #140]	@ (8007af4 <prvProcessExpiredTimer+0x98>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	3304      	adds	r3, #4
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fe fafb 	bl	8006070 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a80:	f003 0304 	and.w	r3, r3, #4
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d023      	beq.n	8007ad0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	699a      	ldr	r2, [r3, #24]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	18d1      	adds	r1, r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	6978      	ldr	r0, [r7, #20]
 8007a96:	f000 f8d5 	bl	8007c44 <prvInsertTimerInActiveList>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d020      	beq.n	8007ae2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	6978      	ldr	r0, [r7, #20]
 8007aac:	f7ff ff88 	bl	80079c0 <xTimerGenericCommand>
 8007ab0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d114      	bne.n	8007ae2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	60fb      	str	r3, [r7, #12]
}
 8007aca:	bf00      	nop
 8007acc:	bf00      	nop
 8007ace:	e7fd      	b.n	8007acc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ad6:	f023 0301 	bic.w	r3, r3, #1
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	6978      	ldr	r0, [r7, #20]
 8007ae8:	4798      	blx	r3
}
 8007aea:	bf00      	nop
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	200015b0 	.word	0x200015b0

08007af8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b00:	f107 0308 	add.w	r3, r7, #8
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 f859 	bl	8007bbc <prvGetNextExpireTime>
 8007b0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 f805 	bl	8007b20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b16:	f000 f8d7 	bl	8007cc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b1a:	bf00      	nop
 8007b1c:	e7f0      	b.n	8007b00 <prvTimerTask+0x8>
	...

08007b20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b2a:	f7ff fa29 	bl	8006f80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b2e:	f107 0308 	add.w	r3, r7, #8
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 f866 	bl	8007c04 <prvSampleTimeNow>
 8007b38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d130      	bne.n	8007ba2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10a      	bne.n	8007b5c <prvProcessTimerOrBlockTask+0x3c>
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d806      	bhi.n	8007b5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b4e:	f7ff fa25 	bl	8006f9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b52:	68f9      	ldr	r1, [r7, #12]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff ff81 	bl	8007a5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b5a:	e024      	b.n	8007ba6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d008      	beq.n	8007b74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b62:	4b13      	ldr	r3, [pc, #76]	@ (8007bb0 <prvProcessTimerOrBlockTask+0x90>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <prvProcessTimerOrBlockTask+0x50>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <prvProcessTimerOrBlockTask+0x52>
 8007b70:	2300      	movs	r3, #0
 8007b72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b74:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb4 <prvProcessTimerOrBlockTask+0x94>)
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	4619      	mov	r1, r3
 8007b82:	f7fe ff65 	bl	8006a50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b86:	f7ff fa09 	bl	8006f9c <xTaskResumeAll>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10a      	bne.n	8007ba6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b90:	4b09      	ldr	r3, [pc, #36]	@ (8007bb8 <prvProcessTimerOrBlockTask+0x98>)
 8007b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	f3bf 8f6f 	isb	sy
}
 8007ba0:	e001      	b.n	8007ba6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ba2:	f7ff f9fb 	bl	8006f9c <xTaskResumeAll>
}
 8007ba6:	bf00      	nop
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	200015b4 	.word	0x200015b4
 8007bb4:	200015b8 	.word	0x200015b8
 8007bb8:	e000ed04 	.word	0xe000ed04

08007bbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8007c00 <prvGetNextExpireTime+0x44>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <prvGetNextExpireTime+0x16>
 8007bce:	2201      	movs	r2, #1
 8007bd0:	e000      	b.n	8007bd4 <prvGetNextExpireTime+0x18>
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d105      	bne.n	8007bec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007be0:	4b07      	ldr	r3, [pc, #28]	@ (8007c00 <prvGetNextExpireTime+0x44>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	e001      	b.n	8007bf0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	200015b0 	.word	0x200015b0

08007c04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c0c:	f7ff fa64 	bl	80070d8 <xTaskGetTickCount>
 8007c10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c12:	4b0b      	ldr	r3, [pc, #44]	@ (8007c40 <prvSampleTimeNow+0x3c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d205      	bcs.n	8007c28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c1c:	f000 f93a 	bl	8007e94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	e002      	b.n	8007c2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c2e:	4a04      	ldr	r2, [pc, #16]	@ (8007c40 <prvSampleTimeNow+0x3c>)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c34:	68fb      	ldr	r3, [r7, #12]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	200015c0 	.word	0x200015c0

08007c44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
 8007c50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c52:	2300      	movs	r3, #0
 8007c54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d812      	bhi.n	8007c90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	1ad2      	subs	r2, r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d302      	bcc.n	8007c7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	617b      	str	r3, [r7, #20]
 8007c7c:	e01b      	b.n	8007cb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c7e:	4b10      	ldr	r3, [pc, #64]	@ (8007cc0 <prvInsertTimerInActiveList+0x7c>)
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3304      	adds	r3, #4
 8007c86:	4619      	mov	r1, r3
 8007c88:	4610      	mov	r0, r2
 8007c8a:	f7fe f9b8 	bl	8005ffe <vListInsert>
 8007c8e:	e012      	b.n	8007cb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d206      	bcs.n	8007ca6 <prvInsertTimerInActiveList+0x62>
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d302      	bcc.n	8007ca6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	617b      	str	r3, [r7, #20]
 8007ca4:	e007      	b.n	8007cb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ca6:	4b07      	ldr	r3, [pc, #28]	@ (8007cc4 <prvInsertTimerInActiveList+0x80>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3304      	adds	r3, #4
 8007cae:	4619      	mov	r1, r3
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	f7fe f9a4 	bl	8005ffe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007cb6:	697b      	ldr	r3, [r7, #20]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	200015b4 	.word	0x200015b4
 8007cc4:	200015b0 	.word	0x200015b0

08007cc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08e      	sub	sp, #56	@ 0x38
 8007ccc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cce:	e0ce      	b.n	8007e6e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	da19      	bge.n	8007d0a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cd6:	1d3b      	adds	r3, r7, #4
 8007cd8:	3304      	adds	r3, #4
 8007cda:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10b      	bne.n	8007cfa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	61fb      	str	r3, [r7, #28]
}
 8007cf4:	bf00      	nop
 8007cf6:	bf00      	nop
 8007cf8:	e7fd      	b.n	8007cf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d00:	6850      	ldr	r0, [r2, #4]
 8007d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d04:	6892      	ldr	r2, [r2, #8]
 8007d06:	4611      	mov	r1, r2
 8007d08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f2c0 80ae 	blt.w	8007e6e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d004      	beq.n	8007d28 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d20:	3304      	adds	r3, #4
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe f9a4 	bl	8006070 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d28:	463b      	mov	r3, r7
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff ff6a 	bl	8007c04 <prvSampleTimeNow>
 8007d30:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b09      	cmp	r3, #9
 8007d36:	f200 8097 	bhi.w	8007e68 <prvProcessReceivedCommands+0x1a0>
 8007d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d40 <prvProcessReceivedCommands+0x78>)
 8007d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d40:	08007d69 	.word	0x08007d69
 8007d44:	08007d69 	.word	0x08007d69
 8007d48:	08007d69 	.word	0x08007d69
 8007d4c:	08007ddf 	.word	0x08007ddf
 8007d50:	08007df3 	.word	0x08007df3
 8007d54:	08007e3f 	.word	0x08007e3f
 8007d58:	08007d69 	.word	0x08007d69
 8007d5c:	08007d69 	.word	0x08007d69
 8007d60:	08007ddf 	.word	0x08007ddf
 8007d64:	08007df3 	.word	0x08007df3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d6e:	f043 0301 	orr.w	r3, r3, #1
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	18d1      	adds	r1, r2, r3
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d88:	f7ff ff5c 	bl	8007c44 <prvInsertTimerInActiveList>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d06c      	beq.n	8007e6c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d061      	beq.n	8007e6c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	441a      	add	r2, r3
 8007db0:	2300      	movs	r3, #0
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	2300      	movs	r3, #0
 8007db6:	2100      	movs	r1, #0
 8007db8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dba:	f7ff fe01 	bl	80079c0 <xTimerGenericCommand>
 8007dbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d152      	bne.n	8007e6c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	61bb      	str	r3, [r7, #24]
}
 8007dd8:	bf00      	nop
 8007dda:	bf00      	nop
 8007ddc:	e7fd      	b.n	8007dda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007de4:	f023 0301 	bic.w	r3, r3, #1
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007df0:	e03d      	b.n	8007e6e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007df8:	f043 0301 	orr.w	r3, r3, #1
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10b      	bne.n	8007e2a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	617b      	str	r3, [r7, #20]
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop
 8007e28:	e7fd      	b.n	8007e26 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2c:	699a      	ldr	r2, [r3, #24]
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e30:	18d1      	adds	r1, r2, r3
 8007e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e38:	f7ff ff04 	bl	8007c44 <prvInsertTimerInActiveList>
					break;
 8007e3c:	e017      	b.n	8007e6e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d103      	bne.n	8007e54 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007e4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e4e:	f000 fbeb 	bl	8008628 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e52:	e00c      	b.n	8007e6e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e5a:	f023 0301 	bic.w	r3, r3, #1
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007e66:	e002      	b.n	8007e6e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007e68:	bf00      	nop
 8007e6a:	e000      	b.n	8007e6e <prvProcessReceivedCommands+0x1a6>
					break;
 8007e6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e6e:	4b08      	ldr	r3, [pc, #32]	@ (8007e90 <prvProcessReceivedCommands+0x1c8>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	1d39      	adds	r1, r7, #4
 8007e74:	2200      	movs	r2, #0
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fbce 	bl	8006618 <xQueueReceive>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f47f af26 	bne.w	8007cd0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	3730      	adds	r7, #48	@ 0x30
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	200015b8 	.word	0x200015b8

08007e94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e9a:	e049      	b.n	8007f30 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8007f58 <prvSwitchTimerLists+0xc4>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8007f58 <prvSwitchTimerLists+0xc4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fe f8db 	bl	8006070 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d02f      	beq.n	8007f30 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d90e      	bls.n	8007f00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007eee:	4b1a      	ldr	r3, [pc, #104]	@ (8007f58 <prvSwitchTimerLists+0xc4>)
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	4610      	mov	r0, r2
 8007efa:	f7fe f880 	bl	8005ffe <vListInsert>
 8007efe:	e017      	b.n	8007f30 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f00:	2300      	movs	r3, #0
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	2300      	movs	r3, #0
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	2100      	movs	r1, #0
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f7ff fd58 	bl	80079c0 <xTimerGenericCommand>
 8007f10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10b      	bne.n	8007f30 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	603b      	str	r3, [r7, #0]
}
 8007f2a:	bf00      	nop
 8007f2c:	bf00      	nop
 8007f2e:	e7fd      	b.n	8007f2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f30:	4b09      	ldr	r3, [pc, #36]	@ (8007f58 <prvSwitchTimerLists+0xc4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1b0      	bne.n	8007e9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f3a:	4b07      	ldr	r3, [pc, #28]	@ (8007f58 <prvSwitchTimerLists+0xc4>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f40:	4b06      	ldr	r3, [pc, #24]	@ (8007f5c <prvSwitchTimerLists+0xc8>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a04      	ldr	r2, [pc, #16]	@ (8007f58 <prvSwitchTimerLists+0xc4>)
 8007f46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f48:	4a04      	ldr	r2, [pc, #16]	@ (8007f5c <prvSwitchTimerLists+0xc8>)
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	6013      	str	r3, [r2, #0]
}
 8007f4e:	bf00      	nop
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	200015b0 	.word	0x200015b0
 8007f5c:	200015b4 	.word	0x200015b4

08007f60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f66:	f000 f96f 	bl	8008248 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f6a:	4b15      	ldr	r3, [pc, #84]	@ (8007fc0 <prvCheckForValidListAndQueue+0x60>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d120      	bne.n	8007fb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f72:	4814      	ldr	r0, [pc, #80]	@ (8007fc4 <prvCheckForValidListAndQueue+0x64>)
 8007f74:	f7fd fff2 	bl	8005f5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f78:	4813      	ldr	r0, [pc, #76]	@ (8007fc8 <prvCheckForValidListAndQueue+0x68>)
 8007f7a:	f7fd ffef 	bl	8005f5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f7e:	4b13      	ldr	r3, [pc, #76]	@ (8007fcc <prvCheckForValidListAndQueue+0x6c>)
 8007f80:	4a10      	ldr	r2, [pc, #64]	@ (8007fc4 <prvCheckForValidListAndQueue+0x64>)
 8007f82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f84:	4b12      	ldr	r3, [pc, #72]	@ (8007fd0 <prvCheckForValidListAndQueue+0x70>)
 8007f86:	4a10      	ldr	r2, [pc, #64]	@ (8007fc8 <prvCheckForValidListAndQueue+0x68>)
 8007f88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	4b11      	ldr	r3, [pc, #68]	@ (8007fd4 <prvCheckForValidListAndQueue+0x74>)
 8007f90:	4a11      	ldr	r2, [pc, #68]	@ (8007fd8 <prvCheckForValidListAndQueue+0x78>)
 8007f92:	2110      	movs	r1, #16
 8007f94:	200a      	movs	r0, #10
 8007f96:	f7fe f8ff 	bl	8006198 <xQueueGenericCreateStatic>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	4a08      	ldr	r2, [pc, #32]	@ (8007fc0 <prvCheckForValidListAndQueue+0x60>)
 8007f9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007fa0:	4b07      	ldr	r3, [pc, #28]	@ (8007fc0 <prvCheckForValidListAndQueue+0x60>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d005      	beq.n	8007fb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007fa8:	4b05      	ldr	r3, [pc, #20]	@ (8007fc0 <prvCheckForValidListAndQueue+0x60>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	490b      	ldr	r1, [pc, #44]	@ (8007fdc <prvCheckForValidListAndQueue+0x7c>)
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fe fd24 	bl	80069fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fb4:	f000 f97a 	bl	80082ac <vPortExitCritical>
}
 8007fb8:	bf00      	nop
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	200015b8 	.word	0x200015b8
 8007fc4:	20001588 	.word	0x20001588
 8007fc8:	2000159c 	.word	0x2000159c
 8007fcc:	200015b0 	.word	0x200015b0
 8007fd0:	200015b4 	.word	0x200015b4
 8007fd4:	20001664 	.word	0x20001664
 8007fd8:	200015c4 	.word	0x200015c4
 8007fdc:	08008a8c 	.word	0x08008a8c

08007fe0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	3b04      	subs	r3, #4
 8007ff0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3b04      	subs	r3, #4
 8007ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f023 0201 	bic.w	r2, r3, #1
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3b04      	subs	r3, #4
 800800e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008010:	4a0c      	ldr	r2, [pc, #48]	@ (8008044 <pxPortInitialiseStack+0x64>)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3b14      	subs	r3, #20
 800801a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3b04      	subs	r3, #4
 8008026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f06f 0202 	mvn.w	r2, #2
 800802e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	3b20      	subs	r3, #32
 8008034:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008036:	68fb      	ldr	r3, [r7, #12]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	08008049 	.word	0x08008049

08008048 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008052:	4b13      	ldr	r3, [pc, #76]	@ (80080a0 <prvTaskExitError+0x58>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805a:	d00b      	beq.n	8008074 <prvTaskExitError+0x2c>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	60fb      	str	r3, [r7, #12]
}
 800806e:	bf00      	nop
 8008070:	bf00      	nop
 8008072:	e7fd      	b.n	8008070 <prvTaskExitError+0x28>
	__asm volatile
 8008074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	60bb      	str	r3, [r7, #8]
}
 8008086:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008088:	bf00      	nop
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d0fc      	beq.n	800808a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008090:	bf00      	nop
 8008092:	bf00      	nop
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	2000000c 	.word	0x2000000c
	...

080080b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080b0:	4b07      	ldr	r3, [pc, #28]	@ (80080d0 <pxCurrentTCBConst2>)
 80080b2:	6819      	ldr	r1, [r3, #0]
 80080b4:	6808      	ldr	r0, [r1, #0]
 80080b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ba:	f380 8809 	msr	PSP, r0
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f04f 0000 	mov.w	r0, #0
 80080c6:	f380 8811 	msr	BASEPRI, r0
 80080ca:	4770      	bx	lr
 80080cc:	f3af 8000 	nop.w

080080d0 <pxCurrentTCBConst2>:
 80080d0:	20001088 	.word	0x20001088
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop

080080d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080d8:	4808      	ldr	r0, [pc, #32]	@ (80080fc <prvPortStartFirstTask+0x24>)
 80080da:	6800      	ldr	r0, [r0, #0]
 80080dc:	6800      	ldr	r0, [r0, #0]
 80080de:	f380 8808 	msr	MSP, r0
 80080e2:	f04f 0000 	mov.w	r0, #0
 80080e6:	f380 8814 	msr	CONTROL, r0
 80080ea:	b662      	cpsie	i
 80080ec:	b661      	cpsie	f
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	df00      	svc	0
 80080f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080fa:	bf00      	nop
 80080fc:	e000ed08 	.word	0xe000ed08

08008100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008106:	4b47      	ldr	r3, [pc, #284]	@ (8008224 <xPortStartScheduler+0x124>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a47      	ldr	r2, [pc, #284]	@ (8008228 <xPortStartScheduler+0x128>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d10b      	bne.n	8008128 <xPortStartScheduler+0x28>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	613b      	str	r3, [r7, #16]
}
 8008122:	bf00      	nop
 8008124:	bf00      	nop
 8008126:	e7fd      	b.n	8008124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008128:	4b3e      	ldr	r3, [pc, #248]	@ (8008224 <xPortStartScheduler+0x124>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a3f      	ldr	r2, [pc, #252]	@ (800822c <xPortStartScheduler+0x12c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d10b      	bne.n	800814a <xPortStartScheduler+0x4a>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	60fb      	str	r3, [r7, #12]
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop
 8008148:	e7fd      	b.n	8008146 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800814a:	4b39      	ldr	r3, [pc, #228]	@ (8008230 <xPortStartScheduler+0x130>)
 800814c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	22ff      	movs	r2, #255	@ 0xff
 800815a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	b2db      	uxtb	r3, r3
 8008162:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	b2db      	uxtb	r3, r3
 8008168:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800816c:	b2da      	uxtb	r2, r3
 800816e:	4b31      	ldr	r3, [pc, #196]	@ (8008234 <xPortStartScheduler+0x134>)
 8008170:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008172:	4b31      	ldr	r3, [pc, #196]	@ (8008238 <xPortStartScheduler+0x138>)
 8008174:	2207      	movs	r2, #7
 8008176:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008178:	e009      	b.n	800818e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800817a:	4b2f      	ldr	r3, [pc, #188]	@ (8008238 <xPortStartScheduler+0x138>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3b01      	subs	r3, #1
 8008180:	4a2d      	ldr	r2, [pc, #180]	@ (8008238 <xPortStartScheduler+0x138>)
 8008182:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008184:	78fb      	ldrb	r3, [r7, #3]
 8008186:	b2db      	uxtb	r3, r3
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	b2db      	uxtb	r3, r3
 800818c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008196:	2b80      	cmp	r3, #128	@ 0x80
 8008198:	d0ef      	beq.n	800817a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800819a:	4b27      	ldr	r3, [pc, #156]	@ (8008238 <xPortStartScheduler+0x138>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f1c3 0307 	rsb	r3, r3, #7
 80081a2:	2b04      	cmp	r3, #4
 80081a4:	d00b      	beq.n	80081be <xPortStartScheduler+0xbe>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	60bb      	str	r3, [r7, #8]
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	e7fd      	b.n	80081ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081be:	4b1e      	ldr	r3, [pc, #120]	@ (8008238 <xPortStartScheduler+0x138>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	4a1c      	ldr	r2, [pc, #112]	@ (8008238 <xPortStartScheduler+0x138>)
 80081c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008238 <xPortStartScheduler+0x138>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80081d0:	4a19      	ldr	r2, [pc, #100]	@ (8008238 <xPortStartScheduler+0x138>)
 80081d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081dc:	4b17      	ldr	r3, [pc, #92]	@ (800823c <xPortStartScheduler+0x13c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a16      	ldr	r2, [pc, #88]	@ (800823c <xPortStartScheduler+0x13c>)
 80081e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80081e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081e8:	4b14      	ldr	r3, [pc, #80]	@ (800823c <xPortStartScheduler+0x13c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a13      	ldr	r2, [pc, #76]	@ (800823c <xPortStartScheduler+0x13c>)
 80081ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80081f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081f4:	f000 f8da 	bl	80083ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081f8:	4b11      	ldr	r3, [pc, #68]	@ (8008240 <xPortStartScheduler+0x140>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081fe:	f000 f8f9 	bl	80083f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008202:	4b10      	ldr	r3, [pc, #64]	@ (8008244 <xPortStartScheduler+0x144>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a0f      	ldr	r2, [pc, #60]	@ (8008244 <xPortStartScheduler+0x144>)
 8008208:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800820c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800820e:	f7ff ff63 	bl	80080d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008212:	f7ff f82b 	bl	800726c <vTaskSwitchContext>
	prvTaskExitError();
 8008216:	f7ff ff17 	bl	8008048 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	e000ed00 	.word	0xe000ed00
 8008228:	410fc271 	.word	0x410fc271
 800822c:	410fc270 	.word	0x410fc270
 8008230:	e000e400 	.word	0xe000e400
 8008234:	200016b4 	.word	0x200016b4
 8008238:	200016b8 	.word	0x200016b8
 800823c:	e000ed20 	.word	0xe000ed20
 8008240:	2000000c 	.word	0x2000000c
 8008244:	e000ef34 	.word	0xe000ef34

08008248 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	607b      	str	r3, [r7, #4]
}
 8008260:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008262:	4b10      	ldr	r3, [pc, #64]	@ (80082a4 <vPortEnterCritical+0x5c>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3301      	adds	r3, #1
 8008268:	4a0e      	ldr	r2, [pc, #56]	@ (80082a4 <vPortEnterCritical+0x5c>)
 800826a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800826c:	4b0d      	ldr	r3, [pc, #52]	@ (80082a4 <vPortEnterCritical+0x5c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d110      	bne.n	8008296 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008274:	4b0c      	ldr	r3, [pc, #48]	@ (80082a8 <vPortEnterCritical+0x60>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00b      	beq.n	8008296 <vPortEnterCritical+0x4e>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	603b      	str	r3, [r7, #0]
}
 8008290:	bf00      	nop
 8008292:	bf00      	nop
 8008294:	e7fd      	b.n	8008292 <vPortEnterCritical+0x4a>
	}
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	2000000c 	.word	0x2000000c
 80082a8:	e000ed04 	.word	0xe000ed04

080082ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082b2:	4b12      	ldr	r3, [pc, #72]	@ (80082fc <vPortExitCritical+0x50>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10b      	bne.n	80082d2 <vPortExitCritical+0x26>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	607b      	str	r3, [r7, #4]
}
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	e7fd      	b.n	80082ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082d2:	4b0a      	ldr	r3, [pc, #40]	@ (80082fc <vPortExitCritical+0x50>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3b01      	subs	r3, #1
 80082d8:	4a08      	ldr	r2, [pc, #32]	@ (80082fc <vPortExitCritical+0x50>)
 80082da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082dc:	4b07      	ldr	r3, [pc, #28]	@ (80082fc <vPortExitCritical+0x50>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d105      	bne.n	80082f0 <vPortExitCritical+0x44>
 80082e4:	2300      	movs	r3, #0
 80082e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	f383 8811 	msr	BASEPRI, r3
}
 80082ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	2000000c 	.word	0x2000000c

08008300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008300:	f3ef 8009 	mrs	r0, PSP
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	4b15      	ldr	r3, [pc, #84]	@ (8008360 <pxCurrentTCBConst>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	f01e 0f10 	tst.w	lr, #16
 8008310:	bf08      	it	eq
 8008312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831a:	6010      	str	r0, [r2, #0]
 800831c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008320:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008324:	f380 8811 	msr	BASEPRI, r0
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f7fe ff9c 	bl	800726c <vTaskSwitchContext>
 8008334:	f04f 0000 	mov.w	r0, #0
 8008338:	f380 8811 	msr	BASEPRI, r0
 800833c:	bc09      	pop	{r0, r3}
 800833e:	6819      	ldr	r1, [r3, #0]
 8008340:	6808      	ldr	r0, [r1, #0]
 8008342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008346:	f01e 0f10 	tst.w	lr, #16
 800834a:	bf08      	it	eq
 800834c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008350:	f380 8809 	msr	PSP, r0
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	f3af 8000 	nop.w

08008360 <pxCurrentTCBConst>:
 8008360:	20001088 	.word	0x20001088
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop

08008368 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	607b      	str	r3, [r7, #4]
}
 8008380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008382:	f7fe feb9 	bl	80070f8 <xTaskIncrementTick>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800838c:	4b06      	ldr	r3, [pc, #24]	@ (80083a8 <xPortSysTickHandler+0x40>)
 800838e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	2300      	movs	r3, #0
 8008396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	f383 8811 	msr	BASEPRI, r3
}
 800839e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	e000ed04 	.word	0xe000ed04

080083ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083b0:	4b0b      	ldr	r3, [pc, #44]	@ (80083e0 <vPortSetupTimerInterrupt+0x34>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083b6:	4b0b      	ldr	r3, [pc, #44]	@ (80083e4 <vPortSetupTimerInterrupt+0x38>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083bc:	4b0a      	ldr	r3, [pc, #40]	@ (80083e8 <vPortSetupTimerInterrupt+0x3c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a0a      	ldr	r2, [pc, #40]	@ (80083ec <vPortSetupTimerInterrupt+0x40>)
 80083c2:	fba2 2303 	umull	r2, r3, r2, r3
 80083c6:	099b      	lsrs	r3, r3, #6
 80083c8:	4a09      	ldr	r2, [pc, #36]	@ (80083f0 <vPortSetupTimerInterrupt+0x44>)
 80083ca:	3b01      	subs	r3, #1
 80083cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083ce:	4b04      	ldr	r3, [pc, #16]	@ (80083e0 <vPortSetupTimerInterrupt+0x34>)
 80083d0:	2207      	movs	r2, #7
 80083d2:	601a      	str	r2, [r3, #0]
}
 80083d4:	bf00      	nop
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	e000e010 	.word	0xe000e010
 80083e4:	e000e018 	.word	0xe000e018
 80083e8:	20000000 	.word	0x20000000
 80083ec:	10624dd3 	.word	0x10624dd3
 80083f0:	e000e014 	.word	0xe000e014

080083f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008404 <vPortEnableVFP+0x10>
 80083f8:	6801      	ldr	r1, [r0, #0]
 80083fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80083fe:	6001      	str	r1, [r0, #0]
 8008400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008402:	bf00      	nop
 8008404:	e000ed88 	.word	0xe000ed88

08008408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800840e:	f3ef 8305 	mrs	r3, IPSR
 8008412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b0f      	cmp	r3, #15
 8008418:	d915      	bls.n	8008446 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800841a:	4a18      	ldr	r2, [pc, #96]	@ (800847c <vPortValidateInterruptPriority+0x74>)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4413      	add	r3, r2
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008424:	4b16      	ldr	r3, [pc, #88]	@ (8008480 <vPortValidateInterruptPriority+0x78>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	7afa      	ldrb	r2, [r7, #11]
 800842a:	429a      	cmp	r2, r3
 800842c:	d20b      	bcs.n	8008446 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	607b      	str	r3, [r7, #4]
}
 8008440:	bf00      	nop
 8008442:	bf00      	nop
 8008444:	e7fd      	b.n	8008442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008446:	4b0f      	ldr	r3, [pc, #60]	@ (8008484 <vPortValidateInterruptPriority+0x7c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800844e:	4b0e      	ldr	r3, [pc, #56]	@ (8008488 <vPortValidateInterruptPriority+0x80>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d90b      	bls.n	800846e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	603b      	str	r3, [r7, #0]
}
 8008468:	bf00      	nop
 800846a:	bf00      	nop
 800846c:	e7fd      	b.n	800846a <vPortValidateInterruptPriority+0x62>
	}
 800846e:	bf00      	nop
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	e000e3f0 	.word	0xe000e3f0
 8008480:	200016b4 	.word	0x200016b4
 8008484:	e000ed0c 	.word	0xe000ed0c
 8008488:	200016b8 	.word	0x200016b8

0800848c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08a      	sub	sp, #40	@ 0x28
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008494:	2300      	movs	r3, #0
 8008496:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008498:	f7fe fd72 	bl	8006f80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800849c:	4b5c      	ldr	r3, [pc, #368]	@ (8008610 <pvPortMalloc+0x184>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d101      	bne.n	80084a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084a4:	f000 f924 	bl	80086f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084a8:	4b5a      	ldr	r3, [pc, #360]	@ (8008614 <pvPortMalloc+0x188>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4013      	ands	r3, r2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f040 8095 	bne.w	80085e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d01e      	beq.n	80084fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80084bc:	2208      	movs	r2, #8
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4413      	add	r3, r2
 80084c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f003 0307 	and.w	r3, r3, #7
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d015      	beq.n	80084fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f023 0307 	bic.w	r3, r3, #7
 80084d4:	3308      	adds	r3, #8
 80084d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f003 0307 	and.w	r3, r3, #7
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00b      	beq.n	80084fa <pvPortMalloc+0x6e>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	617b      	str	r3, [r7, #20]
}
 80084f4:	bf00      	nop
 80084f6:	bf00      	nop
 80084f8:	e7fd      	b.n	80084f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d06f      	beq.n	80085e0 <pvPortMalloc+0x154>
 8008500:	4b45      	ldr	r3, [pc, #276]	@ (8008618 <pvPortMalloc+0x18c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	429a      	cmp	r2, r3
 8008508:	d86a      	bhi.n	80085e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800850a:	4b44      	ldr	r3, [pc, #272]	@ (800861c <pvPortMalloc+0x190>)
 800850c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800850e:	4b43      	ldr	r3, [pc, #268]	@ (800861c <pvPortMalloc+0x190>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008514:	e004      	b.n	8008520 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008518:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	429a      	cmp	r2, r3
 8008528:	d903      	bls.n	8008532 <pvPortMalloc+0xa6>
 800852a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1f1      	bne.n	8008516 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008532:	4b37      	ldr	r3, [pc, #220]	@ (8008610 <pvPortMalloc+0x184>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008538:	429a      	cmp	r2, r3
 800853a:	d051      	beq.n	80085e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2208      	movs	r2, #8
 8008542:	4413      	add	r3, r2
 8008544:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	6a3b      	ldr	r3, [r7, #32]
 800854c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800854e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	1ad2      	subs	r2, r2, r3
 8008556:	2308      	movs	r3, #8
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	429a      	cmp	r2, r3
 800855c:	d920      	bls.n	80085a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800855e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4413      	add	r3, r2
 8008564:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	f003 0307 	and.w	r3, r3, #7
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00b      	beq.n	8008588 <pvPortMalloc+0xfc>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	613b      	str	r3, [r7, #16]
}
 8008582:	bf00      	nop
 8008584:	bf00      	nop
 8008586:	e7fd      	b.n	8008584 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	1ad2      	subs	r2, r2, r3
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800859a:	69b8      	ldr	r0, [r7, #24]
 800859c:	f000 f90a 	bl	80087b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008618 <pvPortMalloc+0x18c>)
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	4a1b      	ldr	r2, [pc, #108]	@ (8008618 <pvPortMalloc+0x18c>)
 80085ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008618 <pvPortMalloc+0x18c>)
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008620 <pvPortMalloc+0x194>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d203      	bcs.n	80085c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085ba:	4b17      	ldr	r3, [pc, #92]	@ (8008618 <pvPortMalloc+0x18c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a18      	ldr	r2, [pc, #96]	@ (8008620 <pvPortMalloc+0x194>)
 80085c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	4b13      	ldr	r3, [pc, #76]	@ (8008614 <pvPortMalloc+0x188>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	431a      	orrs	r2, r3
 80085cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d2:	2200      	movs	r2, #0
 80085d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085d6:	4b13      	ldr	r3, [pc, #76]	@ (8008624 <pvPortMalloc+0x198>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3301      	adds	r3, #1
 80085dc:	4a11      	ldr	r2, [pc, #68]	@ (8008624 <pvPortMalloc+0x198>)
 80085de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085e0:	f7fe fcdc 	bl	8006f9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	f003 0307 	and.w	r3, r3, #7
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00b      	beq.n	8008606 <pvPortMalloc+0x17a>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	60fb      	str	r3, [r7, #12]
}
 8008600:	bf00      	nop
 8008602:	bf00      	nop
 8008604:	e7fd      	b.n	8008602 <pvPortMalloc+0x176>
	return pvReturn;
 8008606:	69fb      	ldr	r3, [r7, #28]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3728      	adds	r7, #40	@ 0x28
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	200052c4 	.word	0x200052c4
 8008614:	200052d8 	.word	0x200052d8
 8008618:	200052c8 	.word	0x200052c8
 800861c:	200052bc 	.word	0x200052bc
 8008620:	200052cc 	.word	0x200052cc
 8008624:	200052d0 	.word	0x200052d0

08008628 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d04f      	beq.n	80086da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800863a:	2308      	movs	r3, #8
 800863c:	425b      	negs	r3, r3
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	4413      	add	r3, r2
 8008642:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	4b25      	ldr	r3, [pc, #148]	@ (80086e4 <vPortFree+0xbc>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4013      	ands	r3, r2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10b      	bne.n	800866e <vPortFree+0x46>
	__asm volatile
 8008656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	60fb      	str	r3, [r7, #12]
}
 8008668:	bf00      	nop
 800866a:	bf00      	nop
 800866c:	e7fd      	b.n	800866a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00b      	beq.n	800868e <vPortFree+0x66>
	__asm volatile
 8008676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	60bb      	str	r3, [r7, #8]
}
 8008688:	bf00      	nop
 800868a:	bf00      	nop
 800868c:	e7fd      	b.n	800868a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	4b14      	ldr	r3, [pc, #80]	@ (80086e4 <vPortFree+0xbc>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4013      	ands	r3, r2
 8008698:	2b00      	cmp	r3, #0
 800869a:	d01e      	beq.n	80086da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d11a      	bne.n	80086da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	4b0e      	ldr	r3, [pc, #56]	@ (80086e4 <vPortFree+0xbc>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	43db      	mvns	r3, r3
 80086ae:	401a      	ands	r2, r3
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086b4:	f7fe fc64 	bl	8006f80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	4b0a      	ldr	r3, [pc, #40]	@ (80086e8 <vPortFree+0xc0>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4413      	add	r3, r2
 80086c2:	4a09      	ldr	r2, [pc, #36]	@ (80086e8 <vPortFree+0xc0>)
 80086c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086c6:	6938      	ldr	r0, [r7, #16]
 80086c8:	f000 f874 	bl	80087b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086cc:	4b07      	ldr	r3, [pc, #28]	@ (80086ec <vPortFree+0xc4>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3301      	adds	r3, #1
 80086d2:	4a06      	ldr	r2, [pc, #24]	@ (80086ec <vPortFree+0xc4>)
 80086d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086d6:	f7fe fc61 	bl	8006f9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086da:	bf00      	nop
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	200052d8 	.word	0x200052d8
 80086e8:	200052c8 	.word	0x200052c8
 80086ec:	200052d4 	.word	0x200052d4

080086f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80086fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086fc:	4b27      	ldr	r3, [pc, #156]	@ (800879c <prvHeapInit+0xac>)
 80086fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f003 0307 	and.w	r3, r3, #7
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00c      	beq.n	8008724 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3307      	adds	r3, #7
 800870e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0307 	bic.w	r3, r3, #7
 8008716:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	4a1f      	ldr	r2, [pc, #124]	@ (800879c <prvHeapInit+0xac>)
 8008720:	4413      	add	r3, r2
 8008722:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008728:	4a1d      	ldr	r2, [pc, #116]	@ (80087a0 <prvHeapInit+0xb0>)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800872e:	4b1c      	ldr	r3, [pc, #112]	@ (80087a0 <prvHeapInit+0xb0>)
 8008730:	2200      	movs	r2, #0
 8008732:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	4413      	add	r3, r2
 800873a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800873c:	2208      	movs	r2, #8
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	1a9b      	subs	r3, r3, r2
 8008742:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 0307 	bic.w	r3, r3, #7
 800874a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4a15      	ldr	r2, [pc, #84]	@ (80087a4 <prvHeapInit+0xb4>)
 8008750:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008752:	4b14      	ldr	r3, [pc, #80]	@ (80087a4 <prvHeapInit+0xb4>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2200      	movs	r2, #0
 8008758:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800875a:	4b12      	ldr	r3, [pc, #72]	@ (80087a4 <prvHeapInit+0xb4>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	1ad2      	subs	r2, r2, r3
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008770:	4b0c      	ldr	r3, [pc, #48]	@ (80087a4 <prvHeapInit+0xb4>)
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	4a0a      	ldr	r2, [pc, #40]	@ (80087a8 <prvHeapInit+0xb8>)
 800877e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	4a09      	ldr	r2, [pc, #36]	@ (80087ac <prvHeapInit+0xbc>)
 8008786:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008788:	4b09      	ldr	r3, [pc, #36]	@ (80087b0 <prvHeapInit+0xc0>)
 800878a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800878e:	601a      	str	r2, [r3, #0]
}
 8008790:	bf00      	nop
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	200016bc 	.word	0x200016bc
 80087a0:	200052bc 	.word	0x200052bc
 80087a4:	200052c4 	.word	0x200052c4
 80087a8:	200052cc 	.word	0x200052cc
 80087ac:	200052c8 	.word	0x200052c8
 80087b0:	200052d8 	.word	0x200052d8

080087b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087bc:	4b28      	ldr	r3, [pc, #160]	@ (8008860 <prvInsertBlockIntoFreeList+0xac>)
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	e002      	b.n	80087c8 <prvInsertBlockIntoFreeList+0x14>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d8f7      	bhi.n	80087c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	4413      	add	r3, r2
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d108      	bne.n	80087f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	441a      	add	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	441a      	add	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	429a      	cmp	r2, r3
 8008808:	d118      	bne.n	800883c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	4b15      	ldr	r3, [pc, #84]	@ (8008864 <prvInsertBlockIntoFreeList+0xb0>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	429a      	cmp	r2, r3
 8008814:	d00d      	beq.n	8008832 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685a      	ldr	r2, [r3, #4]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	441a      	add	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	e008      	b.n	8008844 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008832:	4b0c      	ldr	r3, [pc, #48]	@ (8008864 <prvInsertBlockIntoFreeList+0xb0>)
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	e003      	b.n	8008844 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	429a      	cmp	r2, r3
 800884a:	d002      	beq.n	8008852 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008852:	bf00      	nop
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	200052bc 	.word	0x200052bc
 8008864:	200052c4 	.word	0x200052c4

08008868 <memset>:
 8008868:	4402      	add	r2, r0
 800886a:	4603      	mov	r3, r0
 800886c:	4293      	cmp	r3, r2
 800886e:	d100      	bne.n	8008872 <memset+0xa>
 8008870:	4770      	bx	lr
 8008872:	f803 1b01 	strb.w	r1, [r3], #1
 8008876:	e7f9      	b.n	800886c <memset+0x4>

08008878 <_reclaim_reent>:
 8008878:	4b29      	ldr	r3, [pc, #164]	@ (8008920 <_reclaim_reent+0xa8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4283      	cmp	r3, r0
 800887e:	b570      	push	{r4, r5, r6, lr}
 8008880:	4604      	mov	r4, r0
 8008882:	d04b      	beq.n	800891c <_reclaim_reent+0xa4>
 8008884:	69c3      	ldr	r3, [r0, #28]
 8008886:	b1ab      	cbz	r3, 80088b4 <_reclaim_reent+0x3c>
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	b16b      	cbz	r3, 80088a8 <_reclaim_reent+0x30>
 800888c:	2500      	movs	r5, #0
 800888e:	69e3      	ldr	r3, [r4, #28]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	5959      	ldr	r1, [r3, r5]
 8008894:	2900      	cmp	r1, #0
 8008896:	d13b      	bne.n	8008910 <_reclaim_reent+0x98>
 8008898:	3504      	adds	r5, #4
 800889a:	2d80      	cmp	r5, #128	@ 0x80
 800889c:	d1f7      	bne.n	800888e <_reclaim_reent+0x16>
 800889e:	69e3      	ldr	r3, [r4, #28]
 80088a0:	4620      	mov	r0, r4
 80088a2:	68d9      	ldr	r1, [r3, #12]
 80088a4:	f000 f872 	bl	800898c <_free_r>
 80088a8:	69e3      	ldr	r3, [r4, #28]
 80088aa:	6819      	ldr	r1, [r3, #0]
 80088ac:	b111      	cbz	r1, 80088b4 <_reclaim_reent+0x3c>
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 f86c 	bl	800898c <_free_r>
 80088b4:	6961      	ldr	r1, [r4, #20]
 80088b6:	b111      	cbz	r1, 80088be <_reclaim_reent+0x46>
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 f867 	bl	800898c <_free_r>
 80088be:	69e1      	ldr	r1, [r4, #28]
 80088c0:	b111      	cbz	r1, 80088c8 <_reclaim_reent+0x50>
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 f862 	bl	800898c <_free_r>
 80088c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80088ca:	b111      	cbz	r1, 80088d2 <_reclaim_reent+0x5a>
 80088cc:	4620      	mov	r0, r4
 80088ce:	f000 f85d 	bl	800898c <_free_r>
 80088d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088d4:	b111      	cbz	r1, 80088dc <_reclaim_reent+0x64>
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 f858 	bl	800898c <_free_r>
 80088dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80088de:	b111      	cbz	r1, 80088e6 <_reclaim_reent+0x6e>
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 f853 	bl	800898c <_free_r>
 80088e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80088e8:	b111      	cbz	r1, 80088f0 <_reclaim_reent+0x78>
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 f84e 	bl	800898c <_free_r>
 80088f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80088f2:	b111      	cbz	r1, 80088fa <_reclaim_reent+0x82>
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 f849 	bl	800898c <_free_r>
 80088fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80088fc:	b111      	cbz	r1, 8008904 <_reclaim_reent+0x8c>
 80088fe:	4620      	mov	r0, r4
 8008900:	f000 f844 	bl	800898c <_free_r>
 8008904:	6a23      	ldr	r3, [r4, #32]
 8008906:	b14b      	cbz	r3, 800891c <_reclaim_reent+0xa4>
 8008908:	4620      	mov	r0, r4
 800890a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800890e:	4718      	bx	r3
 8008910:	680e      	ldr	r6, [r1, #0]
 8008912:	4620      	mov	r0, r4
 8008914:	f000 f83a 	bl	800898c <_free_r>
 8008918:	4631      	mov	r1, r6
 800891a:	e7bb      	b.n	8008894 <_reclaim_reent+0x1c>
 800891c:	bd70      	pop	{r4, r5, r6, pc}
 800891e:	bf00      	nop
 8008920:	20000010 	.word	0x20000010

08008924 <__libc_init_array>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	4d0d      	ldr	r5, [pc, #52]	@ (800895c <__libc_init_array+0x38>)
 8008928:	4c0d      	ldr	r4, [pc, #52]	@ (8008960 <__libc_init_array+0x3c>)
 800892a:	1b64      	subs	r4, r4, r5
 800892c:	10a4      	asrs	r4, r4, #2
 800892e:	2600      	movs	r6, #0
 8008930:	42a6      	cmp	r6, r4
 8008932:	d109      	bne.n	8008948 <__libc_init_array+0x24>
 8008934:	4d0b      	ldr	r5, [pc, #44]	@ (8008964 <__libc_init_array+0x40>)
 8008936:	4c0c      	ldr	r4, [pc, #48]	@ (8008968 <__libc_init_array+0x44>)
 8008938:	f000 f87e 	bl	8008a38 <_init>
 800893c:	1b64      	subs	r4, r4, r5
 800893e:	10a4      	asrs	r4, r4, #2
 8008940:	2600      	movs	r6, #0
 8008942:	42a6      	cmp	r6, r4
 8008944:	d105      	bne.n	8008952 <__libc_init_array+0x2e>
 8008946:	bd70      	pop	{r4, r5, r6, pc}
 8008948:	f855 3b04 	ldr.w	r3, [r5], #4
 800894c:	4798      	blx	r3
 800894e:	3601      	adds	r6, #1
 8008950:	e7ee      	b.n	8008930 <__libc_init_array+0xc>
 8008952:	f855 3b04 	ldr.w	r3, [r5], #4
 8008956:	4798      	blx	r3
 8008958:	3601      	adds	r6, #1
 800895a:	e7f2      	b.n	8008942 <__libc_init_array+0x1e>
 800895c:	08008b4c 	.word	0x08008b4c
 8008960:	08008b4c 	.word	0x08008b4c
 8008964:	08008b4c 	.word	0x08008b4c
 8008968:	08008b50 	.word	0x08008b50

0800896c <__retarget_lock_acquire_recursive>:
 800896c:	4770      	bx	lr

0800896e <__retarget_lock_release_recursive>:
 800896e:	4770      	bx	lr

08008970 <memcpy>:
 8008970:	440a      	add	r2, r1
 8008972:	4291      	cmp	r1, r2
 8008974:	f100 33ff 	add.w	r3, r0, #4294967295
 8008978:	d100      	bne.n	800897c <memcpy+0xc>
 800897a:	4770      	bx	lr
 800897c:	b510      	push	{r4, lr}
 800897e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008986:	4291      	cmp	r1, r2
 8008988:	d1f9      	bne.n	800897e <memcpy+0xe>
 800898a:	bd10      	pop	{r4, pc}

0800898c <_free_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4605      	mov	r5, r0
 8008990:	2900      	cmp	r1, #0
 8008992:	d041      	beq.n	8008a18 <_free_r+0x8c>
 8008994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008998:	1f0c      	subs	r4, r1, #4
 800899a:	2b00      	cmp	r3, #0
 800899c:	bfb8      	it	lt
 800899e:	18e4      	addlt	r4, r4, r3
 80089a0:	f000 f83e 	bl	8008a20 <__malloc_lock>
 80089a4:	4a1d      	ldr	r2, [pc, #116]	@ (8008a1c <_free_r+0x90>)
 80089a6:	6813      	ldr	r3, [r2, #0]
 80089a8:	b933      	cbnz	r3, 80089b8 <_free_r+0x2c>
 80089aa:	6063      	str	r3, [r4, #4]
 80089ac:	6014      	str	r4, [r2, #0]
 80089ae:	4628      	mov	r0, r5
 80089b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089b4:	f000 b83a 	b.w	8008a2c <__malloc_unlock>
 80089b8:	42a3      	cmp	r3, r4
 80089ba:	d908      	bls.n	80089ce <_free_r+0x42>
 80089bc:	6820      	ldr	r0, [r4, #0]
 80089be:	1821      	adds	r1, r4, r0
 80089c0:	428b      	cmp	r3, r1
 80089c2:	bf01      	itttt	eq
 80089c4:	6819      	ldreq	r1, [r3, #0]
 80089c6:	685b      	ldreq	r3, [r3, #4]
 80089c8:	1809      	addeq	r1, r1, r0
 80089ca:	6021      	streq	r1, [r4, #0]
 80089cc:	e7ed      	b.n	80089aa <_free_r+0x1e>
 80089ce:	461a      	mov	r2, r3
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	b10b      	cbz	r3, 80089d8 <_free_r+0x4c>
 80089d4:	42a3      	cmp	r3, r4
 80089d6:	d9fa      	bls.n	80089ce <_free_r+0x42>
 80089d8:	6811      	ldr	r1, [r2, #0]
 80089da:	1850      	adds	r0, r2, r1
 80089dc:	42a0      	cmp	r0, r4
 80089de:	d10b      	bne.n	80089f8 <_free_r+0x6c>
 80089e0:	6820      	ldr	r0, [r4, #0]
 80089e2:	4401      	add	r1, r0
 80089e4:	1850      	adds	r0, r2, r1
 80089e6:	4283      	cmp	r3, r0
 80089e8:	6011      	str	r1, [r2, #0]
 80089ea:	d1e0      	bne.n	80089ae <_free_r+0x22>
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	6053      	str	r3, [r2, #4]
 80089f2:	4408      	add	r0, r1
 80089f4:	6010      	str	r0, [r2, #0]
 80089f6:	e7da      	b.n	80089ae <_free_r+0x22>
 80089f8:	d902      	bls.n	8008a00 <_free_r+0x74>
 80089fa:	230c      	movs	r3, #12
 80089fc:	602b      	str	r3, [r5, #0]
 80089fe:	e7d6      	b.n	80089ae <_free_r+0x22>
 8008a00:	6820      	ldr	r0, [r4, #0]
 8008a02:	1821      	adds	r1, r4, r0
 8008a04:	428b      	cmp	r3, r1
 8008a06:	bf04      	itt	eq
 8008a08:	6819      	ldreq	r1, [r3, #0]
 8008a0a:	685b      	ldreq	r3, [r3, #4]
 8008a0c:	6063      	str	r3, [r4, #4]
 8008a0e:	bf04      	itt	eq
 8008a10:	1809      	addeq	r1, r1, r0
 8008a12:	6021      	streq	r1, [r4, #0]
 8008a14:	6054      	str	r4, [r2, #4]
 8008a16:	e7ca      	b.n	80089ae <_free_r+0x22>
 8008a18:	bd38      	pop	{r3, r4, r5, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20005418 	.word	0x20005418

08008a20 <__malloc_lock>:
 8008a20:	4801      	ldr	r0, [pc, #4]	@ (8008a28 <__malloc_lock+0x8>)
 8008a22:	f7ff bfa3 	b.w	800896c <__retarget_lock_acquire_recursive>
 8008a26:	bf00      	nop
 8008a28:	20005414 	.word	0x20005414

08008a2c <__malloc_unlock>:
 8008a2c:	4801      	ldr	r0, [pc, #4]	@ (8008a34 <__malloc_unlock+0x8>)
 8008a2e:	f7ff bf9e 	b.w	800896e <__retarget_lock_release_recursive>
 8008a32:	bf00      	nop
 8008a34:	20005414 	.word	0x20005414

08008a38 <_init>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	bf00      	nop
 8008a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3e:	bc08      	pop	{r3}
 8008a40:	469e      	mov	lr, r3
 8008a42:	4770      	bx	lr

08008a44 <_fini>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr
