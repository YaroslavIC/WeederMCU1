
WeederMCU1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006930  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08006ad0  08006ad0  00007ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bc4  08006bc4  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006bc4  08006bc4  00007bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bcc  08006bcc  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bcc  08006bcc  00007bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bd0  08006bd0  00007bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006bd4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dd8  20000060  08006c34  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e38  08006c34  00008e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac16  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003887  00000000  00000000  00022ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  00026530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012d6  00000000  00000000  00027d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000037af  00000000  00000000  00029026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b2b5  00000000  00000000  0002c7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5427  00000000  00000000  00047a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eceb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a1c  00000000  00000000  000ecef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000f3910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ab8 	.word	0x08006ab8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006ab8 	.word	0x08006ab8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fe7a 	bl	80011cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f84e 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 fab8 	bl	8000a50 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 fa96 	bl	8000a10 <MX_DMA_Init>
  MX_I2C1_Init();
 80004e4:	f000 f908 	bl	80006f8 <MX_I2C1_Init>
  MX_ADC1_Init();
 80004e8:	f000 f8a6 	bl	8000638 <MX_ADC1_Init>
  MX_I2C2_Init();
 80004ec:	f000 f932 	bl	8000754 <MX_I2C2_Init>
  MX_TIM2_Init();
 80004f0:	f000 fa40 	bl	8000974 <MX_TIM2_Init>
  MX_TIM1_Init();
 80004f4:	f000 f992 	bl	800081c <MX_TIM1_Init>
  MX_SPI2_Init();
 80004f8:	f000 f95a 	bl	80007b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fc:	f003 fc42 	bl	8003d84 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000500:	4a11      	ldr	r2, [pc, #68]	@ (8000548 <main+0x78>)
 8000502:	2100      	movs	r1, #0
 8000504:	4811      	ldr	r0, [pc, #68]	@ (800054c <main+0x7c>)
 8000506:	f003 fc87 	bl	8003e18 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a10      	ldr	r2, [pc, #64]	@ (8000550 <main+0x80>)
 800050e:	6013      	str	r3, [r2, #0]

  /* creation of Task1ms */
  Task1msHandle = osThreadNew(Task1msHandler, NULL, &Task1ms_attributes);
 8000510:	4a10      	ldr	r2, [pc, #64]	@ (8000554 <main+0x84>)
 8000512:	2100      	movs	r1, #0
 8000514:	4810      	ldr	r0, [pc, #64]	@ (8000558 <main+0x88>)
 8000516:	f003 fc7f 	bl	8003e18 <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a0f      	ldr	r2, [pc, #60]	@ (800055c <main+0x8c>)
 800051e:	6013      	str	r3, [r2, #0]

  /* creation of Task10ms */
  Task10msHandle = osThreadNew(Task10msHandler, NULL, &Task10ms_attributes);
 8000520:	4a0f      	ldr	r2, [pc, #60]	@ (8000560 <main+0x90>)
 8000522:	2100      	movs	r1, #0
 8000524:	480f      	ldr	r0, [pc, #60]	@ (8000564 <main+0x94>)
 8000526:	f003 fc77 	bl	8003e18 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a0e      	ldr	r2, [pc, #56]	@ (8000568 <main+0x98>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of Task100ms */
  Task100msHandle = osThreadNew(Task100msHandler, NULL, &Task100ms_attributes);
 8000530:	4a0e      	ldr	r2, [pc, #56]	@ (800056c <main+0x9c>)
 8000532:	2100      	movs	r1, #0
 8000534:	480e      	ldr	r0, [pc, #56]	@ (8000570 <main+0xa0>)
 8000536:	f003 fc6f 	bl	8003e18 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a0d      	ldr	r2, [pc, #52]	@ (8000574 <main+0xa4>)
 800053e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000540:	f003 fc44 	bl	8003dcc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x74>
 8000548:	08006b14 	.word	0x08006b14
 800054c:	08000b99 	.word	0x08000b99
 8000550:	200002b4 	.word	0x200002b4
 8000554:	08006b38 	.word	0x08006b38
 8000558:	08000ba9 	.word	0x08000ba9
 800055c:	200002b8 	.word	0x200002b8
 8000560:	08006b5c 	.word	0x08006b5c
 8000564:	08000bb9 	.word	0x08000bb9
 8000568:	200002bc 	.word	0x200002bc
 800056c:	08006b80 	.word	0x08006b80
 8000570:	08000bc9 	.word	0x08000bc9
 8000574:	200002c0 	.word	0x200002c0

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	@ 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f006 f9ae 	bl	80068e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b23      	ldr	r3, [pc, #140]	@ (8000630 <SystemClock_Config+0xb8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	4a22      	ldr	r2, [pc, #136]	@ (8000630 <SystemClock_Config+0xb8>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ac:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <SystemClock_Config+0xb8>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <SystemClock_Config+0xbc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000634 <SystemClock_Config+0xbc>)
 80005c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <SystemClock_Config+0xbc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 ff3f 	bl	8002470 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005f8:	f000 fb00 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 f9a2 	bl	8002960 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000622:	f000 faeb 	bl	8000bfc <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	@ 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064a:	4b28      	ldr	r3, [pc, #160]	@ (80006ec <MX_ADC1_Init+0xb4>)
 800064c:	4a28      	ldr	r2, [pc, #160]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 800064e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000650:	4b26      	ldr	r3, [pc, #152]	@ (80006ec <MX_ADC1_Init+0xb4>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000656:	4b25      	ldr	r3, [pc, #148]	@ (80006ec <MX_ADC1_Init+0xb4>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <MX_ADC1_Init+0xb4>)
 800065e:	2201      	movs	r2, #1
 8000660:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000662:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <MX_ADC1_Init+0xb4>)
 8000664:	2200      	movs	r2, #0
 8000666:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b20      	ldr	r3, [pc, #128]	@ (80006ec <MX_ADC1_Init+0xb4>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000670:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <MX_ADC1_Init+0xb4>)
 8000672:	2200      	movs	r2, #0
 8000674:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000676:	4b1d      	ldr	r3, [pc, #116]	@ (80006ec <MX_ADC1_Init+0xb4>)
 8000678:	4a1e      	ldr	r2, [pc, #120]	@ (80006f4 <MX_ADC1_Init+0xbc>)
 800067a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ec <MX_ADC1_Init+0xb4>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000682:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <MX_ADC1_Init+0xb4>)
 8000684:	2202      	movs	r2, #2
 8000686:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000688:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <MX_ADC1_Init+0xb4>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000690:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <MX_ADC1_Init+0xb4>)
 8000692:	2201      	movs	r2, #1
 8000694:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000696:	4815      	ldr	r0, [pc, #84]	@ (80006ec <MX_ADC1_Init+0xb4>)
 8000698:	f000 fdda 	bl	8001250 <HAL_ADC_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006a2:	f000 faab 	bl	8000bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80006ae:	2303      	movs	r3, #3
 80006b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	4619      	mov	r1, r3
 80006b6:	480d      	ldr	r0, [pc, #52]	@ (80006ec <MX_ADC1_Init+0xb4>)
 80006b8:	f000 fe0e 	bl	80012d8 <HAL_ADC_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006c2:	f000 fa9b 	bl	8000bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	4619      	mov	r1, r3
 80006d2:	4806      	ldr	r0, [pc, #24]	@ (80006ec <MX_ADC1_Init+0xb4>)
 80006d4:	f000 fe00 	bl	80012d8 <HAL_ADC_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80006de:	f000 fa8d 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000007c 	.word	0x2000007c
 80006f0:	40012000 	.word	0x40012000
 80006f4:	0f000001 	.word	0x0f000001

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <MX_I2C1_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	@ (800074c <MX_I2C1_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_I2C1_Init+0x50>)
 8000704:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <MX_I2C1_Init+0x58>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_I2C1_Init+0x50>)
 8000716:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800071a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	@ (8000748 <MX_I2C1_Init+0x50>)
 8000736:	f001 fd57 	bl	80021e8 <HAL_I2C_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 fa5c 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000124 	.word	0x20000124
 800074c:	40005400 	.word	0x40005400
 8000750:	000186a0 	.word	0x000186a0

08000754 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_I2C2_Init+0x50>)
 800075a:	4a13      	ldr	r2, [pc, #76]	@ (80007a8 <MX_I2C2_Init+0x54>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_I2C2_Init+0x50>)
 8000760:	4a12      	ldr	r2, [pc, #72]	@ (80007ac <MX_I2C2_Init+0x58>)
 8000762:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_I2C2_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_I2C2_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_I2C2_Init+0x50>)
 8000772:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000776:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000778:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <MX_I2C2_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_I2C2_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <MX_I2C2_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_I2C2_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <MX_I2C2_Init+0x50>)
 8000792:	f001 fd29 	bl	80021e8 <HAL_I2C_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800079c:	f000 fa2e 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000178 	.word	0x20000178
 80007a8:	40005800 	.word	0x40005800
 80007ac:	000186a0 	.word	0x000186a0

080007b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007b4:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <MX_SPI2_Init+0x64>)
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <MX_SPI2_Init+0x68>)
 80007b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b16      	ldr	r3, [pc, #88]	@ (8000814 <MX_SPI2_Init+0x64>)
 80007bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_SPI2_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_SPI2_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_SPI2_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_SPI2_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_SPI2_Init+0x64>)
 80007dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_SPI2_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <MX_SPI2_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_SPI2_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <MX_SPI2_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_SPI2_Init+0x64>)
 80007fc:	220a      	movs	r2, #10
 80007fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	@ (8000814 <MX_SPI2_Init+0x64>)
 8000802:	f002 fabf 	bl	8002d84 <HAL_SPI_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800080c:	f000 f9f6 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200001cc 	.word	0x200001cc
 8000818:	40003800 	.word	0x40003800

0800081c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b096      	sub	sp, #88	@ 0x58
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000822:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000830:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2220      	movs	r2, #32
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f006 f847 	bl	80068e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800085a:	4b44      	ldr	r3, [pc, #272]	@ (800096c <MX_TIM1_Init+0x150>)
 800085c:	4a44      	ldr	r2, [pc, #272]	@ (8000970 <MX_TIM1_Init+0x154>)
 800085e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000860:	4b42      	ldr	r3, [pc, #264]	@ (800096c <MX_TIM1_Init+0x150>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b41      	ldr	r3, [pc, #260]	@ (800096c <MX_TIM1_Init+0x150>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800086c:	4b3f      	ldr	r3, [pc, #252]	@ (800096c <MX_TIM1_Init+0x150>)
 800086e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000872:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b3d      	ldr	r3, [pc, #244]	@ (800096c <MX_TIM1_Init+0x150>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800087a:	4b3c      	ldr	r3, [pc, #240]	@ (800096c <MX_TIM1_Init+0x150>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000880:	4b3a      	ldr	r3, [pc, #232]	@ (800096c <MX_TIM1_Init+0x150>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000886:	4839      	ldr	r0, [pc, #228]	@ (800096c <MX_TIM1_Init+0x150>)
 8000888:	f002 fb05 	bl	8002e96 <HAL_TIM_Base_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000892:	f000 f9b3 	bl	8000bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800089c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80008a0:	4619      	mov	r1, r3
 80008a2:	4832      	ldr	r0, [pc, #200]	@ (800096c <MX_TIM1_Init+0x150>)
 80008a4:	f002 fdb4 	bl	8003410 <HAL_TIM_ConfigClockSource>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008ae:	f000 f9a5 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008b2:	482e      	ldr	r0, [pc, #184]	@ (800096c <MX_TIM1_Init+0x150>)
 80008b4:	f002 fba0 	bl	8002ff8 <HAL_TIM_PWM_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008be:	f000 f99d 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008ce:	4619      	mov	r1, r3
 80008d0:	4826      	ldr	r0, [pc, #152]	@ (800096c <MX_TIM1_Init+0x150>)
 80008d2:	f003 f93f 	bl	8003b54 <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80008dc:	f000 f98e 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e0:	2360      	movs	r3, #96	@ 0x60
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ec:	2300      	movs	r3, #0
 80008ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000900:	2200      	movs	r2, #0
 8000902:	4619      	mov	r1, r3
 8000904:	4819      	ldr	r0, [pc, #100]	@ (800096c <MX_TIM1_Init+0x150>)
 8000906:	f002 fcc1 	bl	800328c <HAL_TIM_PWM_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000910:	f000 f974 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000918:	220c      	movs	r2, #12
 800091a:	4619      	mov	r1, r3
 800091c:	4813      	ldr	r0, [pc, #76]	@ (800096c <MX_TIM1_Init+0x150>)
 800091e:	f002 fcb5 	bl	800328c <HAL_TIM_PWM_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000928:	f000 f968 	bl	8000bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000940:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000944:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4807      	ldr	r0, [pc, #28]	@ (800096c <MX_TIM1_Init+0x150>)
 8000950:	f003 f96e 	bl	8003c30 <HAL_TIMEx_ConfigBreakDeadTime>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800095a:	f000 f94f 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800095e:	4803      	ldr	r0, [pc, #12]	@ (800096c <MX_TIM1_Init+0x150>)
 8000960:	f000 fb0e 	bl	8000f80 <HAL_TIM_MspPostInit>

}
 8000964:	bf00      	nop
 8000966:	3758      	adds	r7, #88	@ 0x58
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000224 	.word	0x20000224
 8000970:	40010000 	.word	0x40010000

08000974 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	463b      	mov	r3, r7
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000990:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <MX_TIM2_Init+0x98>)
 8000992:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000996:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 8000998:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <MX_TIM2_Init+0x98>)
 800099a:	f240 623f 	movw	r2, #1599	@ 0x63f
 800099e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <MX_TIM2_Init+0x98>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80009a6:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <MX_TIM2_Init+0x98>)
 80009a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <MX_TIM2_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <MX_TIM2_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ba:	4814      	ldr	r0, [pc, #80]	@ (8000a0c <MX_TIM2_Init+0x98>)
 80009bc:	f002 fa6b 	bl	8002e96 <HAL_TIM_Base_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009c6:	f000 f919 	bl	8000bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	4619      	mov	r1, r3
 80009d6:	480d      	ldr	r0, [pc, #52]	@ (8000a0c <MX_TIM2_Init+0x98>)
 80009d8:	f002 fd1a 	bl	8003410 <HAL_TIM_ConfigClockSource>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009e2:	f000 f90b 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	4619      	mov	r1, r3
 80009f2:	4806      	ldr	r0, [pc, #24]	@ (8000a0c <MX_TIM2_Init+0x98>)
 80009f4:	f003 f8ae 	bl	8003b54 <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009fe:	f000 f8fd 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000026c 	.word	0x2000026c

08000a10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <MX_DMA_Init+0x3c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a4c <MX_DMA_Init+0x3c>)
 8000a20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_DMA_Init+0x3c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2105      	movs	r1, #5
 8000a36:	2038      	movs	r0, #56	@ 0x38
 8000a38:	f000 ff24 	bl	8001884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a3c:	2038      	movs	r0, #56	@ 0x38
 8000a3e:	f000 ff3d 	bl	80018bc <HAL_NVIC_EnableIRQ>

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	@ 0x28
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b47      	ldr	r3, [pc, #284]	@ (8000b88 <MX_GPIO_Init+0x138>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a46      	ldr	r2, [pc, #280]	@ (8000b88 <MX_GPIO_Init+0x138>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b44      	ldr	r3, [pc, #272]	@ (8000b88 <MX_GPIO_Init+0x138>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b40      	ldr	r3, [pc, #256]	@ (8000b88 <MX_GPIO_Init+0x138>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8000b88 <MX_GPIO_Init+0x138>)
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b3d      	ldr	r3, [pc, #244]	@ (8000b88 <MX_GPIO_Init+0x138>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b39      	ldr	r3, [pc, #228]	@ (8000b88 <MX_GPIO_Init+0x138>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a38      	ldr	r2, [pc, #224]	@ (8000b88 <MX_GPIO_Init+0x138>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b36      	ldr	r3, [pc, #216]	@ (8000b88 <MX_GPIO_Init+0x138>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b32      	ldr	r3, [pc, #200]	@ (8000b88 <MX_GPIO_Init+0x138>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a31      	ldr	r2, [pc, #196]	@ (8000b88 <MX_GPIO_Init+0x138>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b2f      	ldr	r3, [pc, #188]	@ (8000b88 <MX_GPIO_Init+0x138>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUELED_GPIO_Port, BLUELED_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000adc:	482b      	ldr	r0, [pc, #172]	@ (8000b8c <MX_GPIO_Init+0x13c>)
 8000ade:	f001 fb69 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_INA_Pin|R_INB_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	482a      	ldr	r0, [pc, #168]	@ (8000b90 <MX_GPIO_Init+0x140>)
 8000ae8:	f001 fb64 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_INB_Pin|L_INA_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8000af2:	4828      	ldr	r0, [pc, #160]	@ (8000b94 <MX_GPIO_Init+0x144>)
 8000af4:	f001 fb5e 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUELED_Pin */
  GPIO_InitStruct.Pin = BLUELED_Pin;
 8000af8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUELED_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	481e      	ldr	r0, [pc, #120]	@ (8000b8c <MX_GPIO_Init+0x13c>)
 8000b12:	f001 f9cb 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b16:	2380      	movs	r3, #128	@ 0x80
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	481a      	ldr	r0, [pc, #104]	@ (8000b94 <MX_GPIO_Init+0x144>)
 8000b2a:	f001 f9bf 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pins : R_INA_Pin R_INB_Pin */
  GPIO_InitStruct.Pin = R_INA_Pin|R_INB_Pin;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4812      	ldr	r0, [pc, #72]	@ (8000b90 <MX_GPIO_Init+0x140>)
 8000b46:	f001 f9b1 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pins : L_INB_Pin L_INA_Pin */
  GPIO_InitStruct.Pin = L_INB_Pin|L_INA_Pin;
 8000b4a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <MX_GPIO_Init+0x144>)
 8000b64:	f001 f9a2 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b68:	2310      	movs	r3, #16
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_GPIO_Init+0x140>)
 8000b7c:	f001 f996 	bl	8001eac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b80:	bf00      	nop
 8000b82:	3728      	adds	r7, #40	@ 0x28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40020000 	.word	0x40020000

08000b98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f003 f9cb 	bl	8003f3c <osDelay>
 8000ba6:	e7fb      	b.n	8000ba0 <StartDefaultTask+0x8>

08000ba8 <Task1msHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1msHandler */
void Task1msHandler(void *argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1msHandler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f003 f9c3 	bl	8003f3c <osDelay>
 8000bb6:	e7fb      	b.n	8000bb0 <Task1msHandler+0x8>

08000bb8 <Task10msHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task10msHandler */
void Task10msHandler(void *argument)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task10msHandler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f003 f9bb 	bl	8003f3c <osDelay>
 8000bc6:	e7fb      	b.n	8000bc0 <Task10msHandler+0x8>

08000bc8 <Task100msHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task100msHandler */
void Task100msHandler(void *argument)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task100msHandler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f003 f9b3 	bl	8003f3c <osDelay>
 8000bd6:	e7fb      	b.n	8000bd0 <Task100msHandler+0x8>

08000bd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bea:	f000 fb11 	bl	8001210 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40014800 	.word	0x40014800

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <Error_Handler+0x8>

08000c08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <HAL_MspInit+0x54>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	4a11      	ldr	r2, [pc, #68]	@ (8000c5c <HAL_MspInit+0x54>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <HAL_MspInit+0x54>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <HAL_MspInit+0x54>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <HAL_MspInit+0x54>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <HAL_MspInit+0x54>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	210f      	movs	r1, #15
 8000c4a:	f06f 0001 	mvn.w	r0, #1
 8000c4e:	f000 fe19 	bl	8001884 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	@ 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8000d38 <HAL_ADC_MspInit+0xd8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d156      	bne.n	8000d30 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <HAL_ADC_MspInit+0xdc>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8000d3c <HAL_ADC_MspInit+0xdc>)
 8000c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c92:	4b2a      	ldr	r3, [pc, #168]	@ (8000d3c <HAL_ADC_MspInit+0xdc>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <HAL_ADC_MspInit+0xdc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a25      	ldr	r2, [pc, #148]	@ (8000d3c <HAL_ADC_MspInit+0xdc>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b23      	ldr	r3, [pc, #140]	@ (8000d3c <HAL_ADC_MspInit+0xdc>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	481c      	ldr	r0, [pc, #112]	@ (8000d40 <HAL_ADC_MspInit+0xe0>)
 8000cce:	f001 f8ed 	bl	8001eac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <HAL_ADC_MspInit+0xe4>)
 8000cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d48 <HAL_ADC_MspInit+0xe8>)
 8000cd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <HAL_ADC_MspInit+0xe4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cde:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <HAL_ADC_MspInit+0xe4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce4:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <HAL_ADC_MspInit+0xe4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cea:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <HAL_ADC_MspInit+0xe4>)
 8000cec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cf0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <HAL_ADC_MspInit+0xe4>)
 8000cf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cf8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cfa:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_ADC_MspInit+0xe4>)
 8000cfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <HAL_ADC_MspInit+0xe4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_ADC_MspInit+0xe4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <HAL_ADC_MspInit+0xe4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d14:	480b      	ldr	r0, [pc, #44]	@ (8000d44 <HAL_ADC_MspInit+0xe4>)
 8000d16:	f000 fddf 	bl	80018d8 <HAL_DMA_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000d20:	f7ff ff6c 	bl	8000bfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a07      	ldr	r2, [pc, #28]	@ (8000d44 <HAL_ADC_MspInit+0xe4>)
 8000d28:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d2a:	4a06      	ldr	r2, [pc, #24]	@ (8000d44 <HAL_ADC_MspInit+0xe4>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	@ 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40012000 	.word	0x40012000
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000
 8000d44:	200000c4 	.word	0x200000c4
 8000d48:	40026410 	.word	0x40026410

08000d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	@ 0x30
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a3b      	ldr	r2, [pc, #236]	@ (8000e58 <HAL_I2C_MspInit+0x10c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d12d      	bne.n	8000dca <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	4b3a      	ldr	r3, [pc, #232]	@ (8000e5c <HAL_I2C_MspInit+0x110>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a39      	ldr	r2, [pc, #228]	@ (8000e5c <HAL_I2C_MspInit+0x110>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b37      	ldr	r3, [pc, #220]	@ (8000e5c <HAL_I2C_MspInit+0x110>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d8a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d90:	2312      	movs	r3, #18
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	482e      	ldr	r0, [pc, #184]	@ (8000e60 <HAL_I2C_MspInit+0x114>)
 8000da8:	f001 f880 	bl	8001eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e5c <HAL_I2C_MspInit+0x110>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db4:	4a29      	ldr	r2, [pc, #164]	@ (8000e5c <HAL_I2C_MspInit+0x110>)
 8000db6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbc:	4b27      	ldr	r3, [pc, #156]	@ (8000e5c <HAL_I2C_MspInit+0x110>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dc8:	e041      	b.n	8000e4e <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a25      	ldr	r2, [pc, #148]	@ (8000e64 <HAL_I2C_MspInit+0x118>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d13c      	bne.n	8000e4e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	4b20      	ldr	r3, [pc, #128]	@ (8000e5c <HAL_I2C_MspInit+0x110>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8000e5c <HAL_I2C_MspInit+0x110>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <HAL_I2C_MspInit+0x110>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000df0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df6:	2312      	movs	r3, #18
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e02:	2304      	movs	r3, #4
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4814      	ldr	r0, [pc, #80]	@ (8000e60 <HAL_I2C_MspInit+0x114>)
 8000e0e:	f001 f84d 	bl	8001eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e12:	2308      	movs	r3, #8
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e16:	2312      	movs	r3, #18
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000e22:	2309      	movs	r3, #9
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480c      	ldr	r0, [pc, #48]	@ (8000e60 <HAL_I2C_MspInit+0x114>)
 8000e2e:	f001 f83d 	bl	8001eac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <HAL_I2C_MspInit+0x110>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	4a08      	ldr	r2, [pc, #32]	@ (8000e5c <HAL_I2C_MspInit+0x110>)
 8000e3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_I2C_MspInit+0x110>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
}
 8000e4e:	bf00      	nop
 8000e50:	3730      	adds	r7, #48	@ 0x30
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020400 	.word	0x40020400
 8000e64:	40005800 	.word	0x40005800

08000e68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	@ 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a19      	ldr	r2, [pc, #100]	@ (8000eec <HAL_SPI_MspInit+0x84>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d12c      	bne.n	8000ee4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <HAL_SPI_MspInit+0x88>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	4a17      	ldr	r2, [pc, #92]	@ (8000ef0 <HAL_SPI_MspInit+0x88>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <HAL_SPI_MspInit+0x88>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <HAL_SPI_MspInit+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a10      	ldr	r2, [pc, #64]	@ (8000ef0 <HAL_SPI_MspInit+0x88>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <HAL_SPI_MspInit+0x88>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ec2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ed4:	2305      	movs	r3, #5
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <HAL_SPI_MspInit+0x8c>)
 8000ee0:	f000 ffe4 	bl	8001eac <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	@ 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40003800 	.word	0x40003800
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020400 	.word	0x40020400

08000ef8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a1c      	ldr	r2, [pc, #112]	@ (8000f78 <HAL_TIM_Base_MspInit+0x80>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d116      	bne.n	8000f38 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <HAL_TIM_Base_MspInit+0x84>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	4a1a      	ldr	r2, [pc, #104]	@ (8000f7c <HAL_TIM_Base_MspInit+0x84>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <HAL_TIM_Base_MspInit+0x84>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	210f      	movs	r1, #15
 8000f2a:	201a      	movs	r0, #26
 8000f2c:	f000 fcaa 	bl	8001884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000f30:	201a      	movs	r0, #26
 8000f32:	f000 fcc3 	bl	80018bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f36:	e01a      	b.n	8000f6e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f40:	d115      	bne.n	8000f6e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <HAL_TIM_Base_MspInit+0x84>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f7c <HAL_TIM_Base_MspInit+0x84>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f52:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <HAL_TIM_Base_MspInit+0x84>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2105      	movs	r1, #5
 8000f62:	201c      	movs	r0, #28
 8000f64:	f000 fc8e 	bl	8001884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f68:	201c      	movs	r0, #28
 8000f6a:	f000 fca7 	bl	80018bc <HAL_NVIC_EnableIRQ>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40010000 	.word	0x40010000
 8000f7c:	40023800 	.word	0x40023800

08000f80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <HAL_TIM_MspPostInit+0x68>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d11e      	bne.n	8000fe0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <HAL_TIM_MspPostInit+0x6c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a10      	ldr	r2, [pc, #64]	@ (8000fec <HAL_TIM_MspPostInit+0x6c>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_TIM_MspPostInit+0x6c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000fbe:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000fc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <HAL_TIM_MspPostInit+0x70>)
 8000fdc:	f000 ff66 	bl	8001eac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020000 	.word	0x40020000

08000ff4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	@ 0x30
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b2e      	ldr	r3, [pc, #184]	@ (80010c4 <HAL_InitTick+0xd0>)
 800100a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100c:	4a2d      	ldr	r2, [pc, #180]	@ (80010c4 <HAL_InitTick+0xd0>)
 800100e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001012:	6453      	str	r3, [r2, #68]	@ 0x44
 8001014:	4b2b      	ldr	r3, [pc, #172]	@ (80010c4 <HAL_InitTick+0xd0>)
 8001016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001018:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001020:	f107 020c 	add.w	r2, r7, #12
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f001 fe78 	bl	8002d20 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001030:	f001 fe62 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8001034:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001038:	4a23      	ldr	r2, [pc, #140]	@ (80010c8 <HAL_InitTick+0xd4>)
 800103a:	fba2 2303 	umull	r2, r3, r2, r3
 800103e:	0c9b      	lsrs	r3, r3, #18
 8001040:	3b01      	subs	r3, #1
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001044:	4b21      	ldr	r3, [pc, #132]	@ (80010cc <HAL_InitTick+0xd8>)
 8001046:	4a22      	ldr	r2, [pc, #136]	@ (80010d0 <HAL_InitTick+0xdc>)
 8001048:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800104a:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <HAL_InitTick+0xd8>)
 800104c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001050:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001052:	4a1e      	ldr	r2, [pc, #120]	@ (80010cc <HAL_InitTick+0xd8>)
 8001054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001056:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001058:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <HAL_InitTick+0xd8>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <HAL_InitTick+0xd8>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001064:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <HAL_InitTick+0xd8>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800106a:	4818      	ldr	r0, [pc, #96]	@ (80010cc <HAL_InitTick+0xd8>)
 800106c:	f001 ff13 	bl	8002e96 <HAL_TIM_Base_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001076:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800107a:	2b00      	cmp	r3, #0
 800107c:	d11b      	bne.n	80010b6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 800107e:	4813      	ldr	r0, [pc, #76]	@ (80010cc <HAL_InitTick+0xd8>)
 8001080:	f001 ff58 	bl	8002f34 <HAL_TIM_Base_Start_IT>
 8001084:	4603      	mov	r3, r0
 8001086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800108a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800108e:	2b00      	cmp	r3, #0
 8001090:	d111      	bne.n	80010b6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001092:	201a      	movs	r0, #26
 8001094:	f000 fc12 	bl	80018bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b0f      	cmp	r3, #15
 800109c:	d808      	bhi.n	80010b0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 800109e:	2200      	movs	r2, #0
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	201a      	movs	r0, #26
 80010a4:	f000 fbee 	bl	8001884 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a8:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <HAL_InitTick+0xe0>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e002      	b.n	80010b6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3730      	adds	r7, #48	@ 0x30
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	431bde83 	.word	0x431bde83
 80010cc:	200002c4 	.word	0x200002c4
 80010d0:	40014800 	.word	0x40014800
 80010d4:	20000004 	.word	0x20000004

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <NMI_Handler+0x4>

080010e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <HardFault_Handler+0x4>

080010e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <MemManage_Handler+0x4>

080010f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <UsageFault_Handler+0x4>

08001100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001114:	4803      	ldr	r0, [pc, #12]	@ (8001124 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001116:	f001 ffc8 	bl	80030aa <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800111a:	4803      	ldr	r0, [pc, #12]	@ (8001128 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800111c:	f001 ffc5 	bl	80030aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000224 	.word	0x20000224
 8001128:	200002c4 	.word	0x200002c4

0800112c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001130:	4802      	ldr	r0, [pc, #8]	@ (800113c <TIM2_IRQHandler+0x10>)
 8001132:	f001 ffba 	bl	80030aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000026c 	.word	0x2000026c

08001140 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001144:	4802      	ldr	r0, [pc, #8]	@ (8001150 <DMA2_Stream0_IRQHandler+0x10>)
 8001146:	f000 fc75 	bl	8001a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200000c4 	.word	0x200000c4

08001154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <SystemInit+0x20>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800115e:	4a05      	ldr	r2, [pc, #20]	@ (8001174 <SystemInit+0x20>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800117c:	f7ff ffea 	bl	8001154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001180:	480c      	ldr	r0, [pc, #48]	@ (80011b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001182:	490d      	ldr	r1, [pc, #52]	@ (80011b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001184:	4a0d      	ldr	r2, [pc, #52]	@ (80011bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001198:	4c0a      	ldr	r4, [pc, #40]	@ (80011c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a6:	f005 fbfd 	bl	80069a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011aa:	f7ff f991 	bl	80004d0 <main>
  bx  lr    
 80011ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011bc:	08006bd4 	.word	0x08006bd4
  ldr r2, =_sbss
 80011c0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80011c4:	20004e38 	.word	0x20004e38

080011c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC_IRQHandler>
	...

080011cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d0:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0d      	ldr	r2, [pc, #52]	@ (800120c <HAL_Init+0x40>)
 80011d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <HAL_Init+0x40>)
 80011e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	@ (800120c <HAL_Init+0x40>)
 80011ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 fb3a 	bl	800186e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fa:	200f      	movs	r0, #15
 80011fc:	f7ff fefa 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001200:	f7ff fd02 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023c00 	.word	0x40023c00

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	2000030c 	.word	0x2000030c

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2000030c 	.word	0x2000030c

08001250 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e033      	b.n	80012ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	2b00      	cmp	r3, #0
 800126c:	d109      	bne.n	8001282 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fcf6 	bl	8000c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	2b00      	cmp	r3, #0
 800128c:	d118      	bne.n	80012c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001296:	f023 0302 	bic.w	r3, r3, #2
 800129a:	f043 0202 	orr.w	r2, r3, #2
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f93a 	bl	800151c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	f023 0303 	bic.w	r3, r3, #3
 80012b6:	f043 0201 	orr.w	r2, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80012be:	e001      	b.n	80012c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <HAL_ADC_ConfigChannel+0x1c>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e105      	b.n	8001500 <HAL_ADC_ConfigChannel+0x228>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b09      	cmp	r3, #9
 8001302:	d925      	bls.n	8001350 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68d9      	ldr	r1, [r3, #12]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	b29b      	uxth	r3, r3
 8001310:	461a      	mov	r2, r3
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	3b1e      	subs	r3, #30
 800131a:	2207      	movs	r2, #7
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43da      	mvns	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	400a      	ands	r2, r1
 8001328:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68d9      	ldr	r1, [r3, #12]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	4618      	mov	r0, r3
 800133c:	4603      	mov	r3, r0
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4403      	add	r3, r0
 8001342:	3b1e      	subs	r3, #30
 8001344:	409a      	lsls	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	e022      	b.n	8001396 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6919      	ldr	r1, [r3, #16]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	b29b      	uxth	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	4613      	mov	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	2207      	movs	r2, #7
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	400a      	ands	r2, r1
 8001372:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6919      	ldr	r1, [r3, #16]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	4618      	mov	r0, r3
 8001386:	4603      	mov	r3, r0
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4403      	add	r3, r0
 800138c:	409a      	lsls	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b06      	cmp	r3, #6
 800139c:	d824      	bhi.n	80013e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	3b05      	subs	r3, #5
 80013b0:	221f      	movs	r2, #31
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	400a      	ands	r2, r1
 80013be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	3b05      	subs	r3, #5
 80013da:	fa00 f203 	lsl.w	r2, r0, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80013e6:	e04c      	b.n	8001482 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b0c      	cmp	r3, #12
 80013ee:	d824      	bhi.n	800143a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	3b23      	subs	r3, #35	@ 0x23
 8001402:	221f      	movs	r2, #31
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43da      	mvns	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	400a      	ands	r2, r1
 8001410:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	3b23      	subs	r3, #35	@ 0x23
 800142c:	fa00 f203 	lsl.w	r2, r0, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	631a      	str	r2, [r3, #48]	@ 0x30
 8001438:	e023      	b.n	8001482 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3b41      	subs	r3, #65	@ 0x41
 800144c:	221f      	movs	r2, #31
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	400a      	ands	r2, r1
 800145a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	4618      	mov	r0, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	3b41      	subs	r3, #65	@ 0x41
 8001476:	fa00 f203 	lsl.w	r2, r0, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001482:	4b22      	ldr	r3, [pc, #136]	@ (800150c <HAL_ADC_ConfigChannel+0x234>)
 8001484:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a21      	ldr	r2, [pc, #132]	@ (8001510 <HAL_ADC_ConfigChannel+0x238>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d109      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x1cc>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b12      	cmp	r3, #18
 8001496:	d105      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a19      	ldr	r2, [pc, #100]	@ (8001510 <HAL_ADC_ConfigChannel+0x238>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d123      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x21e>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b10      	cmp	r3, #16
 80014b4:	d003      	beq.n	80014be <HAL_ADC_ConfigChannel+0x1e6>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b11      	cmp	r3, #17
 80014bc:	d11b      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b10      	cmp	r3, #16
 80014d0:	d111      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014d2:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <HAL_ADC_ConfigChannel+0x23c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a10      	ldr	r2, [pc, #64]	@ (8001518 <HAL_ADC_ConfigChannel+0x240>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	0c9a      	lsrs	r2, r3, #18
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014e8:	e002      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f9      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40012300 	.word	0x40012300
 8001510:	40012000 	.word	0x40012000
 8001514:	20000000 	.word	0x20000000
 8001518:	431bde83 	.word	0x431bde83

0800151c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001524:	4b79      	ldr	r3, [pc, #484]	@ (800170c <ADC_Init+0x1f0>)
 8001526:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	431a      	orrs	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	021a      	lsls	r2, r3, #8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001574:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001596:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6899      	ldr	r1, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ae:	4a58      	ldr	r2, [pc, #352]	@ (8001710 <ADC_Init+0x1f4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d022      	beq.n	80015fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6899      	ldr	r1, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6899      	ldr	r1, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	e00f      	b.n	800161a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001608:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001618:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0202 	bic.w	r2, r2, #2
 8001628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6899      	ldr	r1, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7e1b      	ldrb	r3, [r3, #24]
 8001634:	005a      	lsls	r2, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d01b      	beq.n	8001680 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001656:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001666:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6859      	ldr	r1, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001672:	3b01      	subs	r3, #1
 8001674:	035a      	lsls	r2, r3, #13
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	e007      	b.n	8001690 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800168e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800169e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	051a      	lsls	r2, r3, #20
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6899      	ldr	r1, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016d2:	025a      	lsls	r2, r3, #9
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6899      	ldr	r1, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	029a      	lsls	r2, r3, #10
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	609a      	str	r2, [r3, #8]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40012300 	.word	0x40012300
 8001710:	0f000001 	.word	0x0f000001

08001714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800173c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	@ (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <__NVIC_GetPriorityGrouping+0x18>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 0307 	and.w	r3, r3, #7
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db0b      	blt.n	80017a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	f003 021f 	and.w	r2, r3, #31
 8001790:	4907      	ldr	r1, [pc, #28]	@ (80017b0 <__NVIC_EnableIRQ+0x38>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	2001      	movs	r0, #1
 800179a:	fa00 f202 	lsl.w	r2, r0, r2
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000e100 	.word	0xe000e100

080017b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	6039      	str	r1, [r7, #0]
 80017be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	db0a      	blt.n	80017de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	490c      	ldr	r1, [pc, #48]	@ (8001800 <__NVIC_SetPriority+0x4c>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	0112      	lsls	r2, r2, #4
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	440b      	add	r3, r1
 80017d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017dc:	e00a      	b.n	80017f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4908      	ldr	r1, [pc, #32]	@ (8001804 <__NVIC_SetPriority+0x50>)
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	3b04      	subs	r3, #4
 80017ec:	0112      	lsls	r2, r2, #4
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	440b      	add	r3, r1
 80017f2:	761a      	strb	r2, [r3, #24]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000e100 	.word	0xe000e100
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	@ 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f1c3 0307 	rsb	r3, r3, #7
 8001822:	2b04      	cmp	r3, #4
 8001824:	bf28      	it	cs
 8001826:	2304      	movcs	r3, #4
 8001828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3304      	adds	r3, #4
 800182e:	2b06      	cmp	r3, #6
 8001830:	d902      	bls.n	8001838 <NVIC_EncodePriority+0x30>
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3b03      	subs	r3, #3
 8001836:	e000      	b.n	800183a <NVIC_EncodePriority+0x32>
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	f04f 32ff 	mov.w	r2, #4294967295
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	401a      	ands	r2, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001850:	f04f 31ff 	mov.w	r1, #4294967295
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	43d9      	mvns	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	4313      	orrs	r3, r2
         );
}
 8001862:	4618      	mov	r0, r3
 8001864:	3724      	adds	r7, #36	@ 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ff4c 	bl	8001714 <__NVIC_SetPriorityGrouping>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001896:	f7ff ff61 	bl	800175c <__NVIC_GetPriorityGrouping>
 800189a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	6978      	ldr	r0, [r7, #20]
 80018a2:	f7ff ffb1 	bl	8001808 <NVIC_EncodePriority>
 80018a6:	4602      	mov	r2, r0
 80018a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff80 	bl	80017b4 <__NVIC_SetPriority>
}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff54 	bl	8001778 <__NVIC_EnableIRQ>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff fca8 	bl	8001238 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e099      	b.n	8001a28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001914:	e00f      	b.n	8001936 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001916:	f7ff fc8f 	bl	8001238 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b05      	cmp	r3, #5
 8001922:	d908      	bls.n	8001936 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2220      	movs	r2, #32
 8001928:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2203      	movs	r2, #3
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e078      	b.n	8001a28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1e8      	bne.n	8001916 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	4b38      	ldr	r3, [pc, #224]	@ (8001a30 <HAL_DMA_Init+0x158>)
 8001950:	4013      	ands	r3, r2
 8001952:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001962:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4313      	orrs	r3, r2
 8001986:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198c:	2b04      	cmp	r3, #4
 800198e:	d107      	bne.n	80019a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001998:	4313      	orrs	r3, r2
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f023 0307 	bic.w	r3, r3, #7
 80019b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	4313      	orrs	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d117      	bne.n	80019fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00e      	beq.n	80019fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f9e9 	bl	8001db4 <DMA_CheckFifoParam>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2240      	movs	r2, #64	@ 0x40
 80019ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80019f6:	2301      	movs	r3, #1
 80019f8:	e016      	b.n	8001a28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f9a0 	bl	8001d48 <DMA_CalcBaseAndBitshift>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a10:	223f      	movs	r2, #63	@ 0x3f
 8001a12:	409a      	lsls	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	f010803f 	.word	0xf010803f

08001a34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a40:	4b8e      	ldr	r3, [pc, #568]	@ (8001c7c <HAL_DMA_IRQHandler+0x248>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a8e      	ldr	r2, [pc, #568]	@ (8001c80 <HAL_DMA_IRQHandler+0x24c>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0a9b      	lsrs	r3, r3, #10
 8001a4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5e:	2208      	movs	r2, #8
 8001a60:	409a      	lsls	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d01a      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0204 	bic.w	r2, r2, #4
 8001a86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d012      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ace:	f043 0202 	orr.w	r2, r3, #2
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ada:	2204      	movs	r2, #4
 8001adc:	409a      	lsls	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d012      	beq.n	8001b0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00b      	beq.n	8001b0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af8:	2204      	movs	r2, #4
 8001afa:	409a      	lsls	r2, r3
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b04:	f043 0204 	orr.w	r2, r3, #4
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b10:	2210      	movs	r2, #16
 8001b12:	409a      	lsls	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d043      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d03c      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2e:	2210      	movs	r2, #16
 8001b30:	409a      	lsls	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d018      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d108      	bne.n	8001b64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d024      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	4798      	blx	r3
 8001b62:	e01f      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01b      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
 8001b74:	e016      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d107      	bne.n	8001b94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0208 	bic.w	r2, r2, #8
 8001b92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba8:	2220      	movs	r2, #32
 8001baa:	409a      	lsls	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 808f 	beq.w	8001cd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8087 	beq.w	8001cd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bca:	2220      	movs	r2, #32
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	d136      	bne.n	8001c4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0216 	bic.w	r2, r2, #22
 8001bec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d103      	bne.n	8001c0e <HAL_DMA_IRQHandler+0x1da>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0208 	bic.w	r2, r2, #8
 8001c1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c22:	223f      	movs	r2, #63	@ 0x3f
 8001c24:	409a      	lsls	r2, r3
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d07e      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	4798      	blx	r3
        }
        return;
 8001c4a:	e079      	b.n	8001d40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d01d      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10d      	bne.n	8001c84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d031      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	4798      	blx	r3
 8001c78:	e02c      	b.n	8001cd4 <HAL_DMA_IRQHandler+0x2a0>
 8001c7a:	bf00      	nop
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d023      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	4798      	blx	r3
 8001c94:	e01e      	b.n	8001cd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10f      	bne.n	8001cc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0210 	bic.w	r2, r2, #16
 8001cb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d032      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d022      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2205      	movs	r2, #5
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	3301      	adds	r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d307      	bcc.n	8001d1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f2      	bne.n	8001d00 <HAL_DMA_IRQHandler+0x2cc>
 8001d1a:	e000      	b.n	8001d1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	4798      	blx	r3
 8001d3e:	e000      	b.n	8001d42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d40:	bf00      	nop
    }
  }
}
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	3b10      	subs	r3, #16
 8001d58:	4a14      	ldr	r2, [pc, #80]	@ (8001dac <DMA_CalcBaseAndBitshift+0x64>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	091b      	lsrs	r3, r3, #4
 8001d60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d62:	4a13      	ldr	r2, [pc, #76]	@ (8001db0 <DMA_CalcBaseAndBitshift+0x68>)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d909      	bls.n	8001d8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d7e:	f023 0303 	bic.w	r3, r3, #3
 8001d82:	1d1a      	adds	r2, r3, #4
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d88:	e007      	b.n	8001d9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d92:	f023 0303 	bic.w	r3, r3, #3
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	aaaaaaab 	.word	0xaaaaaaab
 8001db0:	08006bbc 	.word	0x08006bbc

08001db4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d11f      	bne.n	8001e0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d856      	bhi.n	8001e82 <DMA_CheckFifoParam+0xce>
 8001dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8001ddc <DMA_CheckFifoParam+0x28>)
 8001dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dda:	bf00      	nop
 8001ddc:	08001ded 	.word	0x08001ded
 8001de0:	08001dff 	.word	0x08001dff
 8001de4:	08001ded 	.word	0x08001ded
 8001de8:	08001e83 	.word	0x08001e83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d046      	beq.n	8001e86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dfc:	e043      	b.n	8001e86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e06:	d140      	bne.n	8001e8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e0c:	e03d      	b.n	8001e8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e16:	d121      	bne.n	8001e5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d837      	bhi.n	8001e8e <DMA_CheckFifoParam+0xda>
 8001e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e24 <DMA_CheckFifoParam+0x70>)
 8001e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e24:	08001e35 	.word	0x08001e35
 8001e28:	08001e3b 	.word	0x08001e3b
 8001e2c:	08001e35 	.word	0x08001e35
 8001e30:	08001e4d 	.word	0x08001e4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
      break;
 8001e38:	e030      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d025      	beq.n	8001e92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e4a:	e022      	b.n	8001e92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e54:	d11f      	bne.n	8001e96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e5a:	e01c      	b.n	8001e96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d903      	bls.n	8001e6a <DMA_CheckFifoParam+0xb6>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d003      	beq.n	8001e70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e68:	e018      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e6e:	e015      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00e      	beq.n	8001e9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e80:	e00b      	b.n	8001e9a <DMA_CheckFifoParam+0xe6>
      break;
 8001e82:	bf00      	nop
 8001e84:	e00a      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      break;
 8001e86:	bf00      	nop
 8001e88:	e008      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      break;
 8001e8a:	bf00      	nop
 8001e8c:	e006      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      break;
 8001e8e:	bf00      	nop
 8001e90:	e004      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      break;
 8001e92:	bf00      	nop
 8001e94:	e002      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e96:	bf00      	nop
 8001e98:	e000      	b.n	8001e9c <DMA_CheckFifoParam+0xe8>
      break;
 8001e9a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop

08001eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	@ 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e159      	b.n	800217c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	f040 8148 	bne.w	8002176 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d005      	beq.n	8001efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d130      	bne.n	8001f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f34:	2201      	movs	r2, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 0201 	and.w	r2, r3, #1
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d017      	beq.n	8001f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d123      	bne.n	8001ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	08da      	lsrs	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3208      	adds	r2, #8
 8001fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	08da      	lsrs	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3208      	adds	r2, #8
 8001fea:	69b9      	ldr	r1, [r7, #24]
 8001fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0203 	and.w	r2, r3, #3
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80a2 	beq.w	8002176 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b57      	ldr	r3, [pc, #348]	@ (8002194 <HAL_GPIO_Init+0x2e8>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	4a56      	ldr	r2, [pc, #344]	@ (8002194 <HAL_GPIO_Init+0x2e8>)
 800203c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002040:	6453      	str	r3, [r2, #68]	@ 0x44
 8002042:	4b54      	ldr	r3, [pc, #336]	@ (8002194 <HAL_GPIO_Init+0x2e8>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800204e:	4a52      	ldr	r2, [pc, #328]	@ (8002198 <HAL_GPIO_Init+0x2ec>)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	3302      	adds	r3, #2
 8002056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a49      	ldr	r2, [pc, #292]	@ (800219c <HAL_GPIO_Init+0x2f0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d019      	beq.n	80020ae <HAL_GPIO_Init+0x202>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a48      	ldr	r2, [pc, #288]	@ (80021a0 <HAL_GPIO_Init+0x2f4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0x1fe>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a47      	ldr	r2, [pc, #284]	@ (80021a4 <HAL_GPIO_Init+0x2f8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00d      	beq.n	80020a6 <HAL_GPIO_Init+0x1fa>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a46      	ldr	r2, [pc, #280]	@ (80021a8 <HAL_GPIO_Init+0x2fc>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <HAL_GPIO_Init+0x1f6>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a45      	ldr	r2, [pc, #276]	@ (80021ac <HAL_GPIO_Init+0x300>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_GPIO_Init+0x1f2>
 800209a:	2304      	movs	r3, #4
 800209c:	e008      	b.n	80020b0 <HAL_GPIO_Init+0x204>
 800209e:	2307      	movs	r3, #7
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_Init+0x204>
 80020a2:	2303      	movs	r3, #3
 80020a4:	e004      	b.n	80020b0 <HAL_GPIO_Init+0x204>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e002      	b.n	80020b0 <HAL_GPIO_Init+0x204>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_GPIO_Init+0x204>
 80020ae:	2300      	movs	r3, #0
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	f002 0203 	and.w	r2, r2, #3
 80020b6:	0092      	lsls	r2, r2, #2
 80020b8:	4093      	lsls	r3, r2
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c0:	4935      	ldr	r1, [pc, #212]	@ (8002198 <HAL_GPIO_Init+0x2ec>)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	3302      	adds	r3, #2
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ce:	4b38      	ldr	r3, [pc, #224]	@ (80021b0 <HAL_GPIO_Init+0x304>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020f2:	4a2f      	ldr	r2, [pc, #188]	@ (80021b0 <HAL_GPIO_Init+0x304>)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f8:	4b2d      	ldr	r3, [pc, #180]	@ (80021b0 <HAL_GPIO_Init+0x304>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800211c:	4a24      	ldr	r2, [pc, #144]	@ (80021b0 <HAL_GPIO_Init+0x304>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002122:	4b23      	ldr	r3, [pc, #140]	@ (80021b0 <HAL_GPIO_Init+0x304>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002146:	4a1a      	ldr	r2, [pc, #104]	@ (80021b0 <HAL_GPIO_Init+0x304>)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800214c:	4b18      	ldr	r3, [pc, #96]	@ (80021b0 <HAL_GPIO_Init+0x304>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002170:	4a0f      	ldr	r2, [pc, #60]	@ (80021b0 <HAL_GPIO_Init+0x304>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3301      	adds	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	2b0f      	cmp	r3, #15
 8002180:	f67f aea2 	bls.w	8001ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3724      	adds	r7, #36	@ 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	40013800 	.word	0x40013800
 800219c:	40020000 	.word	0x40020000
 80021a0:	40020400 	.word	0x40020400
 80021a4:	40020800 	.word	0x40020800
 80021a8:	40020c00 	.word	0x40020c00
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40013c00 	.word	0x40013c00

080021b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
 80021c0:	4613      	mov	r3, r2
 80021c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c4:	787b      	ldrb	r3, [r7, #1]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021d0:	e003      	b.n	80021da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021d2:	887b      	ldrh	r3, [r7, #2]
 80021d4:	041a      	lsls	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	619a      	str	r2, [r3, #24]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e12b      	b.n	8002452 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe fd9c 	bl	8000d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2224      	movs	r2, #36	@ 0x24
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800223a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800224a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800224c:	f000 fd40 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 8002250:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4a81      	ldr	r2, [pc, #516]	@ (800245c <HAL_I2C_Init+0x274>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d807      	bhi.n	800226c <HAL_I2C_Init+0x84>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4a80      	ldr	r2, [pc, #512]	@ (8002460 <HAL_I2C_Init+0x278>)
 8002260:	4293      	cmp	r3, r2
 8002262:	bf94      	ite	ls
 8002264:	2301      	movls	r3, #1
 8002266:	2300      	movhi	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	e006      	b.n	800227a <HAL_I2C_Init+0x92>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4a7d      	ldr	r2, [pc, #500]	@ (8002464 <HAL_I2C_Init+0x27c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	bf94      	ite	ls
 8002274:	2301      	movls	r3, #1
 8002276:	2300      	movhi	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0e7      	b.n	8002452 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4a78      	ldr	r2, [pc, #480]	@ (8002468 <HAL_I2C_Init+0x280>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	0c9b      	lsrs	r3, r3, #18
 800228c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	430a      	orrs	r2, r1
 80022a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a6a      	ldr	r2, [pc, #424]	@ (800245c <HAL_I2C_Init+0x274>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d802      	bhi.n	80022bc <HAL_I2C_Init+0xd4>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3301      	adds	r3, #1
 80022ba:	e009      	b.n	80022d0 <HAL_I2C_Init+0xe8>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	4a69      	ldr	r2, [pc, #420]	@ (800246c <HAL_I2C_Init+0x284>)
 80022c8:	fba2 2303 	umull	r2, r3, r2, r3
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	3301      	adds	r3, #1
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	430b      	orrs	r3, r1
 80022d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	495c      	ldr	r1, [pc, #368]	@ (800245c <HAL_I2C_Init+0x274>)
 80022ec:	428b      	cmp	r3, r1
 80022ee:	d819      	bhi.n	8002324 <HAL_I2C_Init+0x13c>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1e59      	subs	r1, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80022fe:	1c59      	adds	r1, r3, #1
 8002300:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002304:	400b      	ands	r3, r1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_I2C_Init+0x138>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1e59      	subs	r1, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fbb1 f3f3 	udiv	r3, r1, r3
 8002318:	3301      	adds	r3, #1
 800231a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231e:	e051      	b.n	80023c4 <HAL_I2C_Init+0x1dc>
 8002320:	2304      	movs	r3, #4
 8002322:	e04f      	b.n	80023c4 <HAL_I2C_Init+0x1dc>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d111      	bne.n	8002350 <HAL_I2C_Init+0x168>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1e58      	subs	r0, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6859      	ldr	r1, [r3, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	440b      	add	r3, r1
 800233a:	fbb0 f3f3 	udiv	r3, r0, r3
 800233e:	3301      	adds	r3, #1
 8002340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf0c      	ite	eq
 8002348:	2301      	moveq	r3, #1
 800234a:	2300      	movne	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	e012      	b.n	8002376 <HAL_I2C_Init+0x18e>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1e58      	subs	r0, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	0099      	lsls	r1, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	fbb0 f3f3 	udiv	r3, r0, r3
 8002366:	3301      	adds	r3, #1
 8002368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_I2C_Init+0x196>
 800237a:	2301      	movs	r3, #1
 800237c:	e022      	b.n	80023c4 <HAL_I2C_Init+0x1dc>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10e      	bne.n	80023a4 <HAL_I2C_Init+0x1bc>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1e58      	subs	r0, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6859      	ldr	r1, [r3, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	440b      	add	r3, r1
 8002394:	fbb0 f3f3 	udiv	r3, r0, r3
 8002398:	3301      	adds	r3, #1
 800239a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023a2:	e00f      	b.n	80023c4 <HAL_I2C_Init+0x1dc>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1e58      	subs	r0, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	0099      	lsls	r1, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	6809      	ldr	r1, [r1, #0]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69da      	ldr	r2, [r3, #28]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6911      	ldr	r1, [r2, #16]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68d2      	ldr	r2, [r2, #12]
 80023fe:	4311      	orrs	r1, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	430b      	orrs	r3, r1
 8002406:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	000186a0 	.word	0x000186a0
 8002460:	001e847f 	.word	0x001e847f
 8002464:	003d08ff 	.word	0x003d08ff
 8002468:	431bde83 	.word	0x431bde83
 800246c:	10624dd3 	.word	0x10624dd3

08002470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e267      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d075      	beq.n	800257a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800248e:	4b88      	ldr	r3, [pc, #544]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b04      	cmp	r3, #4
 8002498:	d00c      	beq.n	80024b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249a:	4b85      	ldr	r3, [pc, #532]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d112      	bne.n	80024cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a6:	4b82      	ldr	r3, [pc, #520]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024b2:	d10b      	bne.n	80024cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	4b7e      	ldr	r3, [pc, #504]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d05b      	beq.n	8002578 <HAL_RCC_OscConfig+0x108>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d157      	bne.n	8002578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e242      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d4:	d106      	bne.n	80024e4 <HAL_RCC_OscConfig+0x74>
 80024d6:	4b76      	ldr	r3, [pc, #472]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a75      	ldr	r2, [pc, #468]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e01d      	b.n	8002520 <HAL_RCC_OscConfig+0xb0>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x98>
 80024ee:	4b70      	ldr	r3, [pc, #448]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6f      	ldr	r2, [pc, #444]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b6d      	ldr	r3, [pc, #436]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a6c      	ldr	r2, [pc, #432]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e00b      	b.n	8002520 <HAL_RCC_OscConfig+0xb0>
 8002508:	4b69      	ldr	r3, [pc, #420]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a68      	ldr	r2, [pc, #416]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 800250e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b66      	ldr	r3, [pc, #408]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a65      	ldr	r2, [pc, #404]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 800251a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800251e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d013      	beq.n	8002550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7fe fe86 	bl	8001238 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002530:	f7fe fe82 	bl	8001238 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	@ 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e207      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b5b      	ldr	r3, [pc, #364]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0xc0>
 800254e:	e014      	b.n	800257a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe fe72 	bl	8001238 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe fe6e 	bl	8001238 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	@ 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e1f3      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	4b51      	ldr	r3, [pc, #324]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0xe8>
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d063      	beq.n	800264e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002586:	4b4a      	ldr	r3, [pc, #296]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002592:	4b47      	ldr	r3, [pc, #284]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800259a:	2b08      	cmp	r3, #8
 800259c:	d11c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259e:	4b44      	ldr	r3, [pc, #272]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d116      	bne.n	80025d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025aa:	4b41      	ldr	r3, [pc, #260]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_RCC_OscConfig+0x152>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e1c7      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c2:	4b3b      	ldr	r3, [pc, #236]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4937      	ldr	r1, [pc, #220]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d6:	e03a      	b.n	800264e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d020      	beq.n	8002622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e0:	4b34      	ldr	r3, [pc, #208]	@ (80026b4 <HAL_RCC_OscConfig+0x244>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7fe fe27 	bl	8001238 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ee:	f7fe fe23 	bl	8001238 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e1a8      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	4b2b      	ldr	r3, [pc, #172]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4b28      	ldr	r3, [pc, #160]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4925      	ldr	r1, [pc, #148]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 800261c:	4313      	orrs	r3, r2
 800261e:	600b      	str	r3, [r1, #0]
 8002620:	e015      	b.n	800264e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002622:	4b24      	ldr	r3, [pc, #144]	@ (80026b4 <HAL_RCC_OscConfig+0x244>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7fe fe06 	bl	8001238 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002630:	f7fe fe02 	bl	8001238 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e187      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	4b1b      	ldr	r3, [pc, #108]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d036      	beq.n	80026c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d016      	beq.n	8002690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002662:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <HAL_RCC_OscConfig+0x248>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe fde6 	bl	8001238 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002670:	f7fe fde2 	bl	8001238 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e167      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <HAL_RCC_OscConfig+0x240>)
 8002684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x200>
 800268e:	e01b      	b.n	80026c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002690:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <HAL_RCC_OscConfig+0x248>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fdcf 	bl	8001238 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269c:	e00e      	b.n	80026bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269e:	f7fe fdcb 	bl	8001238 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d907      	bls.n	80026bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e150      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
 80026b0:	40023800 	.word	0x40023800
 80026b4:	42470000 	.word	0x42470000
 80026b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	4b88      	ldr	r3, [pc, #544]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ea      	bne.n	800269e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 8097 	beq.w	8002804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026da:	4b81      	ldr	r3, [pc, #516]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10f      	bne.n	8002706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	4b7d      	ldr	r3, [pc, #500]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	4a7c      	ldr	r2, [pc, #496]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f6:	4b7a      	ldr	r3, [pc, #488]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002702:	2301      	movs	r3, #1
 8002704:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	4b77      	ldr	r3, [pc, #476]	@ (80028e4 <HAL_RCC_OscConfig+0x474>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d118      	bne.n	8002744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002712:	4b74      	ldr	r3, [pc, #464]	@ (80028e4 <HAL_RCC_OscConfig+0x474>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a73      	ldr	r2, [pc, #460]	@ (80028e4 <HAL_RCC_OscConfig+0x474>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800271c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271e:	f7fe fd8b 	bl	8001238 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7fe fd87 	bl	8001238 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e10c      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	4b6a      	ldr	r3, [pc, #424]	@ (80028e4 <HAL_RCC_OscConfig+0x474>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d106      	bne.n	800275a <HAL_RCC_OscConfig+0x2ea>
 800274c:	4b64      	ldr	r3, [pc, #400]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002750:	4a63      	ldr	r2, [pc, #396]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6713      	str	r3, [r2, #112]	@ 0x70
 8002758:	e01c      	b.n	8002794 <HAL_RCC_OscConfig+0x324>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b05      	cmp	r3, #5
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x30c>
 8002762:	4b5f      	ldr	r3, [pc, #380]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002766:	4a5e      	ldr	r2, [pc, #376]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	6713      	str	r3, [r2, #112]	@ 0x70
 800276e:	4b5c      	ldr	r3, [pc, #368]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002772:	4a5b      	ldr	r2, [pc, #364]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6713      	str	r3, [r2, #112]	@ 0x70
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0x324>
 800277c:	4b58      	ldr	r3, [pc, #352]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002780:	4a57      	ldr	r2, [pc, #348]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6713      	str	r3, [r2, #112]	@ 0x70
 8002788:	4b55      	ldr	r3, [pc, #340]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278c:	4a54      	ldr	r2, [pc, #336]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 800278e:	f023 0304 	bic.w	r3, r3, #4
 8002792:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d015      	beq.n	80027c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7fe fd4c 	bl	8001238 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a4:	f7fe fd48 	bl	8001238 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0cb      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	4b49      	ldr	r3, [pc, #292]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0ee      	beq.n	80027a4 <HAL_RCC_OscConfig+0x334>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c8:	f7fe fd36 	bl	8001238 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe fd32 	bl	8001238 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0b5      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e6:	4b3e      	ldr	r3, [pc, #248]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1ee      	bne.n	80027d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f8:	4b39      	ldr	r3, [pc, #228]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fc:	4a38      	ldr	r2, [pc, #224]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80027fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002802:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80a1 	beq.w	8002950 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800280e:	4b34      	ldr	r3, [pc, #208]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b08      	cmp	r3, #8
 8002818:	d05c      	beq.n	80028d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d141      	bne.n	80028a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002822:	4b31      	ldr	r3, [pc, #196]	@ (80028e8 <HAL_RCC_OscConfig+0x478>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe fd06 	bl	8001238 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002830:	f7fe fd02 	bl	8001238 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e087      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	4b27      	ldr	r3, [pc, #156]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	019b      	lsls	r3, r3, #6
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	3b01      	subs	r3, #1
 8002868:	041b      	lsls	r3, r3, #16
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002870:	061b      	lsls	r3, r3, #24
 8002872:	491b      	ldr	r1, [pc, #108]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002878:	4b1b      	ldr	r3, [pc, #108]	@ (80028e8 <HAL_RCC_OscConfig+0x478>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe fcdb 	bl	8001238 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe fcd7 	bl	8001238 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e05c      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002898:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x416>
 80028a4:	e054      	b.n	8002950 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <HAL_RCC_OscConfig+0x478>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7fe fcc4 	bl	8001238 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe fcc0 	bl	8001238 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e045      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <HAL_RCC_OscConfig+0x470>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x444>
 80028d2:	e03d      	b.n	8002950 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d107      	bne.n	80028ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e038      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40007000 	.word	0x40007000
 80028e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028ec:	4b1b      	ldr	r3, [pc, #108]	@ (800295c <HAL_RCC_OscConfig+0x4ec>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d028      	beq.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d121      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d11a      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800291c:	4013      	ands	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002924:	4293      	cmp	r3, r2
 8002926:	d111      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	3b01      	subs	r3, #1
 8002936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d107      	bne.n	800294c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800

08002960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0cc      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002974:	4b68      	ldr	r3, [pc, #416]	@ (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d90c      	bls.n	800299c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b65      	ldr	r3, [pc, #404]	@ (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b63      	ldr	r3, [pc, #396]	@ (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0b8      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d020      	beq.n	80029ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b4:	4b59      	ldr	r3, [pc, #356]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4a58      	ldr	r2, [pc, #352]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029cc:	4b53      	ldr	r3, [pc, #332]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4a52      	ldr	r2, [pc, #328]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d8:	4b50      	ldr	r3, [pc, #320]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	494d      	ldr	r1, [pc, #308]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d044      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	4b47      	ldr	r3, [pc, #284]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d119      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e07f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d003      	beq.n	8002a1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e06f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e067      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3e:	4b37      	ldr	r3, [pc, #220]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f023 0203 	bic.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4934      	ldr	r1, [pc, #208]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a50:	f7fe fbf2 	bl	8001238 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a58:	f7fe fbee 	bl	8001238 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e04f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 020c 	and.w	r2, r3, #12
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d1eb      	bne.n	8002a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a80:	4b25      	ldr	r3, [pc, #148]	@ (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d20c      	bcs.n	8002aa8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8e:	4b22      	ldr	r3, [pc, #136]	@ (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b20      	ldr	r3, [pc, #128]	@ (8002b18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e032      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab4:	4b19      	ldr	r3, [pc, #100]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4916      	ldr	r1, [pc, #88]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad2:	4b12      	ldr	r3, [pc, #72]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	490e      	ldr	r1, [pc, #56]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ae6:	f000 f821 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8002aea:	4602      	mov	r2, r0
 8002aec:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	490a      	ldr	r1, [pc, #40]	@ (8002b20 <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	5ccb      	ldrb	r3, [r1, r3]
 8002afa:	fa22 f303 	lsr.w	r3, r2, r3
 8002afe:	4a09      	ldr	r2, [pc, #36]	@ (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b02:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <HAL_RCC_ClockConfig+0x1c8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fa74 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023c00 	.word	0x40023c00
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	08006ba4 	.word	0x08006ba4
 8002b24:	20000000 	.word	0x20000000
 8002b28:	20000004 	.word	0x20000004

08002b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b30:	b090      	sub	sp, #64	@ 0x40
 8002b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b44:	4b59      	ldr	r3, [pc, #356]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d00d      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x40>
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	f200 80a1 	bhi.w	8002c98 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x34>
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b5e:	e09b      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b60:	4b53      	ldr	r3, [pc, #332]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b64:	e09b      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b66:	4b53      	ldr	r3, [pc, #332]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b6a:	e098      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b6c:	4b4f      	ldr	r3, [pc, #316]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b76:	4b4d      	ldr	r3, [pc, #308]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d028      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b82:	4b4a      	ldr	r3, [pc, #296]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	099b      	lsrs	r3, r3, #6
 8002b88:	2200      	movs	r2, #0
 8002b8a:	623b      	str	r3, [r7, #32]
 8002b8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b94:	2100      	movs	r1, #0
 8002b96:	4b47      	ldr	r3, [pc, #284]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b98:	fb03 f201 	mul.w	r2, r3, r1
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a43      	ldr	r2, [pc, #268]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ba6:	fba0 1202 	umull	r1, r2, r0, r2
 8002baa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bac:	460a      	mov	r2, r1
 8002bae:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002bb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bb2:	4413      	add	r3, r2
 8002bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb8:	2200      	movs	r2, #0
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	61fa      	str	r2, [r7, #28]
 8002bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002bc6:	f7fd fb0b 	bl	80001e0 <__aeabi_uldivmod>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4613      	mov	r3, r2
 8002bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bd2:	e053      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd4:	4b35      	ldr	r3, [pc, #212]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	099b      	lsrs	r3, r3, #6
 8002bda:	2200      	movs	r2, #0
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	617a      	str	r2, [r7, #20]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002be6:	f04f 0b00 	mov.w	fp, #0
 8002bea:	4652      	mov	r2, sl
 8002bec:	465b      	mov	r3, fp
 8002bee:	f04f 0000 	mov.w	r0, #0
 8002bf2:	f04f 0100 	mov.w	r1, #0
 8002bf6:	0159      	lsls	r1, r3, #5
 8002bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bfc:	0150      	lsls	r0, r2, #5
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	ebb2 080a 	subs.w	r8, r2, sl
 8002c06:	eb63 090b 	sbc.w	r9, r3, fp
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c1e:	ebb2 0408 	subs.w	r4, r2, r8
 8002c22:	eb63 0509 	sbc.w	r5, r3, r9
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	00eb      	lsls	r3, r5, #3
 8002c30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c34:	00e2      	lsls	r2, r4, #3
 8002c36:	4614      	mov	r4, r2
 8002c38:	461d      	mov	r5, r3
 8002c3a:	eb14 030a 	adds.w	r3, r4, sl
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	eb45 030b 	adc.w	r3, r5, fp
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c52:	4629      	mov	r1, r5
 8002c54:	028b      	lsls	r3, r1, #10
 8002c56:	4621      	mov	r1, r4
 8002c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	028a      	lsls	r2, r1, #10
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c66:	2200      	movs	r2, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	60fa      	str	r2, [r7, #12]
 8002c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c70:	f7fd fab6 	bl	80001e0 <__aeabi_uldivmod>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4613      	mov	r3, r2
 8002c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	3301      	adds	r3, #1
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002c8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c96:	e002      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c98:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3740      	adds	r7, #64	@ 0x40
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	00f42400 	.word	0x00f42400
 8002cb4:	017d7840 	.word	0x017d7840

08002cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	@ (8002ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000000 	.word	0x20000000

08002cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cd4:	f7ff fff0 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	0a9b      	lsrs	r3, r3, #10
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4903      	ldr	r1, [pc, #12]	@ (8002cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	08006bb4 	.word	0x08006bb4

08002cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cfc:	f7ff ffdc 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0b5b      	lsrs	r3, r3, #13
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4903      	ldr	r1, [pc, #12]	@ (8002d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	08006bb4 	.word	0x08006bb4

08002d20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d30:	4b12      	ldr	r3, [pc, #72]	@ (8002d7c <HAL_RCC_GetClockConfig+0x5c>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0203 	and.w	r2, r3, #3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d7c <HAL_RCC_GetClockConfig+0x5c>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d48:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <HAL_RCC_GetClockConfig+0x5c>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d54:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <HAL_RCC_GetClockConfig+0x5c>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	08db      	lsrs	r3, r3, #3
 8002d5a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d62:	4b07      	ldr	r3, [pc, #28]	@ (8002d80 <HAL_RCC_GetClockConfig+0x60>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0207 	and.w	r2, r3, #7
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	601a      	str	r2, [r3, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40023c00 	.word	0x40023c00

08002d84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e07b      	b.n	8002e8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d108      	bne.n	8002db0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002da6:	d009      	beq.n	8002dbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	61da      	str	r2, [r3, #28]
 8002dae:	e005      	b.n	8002dbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fe f846 	bl	8000e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002df2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e40:	ea42 0103 	orr.w	r1, r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	0c1b      	lsrs	r3, r3, #16
 8002e5a:	f003 0104 	and.w	r1, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e62:	f003 0210 	and.w	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69da      	ldr	r2, [r3, #28]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e041      	b.n	8002f2c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d106      	bne.n	8002ec2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7fe f81b 	bl	8000ef8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	f000 fb8b 	bl	80035f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d001      	beq.n	8002f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e044      	b.n	8002fd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d018      	beq.n	8002fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f76:	d013      	beq.n	8002fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00e      	beq.n	8002fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a19      	ldr	r2, [pc, #100]	@ (8002fec <HAL_TIM_Base_Start_IT+0xb8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d009      	beq.n	8002fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a17      	ldr	r2, [pc, #92]	@ (8002ff0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a16      	ldr	r2, [pc, #88]	@ (8002ff4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d111      	bne.n	8002fc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b06      	cmp	r3, #6
 8002fb0:	d010      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc2:	e007      	b.n	8002fd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40000800 	.word	0x40000800
 8002ff0:	40000c00 	.word	0x40000c00
 8002ff4:	40014000 	.word	0x40014000

08002ff8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e041      	b.n	800308e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f839 	bl	8003096 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f000 fada 	bl	80035f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d020      	beq.n	800310e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d01b      	beq.n	800310e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f06f 0202 	mvn.w	r2, #2
 80030de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fa5c 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 80030fa:	e005      	b.n	8003108 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fa4e 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fa5f 	bl	80035c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	d01b      	beq.n	800315a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f06f 0204 	mvn.w	r2, #4
 800312a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fa36 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 8003146:	e005      	b.n	8003154 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fa28 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fa39 	bl	80035c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01b      	beq.n	80031a6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f06f 0208 	mvn.w	r2, #8
 8003176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2204      	movs	r2, #4
 800317c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fa10 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 8003192:	e005      	b.n	80031a0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fa02 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fa13 	bl	80035c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d020      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d01b      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f06f 0210 	mvn.w	r2, #16
 80031c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2208      	movs	r2, #8
 80031c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f9ea 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 80031de:	e005      	b.n	80031ec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f9dc 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f9ed 	bl	80035c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00c      	beq.n	8003216 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f06f 0201 	mvn.w	r2, #1
 800320e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fd fce1 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00c      	beq.n	800323a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 fd57 	bl	8003ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00c      	beq.n	800325e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d007      	beq.n	800325e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f9be 	bl	80035da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00c      	beq.n	8003282 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f06f 0220 	mvn.w	r2, #32
 800327a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fd29 	bl	8003cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e0ae      	b.n	8003408 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b0c      	cmp	r3, #12
 80032b6:	f200 809f 	bhi.w	80033f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032ba:	a201      	add	r2, pc, #4	@ (adr r2, 80032c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c0:	080032f5 	.word	0x080032f5
 80032c4:	080033f9 	.word	0x080033f9
 80032c8:	080033f9 	.word	0x080033f9
 80032cc:	080033f9 	.word	0x080033f9
 80032d0:	08003335 	.word	0x08003335
 80032d4:	080033f9 	.word	0x080033f9
 80032d8:	080033f9 	.word	0x080033f9
 80032dc:	080033f9 	.word	0x080033f9
 80032e0:	08003377 	.word	0x08003377
 80032e4:	080033f9 	.word	0x080033f9
 80032e8:	080033f9 	.word	0x080033f9
 80032ec:	080033f9 	.word	0x080033f9
 80032f0:	080033b7 	.word	0x080033b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fa04 	bl	8003708 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0208 	orr.w	r2, r2, #8
 800330e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0204 	bic.w	r2, r2, #4
 800331e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6999      	ldr	r1, [r3, #24]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	619a      	str	r2, [r3, #24]
      break;
 8003332:	e064      	b.n	80033fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fa4a 	bl	80037d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800334e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800335e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6999      	ldr	r1, [r3, #24]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	021a      	lsls	r2, r3, #8
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	619a      	str	r2, [r3, #24]
      break;
 8003374:	e043      	b.n	80033fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fa95 	bl	80038ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0208 	orr.w	r2, r2, #8
 8003390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0204 	bic.w	r2, r2, #4
 80033a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69d9      	ldr	r1, [r3, #28]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	61da      	str	r2, [r3, #28]
      break;
 80033b4:	e023      	b.n	80033fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fadf 	bl	8003980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69d9      	ldr	r1, [r3, #28]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	021a      	lsls	r2, r3, #8
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	61da      	str	r2, [r3, #28]
      break;
 80033f6:	e002      	b.n	80033fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	75fb      	strb	r3, [r7, #23]
      break;
 80033fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003406:	7dfb      	ldrb	r3, [r7, #23]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_TIM_ConfigClockSource+0x1c>
 8003428:	2302      	movs	r3, #2
 800342a:	e0b4      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x186>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800344a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003452:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003464:	d03e      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800346a:	f200 8087 	bhi.w	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800346e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003472:	f000 8086 	beq.w	8003582 <HAL_TIM_ConfigClockSource+0x172>
 8003476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800347a:	d87f      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800347c:	2b70      	cmp	r3, #112	@ 0x70
 800347e:	d01a      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003480:	2b70      	cmp	r3, #112	@ 0x70
 8003482:	d87b      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 8003484:	2b60      	cmp	r3, #96	@ 0x60
 8003486:	d050      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x11a>
 8003488:	2b60      	cmp	r3, #96	@ 0x60
 800348a:	d877      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800348c:	2b50      	cmp	r3, #80	@ 0x50
 800348e:	d03c      	beq.n	800350a <HAL_TIM_ConfigClockSource+0xfa>
 8003490:	2b50      	cmp	r3, #80	@ 0x50
 8003492:	d873      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 8003494:	2b40      	cmp	r3, #64	@ 0x40
 8003496:	d058      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x13a>
 8003498:	2b40      	cmp	r3, #64	@ 0x40
 800349a:	d86f      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800349c:	2b30      	cmp	r3, #48	@ 0x30
 800349e:	d064      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034a0:	2b30      	cmp	r3, #48	@ 0x30
 80034a2:	d86b      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d060      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d867      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d05c      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d05a      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034b4:	e062      	b.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034c6:	f000 fb25 	bl	8003b14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	609a      	str	r2, [r3, #8]
      break;
 80034e2:	e04f      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034f4:	f000 fb0e 	bl	8003b14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003506:	609a      	str	r2, [r3, #8]
      break;
 8003508:	e03c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003516:	461a      	mov	r2, r3
 8003518:	f000 fa82 	bl	8003a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2150      	movs	r1, #80	@ 0x50
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fadb 	bl	8003ade <TIM_ITRx_SetConfig>
      break;
 8003528:	e02c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003536:	461a      	mov	r2, r3
 8003538:	f000 faa1 	bl	8003a7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2160      	movs	r1, #96	@ 0x60
 8003542:	4618      	mov	r0, r3
 8003544:	f000 facb 	bl	8003ade <TIM_ITRx_SetConfig>
      break;
 8003548:	e01c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003556:	461a      	mov	r2, r3
 8003558:	f000 fa62 	bl	8003a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2140      	movs	r1, #64	@ 0x40
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fabb 	bl	8003ade <TIM_ITRx_SetConfig>
      break;
 8003568:	e00c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4619      	mov	r1, r3
 8003574:	4610      	mov	r0, r2
 8003576:	f000 fab2 	bl	8003ade <TIM_ITRx_SetConfig>
      break;
 800357a:	e003      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      break;
 8003580:	e000      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003594:	7bfb      	ldrb	r3, [r7, #15]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a3a      	ldr	r2, [pc, #232]	@ (80036ec <TIM_Base_SetConfig+0xfc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00f      	beq.n	8003628 <TIM_Base_SetConfig+0x38>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800360e:	d00b      	beq.n	8003628 <TIM_Base_SetConfig+0x38>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a37      	ldr	r2, [pc, #220]	@ (80036f0 <TIM_Base_SetConfig+0x100>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d007      	beq.n	8003628 <TIM_Base_SetConfig+0x38>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a36      	ldr	r2, [pc, #216]	@ (80036f4 <TIM_Base_SetConfig+0x104>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_Base_SetConfig+0x38>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a35      	ldr	r2, [pc, #212]	@ (80036f8 <TIM_Base_SetConfig+0x108>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d108      	bne.n	800363a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800362e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a2b      	ldr	r2, [pc, #172]	@ (80036ec <TIM_Base_SetConfig+0xfc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d01b      	beq.n	800367a <TIM_Base_SetConfig+0x8a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003648:	d017      	beq.n	800367a <TIM_Base_SetConfig+0x8a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a28      	ldr	r2, [pc, #160]	@ (80036f0 <TIM_Base_SetConfig+0x100>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d013      	beq.n	800367a <TIM_Base_SetConfig+0x8a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a27      	ldr	r2, [pc, #156]	@ (80036f4 <TIM_Base_SetConfig+0x104>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00f      	beq.n	800367a <TIM_Base_SetConfig+0x8a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a26      	ldr	r2, [pc, #152]	@ (80036f8 <TIM_Base_SetConfig+0x108>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00b      	beq.n	800367a <TIM_Base_SetConfig+0x8a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a25      	ldr	r2, [pc, #148]	@ (80036fc <TIM_Base_SetConfig+0x10c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d007      	beq.n	800367a <TIM_Base_SetConfig+0x8a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a24      	ldr	r2, [pc, #144]	@ (8003700 <TIM_Base_SetConfig+0x110>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d003      	beq.n	800367a <TIM_Base_SetConfig+0x8a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a23      	ldr	r2, [pc, #140]	@ (8003704 <TIM_Base_SetConfig+0x114>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d108      	bne.n	800368c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a0e      	ldr	r2, [pc, #56]	@ (80036ec <TIM_Base_SetConfig+0xfc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d103      	bne.n	80036c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d105      	bne.n	80036de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f023 0201 	bic.w	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	611a      	str	r2, [r3, #16]
  }
}
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40010000 	.word	0x40010000
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800
 80036f8:	40000c00 	.word	0x40000c00
 80036fc:	40014000 	.word	0x40014000
 8003700:	40014400 	.word	0x40014400
 8003704:	40014800 	.word	0x40014800

08003708 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f023 0201 	bic.w	r2, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f023 0302 	bic.w	r3, r3, #2
 8003750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a1c      	ldr	r2, [pc, #112]	@ (80037d0 <TIM_OC1_SetConfig+0xc8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d10c      	bne.n	800377e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f023 0308 	bic.w	r3, r3, #8
 800376a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f023 0304 	bic.w	r3, r3, #4
 800377c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a13      	ldr	r2, [pc, #76]	@ (80037d0 <TIM_OC1_SetConfig+0xc8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d111      	bne.n	80037aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800378c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	621a      	str	r2, [r3, #32]
}
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	40010000 	.word	0x40010000

080037d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f023 0210 	bic.w	r2, r3, #16
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800380a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	021b      	lsls	r3, r3, #8
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0320 	bic.w	r3, r3, #32
 800381e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a1e      	ldr	r2, [pc, #120]	@ (80038a8 <TIM_OC2_SetConfig+0xd4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d10d      	bne.n	8003850 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800383a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800384e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a15      	ldr	r2, [pc, #84]	@ (80038a8 <TIM_OC2_SetConfig+0xd4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d113      	bne.n	8003880 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800385e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003866:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	621a      	str	r2, [r3, #32]
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40010000 	.word	0x40010000

080038ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0303 	bic.w	r3, r3, #3
 80038e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1d      	ldr	r2, [pc, #116]	@ (800397c <TIM_OC3_SetConfig+0xd0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10d      	bne.n	8003926 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a14      	ldr	r2, [pc, #80]	@ (800397c <TIM_OC3_SetConfig+0xd0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d113      	bne.n	8003956 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800393c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	621a      	str	r2, [r3, #32]
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	40010000 	.word	0x40010000

08003980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	031b      	lsls	r3, r3, #12
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a10      	ldr	r2, [pc, #64]	@ (8003a1c <TIM_OC4_SetConfig+0x9c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d109      	bne.n	80039f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	019b      	lsls	r3, r3, #6
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	621a      	str	r2, [r3, #32]
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40010000 	.word	0x40010000

08003a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f023 0201 	bic.w	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f023 030a 	bic.w	r3, r3, #10
 8003a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	621a      	str	r2, [r3, #32]
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b087      	sub	sp, #28
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f023 0210 	bic.w	r2, r3, #16
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003aa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	031b      	lsls	r3, r3, #12
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003aba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	621a      	str	r2, [r3, #32]
}
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b085      	sub	sp, #20
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003af4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f043 0307 	orr.w	r3, r3, #7
 8003b00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	609a      	str	r2, [r3, #8]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	021a      	lsls	r2, r3, #8
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	609a      	str	r2, [r3, #8]
}
 8003b48:	bf00      	nop
 8003b4a:	371c      	adds	r7, #28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e050      	b.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a1c      	ldr	r2, [pc, #112]	@ (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d018      	beq.n	8003be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb8:	d013      	beq.n	8003be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a18      	ldr	r2, [pc, #96]	@ (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00e      	beq.n	8003be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a16      	ldr	r2, [pc, #88]	@ (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d009      	beq.n	8003be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a15      	ldr	r2, [pc, #84]	@ (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d004      	beq.n	8003be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a13      	ldr	r2, [pc, #76]	@ (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d10c      	bne.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40010000 	.word	0x40010000
 8003c20:	40000400 	.word	0x40000400
 8003c24:	40000800 	.word	0x40000800
 8003c28:	40000c00 	.word	0x40000c00
 8003c2c:	40014000 	.word	0x40014000

08003c30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e03d      	b.n	8003cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <__NVIC_SetPriority>:
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	6039      	str	r1, [r7, #0]
 8003d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	db0a      	blt.n	8003d26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	490c      	ldr	r1, [pc, #48]	@ (8003d48 <__NVIC_SetPriority+0x4c>)
 8003d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1a:	0112      	lsls	r2, r2, #4
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	440b      	add	r3, r1
 8003d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003d24:	e00a      	b.n	8003d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	4908      	ldr	r1, [pc, #32]	@ (8003d4c <__NVIC_SetPriority+0x50>)
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	3b04      	subs	r3, #4
 8003d34:	0112      	lsls	r2, r2, #4
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	440b      	add	r3, r1
 8003d3a:	761a      	strb	r2, [r3, #24]
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	e000e100 	.word	0xe000e100
 8003d4c:	e000ed00 	.word	0xe000ed00

08003d50 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003d54:	4b05      	ldr	r3, [pc, #20]	@ (8003d6c <SysTick_Handler+0x1c>)
 8003d56:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003d58:	f001 fd46 	bl	80057e8 <xTaskGetSchedulerState>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d001      	beq.n	8003d66 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003d62:	f002 fb41 	bl	80063e8 <xPortSysTickHandler>
  }
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	e000e010 	.word	0xe000e010

08003d70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003d74:	2100      	movs	r1, #0
 8003d76:	f06f 0004 	mvn.w	r0, #4
 8003d7a:	f7ff ffbf 	bl	8003cfc <__NVIC_SetPriority>
#endif
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d8a:	f3ef 8305 	mrs	r3, IPSR
 8003d8e:	603b      	str	r3, [r7, #0]
  return(result);
 8003d90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003d96:	f06f 0305 	mvn.w	r3, #5
 8003d9a:	607b      	str	r3, [r7, #4]
 8003d9c:	e00c      	b.n	8003db8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc8 <osKernelInitialize+0x44>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003da6:	4b08      	ldr	r3, [pc, #32]	@ (8003dc8 <osKernelInitialize+0x44>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	607b      	str	r3, [r7, #4]
 8003db0:	e002      	b.n	8003db8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003db2:	f04f 33ff 	mov.w	r3, #4294967295
 8003db6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003db8:	687b      	ldr	r3, [r7, #4]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000310 	.word	0x20000310

08003dcc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dd2:	f3ef 8305 	mrs	r3, IPSR
 8003dd6:	603b      	str	r3, [r7, #0]
  return(result);
 8003dd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003dde:	f06f 0305 	mvn.w	r3, #5
 8003de2:	607b      	str	r3, [r7, #4]
 8003de4:	e010      	b.n	8003e08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003de6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <osKernelStart+0x48>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d109      	bne.n	8003e02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003dee:	f7ff ffbf 	bl	8003d70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003df2:	4b08      	ldr	r3, [pc, #32]	@ (8003e14 <osKernelStart+0x48>)
 8003df4:	2202      	movs	r2, #2
 8003df6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003df8:	f001 f892 	bl	8004f20 <vTaskStartScheduler>
      stat = osOK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	607b      	str	r3, [r7, #4]
 8003e00:	e002      	b.n	8003e08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003e02:	f04f 33ff 	mov.w	r3, #4294967295
 8003e06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e08:	687b      	ldr	r3, [r7, #4]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000310 	.word	0x20000310

08003e18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08e      	sub	sp, #56	@ 0x38
 8003e1c:	af04      	add	r7, sp, #16
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e28:	f3ef 8305 	mrs	r3, IPSR
 8003e2c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e2e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d17e      	bne.n	8003f32 <osThreadNew+0x11a>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d07b      	beq.n	8003f32 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003e3a:	2380      	movs	r3, #128	@ 0x80
 8003e3c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003e3e:	2318      	movs	r3, #24
 8003e40:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d045      	beq.n	8003ede <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <osThreadNew+0x48>
        name = attr->name;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <osThreadNew+0x6e>
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	2b38      	cmp	r3, #56	@ 0x38
 8003e78:	d805      	bhi.n	8003e86 <osThreadNew+0x6e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <osThreadNew+0x72>
        return (NULL);
 8003e86:	2300      	movs	r3, #0
 8003e88:	e054      	b.n	8003f34 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	089b      	lsrs	r3, r3, #2
 8003e98:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00e      	beq.n	8003ec0 <osThreadNew+0xa8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2ba7      	cmp	r3, #167	@ 0xa7
 8003ea8:	d90a      	bls.n	8003ec0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d006      	beq.n	8003ec0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <osThreadNew+0xa8>
        mem = 1;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e010      	b.n	8003ee2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10c      	bne.n	8003ee2 <osThreadNew+0xca>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d108      	bne.n	8003ee2 <osThreadNew+0xca>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <osThreadNew+0xca>
          mem = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	e001      	b.n	8003ee2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d110      	bne.n	8003f0a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ef0:	9202      	str	r2, [sp, #8]
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6a3a      	ldr	r2, [r7, #32]
 8003efc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 fe1a 	bl	8004b38 <xTaskCreateStatic>
 8003f04:	4603      	mov	r3, r0
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e013      	b.n	8003f32 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d110      	bne.n	8003f32 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	f107 0310 	add.w	r3, r7, #16
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fe68 	bl	8004bf8 <xTaskCreate>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d001      	beq.n	8003f32 <osThreadNew+0x11a>
            hTask = NULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f32:	693b      	ldr	r3, [r7, #16]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3728      	adds	r7, #40	@ 0x28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f44:	f3ef 8305 	mrs	r3, IPSR
 8003f48:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <osDelay+0x1c>
    stat = osErrorISR;
 8003f50:	f06f 0305 	mvn.w	r3, #5
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	e007      	b.n	8003f68 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 ffa6 	bl	8004eb4 <vTaskDelay>
    }
  }

  return (stat);
 8003f68:	68fb      	ldr	r3, [r7, #12]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4a07      	ldr	r2, [pc, #28]	@ (8003fa0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <vApplicationGetIdleTaskMemory+0x30>)
 8003f8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2280      	movs	r2, #128	@ 0x80
 8003f90:	601a      	str	r2, [r3, #0]
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000314 	.word	0x20000314
 8003fa4:	200003bc 	.word	0x200003bc

08003fa8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4a07      	ldr	r2, [pc, #28]	@ (8003fd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003fb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4a06      	ldr	r2, [pc, #24]	@ (8003fd8 <vApplicationGetTimerTaskMemory+0x30>)
 8003fbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fc6:	601a      	str	r2, [r3, #0]
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	200005bc 	.word	0x200005bc
 8003fd8:	20000664 	.word	0x20000664

08003fdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f103 0208 	add.w	r2, r3, #8
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f103 0208 	add.w	r2, r3, #8
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f103 0208 	add.w	r2, r3, #8
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	601a      	str	r2, [r3, #0]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d103      	bne.n	800409e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	e00c      	b.n	80040b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3308      	adds	r3, #8
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e002      	b.n	80040ac <vListInsert+0x2e>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d2f6      	bcs.n	80040a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	601a      	str	r2, [r3, #0]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6892      	ldr	r2, [r2, #8]
 8004106:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6852      	ldr	r2, [r2, #4]
 8004110:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	429a      	cmp	r2, r3
 800411a:	d103      	bne.n	8004124 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	1e5a      	subs	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800416a:	bf00      	nop
 800416c:	bf00      	nop
 800416e:	e7fd      	b.n	800416c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004170:	f002 f8aa 	bl	80062c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417c:	68f9      	ldr	r1, [r7, #12]
 800417e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	441a      	add	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a0:	3b01      	subs	r3, #1
 80041a2:	68f9      	ldr	r1, [r7, #12]
 80041a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	441a      	add	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	22ff      	movs	r2, #255	@ 0xff
 80041b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	22ff      	movs	r2, #255	@ 0xff
 80041bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d114      	bne.n	80041f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01a      	beq.n	8004204 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3310      	adds	r3, #16
 80041d2:	4618      	mov	r0, r3
 80041d4:	f001 f942 	bl	800545c <xTaskRemoveFromEventList>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d012      	beq.n	8004204 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041de:	4b0d      	ldr	r3, [pc, #52]	@ (8004214 <xQueueGenericReset+0xd0>)
 80041e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	e009      	b.n	8004204 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3310      	adds	r3, #16
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fef1 	bl	8003fdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3324      	adds	r3, #36	@ 0x24
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff feec 	bl	8003fdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004204:	f002 f892 	bl	800632c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004208:	2301      	movs	r3, #1
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	e000ed04 	.word	0xe000ed04

08004218 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08e      	sub	sp, #56	@ 0x38
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10b      	bne.n	8004244 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800423e:	bf00      	nop
 8004240:	bf00      	nop
 8004242:	e7fd      	b.n	8004240 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10b      	bne.n	8004262 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800425c:	bf00      	nop
 800425e:	bf00      	nop
 8004260:	e7fd      	b.n	800425e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <xQueueGenericCreateStatic+0x56>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <xQueueGenericCreateStatic+0x5a>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <xQueueGenericCreateStatic+0x5c>
 8004272:	2300      	movs	r3, #0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	623b      	str	r3, [r7, #32]
}
 800428a:	bf00      	nop
 800428c:	bf00      	nop
 800428e:	e7fd      	b.n	800428c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <xQueueGenericCreateStatic+0x84>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <xQueueGenericCreateStatic+0x88>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <xQueueGenericCreateStatic+0x8a>
 80042a0:	2300      	movs	r3, #0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10b      	bne.n	80042be <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	61fb      	str	r3, [r7, #28]
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	e7fd      	b.n	80042ba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042be:	2350      	movs	r3, #80	@ 0x50
 80042c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b50      	cmp	r3, #80	@ 0x50
 80042c6:	d00b      	beq.n	80042e0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	61bb      	str	r3, [r7, #24]
}
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	e7fd      	b.n	80042dc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80042e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80042e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042f4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80042f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f805 	bl	8004312 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800430a:	4618      	mov	r0, r3
 800430c:	3730      	adds	r7, #48	@ 0x30
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d103      	bne.n	800432e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	e002      	b.n	8004334 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004340:	2101      	movs	r1, #1
 8004342:	69b8      	ldr	r0, [r7, #24]
 8004344:	f7ff fefe 	bl	8004144 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08e      	sub	sp, #56	@ 0x38
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004366:	2300      	movs	r3, #0
 8004368:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800436e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <xQueueGenericSend+0x34>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d103      	bne.n	800439a <xQueueGenericSend+0x42>
 8004392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <xQueueGenericSend+0x46>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <xQueueGenericSend+0x48>
 800439e:	2300      	movs	r3, #0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <xQueueGenericSend+0x64>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80043b6:	bf00      	nop
 80043b8:	bf00      	nop
 80043ba:	e7fd      	b.n	80043b8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d103      	bne.n	80043ca <xQueueGenericSend+0x72>
 80043c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <xQueueGenericSend+0x76>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <xQueueGenericSend+0x78>
 80043ce:	2300      	movs	r3, #0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <xQueueGenericSend+0x94>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	623b      	str	r3, [r7, #32]
}
 80043e6:	bf00      	nop
 80043e8:	bf00      	nop
 80043ea:	e7fd      	b.n	80043e8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043ec:	f001 f9fc 	bl	80057e8 <xTaskGetSchedulerState>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d102      	bne.n	80043fc <xQueueGenericSend+0xa4>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <xQueueGenericSend+0xa8>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <xQueueGenericSend+0xaa>
 8004400:	2300      	movs	r3, #0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10b      	bne.n	800441e <xQueueGenericSend+0xc6>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	61fb      	str	r3, [r7, #28]
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	e7fd      	b.n	800441a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800441e:	f001 ff53 	bl	80062c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442a:	429a      	cmp	r2, r3
 800442c:	d302      	bcc.n	8004434 <xQueueGenericSend+0xdc>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d129      	bne.n	8004488 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800443a:	f000 fa0f 	bl	800485c <prvCopyDataToQueue>
 800443e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	2b00      	cmp	r3, #0
 8004446:	d010      	beq.n	800446a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444a:	3324      	adds	r3, #36	@ 0x24
 800444c:	4618      	mov	r0, r3
 800444e:	f001 f805 	bl	800545c <xTaskRemoveFromEventList>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d013      	beq.n	8004480 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004458:	4b3f      	ldr	r3, [pc, #252]	@ (8004558 <xQueueGenericSend+0x200>)
 800445a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	e00a      	b.n	8004480 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800446a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004470:	4b39      	ldr	r3, [pc, #228]	@ (8004558 <xQueueGenericSend+0x200>)
 8004472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004480:	f001 ff54 	bl	800632c <vPortExitCritical>
				return pdPASS;
 8004484:	2301      	movs	r3, #1
 8004486:	e063      	b.n	8004550 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d103      	bne.n	8004496 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800448e:	f001 ff4d 	bl	800632c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004492:	2300      	movs	r3, #0
 8004494:	e05c      	b.n	8004550 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004498:	2b00      	cmp	r3, #0
 800449a:	d106      	bne.n	80044aa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800449c:	f107 0314 	add.w	r3, r7, #20
 80044a0:	4618      	mov	r0, r3
 80044a2:	f001 f83f 	bl	8005524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044a6:	2301      	movs	r3, #1
 80044a8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044aa:	f001 ff3f 	bl	800632c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044ae:	f000 fda7 	bl	8005000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044b2:	f001 ff09 	bl	80062c8 <vPortEnterCritical>
 80044b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044bc:	b25b      	sxtb	r3, r3
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d103      	bne.n	80044cc <xQueueGenericSend+0x174>
 80044c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044d2:	b25b      	sxtb	r3, r3
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d103      	bne.n	80044e2 <xQueueGenericSend+0x18a>
 80044da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044e2:	f001 ff23 	bl	800632c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044e6:	1d3a      	adds	r2, r7, #4
 80044e8:	f107 0314 	add.w	r3, r7, #20
 80044ec:	4611      	mov	r1, r2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 f82e 	bl	8005550 <xTaskCheckForTimeOut>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d124      	bne.n	8004544 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044fc:	f000 faa6 	bl	8004a4c <prvIsQueueFull>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d018      	beq.n	8004538 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004508:	3310      	adds	r3, #16
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	4611      	mov	r1, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f000 ff52 	bl	80053b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004514:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004516:	f000 fa31 	bl	800497c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800451a:	f000 fd7f 	bl	800501c <xTaskResumeAll>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	f47f af7c 	bne.w	800441e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004526:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <xQueueGenericSend+0x200>)
 8004528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	e772      	b.n	800441e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004538:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800453a:	f000 fa1f 	bl	800497c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800453e:	f000 fd6d 	bl	800501c <xTaskResumeAll>
 8004542:	e76c      	b.n	800441e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004544:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004546:	f000 fa19 	bl	800497c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800454a:	f000 fd67 	bl	800501c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800454e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004550:	4618      	mov	r0, r3
 8004552:	3738      	adds	r7, #56	@ 0x38
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	e000ed04 	.word	0xe000ed04

0800455c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b090      	sub	sp, #64	@ 0x40
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800456e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10b      	bne.n	800458c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004586:	bf00      	nop
 8004588:	bf00      	nop
 800458a:	e7fd      	b.n	8004588 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d103      	bne.n	800459a <xQueueGenericSendFromISR+0x3e>
 8004592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <xQueueGenericSendFromISR+0x42>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <xQueueGenericSendFromISR+0x44>
 800459e:	2300      	movs	r3, #0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10b      	bne.n	80045bc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d103      	bne.n	80045ca <xQueueGenericSendFromISR+0x6e>
 80045c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <xQueueGenericSendFromISR+0x72>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <xQueueGenericSendFromISR+0x74>
 80045ce:	2300      	movs	r3, #0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	623b      	str	r3, [r7, #32]
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045ec:	f001 ff4c 	bl	8006488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045f0:	f3ef 8211 	mrs	r2, BASEPRI
 80045f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	61fa      	str	r2, [r7, #28]
 8004606:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004608:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800460a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800460c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <xQueueGenericSendFromISR+0xc2>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d12f      	bne.n	800467e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800461e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004620:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004624:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004634:	f000 f912 	bl	800485c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004638:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d112      	bne.n	8004668 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004646:	2b00      	cmp	r3, #0
 8004648:	d016      	beq.n	8004678 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800464a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464c:	3324      	adds	r3, #36	@ 0x24
 800464e:	4618      	mov	r0, r3
 8004650:	f000 ff04 	bl	800545c <xTaskRemoveFromEventList>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00e      	beq.n	8004678 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00b      	beq.n	8004678 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	e007      	b.n	8004678 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004668:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800466c:	3301      	adds	r3, #1
 800466e:	b2db      	uxtb	r3, r3
 8004670:	b25a      	sxtb	r2, r3
 8004672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004674:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004678:	2301      	movs	r3, #1
 800467a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800467c:	e001      	b.n	8004682 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800467e:	2300      	movs	r3, #0
 8004680:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004684:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800468c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800468e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004690:	4618      	mov	r0, r3
 8004692:	3740      	adds	r7, #64	@ 0x40
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08c      	sub	sp, #48	@ 0x30
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10b      	bne.n	80046ca <xQueueReceive+0x32>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	623b      	str	r3, [r7, #32]
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop
 80046c8:	e7fd      	b.n	80046c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d103      	bne.n	80046d8 <xQueueReceive+0x40>
 80046d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <xQueueReceive+0x44>
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <xQueueReceive+0x46>
 80046dc:	2300      	movs	r3, #0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10b      	bne.n	80046fa <xQueueReceive+0x62>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	61fb      	str	r3, [r7, #28]
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop
 80046f8:	e7fd      	b.n	80046f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046fa:	f001 f875 	bl	80057e8 <xTaskGetSchedulerState>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d102      	bne.n	800470a <xQueueReceive+0x72>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <xQueueReceive+0x76>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <xQueueReceive+0x78>
 800470e:	2300      	movs	r3, #0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10b      	bne.n	800472c <xQueueReceive+0x94>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	61bb      	str	r3, [r7, #24]
}
 8004726:	bf00      	nop
 8004728:	bf00      	nop
 800472a:	e7fd      	b.n	8004728 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800472c:	f001 fdcc 	bl	80062c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004734:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01f      	beq.n	800477c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004740:	f000 f8f6 	bl	8004930 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	1e5a      	subs	r2, r3, #1
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00f      	beq.n	8004774 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004756:	3310      	adds	r3, #16
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fe7f 	bl	800545c <xTaskRemoveFromEventList>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004764:	4b3c      	ldr	r3, [pc, #240]	@ (8004858 <xQueueReceive+0x1c0>)
 8004766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004774:	f001 fdda 	bl	800632c <vPortExitCritical>
				return pdPASS;
 8004778:	2301      	movs	r3, #1
 800477a:	e069      	b.n	8004850 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d103      	bne.n	800478a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004782:	f001 fdd3 	bl	800632c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004786:	2300      	movs	r3, #0
 8004788:	e062      	b.n	8004850 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800478a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004790:	f107 0310 	add.w	r3, r7, #16
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fec5 	bl	8005524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800479a:	2301      	movs	r3, #1
 800479c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800479e:	f001 fdc5 	bl	800632c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047a2:	f000 fc2d 	bl	8005000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047a6:	f001 fd8f 	bl	80062c8 <vPortEnterCritical>
 80047aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047b0:	b25b      	sxtb	r3, r3
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b6:	d103      	bne.n	80047c0 <xQueueReceive+0x128>
 80047b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047c6:	b25b      	sxtb	r3, r3
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d103      	bne.n	80047d6 <xQueueReceive+0x13e>
 80047ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047d6:	f001 fda9 	bl	800632c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047da:	1d3a      	adds	r2, r7, #4
 80047dc:	f107 0310 	add.w	r3, r7, #16
 80047e0:	4611      	mov	r1, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 feb4 	bl	8005550 <xTaskCheckForTimeOut>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d123      	bne.n	8004836 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047f0:	f000 f916 	bl	8004a20 <prvIsQueueEmpty>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d017      	beq.n	800482a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fc:	3324      	adds	r3, #36	@ 0x24
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fdd8 	bl	80053b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004808:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800480a:	f000 f8b7 	bl	800497c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800480e:	f000 fc05 	bl	800501c <xTaskResumeAll>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d189      	bne.n	800472c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004818:	4b0f      	ldr	r3, [pc, #60]	@ (8004858 <xQueueReceive+0x1c0>)
 800481a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	e780      	b.n	800472c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800482a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800482c:	f000 f8a6 	bl	800497c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004830:	f000 fbf4 	bl	800501c <xTaskResumeAll>
 8004834:	e77a      	b.n	800472c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004838:	f000 f8a0 	bl	800497c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800483c:	f000 fbee 	bl	800501c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004840:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004842:	f000 f8ed 	bl	8004a20 <prvIsQueueEmpty>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	f43f af6f 	beq.w	800472c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800484e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004850:	4618      	mov	r0, r3
 8004852:	3730      	adds	r7, #48	@ 0x30
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004870:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10d      	bne.n	8004896 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d14d      	bne.n	800491e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 ffcc 	bl	8005824 <xTaskPriorityDisinherit>
 800488c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	609a      	str	r2, [r3, #8]
 8004894:	e043      	b.n	800491e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d119      	bne.n	80048d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6858      	ldr	r0, [r3, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	461a      	mov	r2, r3
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	f002 f8a2 	bl	80069f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b4:	441a      	add	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d32b      	bcc.n	800491e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	e026      	b.n	800491e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	68d8      	ldr	r0, [r3, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d8:	461a      	mov	r2, r3
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	f002 f888 	bl	80069f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e8:	425b      	negs	r3, r3
 80048ea:	441a      	add	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d207      	bcs.n	800490c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004904:	425b      	negs	r3, r3
 8004906:	441a      	add	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d105      	bne.n	800491e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	3b01      	subs	r3, #1
 800491c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004926:	697b      	ldr	r3, [r7, #20]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d018      	beq.n	8004974 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	441a      	add	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	429a      	cmp	r2, r3
 800495a:	d303      	bcc.n	8004964 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68d9      	ldr	r1, [r3, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496c:	461a      	mov	r2, r3
 800496e:	6838      	ldr	r0, [r7, #0]
 8004970:	f002 f83e 	bl	80069f0 <memcpy>
	}
}
 8004974:	bf00      	nop
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004984:	f001 fca0 	bl	80062c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800498e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004990:	e011      	b.n	80049b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004996:	2b00      	cmp	r3, #0
 8004998:	d012      	beq.n	80049c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3324      	adds	r3, #36	@ 0x24
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fd5c 	bl	800545c <xTaskRemoveFromEventList>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049aa:	f000 fe35 	bl	8005618 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	dce9      	bgt.n	8004992 <prvUnlockQueue+0x16>
 80049be:	e000      	b.n	80049c2 <prvUnlockQueue+0x46>
					break;
 80049c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	22ff      	movs	r2, #255	@ 0xff
 80049c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80049ca:	f001 fcaf 	bl	800632c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049ce:	f001 fc7b 	bl	80062c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049da:	e011      	b.n	8004a00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d012      	beq.n	8004a0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3310      	adds	r3, #16
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fd37 	bl	800545c <xTaskRemoveFromEventList>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049f4:	f000 fe10 	bl	8005618 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049f8:	7bbb      	ldrb	r3, [r7, #14]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	dce9      	bgt.n	80049dc <prvUnlockQueue+0x60>
 8004a08:	e000      	b.n	8004a0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	22ff      	movs	r2, #255	@ 0xff
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004a14:	f001 fc8a 	bl	800632c <vPortExitCritical>
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a28:	f001 fc4e 	bl	80062c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d102      	bne.n	8004a3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a34:	2301      	movs	r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	e001      	b.n	8004a3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a3e:	f001 fc75 	bl	800632c <vPortExitCritical>

	return xReturn;
 8004a42:	68fb      	ldr	r3, [r7, #12]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a54:	f001 fc38 	bl	80062c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d102      	bne.n	8004a6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	e001      	b.n	8004a6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a6e:	f001 fc5d 	bl	800632c <vPortExitCritical>

	return xReturn;
 8004a72:	68fb      	ldr	r3, [r7, #12]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	e014      	b.n	8004ab6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a8c:	4a0f      	ldr	r2, [pc, #60]	@ (8004acc <vQueueAddToRegistry+0x50>)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10b      	bne.n	8004ab0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a98:	490c      	ldr	r1, [pc, #48]	@ (8004acc <vQueueAddToRegistry+0x50>)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8004acc <vQueueAddToRegistry+0x50>)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004aae:	e006      	b.n	8004abe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b07      	cmp	r3, #7
 8004aba:	d9e7      	bls.n	8004a8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004abc:	bf00      	nop
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	20000a64 	.word	0x20000a64

08004ad0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ae0:	f001 fbf2 	bl	80062c8 <vPortEnterCritical>
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004aea:	b25b      	sxtb	r3, r3
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d103      	bne.n	8004afa <vQueueWaitForMessageRestricted+0x2a>
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b00:	b25b      	sxtb	r3, r3
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b06:	d103      	bne.n	8004b10 <vQueueWaitForMessageRestricted+0x40>
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b10:	f001 fc0c 	bl	800632c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	3324      	adds	r3, #36	@ 0x24
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fc6d 	bl	8005404 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b2a:	6978      	ldr	r0, [r7, #20]
 8004b2c:	f7ff ff26 	bl	800497c <prvUnlockQueue>
	}
 8004b30:	bf00      	nop
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08e      	sub	sp, #56	@ 0x38
 8004b3c:	af04      	add	r7, sp, #16
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10b      	bne.n	8004b64 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	623b      	str	r3, [r7, #32]
}
 8004b5e:	bf00      	nop
 8004b60:	bf00      	nop
 8004b62:	e7fd      	b.n	8004b60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	61fb      	str	r3, [r7, #28]
}
 8004b7c:	bf00      	nop
 8004b7e:	bf00      	nop
 8004b80:	e7fd      	b.n	8004b7e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b82:	23a8      	movs	r3, #168	@ 0xa8
 8004b84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2ba8      	cmp	r3, #168	@ 0xa8
 8004b8a:	d00b      	beq.n	8004ba4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	61bb      	str	r3, [r7, #24]
}
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	e7fd      	b.n	8004ba0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ba4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d01e      	beq.n	8004bea <xTaskCreateStatic+0xb2>
 8004bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01b      	beq.n	8004bea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	9303      	str	r3, [sp, #12]
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	9302      	str	r3, [sp, #8]
 8004bcc:	f107 0314 	add.w	r3, r7, #20
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f851 	bl	8004c84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004be2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004be4:	f000 f8f6 	bl	8004dd4 <prvAddNewTaskToReadyList>
 8004be8:	e001      	b.n	8004bee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bee:	697b      	ldr	r3, [r7, #20]
	}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3728      	adds	r7, #40	@ 0x28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08c      	sub	sp, #48	@ 0x30
 8004bfc:	af04      	add	r7, sp, #16
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f001 fc7d 	bl	800650c <pvPortMalloc>
 8004c12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00e      	beq.n	8004c38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c1a:	20a8      	movs	r0, #168	@ 0xa8
 8004c1c:	f001 fc76 	bl	800650c <pvPortMalloc>
 8004c20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c2e:	e005      	b.n	8004c3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c30:	6978      	ldr	r0, [r7, #20]
 8004c32:	f001 fd39 	bl	80066a8 <vPortFree>
 8004c36:	e001      	b.n	8004c3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d017      	beq.n	8004c72 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c4a:	88fa      	ldrh	r2, [r7, #6]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	9303      	str	r3, [sp, #12]
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	9302      	str	r3, [sp, #8]
 8004c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c56:	9301      	str	r3, [sp, #4]
 8004c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f80f 	bl	8004c84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c66:	69f8      	ldr	r0, [r7, #28]
 8004c68:	f000 f8b4 	bl	8004dd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	e002      	b.n	8004c78 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c72:	f04f 33ff 	mov.w	r3, #4294967295
 8004c76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c78:	69bb      	ldr	r3, [r7, #24]
	}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c94:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	21a5      	movs	r1, #165	@ 0xa5
 8004c9e:	f001 fe23 	bl	80068e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004cac:	3b01      	subs	r3, #1
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00b      	beq.n	8004cde <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	617b      	str	r3, [r7, #20]
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	e7fd      	b.n	8004cda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01f      	beq.n	8004d24 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61fb      	str	r3, [r7, #28]
 8004ce8:	e012      	b.n	8004d10 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	7819      	ldrb	r1, [r3, #0]
 8004cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3334      	adds	r3, #52	@ 0x34
 8004cfa:	460a      	mov	r2, r1
 8004cfc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	4413      	add	r3, r2
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d006      	beq.n	8004d18 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	61fb      	str	r3, [r7, #28]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	2b0f      	cmp	r3, #15
 8004d14:	d9e9      	bls.n	8004cea <prvInitialiseNewTask+0x66>
 8004d16:	e000      	b.n	8004d1a <prvInitialiseNewTask+0x96>
			{
				break;
 8004d18:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d22:	e003      	b.n	8004d2c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2e:	2b37      	cmp	r3, #55	@ 0x37
 8004d30:	d901      	bls.n	8004d36 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d32:	2337      	movs	r3, #55	@ 0x37
 8004d34:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d40:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d44:	2200      	movs	r2, #0
 8004d46:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff f965 	bl	800401c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d54:	3318      	adds	r3, #24
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff f960 	bl	800401c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d64:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d70:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d84:	3354      	adds	r3, #84	@ 0x54
 8004d86:	224c      	movs	r2, #76	@ 0x4c
 8004d88:	2100      	movs	r1, #0
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f001 fdac 	bl	80068e8 <memset>
 8004d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d92:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc8 <prvInitialiseNewTask+0x144>)
 8004d94:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d98:	4a0c      	ldr	r2, [pc, #48]	@ (8004dcc <prvInitialiseNewTask+0x148>)
 8004d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd0 <prvInitialiseNewTask+0x14c>)
 8004da0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	68f9      	ldr	r1, [r7, #12]
 8004da6:	69b8      	ldr	r0, [r7, #24]
 8004da8:	f001 f95a 	bl	8006060 <pxPortInitialiseStack>
 8004dac:	4602      	mov	r2, r0
 8004dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dbe:	bf00      	nop
 8004dc0:	3720      	adds	r7, #32
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20004cf8 	.word	0x20004cf8
 8004dcc:	20004d60 	.word	0x20004d60
 8004dd0:	20004dc8 	.word	0x20004dc8

08004dd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ddc:	f001 fa74 	bl	80062c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004de0:	4b2d      	ldr	r3, [pc, #180]	@ (8004e98 <prvAddNewTaskToReadyList+0xc4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3301      	adds	r3, #1
 8004de6:	4a2c      	ldr	r2, [pc, #176]	@ (8004e98 <prvAddNewTaskToReadyList+0xc4>)
 8004de8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dea:	4b2c      	ldr	r3, [pc, #176]	@ (8004e9c <prvAddNewTaskToReadyList+0xc8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004df2:	4a2a      	ldr	r2, [pc, #168]	@ (8004e9c <prvAddNewTaskToReadyList+0xc8>)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004df8:	4b27      	ldr	r3, [pc, #156]	@ (8004e98 <prvAddNewTaskToReadyList+0xc4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d110      	bne.n	8004e22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e00:	f000 fc2e 	bl	8005660 <prvInitialiseTaskLists>
 8004e04:	e00d      	b.n	8004e22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e06:	4b26      	ldr	r3, [pc, #152]	@ (8004ea0 <prvAddNewTaskToReadyList+0xcc>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e0e:	4b23      	ldr	r3, [pc, #140]	@ (8004e9c <prvAddNewTaskToReadyList+0xc8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d802      	bhi.n	8004e22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e9c <prvAddNewTaskToReadyList+0xc8>)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e22:	4b20      	ldr	r3, [pc, #128]	@ (8004ea4 <prvAddNewTaskToReadyList+0xd0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3301      	adds	r3, #1
 8004e28:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea4 <prvAddNewTaskToReadyList+0xd0>)
 8004e2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea4 <prvAddNewTaskToReadyList+0xd0>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea8 <prvAddNewTaskToReadyList+0xd4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d903      	bls.n	8004e48 <prvAddNewTaskToReadyList+0x74>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e44:	4a18      	ldr	r2, [pc, #96]	@ (8004ea8 <prvAddNewTaskToReadyList+0xd4>)
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4a15      	ldr	r2, [pc, #84]	@ (8004eac <prvAddNewTaskToReadyList+0xd8>)
 8004e56:	441a      	add	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f7ff f8e9 	bl	8004036 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e64:	f001 fa62 	bl	800632c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e68:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <prvAddNewTaskToReadyList+0xcc>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00e      	beq.n	8004e8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e70:	4b0a      	ldr	r3, [pc, #40]	@ (8004e9c <prvAddNewTaskToReadyList+0xc8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d207      	bcs.n	8004e8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb0 <prvAddNewTaskToReadyList+0xdc>)
 8004e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000f78 	.word	0x20000f78
 8004e9c:	20000aa4 	.word	0x20000aa4
 8004ea0:	20000f84 	.word	0x20000f84
 8004ea4:	20000f94 	.word	0x20000f94
 8004ea8:	20000f80 	.word	0x20000f80
 8004eac:	20000aa8 	.word	0x20000aa8
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d018      	beq.n	8004ef8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ec6:	4b14      	ldr	r3, [pc, #80]	@ (8004f18 <vTaskDelay+0x64>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <vTaskDelay+0x32>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	60bb      	str	r3, [r7, #8]
}
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	e7fd      	b.n	8004ee2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ee6:	f000 f88b 	bl	8005000 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004eea:	2100      	movs	r1, #0
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fd09 	bl	8005904 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ef2:	f000 f893 	bl	800501c <xTaskResumeAll>
 8004ef6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d107      	bne.n	8004f0e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004efe:	4b07      	ldr	r3, [pc, #28]	@ (8004f1c <vTaskDelay+0x68>)
 8004f00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000fa0 	.word	0x20000fa0
 8004f1c:	e000ed04 	.word	0xe000ed04

08004f20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	@ 0x28
 8004f24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f2e:	463a      	mov	r2, r7
 8004f30:	1d39      	adds	r1, r7, #4
 8004f32:	f107 0308 	add.w	r3, r7, #8
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff f81c 	bl	8003f74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	9202      	str	r2, [sp, #8]
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	2300      	movs	r3, #0
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	460a      	mov	r2, r1
 8004f4e:	4924      	ldr	r1, [pc, #144]	@ (8004fe0 <vTaskStartScheduler+0xc0>)
 8004f50:	4824      	ldr	r0, [pc, #144]	@ (8004fe4 <vTaskStartScheduler+0xc4>)
 8004f52:	f7ff fdf1 	bl	8004b38 <xTaskCreateStatic>
 8004f56:	4603      	mov	r3, r0
 8004f58:	4a23      	ldr	r2, [pc, #140]	@ (8004fe8 <vTaskStartScheduler+0xc8>)
 8004f5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f5c:	4b22      	ldr	r3, [pc, #136]	@ (8004fe8 <vTaskStartScheduler+0xc8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f64:	2301      	movs	r3, #1
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	e001      	b.n	8004f6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d102      	bne.n	8004f7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f74:	f000 fd1a 	bl	80059ac <xTimerCreateTimerTask>
 8004f78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d11b      	bne.n	8004fb8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	613b      	str	r3, [r7, #16]
}
 8004f92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f94:	4b15      	ldr	r3, [pc, #84]	@ (8004fec <vTaskStartScheduler+0xcc>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3354      	adds	r3, #84	@ 0x54
 8004f9a:	4a15      	ldr	r2, [pc, #84]	@ (8004ff0 <vTaskStartScheduler+0xd0>)
 8004f9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f9e:	4b15      	ldr	r3, [pc, #84]	@ (8004ff4 <vTaskStartScheduler+0xd4>)
 8004fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fa6:	4b14      	ldr	r3, [pc, #80]	@ (8004ff8 <vTaskStartScheduler+0xd8>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004fac:	4b13      	ldr	r3, [pc, #76]	@ (8004ffc <vTaskStartScheduler+0xdc>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fb2:	f001 f8e5 	bl	8006180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fb6:	e00f      	b.n	8004fd8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d10b      	bne.n	8004fd8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	60fb      	str	r3, [r7, #12]
}
 8004fd2:	bf00      	nop
 8004fd4:	bf00      	nop
 8004fd6:	e7fd      	b.n	8004fd4 <vTaskStartScheduler+0xb4>
}
 8004fd8:	bf00      	nop
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	08006afc 	.word	0x08006afc
 8004fe4:	08005631 	.word	0x08005631
 8004fe8:	20000f9c 	.word	0x20000f9c
 8004fec:	20000aa4 	.word	0x20000aa4
 8004ff0:	20000010 	.word	0x20000010
 8004ff4:	20000f98 	.word	0x20000f98
 8004ff8:	20000f84 	.word	0x20000f84
 8004ffc:	20000f7c 	.word	0x20000f7c

08005000 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005004:	4b04      	ldr	r3, [pc, #16]	@ (8005018 <vTaskSuspendAll+0x18>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3301      	adds	r3, #1
 800500a:	4a03      	ldr	r2, [pc, #12]	@ (8005018 <vTaskSuspendAll+0x18>)
 800500c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800500e:	bf00      	nop
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	20000fa0 	.word	0x20000fa0

0800501c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005026:	2300      	movs	r3, #0
 8005028:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800502a:	4b42      	ldr	r3, [pc, #264]	@ (8005134 <xTaskResumeAll+0x118>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10b      	bne.n	800504a <xTaskResumeAll+0x2e>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	603b      	str	r3, [r7, #0]
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop
 8005048:	e7fd      	b.n	8005046 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800504a:	f001 f93d 	bl	80062c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800504e:	4b39      	ldr	r3, [pc, #228]	@ (8005134 <xTaskResumeAll+0x118>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3b01      	subs	r3, #1
 8005054:	4a37      	ldr	r2, [pc, #220]	@ (8005134 <xTaskResumeAll+0x118>)
 8005056:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005058:	4b36      	ldr	r3, [pc, #216]	@ (8005134 <xTaskResumeAll+0x118>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d162      	bne.n	8005126 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005060:	4b35      	ldr	r3, [pc, #212]	@ (8005138 <xTaskResumeAll+0x11c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d05e      	beq.n	8005126 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005068:	e02f      	b.n	80050ca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800506a:	4b34      	ldr	r3, [pc, #208]	@ (800513c <xTaskResumeAll+0x120>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3318      	adds	r3, #24
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff f83a 	bl	80040f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	3304      	adds	r3, #4
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff f835 	bl	80040f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800508a:	4b2d      	ldr	r3, [pc, #180]	@ (8005140 <xTaskResumeAll+0x124>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d903      	bls.n	800509a <xTaskResumeAll+0x7e>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005096:	4a2a      	ldr	r2, [pc, #168]	@ (8005140 <xTaskResumeAll+0x124>)
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4a27      	ldr	r2, [pc, #156]	@ (8005144 <xTaskResumeAll+0x128>)
 80050a8:	441a      	add	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4619      	mov	r1, r3
 80050b0:	4610      	mov	r0, r2
 80050b2:	f7fe ffc0 	bl	8004036 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ba:	4b23      	ldr	r3, [pc, #140]	@ (8005148 <xTaskResumeAll+0x12c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d302      	bcc.n	80050ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80050c4:	4b21      	ldr	r3, [pc, #132]	@ (800514c <xTaskResumeAll+0x130>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050ca:	4b1c      	ldr	r3, [pc, #112]	@ (800513c <xTaskResumeAll+0x120>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1cb      	bne.n	800506a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050d8:	f000 fb66 	bl	80057a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005150 <xTaskResumeAll+0x134>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d010      	beq.n	800510a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050e8:	f000 f846 	bl	8005178 <xTaskIncrementTick>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80050f2:	4b16      	ldr	r3, [pc, #88]	@ (800514c <xTaskResumeAll+0x130>)
 80050f4:	2201      	movs	r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1f1      	bne.n	80050e8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005104:	4b12      	ldr	r3, [pc, #72]	@ (8005150 <xTaskResumeAll+0x134>)
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800510a:	4b10      	ldr	r3, [pc, #64]	@ (800514c <xTaskResumeAll+0x130>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005112:	2301      	movs	r3, #1
 8005114:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005116:	4b0f      	ldr	r3, [pc, #60]	@ (8005154 <xTaskResumeAll+0x138>)
 8005118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005126:	f001 f901 	bl	800632c <vPortExitCritical>

	return xAlreadyYielded;
 800512a:	68bb      	ldr	r3, [r7, #8]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000fa0 	.word	0x20000fa0
 8005138:	20000f78 	.word	0x20000f78
 800513c:	20000f38 	.word	0x20000f38
 8005140:	20000f80 	.word	0x20000f80
 8005144:	20000aa8 	.word	0x20000aa8
 8005148:	20000aa4 	.word	0x20000aa4
 800514c:	20000f8c 	.word	0x20000f8c
 8005150:	20000f88 	.word	0x20000f88
 8005154:	e000ed04 	.word	0xe000ed04

08005158 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800515e:	4b05      	ldr	r3, [pc, #20]	@ (8005174 <xTaskGetTickCount+0x1c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005164:	687b      	ldr	r3, [r7, #4]
}
 8005166:	4618      	mov	r0, r3
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000f7c 	.word	0x20000f7c

08005178 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005182:	4b4f      	ldr	r3, [pc, #316]	@ (80052c0 <xTaskIncrementTick+0x148>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	f040 8090 	bne.w	80052ac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800518c:	4b4d      	ldr	r3, [pc, #308]	@ (80052c4 <xTaskIncrementTick+0x14c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3301      	adds	r3, #1
 8005192:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005194:	4a4b      	ldr	r2, [pc, #300]	@ (80052c4 <xTaskIncrementTick+0x14c>)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d121      	bne.n	80051e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80051a0:	4b49      	ldr	r3, [pc, #292]	@ (80052c8 <xTaskIncrementTick+0x150>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00b      	beq.n	80051c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	603b      	str	r3, [r7, #0]
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	e7fd      	b.n	80051be <xTaskIncrementTick+0x46>
 80051c2:	4b41      	ldr	r3, [pc, #260]	@ (80052c8 <xTaskIncrementTick+0x150>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	4b40      	ldr	r3, [pc, #256]	@ (80052cc <xTaskIncrementTick+0x154>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a3e      	ldr	r2, [pc, #248]	@ (80052c8 <xTaskIncrementTick+0x150>)
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	4a3e      	ldr	r2, [pc, #248]	@ (80052cc <xTaskIncrementTick+0x154>)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	4b3e      	ldr	r3, [pc, #248]	@ (80052d0 <xTaskIncrementTick+0x158>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3301      	adds	r3, #1
 80051dc:	4a3c      	ldr	r2, [pc, #240]	@ (80052d0 <xTaskIncrementTick+0x158>)
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	f000 fae2 	bl	80057a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051e4:	4b3b      	ldr	r3, [pc, #236]	@ (80052d4 <xTaskIncrementTick+0x15c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d349      	bcc.n	8005282 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ee:	4b36      	ldr	r3, [pc, #216]	@ (80052c8 <xTaskIncrementTick+0x150>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d104      	bne.n	8005202 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f8:	4b36      	ldr	r3, [pc, #216]	@ (80052d4 <xTaskIncrementTick+0x15c>)
 80051fa:	f04f 32ff 	mov.w	r2, #4294967295
 80051fe:	601a      	str	r2, [r3, #0]
					break;
 8005200:	e03f      	b.n	8005282 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005202:	4b31      	ldr	r3, [pc, #196]	@ (80052c8 <xTaskIncrementTick+0x150>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d203      	bcs.n	8005222 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800521a:	4a2e      	ldr	r2, [pc, #184]	@ (80052d4 <xTaskIncrementTick+0x15c>)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005220:	e02f      	b.n	8005282 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	3304      	adds	r3, #4
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe ff62 	bl	80040f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005230:	2b00      	cmp	r3, #0
 8005232:	d004      	beq.n	800523e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	3318      	adds	r3, #24
 8005238:	4618      	mov	r0, r3
 800523a:	f7fe ff59 	bl	80040f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005242:	4b25      	ldr	r3, [pc, #148]	@ (80052d8 <xTaskIncrementTick+0x160>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d903      	bls.n	8005252 <xTaskIncrementTick+0xda>
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524e:	4a22      	ldr	r2, [pc, #136]	@ (80052d8 <xTaskIncrementTick+0x160>)
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4a1f      	ldr	r2, [pc, #124]	@ (80052dc <xTaskIncrementTick+0x164>)
 8005260:	441a      	add	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	3304      	adds	r3, #4
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f7fe fee4 	bl	8004036 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005272:	4b1b      	ldr	r3, [pc, #108]	@ (80052e0 <xTaskIncrementTick+0x168>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	429a      	cmp	r2, r3
 800527a:	d3b8      	bcc.n	80051ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800527c:	2301      	movs	r3, #1
 800527e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005280:	e7b5      	b.n	80051ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005282:	4b17      	ldr	r3, [pc, #92]	@ (80052e0 <xTaskIncrementTick+0x168>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005288:	4914      	ldr	r1, [pc, #80]	@ (80052dc <xTaskIncrementTick+0x164>)
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d901      	bls.n	800529e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800529a:	2301      	movs	r3, #1
 800529c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800529e:	4b11      	ldr	r3, [pc, #68]	@ (80052e4 <xTaskIncrementTick+0x16c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d007      	beq.n	80052b6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80052a6:	2301      	movs	r3, #1
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	e004      	b.n	80052b6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80052ac:	4b0e      	ldr	r3, [pc, #56]	@ (80052e8 <xTaskIncrementTick+0x170>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3301      	adds	r3, #1
 80052b2:	4a0d      	ldr	r2, [pc, #52]	@ (80052e8 <xTaskIncrementTick+0x170>)
 80052b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80052b6:	697b      	ldr	r3, [r7, #20]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20000fa0 	.word	0x20000fa0
 80052c4:	20000f7c 	.word	0x20000f7c
 80052c8:	20000f30 	.word	0x20000f30
 80052cc:	20000f34 	.word	0x20000f34
 80052d0:	20000f90 	.word	0x20000f90
 80052d4:	20000f98 	.word	0x20000f98
 80052d8:	20000f80 	.word	0x20000f80
 80052dc:	20000aa8 	.word	0x20000aa8
 80052e0:	20000aa4 	.word	0x20000aa4
 80052e4:	20000f8c 	.word	0x20000f8c
 80052e8:	20000f88 	.word	0x20000f88

080052ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052f2:	4b2b      	ldr	r3, [pc, #172]	@ (80053a0 <vTaskSwitchContext+0xb4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052fa:	4b2a      	ldr	r3, [pc, #168]	@ (80053a4 <vTaskSwitchContext+0xb8>)
 80052fc:	2201      	movs	r2, #1
 80052fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005300:	e047      	b.n	8005392 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005302:	4b28      	ldr	r3, [pc, #160]	@ (80053a4 <vTaskSwitchContext+0xb8>)
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005308:	4b27      	ldr	r3, [pc, #156]	@ (80053a8 <vTaskSwitchContext+0xbc>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	e011      	b.n	8005334 <vTaskSwitchContext+0x48>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10b      	bne.n	800532e <vTaskSwitchContext+0x42>
	__asm volatile
 8005316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	607b      	str	r3, [r7, #4]
}
 8005328:	bf00      	nop
 800532a:	bf00      	nop
 800532c:	e7fd      	b.n	800532a <vTaskSwitchContext+0x3e>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3b01      	subs	r3, #1
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	491d      	ldr	r1, [pc, #116]	@ (80053ac <vTaskSwitchContext+0xc0>)
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0e3      	beq.n	8005310 <vTaskSwitchContext+0x24>
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4a16      	ldr	r2, [pc, #88]	@ (80053ac <vTaskSwitchContext+0xc0>)
 8005354:	4413      	add	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	3308      	adds	r3, #8
 800536a:	429a      	cmp	r2, r3
 800536c:	d104      	bne.n	8005378 <vTaskSwitchContext+0x8c>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	605a      	str	r2, [r3, #4]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	4a0c      	ldr	r2, [pc, #48]	@ (80053b0 <vTaskSwitchContext+0xc4>)
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	4a09      	ldr	r2, [pc, #36]	@ (80053a8 <vTaskSwitchContext+0xbc>)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005388:	4b09      	ldr	r3, [pc, #36]	@ (80053b0 <vTaskSwitchContext+0xc4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3354      	adds	r3, #84	@ 0x54
 800538e:	4a09      	ldr	r2, [pc, #36]	@ (80053b4 <vTaskSwitchContext+0xc8>)
 8005390:	6013      	str	r3, [r2, #0]
}
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000fa0 	.word	0x20000fa0
 80053a4:	20000f8c 	.word	0x20000f8c
 80053a8:	20000f80 	.word	0x20000f80
 80053ac:	20000aa8 	.word	0x20000aa8
 80053b0:	20000aa4 	.word	0x20000aa4
 80053b4:	20000010 	.word	0x20000010

080053b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10b      	bne.n	80053e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	60fb      	str	r3, [r7, #12]
}
 80053da:	bf00      	nop
 80053dc:	bf00      	nop
 80053de:	e7fd      	b.n	80053dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053e0:	4b07      	ldr	r3, [pc, #28]	@ (8005400 <vTaskPlaceOnEventList+0x48>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3318      	adds	r3, #24
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7fe fe48 	bl	800407e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053ee:	2101      	movs	r1, #1
 80053f0:	6838      	ldr	r0, [r7, #0]
 80053f2:	f000 fa87 	bl	8005904 <prvAddCurrentTaskToDelayedList>
}
 80053f6:	bf00      	nop
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000aa4 	.word	0x20000aa4

08005404 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10b      	bne.n	800542e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	617b      	str	r3, [r7, #20]
}
 8005428:	bf00      	nop
 800542a:	bf00      	nop
 800542c:	e7fd      	b.n	800542a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800542e:	4b0a      	ldr	r3, [pc, #40]	@ (8005458 <vTaskPlaceOnEventListRestricted+0x54>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3318      	adds	r3, #24
 8005434:	4619      	mov	r1, r3
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7fe fdfd 	bl	8004036 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005442:	f04f 33ff 	mov.w	r3, #4294967295
 8005446:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	68b8      	ldr	r0, [r7, #8]
 800544c:	f000 fa5a 	bl	8005904 <prvAddCurrentTaskToDelayedList>
	}
 8005450:	bf00      	nop
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000aa4 	.word	0x20000aa4

0800545c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10b      	bne.n	800548a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	60fb      	str	r3, [r7, #12]
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	e7fd      	b.n	8005486 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	3318      	adds	r3, #24
 800548e:	4618      	mov	r0, r3
 8005490:	f7fe fe2e 	bl	80040f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005494:	4b1d      	ldr	r3, [pc, #116]	@ (800550c <xTaskRemoveFromEventList+0xb0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d11d      	bne.n	80054d8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	3304      	adds	r3, #4
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fe fe25 	bl	80040f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054aa:	4b19      	ldr	r3, [pc, #100]	@ (8005510 <xTaskRemoveFromEventList+0xb4>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d903      	bls.n	80054ba <xTaskRemoveFromEventList+0x5e>
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b6:	4a16      	ldr	r2, [pc, #88]	@ (8005510 <xTaskRemoveFromEventList+0xb4>)
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4a13      	ldr	r2, [pc, #76]	@ (8005514 <xTaskRemoveFromEventList+0xb8>)
 80054c8:	441a      	add	r2, r3
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	3304      	adds	r3, #4
 80054ce:	4619      	mov	r1, r3
 80054d0:	4610      	mov	r0, r2
 80054d2:	f7fe fdb0 	bl	8004036 <vListInsertEnd>
 80054d6:	e005      	b.n	80054e4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	3318      	adds	r3, #24
 80054dc:	4619      	mov	r1, r3
 80054de:	480e      	ldr	r0, [pc, #56]	@ (8005518 <xTaskRemoveFromEventList+0xbc>)
 80054e0:	f7fe fda9 	bl	8004036 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e8:	4b0c      	ldr	r3, [pc, #48]	@ (800551c <xTaskRemoveFromEventList+0xc0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d905      	bls.n	80054fe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054f2:	2301      	movs	r3, #1
 80054f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005520 <xTaskRemoveFromEventList+0xc4>)
 80054f8:	2201      	movs	r2, #1
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	e001      	b.n	8005502 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005502:	697b      	ldr	r3, [r7, #20]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000fa0 	.word	0x20000fa0
 8005510:	20000f80 	.word	0x20000f80
 8005514:	20000aa8 	.word	0x20000aa8
 8005518:	20000f38 	.word	0x20000f38
 800551c:	20000aa4 	.word	0x20000aa4
 8005520:	20000f8c 	.word	0x20000f8c

08005524 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800552c:	4b06      	ldr	r3, [pc, #24]	@ (8005548 <vTaskInternalSetTimeOutState+0x24>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005534:	4b05      	ldr	r3, [pc, #20]	@ (800554c <vTaskInternalSetTimeOutState+0x28>)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	605a      	str	r2, [r3, #4]
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	20000f90 	.word	0x20000f90
 800554c:	20000f7c 	.word	0x20000f7c

08005550 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b088      	sub	sp, #32
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10b      	bne.n	8005578 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	613b      	str	r3, [r7, #16]
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	e7fd      	b.n	8005574 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10b      	bne.n	8005596 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	60fb      	str	r3, [r7, #12]
}
 8005590:	bf00      	nop
 8005592:	bf00      	nop
 8005594:	e7fd      	b.n	8005592 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005596:	f000 fe97 	bl	80062c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800559a:	4b1d      	ldr	r3, [pc, #116]	@ (8005610 <xTaskCheckForTimeOut+0xc0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b2:	d102      	bne.n	80055ba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	e023      	b.n	8005602 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	4b15      	ldr	r3, [pc, #84]	@ (8005614 <xTaskCheckForTimeOut+0xc4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d007      	beq.n	80055d6 <xTaskCheckForTimeOut+0x86>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d302      	bcc.n	80055d6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055d0:	2301      	movs	r3, #1
 80055d2:	61fb      	str	r3, [r7, #28]
 80055d4:	e015      	b.n	8005602 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d20b      	bcs.n	80055f8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	1ad2      	subs	r2, r2, r3
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff ff99 	bl	8005524 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	61fb      	str	r3, [r7, #28]
 80055f6:	e004      	b.n	8005602 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055fe:	2301      	movs	r3, #1
 8005600:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005602:	f000 fe93 	bl	800632c <vPortExitCritical>

	return xReturn;
 8005606:	69fb      	ldr	r3, [r7, #28]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3720      	adds	r7, #32
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20000f7c 	.word	0x20000f7c
 8005614:	20000f90 	.word	0x20000f90

08005618 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800561c:	4b03      	ldr	r3, [pc, #12]	@ (800562c <vTaskMissedYield+0x14>)
 800561e:	2201      	movs	r2, #1
 8005620:	601a      	str	r2, [r3, #0]
}
 8005622:	bf00      	nop
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	20000f8c 	.word	0x20000f8c

08005630 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005638:	f000 f852 	bl	80056e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800563c:	4b06      	ldr	r3, [pc, #24]	@ (8005658 <prvIdleTask+0x28>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d9f9      	bls.n	8005638 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005644:	4b05      	ldr	r3, [pc, #20]	@ (800565c <prvIdleTask+0x2c>)
 8005646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005654:	e7f0      	b.n	8005638 <prvIdleTask+0x8>
 8005656:	bf00      	nop
 8005658:	20000aa8 	.word	0x20000aa8
 800565c:	e000ed04 	.word	0xe000ed04

08005660 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005666:	2300      	movs	r3, #0
 8005668:	607b      	str	r3, [r7, #4]
 800566a:	e00c      	b.n	8005686 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4a12      	ldr	r2, [pc, #72]	@ (80056c0 <prvInitialiseTaskLists+0x60>)
 8005678:	4413      	add	r3, r2
 800567a:	4618      	mov	r0, r3
 800567c:	f7fe fcae 	bl	8003fdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3301      	adds	r3, #1
 8005684:	607b      	str	r3, [r7, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b37      	cmp	r3, #55	@ 0x37
 800568a:	d9ef      	bls.n	800566c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800568c:	480d      	ldr	r0, [pc, #52]	@ (80056c4 <prvInitialiseTaskLists+0x64>)
 800568e:	f7fe fca5 	bl	8003fdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005692:	480d      	ldr	r0, [pc, #52]	@ (80056c8 <prvInitialiseTaskLists+0x68>)
 8005694:	f7fe fca2 	bl	8003fdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005698:	480c      	ldr	r0, [pc, #48]	@ (80056cc <prvInitialiseTaskLists+0x6c>)
 800569a:	f7fe fc9f 	bl	8003fdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800569e:	480c      	ldr	r0, [pc, #48]	@ (80056d0 <prvInitialiseTaskLists+0x70>)
 80056a0:	f7fe fc9c 	bl	8003fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056a4:	480b      	ldr	r0, [pc, #44]	@ (80056d4 <prvInitialiseTaskLists+0x74>)
 80056a6:	f7fe fc99 	bl	8003fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056aa:	4b0b      	ldr	r3, [pc, #44]	@ (80056d8 <prvInitialiseTaskLists+0x78>)
 80056ac:	4a05      	ldr	r2, [pc, #20]	@ (80056c4 <prvInitialiseTaskLists+0x64>)
 80056ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056b0:	4b0a      	ldr	r3, [pc, #40]	@ (80056dc <prvInitialiseTaskLists+0x7c>)
 80056b2:	4a05      	ldr	r2, [pc, #20]	@ (80056c8 <prvInitialiseTaskLists+0x68>)
 80056b4:	601a      	str	r2, [r3, #0]
}
 80056b6:	bf00      	nop
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000aa8 	.word	0x20000aa8
 80056c4:	20000f08 	.word	0x20000f08
 80056c8:	20000f1c 	.word	0x20000f1c
 80056cc:	20000f38 	.word	0x20000f38
 80056d0:	20000f4c 	.word	0x20000f4c
 80056d4:	20000f64 	.word	0x20000f64
 80056d8:	20000f30 	.word	0x20000f30
 80056dc:	20000f34 	.word	0x20000f34

080056e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056e6:	e019      	b.n	800571c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056e8:	f000 fdee 	bl	80062c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ec:	4b10      	ldr	r3, [pc, #64]	@ (8005730 <prvCheckTasksWaitingTermination+0x50>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3304      	adds	r3, #4
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fe fcf9 	bl	80040f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005734 <prvCheckTasksWaitingTermination+0x54>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3b01      	subs	r3, #1
 8005704:	4a0b      	ldr	r2, [pc, #44]	@ (8005734 <prvCheckTasksWaitingTermination+0x54>)
 8005706:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005708:	4b0b      	ldr	r3, [pc, #44]	@ (8005738 <prvCheckTasksWaitingTermination+0x58>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3b01      	subs	r3, #1
 800570e:	4a0a      	ldr	r2, [pc, #40]	@ (8005738 <prvCheckTasksWaitingTermination+0x58>)
 8005710:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005712:	f000 fe0b 	bl	800632c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f810 	bl	800573c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800571c:	4b06      	ldr	r3, [pc, #24]	@ (8005738 <prvCheckTasksWaitingTermination+0x58>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e1      	bne.n	80056e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20000f4c 	.word	0x20000f4c
 8005734:	20000f78 	.word	0x20000f78
 8005738:	20000f60 	.word	0x20000f60

0800573c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3354      	adds	r3, #84	@ 0x54
 8005748:	4618      	mov	r0, r3
 800574a:	f001 f8d5 	bl	80068f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005754:	2b00      	cmp	r3, #0
 8005756:	d108      	bne.n	800576a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575c:	4618      	mov	r0, r3
 800575e:	f000 ffa3 	bl	80066a8 <vPortFree>
				vPortFree( pxTCB );
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 ffa0 	bl	80066a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005768:	e019      	b.n	800579e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005770:	2b01      	cmp	r3, #1
 8005772:	d103      	bne.n	800577c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 ff97 	bl	80066a8 <vPortFree>
	}
 800577a:	e010      	b.n	800579e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005782:	2b02      	cmp	r3, #2
 8005784:	d00b      	beq.n	800579e <prvDeleteTCB+0x62>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	60fb      	str	r3, [r7, #12]
}
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	e7fd      	b.n	800579a <prvDeleteTCB+0x5e>
	}
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ae:	4b0c      	ldr	r3, [pc, #48]	@ (80057e0 <prvResetNextTaskUnblockTime+0x38>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d104      	bne.n	80057c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057b8:	4b0a      	ldr	r3, [pc, #40]	@ (80057e4 <prvResetNextTaskUnblockTime+0x3c>)
 80057ba:	f04f 32ff 	mov.w	r2, #4294967295
 80057be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057c0:	e008      	b.n	80057d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c2:	4b07      	ldr	r3, [pc, #28]	@ (80057e0 <prvResetNextTaskUnblockTime+0x38>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	4a04      	ldr	r2, [pc, #16]	@ (80057e4 <prvResetNextTaskUnblockTime+0x3c>)
 80057d2:	6013      	str	r3, [r2, #0]
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	20000f30 	.word	0x20000f30
 80057e4:	20000f98 	.word	0x20000f98

080057e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057ee:	4b0b      	ldr	r3, [pc, #44]	@ (800581c <xTaskGetSchedulerState+0x34>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057f6:	2301      	movs	r3, #1
 80057f8:	607b      	str	r3, [r7, #4]
 80057fa:	e008      	b.n	800580e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057fc:	4b08      	ldr	r3, [pc, #32]	@ (8005820 <xTaskGetSchedulerState+0x38>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005804:	2302      	movs	r3, #2
 8005806:	607b      	str	r3, [r7, #4]
 8005808:	e001      	b.n	800580e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800580a:	2300      	movs	r3, #0
 800580c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800580e:	687b      	ldr	r3, [r7, #4]
	}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	20000f84 	.word	0x20000f84
 8005820:	20000fa0 	.word	0x20000fa0

08005824 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d058      	beq.n	80058ec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800583a:	4b2f      	ldr	r3, [pc, #188]	@ (80058f8 <xTaskPriorityDisinherit+0xd4>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	429a      	cmp	r2, r3
 8005842:	d00b      	beq.n	800585c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	60fb      	str	r3, [r7, #12]
}
 8005856:	bf00      	nop
 8005858:	bf00      	nop
 800585a:	e7fd      	b.n	8005858 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	60bb      	str	r3, [r7, #8]
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005880:	1e5a      	subs	r2, r3, #1
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588e:	429a      	cmp	r2, r3
 8005890:	d02c      	beq.n	80058ec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005896:	2b00      	cmp	r3, #0
 8005898:	d128      	bne.n	80058ec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	3304      	adds	r3, #4
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe fc26 	bl	80040f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058bc:	4b0f      	ldr	r3, [pc, #60]	@ (80058fc <xTaskPriorityDisinherit+0xd8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d903      	bls.n	80058cc <xTaskPriorityDisinherit+0xa8>
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c8:	4a0c      	ldr	r2, [pc, #48]	@ (80058fc <xTaskPriorityDisinherit+0xd8>)
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d0:	4613      	mov	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4a09      	ldr	r2, [pc, #36]	@ (8005900 <xTaskPriorityDisinherit+0xdc>)
 80058da:	441a      	add	r2, r3
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	3304      	adds	r3, #4
 80058e0:	4619      	mov	r1, r3
 80058e2:	4610      	mov	r0, r2
 80058e4:	f7fe fba7 	bl	8004036 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058e8:	2301      	movs	r3, #1
 80058ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058ec:	697b      	ldr	r3, [r7, #20]
	}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000aa4 	.word	0x20000aa4
 80058fc:	20000f80 	.word	0x20000f80
 8005900:	20000aa8 	.word	0x20000aa8

08005904 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800590e:	4b21      	ldr	r3, [pc, #132]	@ (8005994 <prvAddCurrentTaskToDelayedList+0x90>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005914:	4b20      	ldr	r3, [pc, #128]	@ (8005998 <prvAddCurrentTaskToDelayedList+0x94>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3304      	adds	r3, #4
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe fbe8 	bl	80040f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005926:	d10a      	bne.n	800593e <prvAddCurrentTaskToDelayedList+0x3a>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d007      	beq.n	800593e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800592e:	4b1a      	ldr	r3, [pc, #104]	@ (8005998 <prvAddCurrentTaskToDelayedList+0x94>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3304      	adds	r3, #4
 8005934:	4619      	mov	r1, r3
 8005936:	4819      	ldr	r0, [pc, #100]	@ (800599c <prvAddCurrentTaskToDelayedList+0x98>)
 8005938:	f7fe fb7d 	bl	8004036 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800593c:	e026      	b.n	800598c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4413      	add	r3, r2
 8005944:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005946:	4b14      	ldr	r3, [pc, #80]	@ (8005998 <prvAddCurrentTaskToDelayedList+0x94>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	429a      	cmp	r2, r3
 8005954:	d209      	bcs.n	800596a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005956:	4b12      	ldr	r3, [pc, #72]	@ (80059a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b0f      	ldr	r3, [pc, #60]	@ (8005998 <prvAddCurrentTaskToDelayedList+0x94>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3304      	adds	r3, #4
 8005960:	4619      	mov	r1, r3
 8005962:	4610      	mov	r0, r2
 8005964:	f7fe fb8b 	bl	800407e <vListInsert>
}
 8005968:	e010      	b.n	800598c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800596a:	4b0e      	ldr	r3, [pc, #56]	@ (80059a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4b0a      	ldr	r3, [pc, #40]	@ (8005998 <prvAddCurrentTaskToDelayedList+0x94>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3304      	adds	r3, #4
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f7fe fb81 	bl	800407e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800597c:	4b0a      	ldr	r3, [pc, #40]	@ (80059a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	429a      	cmp	r2, r3
 8005984:	d202      	bcs.n	800598c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005986:	4a08      	ldr	r2, [pc, #32]	@ (80059a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	6013      	str	r3, [r2, #0]
}
 800598c:	bf00      	nop
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000f7c 	.word	0x20000f7c
 8005998:	20000aa4 	.word	0x20000aa4
 800599c:	20000f64 	.word	0x20000f64
 80059a0:	20000f34 	.word	0x20000f34
 80059a4:	20000f30 	.word	0x20000f30
 80059a8:	20000f98 	.word	0x20000f98

080059ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08a      	sub	sp, #40	@ 0x28
 80059b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80059b6:	f000 fb13 	bl	8005fe0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80059ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005a30 <xTimerCreateTimerTask+0x84>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d021      	beq.n	8005a06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80059c6:	2300      	movs	r3, #0
 80059c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80059ca:	1d3a      	adds	r2, r7, #4
 80059cc:	f107 0108 	add.w	r1, r7, #8
 80059d0:	f107 030c 	add.w	r3, r7, #12
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fe fae7 	bl	8003fa8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	9202      	str	r2, [sp, #8]
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	2302      	movs	r3, #2
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	2300      	movs	r3, #0
 80059ea:	460a      	mov	r2, r1
 80059ec:	4911      	ldr	r1, [pc, #68]	@ (8005a34 <xTimerCreateTimerTask+0x88>)
 80059ee:	4812      	ldr	r0, [pc, #72]	@ (8005a38 <xTimerCreateTimerTask+0x8c>)
 80059f0:	f7ff f8a2 	bl	8004b38 <xTaskCreateStatic>
 80059f4:	4603      	mov	r3, r0
 80059f6:	4a11      	ldr	r2, [pc, #68]	@ (8005a3c <xTimerCreateTimerTask+0x90>)
 80059f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80059fa:	4b10      	ldr	r3, [pc, #64]	@ (8005a3c <xTimerCreateTimerTask+0x90>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a02:	2301      	movs	r3, #1
 8005a04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10b      	bne.n	8005a24 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	613b      	str	r3, [r7, #16]
}
 8005a1e:	bf00      	nop
 8005a20:	bf00      	nop
 8005a22:	e7fd      	b.n	8005a20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a24:	697b      	ldr	r3, [r7, #20]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000fd4 	.word	0x20000fd4
 8005a34:	08006b04 	.word	0x08006b04
 8005a38:	08005b79 	.word	0x08005b79
 8005a3c:	20000fd8 	.word	0x20000fd8

08005a40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08a      	sub	sp, #40	@ 0x28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10b      	bne.n	8005a70 <xTimerGenericCommand+0x30>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	623b      	str	r3, [r7, #32]
}
 8005a6a:	bf00      	nop
 8005a6c:	bf00      	nop
 8005a6e:	e7fd      	b.n	8005a6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a70:	4b19      	ldr	r3, [pc, #100]	@ (8005ad8 <xTimerGenericCommand+0x98>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d02a      	beq.n	8005ace <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b05      	cmp	r3, #5
 8005a88:	dc18      	bgt.n	8005abc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a8a:	f7ff fead 	bl	80057e8 <xTaskGetSchedulerState>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d109      	bne.n	8005aa8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a94:	4b10      	ldr	r3, [pc, #64]	@ (8005ad8 <xTimerGenericCommand+0x98>)
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	f107 0110 	add.w	r1, r7, #16
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aa0:	f7fe fc5a 	bl	8004358 <xQueueGenericSend>
 8005aa4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005aa6:	e012      	b.n	8005ace <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad8 <xTimerGenericCommand+0x98>)
 8005aaa:	6818      	ldr	r0, [r3, #0]
 8005aac:	f107 0110 	add.w	r1, r7, #16
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f7fe fc50 	bl	8004358 <xQueueGenericSend>
 8005ab8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005aba:	e008      	b.n	8005ace <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005abc:	4b06      	ldr	r3, [pc, #24]	@ (8005ad8 <xTimerGenericCommand+0x98>)
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	f107 0110 	add.w	r1, r7, #16
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	f7fe fd48 	bl	800455c <xQueueGenericSendFromISR>
 8005acc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3728      	adds	r7, #40	@ 0x28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	20000fd4 	.word	0x20000fd4

08005adc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae6:	4b23      	ldr	r3, [pc, #140]	@ (8005b74 <prvProcessExpiredTimer+0x98>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fe fafb 	bl	80040f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d023      	beq.n	8005b50 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	699a      	ldr	r2, [r3, #24]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	18d1      	adds	r1, r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	6978      	ldr	r0, [r7, #20]
 8005b16:	f000 f8d5 	bl	8005cc4 <prvInsertTimerInActiveList>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d020      	beq.n	8005b62 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b20:	2300      	movs	r3, #0
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	2300      	movs	r3, #0
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	2100      	movs	r1, #0
 8005b2a:	6978      	ldr	r0, [r7, #20]
 8005b2c:	f7ff ff88 	bl	8005a40 <xTimerGenericCommand>
 8005b30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d114      	bne.n	8005b62 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	60fb      	str	r3, [r7, #12]
}
 8005b4a:	bf00      	nop
 8005b4c:	bf00      	nop
 8005b4e:	e7fd      	b.n	8005b4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b56:	f023 0301 	bic.w	r3, r3, #1
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	6978      	ldr	r0, [r7, #20]
 8005b68:	4798      	blx	r3
}
 8005b6a:	bf00      	nop
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000fcc 	.word	0x20000fcc

08005b78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b80:	f107 0308 	add.w	r3, r7, #8
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 f859 	bl	8005c3c <prvGetNextExpireTime>
 8005b8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f805 	bl	8005ba0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b96:	f000 f8d7 	bl	8005d48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b9a:	bf00      	nop
 8005b9c:	e7f0      	b.n	8005b80 <prvTimerTask+0x8>
	...

08005ba0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005baa:	f7ff fa29 	bl	8005000 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bae:	f107 0308 	add.w	r3, r7, #8
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f866 	bl	8005c84 <prvSampleTimeNow>
 8005bb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d130      	bne.n	8005c22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10a      	bne.n	8005bdc <prvProcessTimerOrBlockTask+0x3c>
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d806      	bhi.n	8005bdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005bce:	f7ff fa25 	bl	800501c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff ff81 	bl	8005adc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005bda:	e024      	b.n	8005c26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005be2:	4b13      	ldr	r3, [pc, #76]	@ (8005c30 <prvProcessTimerOrBlockTask+0x90>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <prvProcessTimerOrBlockTask+0x50>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <prvProcessTimerOrBlockTask+0x52>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8005c34 <prvProcessTimerOrBlockTask+0x94>)
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	4619      	mov	r1, r3
 8005c02:	f7fe ff65 	bl	8004ad0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c06:	f7ff fa09 	bl	800501c <xTaskResumeAll>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c10:	4b09      	ldr	r3, [pc, #36]	@ (8005c38 <prvProcessTimerOrBlockTask+0x98>)
 8005c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	f3bf 8f6f 	isb	sy
}
 8005c20:	e001      	b.n	8005c26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c22:	f7ff f9fb 	bl	800501c <xTaskResumeAll>
}
 8005c26:	bf00      	nop
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000fd0 	.word	0x20000fd0
 8005c34:	20000fd4 	.word	0x20000fd4
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c44:	4b0e      	ldr	r3, [pc, #56]	@ (8005c80 <prvGetNextExpireTime+0x44>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <prvGetNextExpireTime+0x16>
 8005c4e:	2201      	movs	r2, #1
 8005c50:	e000      	b.n	8005c54 <prvGetNextExpireTime+0x18>
 8005c52:	2200      	movs	r2, #0
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d105      	bne.n	8005c6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c60:	4b07      	ldr	r3, [pc, #28]	@ (8005c80 <prvGetNextExpireTime+0x44>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	e001      	b.n	8005c70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c70:	68fb      	ldr	r3, [r7, #12]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20000fcc 	.word	0x20000fcc

08005c84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c8c:	f7ff fa64 	bl	8005158 <xTaskGetTickCount>
 8005c90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c92:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc0 <prvSampleTimeNow+0x3c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d205      	bcs.n	8005ca8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c9c:	f000 f93a 	bl	8005f14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	e002      	b.n	8005cae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005cae:	4a04      	ldr	r2, [pc, #16]	@ (8005cc0 <prvSampleTimeNow+0x3c>)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000fdc 	.word	0x20000fdc

08005cc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d812      	bhi.n	8005d10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d302      	bcc.n	8005cfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e01b      	b.n	8005d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cfe:	4b10      	ldr	r3, [pc, #64]	@ (8005d40 <prvInsertTimerInActiveList+0x7c>)
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f7fe f9b8 	bl	800407e <vListInsert>
 8005d0e:	e012      	b.n	8005d36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d206      	bcs.n	8005d26 <prvInsertTimerInActiveList+0x62>
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d302      	bcc.n	8005d26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d20:	2301      	movs	r3, #1
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	e007      	b.n	8005d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d26:	4b07      	ldr	r3, [pc, #28]	@ (8005d44 <prvInsertTimerInActiveList+0x80>)
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4610      	mov	r0, r2
 8005d32:	f7fe f9a4 	bl	800407e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d36:	697b      	ldr	r3, [r7, #20]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20000fd0 	.word	0x20000fd0
 8005d44:	20000fcc 	.word	0x20000fcc

08005d48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08e      	sub	sp, #56	@ 0x38
 8005d4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d4e:	e0ce      	b.n	8005eee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	da19      	bge.n	8005d8a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d56:	1d3b      	adds	r3, r7, #4
 8005d58:	3304      	adds	r3, #4
 8005d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10b      	bne.n	8005d7a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	61fb      	str	r3, [r7, #28]
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	e7fd      	b.n	8005d76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d80:	6850      	ldr	r0, [r2, #4]
 8005d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d84:	6892      	ldr	r2, [r2, #8]
 8005d86:	4611      	mov	r1, r2
 8005d88:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f2c0 80ae 	blt.w	8005eee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d004      	beq.n	8005da8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da0:	3304      	adds	r3, #4
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fe f9a4 	bl	80040f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005da8:	463b      	mov	r3, r7
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff ff6a 	bl	8005c84 <prvSampleTimeNow>
 8005db0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b09      	cmp	r3, #9
 8005db6:	f200 8097 	bhi.w	8005ee8 <prvProcessReceivedCommands+0x1a0>
 8005dba:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc0 <prvProcessReceivedCommands+0x78>)
 8005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc0:	08005de9 	.word	0x08005de9
 8005dc4:	08005de9 	.word	0x08005de9
 8005dc8:	08005de9 	.word	0x08005de9
 8005dcc:	08005e5f 	.word	0x08005e5f
 8005dd0:	08005e73 	.word	0x08005e73
 8005dd4:	08005ebf 	.word	0x08005ebf
 8005dd8:	08005de9 	.word	0x08005de9
 8005ddc:	08005de9 	.word	0x08005de9
 8005de0:	08005e5f 	.word	0x08005e5f
 8005de4:	08005e73 	.word	0x08005e73
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	18d1      	adds	r1, r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e08:	f7ff ff5c 	bl	8005cc4 <prvInsertTimerInActiveList>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d06c      	beq.n	8005eec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d061      	beq.n	8005eec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	441a      	add	r2, r3
 8005e30:	2300      	movs	r3, #0
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	2300      	movs	r3, #0
 8005e36:	2100      	movs	r1, #0
 8005e38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e3a:	f7ff fe01 	bl	8005a40 <xTimerGenericCommand>
 8005e3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d152      	bne.n	8005eec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	61bb      	str	r3, [r7, #24]
}
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	e7fd      	b.n	8005e5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005e70:	e03d      	b.n	8005eee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	617b      	str	r3, [r7, #20]
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	e7fd      	b.n	8005ea6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	18d1      	adds	r1, r2, r3
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eb8:	f7ff ff04 	bl	8005cc4 <prvInsertTimerInActiveList>
					break;
 8005ebc:	e017      	b.n	8005eee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d103      	bne.n	8005ed4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005ecc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ece:	f000 fbeb 	bl	80066a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005ed2:	e00c      	b.n	8005eee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005eda:	f023 0301 	bic.w	r3, r3, #1
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005ee6:	e002      	b.n	8005eee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005ee8:	bf00      	nop
 8005eea:	e000      	b.n	8005eee <prvProcessReceivedCommands+0x1a6>
					break;
 8005eec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005eee:	4b08      	ldr	r3, [pc, #32]	@ (8005f10 <prvProcessReceivedCommands+0x1c8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	1d39      	adds	r1, r7, #4
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe fbce 	bl	8004698 <xQueueReceive>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f47f af26 	bne.w	8005d50 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop
 8005f08:	3730      	adds	r7, #48	@ 0x30
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000fd4 	.word	0x20000fd4

08005f14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f1a:	e049      	b.n	8005fb0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8005fd8 <prvSwitchTimerLists+0xc4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f26:	4b2c      	ldr	r3, [pc, #176]	@ (8005fd8 <prvSwitchTimerLists+0xc4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3304      	adds	r3, #4
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fe f8db 	bl	80040f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d02f      	beq.n	8005fb0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4413      	add	r3, r2
 8005f58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d90e      	bls.n	8005f80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005fd8 <prvSwitchTimerLists+0xc4>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3304      	adds	r3, #4
 8005f76:	4619      	mov	r1, r3
 8005f78:	4610      	mov	r0, r2
 8005f7a:	f7fe f880 	bl	800407e <vListInsert>
 8005f7e:	e017      	b.n	8005fb0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f80:	2300      	movs	r3, #0
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	2300      	movs	r3, #0
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	2100      	movs	r1, #0
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f7ff fd58 	bl	8005a40 <xTimerGenericCommand>
 8005f90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10b      	bne.n	8005fb0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	603b      	str	r3, [r7, #0]
}
 8005faa:	bf00      	nop
 8005fac:	bf00      	nop
 8005fae:	e7fd      	b.n	8005fac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fb0:	4b09      	ldr	r3, [pc, #36]	@ (8005fd8 <prvSwitchTimerLists+0xc4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1b0      	bne.n	8005f1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005fba:	4b07      	ldr	r3, [pc, #28]	@ (8005fd8 <prvSwitchTimerLists+0xc4>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005fc0:	4b06      	ldr	r3, [pc, #24]	@ (8005fdc <prvSwitchTimerLists+0xc8>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a04      	ldr	r2, [pc, #16]	@ (8005fd8 <prvSwitchTimerLists+0xc4>)
 8005fc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005fc8:	4a04      	ldr	r2, [pc, #16]	@ (8005fdc <prvSwitchTimerLists+0xc8>)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	6013      	str	r3, [r2, #0]
}
 8005fce:	bf00      	nop
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000fcc 	.word	0x20000fcc
 8005fdc:	20000fd0 	.word	0x20000fd0

08005fe0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005fe6:	f000 f96f 	bl	80062c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005fea:	4b15      	ldr	r3, [pc, #84]	@ (8006040 <prvCheckForValidListAndQueue+0x60>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d120      	bne.n	8006034 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ff2:	4814      	ldr	r0, [pc, #80]	@ (8006044 <prvCheckForValidListAndQueue+0x64>)
 8005ff4:	f7fd fff2 	bl	8003fdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ff8:	4813      	ldr	r0, [pc, #76]	@ (8006048 <prvCheckForValidListAndQueue+0x68>)
 8005ffa:	f7fd ffef 	bl	8003fdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ffe:	4b13      	ldr	r3, [pc, #76]	@ (800604c <prvCheckForValidListAndQueue+0x6c>)
 8006000:	4a10      	ldr	r2, [pc, #64]	@ (8006044 <prvCheckForValidListAndQueue+0x64>)
 8006002:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006004:	4b12      	ldr	r3, [pc, #72]	@ (8006050 <prvCheckForValidListAndQueue+0x70>)
 8006006:	4a10      	ldr	r2, [pc, #64]	@ (8006048 <prvCheckForValidListAndQueue+0x68>)
 8006008:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800600a:	2300      	movs	r3, #0
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	4b11      	ldr	r3, [pc, #68]	@ (8006054 <prvCheckForValidListAndQueue+0x74>)
 8006010:	4a11      	ldr	r2, [pc, #68]	@ (8006058 <prvCheckForValidListAndQueue+0x78>)
 8006012:	2110      	movs	r1, #16
 8006014:	200a      	movs	r0, #10
 8006016:	f7fe f8ff 	bl	8004218 <xQueueGenericCreateStatic>
 800601a:	4603      	mov	r3, r0
 800601c:	4a08      	ldr	r2, [pc, #32]	@ (8006040 <prvCheckForValidListAndQueue+0x60>)
 800601e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006020:	4b07      	ldr	r3, [pc, #28]	@ (8006040 <prvCheckForValidListAndQueue+0x60>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006028:	4b05      	ldr	r3, [pc, #20]	@ (8006040 <prvCheckForValidListAndQueue+0x60>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	490b      	ldr	r1, [pc, #44]	@ (800605c <prvCheckForValidListAndQueue+0x7c>)
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe fd24 	bl	8004a7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006034:	f000 f97a 	bl	800632c <vPortExitCritical>
}
 8006038:	bf00      	nop
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20000fd4 	.word	0x20000fd4
 8006044:	20000fa4 	.word	0x20000fa4
 8006048:	20000fb8 	.word	0x20000fb8
 800604c:	20000fcc 	.word	0x20000fcc
 8006050:	20000fd0 	.word	0x20000fd0
 8006054:	20001080 	.word	0x20001080
 8006058:	20000fe0 	.word	0x20000fe0
 800605c:	08006b0c 	.word	0x08006b0c

08006060 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3b04      	subs	r3, #4
 8006070:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3b04      	subs	r3, #4
 800607e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f023 0201 	bic.w	r2, r3, #1
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3b04      	subs	r3, #4
 800608e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006090:	4a0c      	ldr	r2, [pc, #48]	@ (80060c4 <pxPortInitialiseStack+0x64>)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	3b14      	subs	r3, #20
 800609a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3b04      	subs	r3, #4
 80060a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f06f 0202 	mvn.w	r2, #2
 80060ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3b20      	subs	r3, #32
 80060b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060b6:	68fb      	ldr	r3, [r7, #12]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	080060c9 	.word	0x080060c9

080060c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060d2:	4b13      	ldr	r3, [pc, #76]	@ (8006120 <prvTaskExitError+0x58>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060da:	d00b      	beq.n	80060f4 <prvTaskExitError+0x2c>
	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	60fb      	str	r3, [r7, #12]
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	e7fd      	b.n	80060f0 <prvTaskExitError+0x28>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	60bb      	str	r3, [r7, #8]
}
 8006106:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006108:	bf00      	nop
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0fc      	beq.n	800610a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	2000000c 	.word	0x2000000c
	...

08006130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006130:	4b07      	ldr	r3, [pc, #28]	@ (8006150 <pxCurrentTCBConst2>)
 8006132:	6819      	ldr	r1, [r3, #0]
 8006134:	6808      	ldr	r0, [r1, #0]
 8006136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613a:	f380 8809 	msr	PSP, r0
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f04f 0000 	mov.w	r0, #0
 8006146:	f380 8811 	msr	BASEPRI, r0
 800614a:	4770      	bx	lr
 800614c:	f3af 8000 	nop.w

08006150 <pxCurrentTCBConst2>:
 8006150:	20000aa4 	.word	0x20000aa4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006154:	bf00      	nop
 8006156:	bf00      	nop

08006158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006158:	4808      	ldr	r0, [pc, #32]	@ (800617c <prvPortStartFirstTask+0x24>)
 800615a:	6800      	ldr	r0, [r0, #0]
 800615c:	6800      	ldr	r0, [r0, #0]
 800615e:	f380 8808 	msr	MSP, r0
 8006162:	f04f 0000 	mov.w	r0, #0
 8006166:	f380 8814 	msr	CONTROL, r0
 800616a:	b662      	cpsie	i
 800616c:	b661      	cpsie	f
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	df00      	svc	0
 8006178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800617a:	bf00      	nop
 800617c:	e000ed08 	.word	0xe000ed08

08006180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006186:	4b47      	ldr	r3, [pc, #284]	@ (80062a4 <xPortStartScheduler+0x124>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a47      	ldr	r2, [pc, #284]	@ (80062a8 <xPortStartScheduler+0x128>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d10b      	bne.n	80061a8 <xPortStartScheduler+0x28>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	613b      	str	r3, [r7, #16]
}
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	e7fd      	b.n	80061a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061a8:	4b3e      	ldr	r3, [pc, #248]	@ (80062a4 <xPortStartScheduler+0x124>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a3f      	ldr	r2, [pc, #252]	@ (80062ac <xPortStartScheduler+0x12c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d10b      	bne.n	80061ca <xPortStartScheduler+0x4a>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	60fb      	str	r3, [r7, #12]
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
 80061c8:	e7fd      	b.n	80061c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061ca:	4b39      	ldr	r3, [pc, #228]	@ (80062b0 <xPortStartScheduler+0x130>)
 80061cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	22ff      	movs	r2, #255	@ 0xff
 80061da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	4b31      	ldr	r3, [pc, #196]	@ (80062b4 <xPortStartScheduler+0x134>)
 80061f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061f2:	4b31      	ldr	r3, [pc, #196]	@ (80062b8 <xPortStartScheduler+0x138>)
 80061f4:	2207      	movs	r2, #7
 80061f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061f8:	e009      	b.n	800620e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80061fa:	4b2f      	ldr	r3, [pc, #188]	@ (80062b8 <xPortStartScheduler+0x138>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3b01      	subs	r3, #1
 8006200:	4a2d      	ldr	r2, [pc, #180]	@ (80062b8 <xPortStartScheduler+0x138>)
 8006202:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006204:	78fb      	ldrb	r3, [r7, #3]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	b2db      	uxtb	r3, r3
 800620c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800620e:	78fb      	ldrb	r3, [r7, #3]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006216:	2b80      	cmp	r3, #128	@ 0x80
 8006218:	d0ef      	beq.n	80061fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800621a:	4b27      	ldr	r3, [pc, #156]	@ (80062b8 <xPortStartScheduler+0x138>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f1c3 0307 	rsb	r3, r3, #7
 8006222:	2b04      	cmp	r3, #4
 8006224:	d00b      	beq.n	800623e <xPortStartScheduler+0xbe>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	60bb      	str	r3, [r7, #8]
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800623e:	4b1e      	ldr	r3, [pc, #120]	@ (80062b8 <xPortStartScheduler+0x138>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	4a1c      	ldr	r2, [pc, #112]	@ (80062b8 <xPortStartScheduler+0x138>)
 8006246:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006248:	4b1b      	ldr	r3, [pc, #108]	@ (80062b8 <xPortStartScheduler+0x138>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006250:	4a19      	ldr	r2, [pc, #100]	@ (80062b8 <xPortStartScheduler+0x138>)
 8006252:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	b2da      	uxtb	r2, r3
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800625c:	4b17      	ldr	r3, [pc, #92]	@ (80062bc <xPortStartScheduler+0x13c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a16      	ldr	r2, [pc, #88]	@ (80062bc <xPortStartScheduler+0x13c>)
 8006262:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006266:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006268:	4b14      	ldr	r3, [pc, #80]	@ (80062bc <xPortStartScheduler+0x13c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a13      	ldr	r2, [pc, #76]	@ (80062bc <xPortStartScheduler+0x13c>)
 800626e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006272:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006274:	f000 f8da 	bl	800642c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006278:	4b11      	ldr	r3, [pc, #68]	@ (80062c0 <xPortStartScheduler+0x140>)
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800627e:	f000 f8f9 	bl	8006474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006282:	4b10      	ldr	r3, [pc, #64]	@ (80062c4 <xPortStartScheduler+0x144>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a0f      	ldr	r2, [pc, #60]	@ (80062c4 <xPortStartScheduler+0x144>)
 8006288:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800628c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800628e:	f7ff ff63 	bl	8006158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006292:	f7ff f82b 	bl	80052ec <vTaskSwitchContext>
	prvTaskExitError();
 8006296:	f7ff ff17 	bl	80060c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	e000ed00 	.word	0xe000ed00
 80062a8:	410fc271 	.word	0x410fc271
 80062ac:	410fc270 	.word	0x410fc270
 80062b0:	e000e400 	.word	0xe000e400
 80062b4:	200010d0 	.word	0x200010d0
 80062b8:	200010d4 	.word	0x200010d4
 80062bc:	e000ed20 	.word	0xe000ed20
 80062c0:	2000000c 	.word	0x2000000c
 80062c4:	e000ef34 	.word	0xe000ef34

080062c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	607b      	str	r3, [r7, #4]
}
 80062e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062e2:	4b10      	ldr	r3, [pc, #64]	@ (8006324 <vPortEnterCritical+0x5c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3301      	adds	r3, #1
 80062e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006324 <vPortEnterCritical+0x5c>)
 80062ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006324 <vPortEnterCritical+0x5c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d110      	bne.n	8006316 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006328 <vPortEnterCritical+0x60>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <vPortEnterCritical+0x4e>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	603b      	str	r3, [r7, #0]
}
 8006310:	bf00      	nop
 8006312:	bf00      	nop
 8006314:	e7fd      	b.n	8006312 <vPortEnterCritical+0x4a>
	}
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	2000000c 	.word	0x2000000c
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006332:	4b12      	ldr	r3, [pc, #72]	@ (800637c <vPortExitCritical+0x50>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10b      	bne.n	8006352 <vPortExitCritical+0x26>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	607b      	str	r3, [r7, #4]
}
 800634c:	bf00      	nop
 800634e:	bf00      	nop
 8006350:	e7fd      	b.n	800634e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006352:	4b0a      	ldr	r3, [pc, #40]	@ (800637c <vPortExitCritical+0x50>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3b01      	subs	r3, #1
 8006358:	4a08      	ldr	r2, [pc, #32]	@ (800637c <vPortExitCritical+0x50>)
 800635a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800635c:	4b07      	ldr	r3, [pc, #28]	@ (800637c <vPortExitCritical+0x50>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d105      	bne.n	8006370 <vPortExitCritical+0x44>
 8006364:	2300      	movs	r3, #0
 8006366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	f383 8811 	msr	BASEPRI, r3
}
 800636e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	2000000c 	.word	0x2000000c

08006380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006380:	f3ef 8009 	mrs	r0, PSP
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	4b15      	ldr	r3, [pc, #84]	@ (80063e0 <pxCurrentTCBConst>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	f01e 0f10 	tst.w	lr, #16
 8006390:	bf08      	it	eq
 8006392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639a:	6010      	str	r0, [r2, #0]
 800639c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80063a4:	f380 8811 	msr	BASEPRI, r0
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f7fe ff9c 	bl	80052ec <vTaskSwitchContext>
 80063b4:	f04f 0000 	mov.w	r0, #0
 80063b8:	f380 8811 	msr	BASEPRI, r0
 80063bc:	bc09      	pop	{r0, r3}
 80063be:	6819      	ldr	r1, [r3, #0]
 80063c0:	6808      	ldr	r0, [r1, #0]
 80063c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c6:	f01e 0f10 	tst.w	lr, #16
 80063ca:	bf08      	it	eq
 80063cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063d0:	f380 8809 	msr	PSP, r0
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	f3af 8000 	nop.w

080063e0 <pxCurrentTCBConst>:
 80063e0:	20000aa4 	.word	0x20000aa4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop

080063e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	607b      	str	r3, [r7, #4]
}
 8006400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006402:	f7fe feb9 	bl	8005178 <xTaskIncrementTick>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800640c:	4b06      	ldr	r3, [pc, #24]	@ (8006428 <xPortSysTickHandler+0x40>)
 800640e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	2300      	movs	r3, #0
 8006416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	f383 8811 	msr	BASEPRI, r3
}
 800641e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006430:	4b0b      	ldr	r3, [pc, #44]	@ (8006460 <vPortSetupTimerInterrupt+0x34>)
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006436:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <vPortSetupTimerInterrupt+0x38>)
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800643c:	4b0a      	ldr	r3, [pc, #40]	@ (8006468 <vPortSetupTimerInterrupt+0x3c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a0a      	ldr	r2, [pc, #40]	@ (800646c <vPortSetupTimerInterrupt+0x40>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	099b      	lsrs	r3, r3, #6
 8006448:	4a09      	ldr	r2, [pc, #36]	@ (8006470 <vPortSetupTimerInterrupt+0x44>)
 800644a:	3b01      	subs	r3, #1
 800644c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800644e:	4b04      	ldr	r3, [pc, #16]	@ (8006460 <vPortSetupTimerInterrupt+0x34>)
 8006450:	2207      	movs	r2, #7
 8006452:	601a      	str	r2, [r3, #0]
}
 8006454:	bf00      	nop
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	e000e010 	.word	0xe000e010
 8006464:	e000e018 	.word	0xe000e018
 8006468:	20000000 	.word	0x20000000
 800646c:	10624dd3 	.word	0x10624dd3
 8006470:	e000e014 	.word	0xe000e014

08006474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006474:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006484 <vPortEnableVFP+0x10>
 8006478:	6801      	ldr	r1, [r0, #0]
 800647a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800647e:	6001      	str	r1, [r0, #0]
 8006480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006482:	bf00      	nop
 8006484:	e000ed88 	.word	0xe000ed88

08006488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800648e:	f3ef 8305 	mrs	r3, IPSR
 8006492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2b0f      	cmp	r3, #15
 8006498:	d915      	bls.n	80064c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800649a:	4a18      	ldr	r2, [pc, #96]	@ (80064fc <vPortValidateInterruptPriority+0x74>)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064a4:	4b16      	ldr	r3, [pc, #88]	@ (8006500 <vPortValidateInterruptPriority+0x78>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	7afa      	ldrb	r2, [r7, #11]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d20b      	bcs.n	80064c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	607b      	str	r3, [r7, #4]
}
 80064c0:	bf00      	nop
 80064c2:	bf00      	nop
 80064c4:	e7fd      	b.n	80064c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006504 <vPortValidateInterruptPriority+0x7c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80064ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006508 <vPortValidateInterruptPriority+0x80>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d90b      	bls.n	80064ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	603b      	str	r3, [r7, #0]
}
 80064e8:	bf00      	nop
 80064ea:	bf00      	nop
 80064ec:	e7fd      	b.n	80064ea <vPortValidateInterruptPriority+0x62>
	}
 80064ee:	bf00      	nop
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	e000e3f0 	.word	0xe000e3f0
 8006500:	200010d0 	.word	0x200010d0
 8006504:	e000ed0c 	.word	0xe000ed0c
 8006508:	200010d4 	.word	0x200010d4

0800650c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08a      	sub	sp, #40	@ 0x28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006514:	2300      	movs	r3, #0
 8006516:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006518:	f7fe fd72 	bl	8005000 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800651c:	4b5c      	ldr	r3, [pc, #368]	@ (8006690 <pvPortMalloc+0x184>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006524:	f000 f924 	bl	8006770 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006528:	4b5a      	ldr	r3, [pc, #360]	@ (8006694 <pvPortMalloc+0x188>)
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4013      	ands	r3, r2
 8006530:	2b00      	cmp	r3, #0
 8006532:	f040 8095 	bne.w	8006660 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d01e      	beq.n	800657a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800653c:	2208      	movs	r2, #8
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4413      	add	r3, r2
 8006542:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	2b00      	cmp	r3, #0
 800654c:	d015      	beq.n	800657a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f023 0307 	bic.w	r3, r3, #7
 8006554:	3308      	adds	r3, #8
 8006556:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00b      	beq.n	800657a <pvPortMalloc+0x6e>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	617b      	str	r3, [r7, #20]
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop
 8006578:	e7fd      	b.n	8006576 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d06f      	beq.n	8006660 <pvPortMalloc+0x154>
 8006580:	4b45      	ldr	r3, [pc, #276]	@ (8006698 <pvPortMalloc+0x18c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	429a      	cmp	r2, r3
 8006588:	d86a      	bhi.n	8006660 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800658a:	4b44      	ldr	r3, [pc, #272]	@ (800669c <pvPortMalloc+0x190>)
 800658c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800658e:	4b43      	ldr	r3, [pc, #268]	@ (800669c <pvPortMalloc+0x190>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006594:	e004      	b.n	80065a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d903      	bls.n	80065b2 <pvPortMalloc+0xa6>
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f1      	bne.n	8006596 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065b2:	4b37      	ldr	r3, [pc, #220]	@ (8006690 <pvPortMalloc+0x184>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d051      	beq.n	8006660 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2208      	movs	r2, #8
 80065c2:	4413      	add	r3, r2
 80065c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	1ad2      	subs	r2, r2, r3
 80065d6:	2308      	movs	r3, #8
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	429a      	cmp	r2, r3
 80065dc:	d920      	bls.n	8006620 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4413      	add	r3, r2
 80065e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <pvPortMalloc+0xfc>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	613b      	str	r3, [r7, #16]
}
 8006602:	bf00      	nop
 8006604:	bf00      	nop
 8006606:	e7fd      	b.n	8006604 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	1ad2      	subs	r2, r2, r3
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800661a:	69b8      	ldr	r0, [r7, #24]
 800661c:	f000 f90a 	bl	8006834 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006620:	4b1d      	ldr	r3, [pc, #116]	@ (8006698 <pvPortMalloc+0x18c>)
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	4a1b      	ldr	r2, [pc, #108]	@ (8006698 <pvPortMalloc+0x18c>)
 800662c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800662e:	4b1a      	ldr	r3, [pc, #104]	@ (8006698 <pvPortMalloc+0x18c>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4b1b      	ldr	r3, [pc, #108]	@ (80066a0 <pvPortMalloc+0x194>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d203      	bcs.n	8006642 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800663a:	4b17      	ldr	r3, [pc, #92]	@ (8006698 <pvPortMalloc+0x18c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a18      	ldr	r2, [pc, #96]	@ (80066a0 <pvPortMalloc+0x194>)
 8006640:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	4b13      	ldr	r3, [pc, #76]	@ (8006694 <pvPortMalloc+0x188>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	431a      	orrs	r2, r3
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006656:	4b13      	ldr	r3, [pc, #76]	@ (80066a4 <pvPortMalloc+0x198>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3301      	adds	r3, #1
 800665c:	4a11      	ldr	r2, [pc, #68]	@ (80066a4 <pvPortMalloc+0x198>)
 800665e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006660:	f7fe fcdc 	bl	800501c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00b      	beq.n	8006686 <pvPortMalloc+0x17a>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	60fb      	str	r3, [r7, #12]
}
 8006680:	bf00      	nop
 8006682:	bf00      	nop
 8006684:	e7fd      	b.n	8006682 <pvPortMalloc+0x176>
	return pvReturn;
 8006686:	69fb      	ldr	r3, [r7, #28]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3728      	adds	r7, #40	@ 0x28
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	20004ce0 	.word	0x20004ce0
 8006694:	20004cf4 	.word	0x20004cf4
 8006698:	20004ce4 	.word	0x20004ce4
 800669c:	20004cd8 	.word	0x20004cd8
 80066a0:	20004ce8 	.word	0x20004ce8
 80066a4:	20004cec 	.word	0x20004cec

080066a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d04f      	beq.n	800675a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066ba:	2308      	movs	r3, #8
 80066bc:	425b      	negs	r3, r3
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	4413      	add	r3, r2
 80066c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	4b25      	ldr	r3, [pc, #148]	@ (8006764 <vPortFree+0xbc>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4013      	ands	r3, r2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10b      	bne.n	80066ee <vPortFree+0x46>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	60fb      	str	r3, [r7, #12]
}
 80066e8:	bf00      	nop
 80066ea:	bf00      	nop
 80066ec:	e7fd      	b.n	80066ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00b      	beq.n	800670e <vPortFree+0x66>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	60bb      	str	r3, [r7, #8]
}
 8006708:	bf00      	nop
 800670a:	bf00      	nop
 800670c:	e7fd      	b.n	800670a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	4b14      	ldr	r3, [pc, #80]	@ (8006764 <vPortFree+0xbc>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4013      	ands	r3, r2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d01e      	beq.n	800675a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d11a      	bne.n	800675a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	4b0e      	ldr	r3, [pc, #56]	@ (8006764 <vPortFree+0xbc>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	43db      	mvns	r3, r3
 800672e:	401a      	ands	r2, r3
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006734:	f7fe fc64 	bl	8005000 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	4b0a      	ldr	r3, [pc, #40]	@ (8006768 <vPortFree+0xc0>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4413      	add	r3, r2
 8006742:	4a09      	ldr	r2, [pc, #36]	@ (8006768 <vPortFree+0xc0>)
 8006744:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006746:	6938      	ldr	r0, [r7, #16]
 8006748:	f000 f874 	bl	8006834 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800674c:	4b07      	ldr	r3, [pc, #28]	@ (800676c <vPortFree+0xc4>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3301      	adds	r3, #1
 8006752:	4a06      	ldr	r2, [pc, #24]	@ (800676c <vPortFree+0xc4>)
 8006754:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006756:	f7fe fc61 	bl	800501c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800675a:	bf00      	nop
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20004cf4 	.word	0x20004cf4
 8006768:	20004ce4 	.word	0x20004ce4
 800676c:	20004cf0 	.word	0x20004cf0

08006770 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006776:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800677a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800677c:	4b27      	ldr	r3, [pc, #156]	@ (800681c <prvHeapInit+0xac>)
 800677e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00c      	beq.n	80067a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3307      	adds	r3, #7
 800678e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0307 	bic.w	r3, r3, #7
 8006796:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	4a1f      	ldr	r2, [pc, #124]	@ (800681c <prvHeapInit+0xac>)
 80067a0:	4413      	add	r3, r2
 80067a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006820 <prvHeapInit+0xb0>)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006820 <prvHeapInit+0xb0>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	4413      	add	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067bc:	2208      	movs	r2, #8
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1a9b      	subs	r3, r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0307 	bic.w	r3, r3, #7
 80067ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4a15      	ldr	r2, [pc, #84]	@ (8006824 <prvHeapInit+0xb4>)
 80067d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067d2:	4b14      	ldr	r3, [pc, #80]	@ (8006824 <prvHeapInit+0xb4>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2200      	movs	r2, #0
 80067d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067da:	4b12      	ldr	r3, [pc, #72]	@ (8006824 <prvHeapInit+0xb4>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2200      	movs	r2, #0
 80067e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	1ad2      	subs	r2, r2, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006824 <prvHeapInit+0xb4>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006828 <prvHeapInit+0xb8>)
 80067fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	4a09      	ldr	r2, [pc, #36]	@ (800682c <prvHeapInit+0xbc>)
 8006806:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006808:	4b09      	ldr	r3, [pc, #36]	@ (8006830 <prvHeapInit+0xc0>)
 800680a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800680e:	601a      	str	r2, [r3, #0]
}
 8006810:	bf00      	nop
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	200010d8 	.word	0x200010d8
 8006820:	20004cd8 	.word	0x20004cd8
 8006824:	20004ce0 	.word	0x20004ce0
 8006828:	20004ce8 	.word	0x20004ce8
 800682c:	20004ce4 	.word	0x20004ce4
 8006830:	20004cf4 	.word	0x20004cf4

08006834 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800683c:	4b28      	ldr	r3, [pc, #160]	@ (80068e0 <prvInsertBlockIntoFreeList+0xac>)
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e002      	b.n	8006848 <prvInsertBlockIntoFreeList+0x14>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	429a      	cmp	r2, r3
 8006850:	d8f7      	bhi.n	8006842 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	4413      	add	r3, r2
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	d108      	bne.n	8006876 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	441a      	add	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	441a      	add	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d118      	bne.n	80068bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	4b15      	ldr	r3, [pc, #84]	@ (80068e4 <prvInsertBlockIntoFreeList+0xb0>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	429a      	cmp	r2, r3
 8006894:	d00d      	beq.n	80068b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	441a      	add	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	e008      	b.n	80068c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068b2:	4b0c      	ldr	r3, [pc, #48]	@ (80068e4 <prvInsertBlockIntoFreeList+0xb0>)
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	e003      	b.n	80068c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d002      	beq.n	80068d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068d2:	bf00      	nop
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	20004cd8 	.word	0x20004cd8
 80068e4:	20004ce0 	.word	0x20004ce0

080068e8 <memset>:
 80068e8:	4402      	add	r2, r0
 80068ea:	4603      	mov	r3, r0
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d100      	bne.n	80068f2 <memset+0xa>
 80068f0:	4770      	bx	lr
 80068f2:	f803 1b01 	strb.w	r1, [r3], #1
 80068f6:	e7f9      	b.n	80068ec <memset+0x4>

080068f8 <_reclaim_reent>:
 80068f8:	4b29      	ldr	r3, [pc, #164]	@ (80069a0 <_reclaim_reent+0xa8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4283      	cmp	r3, r0
 80068fe:	b570      	push	{r4, r5, r6, lr}
 8006900:	4604      	mov	r4, r0
 8006902:	d04b      	beq.n	800699c <_reclaim_reent+0xa4>
 8006904:	69c3      	ldr	r3, [r0, #28]
 8006906:	b1ab      	cbz	r3, 8006934 <_reclaim_reent+0x3c>
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	b16b      	cbz	r3, 8006928 <_reclaim_reent+0x30>
 800690c:	2500      	movs	r5, #0
 800690e:	69e3      	ldr	r3, [r4, #28]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	5959      	ldr	r1, [r3, r5]
 8006914:	2900      	cmp	r1, #0
 8006916:	d13b      	bne.n	8006990 <_reclaim_reent+0x98>
 8006918:	3504      	adds	r5, #4
 800691a:	2d80      	cmp	r5, #128	@ 0x80
 800691c:	d1f7      	bne.n	800690e <_reclaim_reent+0x16>
 800691e:	69e3      	ldr	r3, [r4, #28]
 8006920:	4620      	mov	r0, r4
 8006922:	68d9      	ldr	r1, [r3, #12]
 8006924:	f000 f872 	bl	8006a0c <_free_r>
 8006928:	69e3      	ldr	r3, [r4, #28]
 800692a:	6819      	ldr	r1, [r3, #0]
 800692c:	b111      	cbz	r1, 8006934 <_reclaim_reent+0x3c>
 800692e:	4620      	mov	r0, r4
 8006930:	f000 f86c 	bl	8006a0c <_free_r>
 8006934:	6961      	ldr	r1, [r4, #20]
 8006936:	b111      	cbz	r1, 800693e <_reclaim_reent+0x46>
 8006938:	4620      	mov	r0, r4
 800693a:	f000 f867 	bl	8006a0c <_free_r>
 800693e:	69e1      	ldr	r1, [r4, #28]
 8006940:	b111      	cbz	r1, 8006948 <_reclaim_reent+0x50>
 8006942:	4620      	mov	r0, r4
 8006944:	f000 f862 	bl	8006a0c <_free_r>
 8006948:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800694a:	b111      	cbz	r1, 8006952 <_reclaim_reent+0x5a>
 800694c:	4620      	mov	r0, r4
 800694e:	f000 f85d 	bl	8006a0c <_free_r>
 8006952:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006954:	b111      	cbz	r1, 800695c <_reclaim_reent+0x64>
 8006956:	4620      	mov	r0, r4
 8006958:	f000 f858 	bl	8006a0c <_free_r>
 800695c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800695e:	b111      	cbz	r1, 8006966 <_reclaim_reent+0x6e>
 8006960:	4620      	mov	r0, r4
 8006962:	f000 f853 	bl	8006a0c <_free_r>
 8006966:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006968:	b111      	cbz	r1, 8006970 <_reclaim_reent+0x78>
 800696a:	4620      	mov	r0, r4
 800696c:	f000 f84e 	bl	8006a0c <_free_r>
 8006970:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006972:	b111      	cbz	r1, 800697a <_reclaim_reent+0x82>
 8006974:	4620      	mov	r0, r4
 8006976:	f000 f849 	bl	8006a0c <_free_r>
 800697a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800697c:	b111      	cbz	r1, 8006984 <_reclaim_reent+0x8c>
 800697e:	4620      	mov	r0, r4
 8006980:	f000 f844 	bl	8006a0c <_free_r>
 8006984:	6a23      	ldr	r3, [r4, #32]
 8006986:	b14b      	cbz	r3, 800699c <_reclaim_reent+0xa4>
 8006988:	4620      	mov	r0, r4
 800698a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800698e:	4718      	bx	r3
 8006990:	680e      	ldr	r6, [r1, #0]
 8006992:	4620      	mov	r0, r4
 8006994:	f000 f83a 	bl	8006a0c <_free_r>
 8006998:	4631      	mov	r1, r6
 800699a:	e7bb      	b.n	8006914 <_reclaim_reent+0x1c>
 800699c:	bd70      	pop	{r4, r5, r6, pc}
 800699e:	bf00      	nop
 80069a0:	20000010 	.word	0x20000010

080069a4 <__libc_init_array>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	4d0d      	ldr	r5, [pc, #52]	@ (80069dc <__libc_init_array+0x38>)
 80069a8:	4c0d      	ldr	r4, [pc, #52]	@ (80069e0 <__libc_init_array+0x3c>)
 80069aa:	1b64      	subs	r4, r4, r5
 80069ac:	10a4      	asrs	r4, r4, #2
 80069ae:	2600      	movs	r6, #0
 80069b0:	42a6      	cmp	r6, r4
 80069b2:	d109      	bne.n	80069c8 <__libc_init_array+0x24>
 80069b4:	4d0b      	ldr	r5, [pc, #44]	@ (80069e4 <__libc_init_array+0x40>)
 80069b6:	4c0c      	ldr	r4, [pc, #48]	@ (80069e8 <__libc_init_array+0x44>)
 80069b8:	f000 f87e 	bl	8006ab8 <_init>
 80069bc:	1b64      	subs	r4, r4, r5
 80069be:	10a4      	asrs	r4, r4, #2
 80069c0:	2600      	movs	r6, #0
 80069c2:	42a6      	cmp	r6, r4
 80069c4:	d105      	bne.n	80069d2 <__libc_init_array+0x2e>
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069cc:	4798      	blx	r3
 80069ce:	3601      	adds	r6, #1
 80069d0:	e7ee      	b.n	80069b0 <__libc_init_array+0xc>
 80069d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d6:	4798      	blx	r3
 80069d8:	3601      	adds	r6, #1
 80069da:	e7f2      	b.n	80069c2 <__libc_init_array+0x1e>
 80069dc:	08006bcc 	.word	0x08006bcc
 80069e0:	08006bcc 	.word	0x08006bcc
 80069e4:	08006bcc 	.word	0x08006bcc
 80069e8:	08006bd0 	.word	0x08006bd0

080069ec <__retarget_lock_acquire_recursive>:
 80069ec:	4770      	bx	lr

080069ee <__retarget_lock_release_recursive>:
 80069ee:	4770      	bx	lr

080069f0 <memcpy>:
 80069f0:	440a      	add	r2, r1
 80069f2:	4291      	cmp	r1, r2
 80069f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069f8:	d100      	bne.n	80069fc <memcpy+0xc>
 80069fa:	4770      	bx	lr
 80069fc:	b510      	push	{r4, lr}
 80069fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a06:	4291      	cmp	r1, r2
 8006a08:	d1f9      	bne.n	80069fe <memcpy+0xe>
 8006a0a:	bd10      	pop	{r4, pc}

08006a0c <_free_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4605      	mov	r5, r0
 8006a10:	2900      	cmp	r1, #0
 8006a12:	d041      	beq.n	8006a98 <_free_r+0x8c>
 8006a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a18:	1f0c      	subs	r4, r1, #4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bfb8      	it	lt
 8006a1e:	18e4      	addlt	r4, r4, r3
 8006a20:	f000 f83e 	bl	8006aa0 <__malloc_lock>
 8006a24:	4a1d      	ldr	r2, [pc, #116]	@ (8006a9c <_free_r+0x90>)
 8006a26:	6813      	ldr	r3, [r2, #0]
 8006a28:	b933      	cbnz	r3, 8006a38 <_free_r+0x2c>
 8006a2a:	6063      	str	r3, [r4, #4]
 8006a2c:	6014      	str	r4, [r2, #0]
 8006a2e:	4628      	mov	r0, r5
 8006a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a34:	f000 b83a 	b.w	8006aac <__malloc_unlock>
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	d908      	bls.n	8006a4e <_free_r+0x42>
 8006a3c:	6820      	ldr	r0, [r4, #0]
 8006a3e:	1821      	adds	r1, r4, r0
 8006a40:	428b      	cmp	r3, r1
 8006a42:	bf01      	itttt	eq
 8006a44:	6819      	ldreq	r1, [r3, #0]
 8006a46:	685b      	ldreq	r3, [r3, #4]
 8006a48:	1809      	addeq	r1, r1, r0
 8006a4a:	6021      	streq	r1, [r4, #0]
 8006a4c:	e7ed      	b.n	8006a2a <_free_r+0x1e>
 8006a4e:	461a      	mov	r2, r3
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	b10b      	cbz	r3, 8006a58 <_free_r+0x4c>
 8006a54:	42a3      	cmp	r3, r4
 8006a56:	d9fa      	bls.n	8006a4e <_free_r+0x42>
 8006a58:	6811      	ldr	r1, [r2, #0]
 8006a5a:	1850      	adds	r0, r2, r1
 8006a5c:	42a0      	cmp	r0, r4
 8006a5e:	d10b      	bne.n	8006a78 <_free_r+0x6c>
 8006a60:	6820      	ldr	r0, [r4, #0]
 8006a62:	4401      	add	r1, r0
 8006a64:	1850      	adds	r0, r2, r1
 8006a66:	4283      	cmp	r3, r0
 8006a68:	6011      	str	r1, [r2, #0]
 8006a6a:	d1e0      	bne.n	8006a2e <_free_r+0x22>
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	6053      	str	r3, [r2, #4]
 8006a72:	4408      	add	r0, r1
 8006a74:	6010      	str	r0, [r2, #0]
 8006a76:	e7da      	b.n	8006a2e <_free_r+0x22>
 8006a78:	d902      	bls.n	8006a80 <_free_r+0x74>
 8006a7a:	230c      	movs	r3, #12
 8006a7c:	602b      	str	r3, [r5, #0]
 8006a7e:	e7d6      	b.n	8006a2e <_free_r+0x22>
 8006a80:	6820      	ldr	r0, [r4, #0]
 8006a82:	1821      	adds	r1, r4, r0
 8006a84:	428b      	cmp	r3, r1
 8006a86:	bf04      	itt	eq
 8006a88:	6819      	ldreq	r1, [r3, #0]
 8006a8a:	685b      	ldreq	r3, [r3, #4]
 8006a8c:	6063      	str	r3, [r4, #4]
 8006a8e:	bf04      	itt	eq
 8006a90:	1809      	addeq	r1, r1, r0
 8006a92:	6021      	streq	r1, [r4, #0]
 8006a94:	6054      	str	r4, [r2, #4]
 8006a96:	e7ca      	b.n	8006a2e <_free_r+0x22>
 8006a98:	bd38      	pop	{r3, r4, r5, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20004e34 	.word	0x20004e34

08006aa0 <__malloc_lock>:
 8006aa0:	4801      	ldr	r0, [pc, #4]	@ (8006aa8 <__malloc_lock+0x8>)
 8006aa2:	f7ff bfa3 	b.w	80069ec <__retarget_lock_acquire_recursive>
 8006aa6:	bf00      	nop
 8006aa8:	20004e30 	.word	0x20004e30

08006aac <__malloc_unlock>:
 8006aac:	4801      	ldr	r0, [pc, #4]	@ (8006ab4 <__malloc_unlock+0x8>)
 8006aae:	f7ff bf9e 	b.w	80069ee <__retarget_lock_release_recursive>
 8006ab2:	bf00      	nop
 8006ab4:	20004e30 	.word	0x20004e30

08006ab8 <_init>:
 8006ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aba:	bf00      	nop
 8006abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006abe:	bc08      	pop	{r3}
 8006ac0:	469e      	mov	lr, r3
 8006ac2:	4770      	bx	lr

08006ac4 <_fini>:
 8006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac6:	bf00      	nop
 8006ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aca:	bc08      	pop	{r3}
 8006acc:	469e      	mov	lr, r3
 8006ace:	4770      	bx	lr
