
WeederMCU1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f90  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006124  08006124  00007124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006144  08006144  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006144  08006144  00007144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800614c  0800614c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800614c  0800614c  0000714c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006150  08006150  00007150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006154  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  20000010  08006160  00008010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  08006160  000086bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129c3  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002458  00000000  00000000  0001a9ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  0001ce58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4a  00000000  00000000  0001e050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fc7  00000000  00000000  0001ee9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001573b  00000000  00000000  00036e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d5ee  00000000  00000000  0004c59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9b8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f4c  00000000  00000000  000e9bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000eeb1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800610c 	.word	0x0800610c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	0800610c 	.word	0x0800610c

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	@ 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2f>:
 8000970:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000974:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000978:	bf24      	itt	cs
 800097a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000982:	d90d      	bls.n	80009a0 <__aeabi_d2f+0x30>
 8000984:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000988:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800098c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000990:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000994:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000998:	bf08      	it	eq
 800099a:	f020 0001 	biceq.w	r0, r0, #1
 800099e:	4770      	bx	lr
 80009a0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a4:	d121      	bne.n	80009ea <__aeabi_d2f+0x7a>
 80009a6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009aa:	bfbc      	itt	lt
 80009ac:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b0:	4770      	bxlt	lr
 80009b2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ba:	f1c2 0218 	rsb	r2, r2, #24
 80009be:	f1c2 0c20 	rsb	ip, r2, #32
 80009c2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c6:	fa20 f002 	lsr.w	r0, r0, r2
 80009ca:	bf18      	it	ne
 80009cc:	f040 0001 	orrne.w	r0, r0, #1
 80009d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009dc:	ea40 000c 	orr.w	r0, r0, ip
 80009e0:	fa23 f302 	lsr.w	r3, r3, r2
 80009e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e8:	e7cc      	b.n	8000984 <__aeabi_d2f+0x14>
 80009ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ee:	d107      	bne.n	8000a00 <__aeabi_d2f+0x90>
 80009f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f4:	bf1e      	ittt	ne
 80009f6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fe:	4770      	bxne	lr
 8000a00:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a04:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_uldivmod>:
 8000a10:	b953      	cbnz	r3, 8000a28 <__aeabi_uldivmod+0x18>
 8000a12:	b94a      	cbnz	r2, 8000a28 <__aeabi_uldivmod+0x18>
 8000a14:	2900      	cmp	r1, #0
 8000a16:	bf08      	it	eq
 8000a18:	2800      	cmpeq	r0, #0
 8000a1a:	bf1c      	itt	ne
 8000a1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a20:	f04f 30ff 	movne.w	r0, #4294967295
 8000a24:	f000 b96a 	b.w	8000cfc <__aeabi_idiv0>
 8000a28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a30:	f000 f806 	bl	8000a40 <__udivmoddi4>
 8000a34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a3c:	b004      	add	sp, #16
 8000a3e:	4770      	bx	lr

08000a40 <__udivmoddi4>:
 8000a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a44:	9d08      	ldr	r5, [sp, #32]
 8000a46:	460c      	mov	r4, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14e      	bne.n	8000aea <__udivmoddi4+0xaa>
 8000a4c:	4694      	mov	ip, r2
 8000a4e:	458c      	cmp	ip, r1
 8000a50:	4686      	mov	lr, r0
 8000a52:	fab2 f282 	clz	r2, r2
 8000a56:	d962      	bls.n	8000b1e <__udivmoddi4+0xde>
 8000a58:	b14a      	cbz	r2, 8000a6e <__udivmoddi4+0x2e>
 8000a5a:	f1c2 0320 	rsb	r3, r2, #32
 8000a5e:	4091      	lsls	r1, r2
 8000a60:	fa20 f303 	lsr.w	r3, r0, r3
 8000a64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a68:	4319      	orrs	r1, r3
 8000a6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a72:	fa1f f68c 	uxth.w	r6, ip
 8000a76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000a82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a86:	fb04 f106 	mul.w	r1, r4, r6
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	d90a      	bls.n	8000aa4 <__udivmoddi4+0x64>
 8000a8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a96:	f080 8112 	bcs.w	8000cbe <__udivmoddi4+0x27e>
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	f240 810f 	bls.w	8000cbe <__udivmoddi4+0x27e>
 8000aa0:	3c02      	subs	r4, #2
 8000aa2:	4463      	add	r3, ip
 8000aa4:	1a59      	subs	r1, r3, r1
 8000aa6:	fa1f f38e 	uxth.w	r3, lr
 8000aaa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aae:	fb07 1110 	mls	r1, r7, r0, r1
 8000ab2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab6:	fb00 f606 	mul.w	r6, r0, r6
 8000aba:	429e      	cmp	r6, r3
 8000abc:	d90a      	bls.n	8000ad4 <__udivmoddi4+0x94>
 8000abe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac6:	f080 80fc 	bcs.w	8000cc2 <__udivmoddi4+0x282>
 8000aca:	429e      	cmp	r6, r3
 8000acc:	f240 80f9 	bls.w	8000cc2 <__udivmoddi4+0x282>
 8000ad0:	4463      	add	r3, ip
 8000ad2:	3802      	subs	r0, #2
 8000ad4:	1b9b      	subs	r3, r3, r6
 8000ad6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ada:	2100      	movs	r1, #0
 8000adc:	b11d      	cbz	r5, 8000ae6 <__udivmoddi4+0xa6>
 8000ade:	40d3      	lsrs	r3, r2
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d905      	bls.n	8000afa <__udivmoddi4+0xba>
 8000aee:	b10d      	cbz	r5, 8000af4 <__udivmoddi4+0xb4>
 8000af0:	e9c5 0100 	strd	r0, r1, [r5]
 8000af4:	2100      	movs	r1, #0
 8000af6:	4608      	mov	r0, r1
 8000af8:	e7f5      	b.n	8000ae6 <__udivmoddi4+0xa6>
 8000afa:	fab3 f183 	clz	r1, r3
 8000afe:	2900      	cmp	r1, #0
 8000b00:	d146      	bne.n	8000b90 <__udivmoddi4+0x150>
 8000b02:	42a3      	cmp	r3, r4
 8000b04:	d302      	bcc.n	8000b0c <__udivmoddi4+0xcc>
 8000b06:	4290      	cmp	r0, r2
 8000b08:	f0c0 80f0 	bcc.w	8000cec <__udivmoddi4+0x2ac>
 8000b0c:	1a86      	subs	r6, r0, r2
 8000b0e:	eb64 0303 	sbc.w	r3, r4, r3
 8000b12:	2001      	movs	r0, #1
 8000b14:	2d00      	cmp	r5, #0
 8000b16:	d0e6      	beq.n	8000ae6 <__udivmoddi4+0xa6>
 8000b18:	e9c5 6300 	strd	r6, r3, [r5]
 8000b1c:	e7e3      	b.n	8000ae6 <__udivmoddi4+0xa6>
 8000b1e:	2a00      	cmp	r2, #0
 8000b20:	f040 8090 	bne.w	8000c44 <__udivmoddi4+0x204>
 8000b24:	eba1 040c 	sub.w	r4, r1, ip
 8000b28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b2c:	fa1f f78c 	uxth.w	r7, ip
 8000b30:	2101      	movs	r1, #1
 8000b32:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3a:	fb08 4416 	mls	r4, r8, r6, r4
 8000b3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b42:	fb07 f006 	mul.w	r0, r7, r6
 8000b46:	4298      	cmp	r0, r3
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x11c>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b52:	d202      	bcs.n	8000b5a <__udivmoddi4+0x11a>
 8000b54:	4298      	cmp	r0, r3
 8000b56:	f200 80cd 	bhi.w	8000cf4 <__udivmoddi4+0x2b4>
 8000b5a:	4626      	mov	r6, r4
 8000b5c:	1a1c      	subs	r4, r3, r0
 8000b5e:	fa1f f38e 	uxth.w	r3, lr
 8000b62:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b66:	fb08 4410 	mls	r4, r8, r0, r4
 8000b6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b6e:	fb00 f707 	mul.w	r7, r0, r7
 8000b72:	429f      	cmp	r7, r3
 8000b74:	d908      	bls.n	8000b88 <__udivmoddi4+0x148>
 8000b76:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x146>
 8000b80:	429f      	cmp	r7, r3
 8000b82:	f200 80b0 	bhi.w	8000ce6 <__udivmoddi4+0x2a6>
 8000b86:	4620      	mov	r0, r4
 8000b88:	1bdb      	subs	r3, r3, r7
 8000b8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8e:	e7a5      	b.n	8000adc <__udivmoddi4+0x9c>
 8000b90:	f1c1 0620 	rsb	r6, r1, #32
 8000b94:	408b      	lsls	r3, r1
 8000b96:	fa22 f706 	lsr.w	r7, r2, r6
 8000b9a:	431f      	orrs	r7, r3
 8000b9c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ba0:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba4:	ea43 030c 	orr.w	r3, r3, ip
 8000ba8:	40f4      	lsrs	r4, r6
 8000baa:	fa00 f801 	lsl.w	r8, r0, r1
 8000bae:	0c38      	lsrs	r0, r7, #16
 8000bb0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb4:	fbb4 fef0 	udiv	lr, r4, r0
 8000bb8:	fa1f fc87 	uxth.w	ip, r7
 8000bbc:	fb00 441e 	mls	r4, r0, lr, r4
 8000bc0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc4:	fb0e f90c 	mul.w	r9, lr, ip
 8000bc8:	45a1      	cmp	r9, r4
 8000bca:	fa02 f201 	lsl.w	r2, r2, r1
 8000bce:	d90a      	bls.n	8000be6 <__udivmoddi4+0x1a6>
 8000bd0:	193c      	adds	r4, r7, r4
 8000bd2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bd6:	f080 8084 	bcs.w	8000ce2 <__udivmoddi4+0x2a2>
 8000bda:	45a1      	cmp	r9, r4
 8000bdc:	f240 8081 	bls.w	8000ce2 <__udivmoddi4+0x2a2>
 8000be0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be4:	443c      	add	r4, r7
 8000be6:	eba4 0409 	sub.w	r4, r4, r9
 8000bea:	fa1f f983 	uxth.w	r9, r3
 8000bee:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bf2:	fb00 4413 	mls	r4, r0, r3, r4
 8000bf6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bfa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d907      	bls.n	8000c12 <__udivmoddi4+0x1d2>
 8000c02:	193c      	adds	r4, r7, r4
 8000c04:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c08:	d267      	bcs.n	8000cda <__udivmoddi4+0x29a>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0x29a>
 8000c0e:	3b02      	subs	r3, #2
 8000c10:	443c      	add	r4, r7
 8000c12:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c16:	fba0 9302 	umull	r9, r3, r0, r2
 8000c1a:	eba4 040c 	sub.w	r4, r4, ip
 8000c1e:	429c      	cmp	r4, r3
 8000c20:	46ce      	mov	lr, r9
 8000c22:	469c      	mov	ip, r3
 8000c24:	d351      	bcc.n	8000cca <__udivmoddi4+0x28a>
 8000c26:	d04e      	beq.n	8000cc6 <__udivmoddi4+0x286>
 8000c28:	b155      	cbz	r5, 8000c40 <__udivmoddi4+0x200>
 8000c2a:	ebb8 030e 	subs.w	r3, r8, lr
 8000c2e:	eb64 040c 	sbc.w	r4, r4, ip
 8000c32:	fa04 f606 	lsl.w	r6, r4, r6
 8000c36:	40cb      	lsrs	r3, r1
 8000c38:	431e      	orrs	r6, r3
 8000c3a:	40cc      	lsrs	r4, r1
 8000c3c:	e9c5 6400 	strd	r6, r4, [r5]
 8000c40:	2100      	movs	r1, #0
 8000c42:	e750      	b.n	8000ae6 <__udivmoddi4+0xa6>
 8000c44:	f1c2 0320 	rsb	r3, r2, #32
 8000c48:	fa20 f103 	lsr.w	r1, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	fa24 f303 	lsr.w	r3, r4, r3
 8000c54:	4094      	lsls	r4, r2
 8000c56:	430c      	orrs	r4, r1
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c60:	fa1f f78c 	uxth.w	r7, ip
 8000c64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c68:	fb08 3110 	mls	r1, r8, r0, r3
 8000c6c:	0c23      	lsrs	r3, r4, #16
 8000c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c72:	fb00 f107 	mul.w	r1, r0, r7
 8000c76:	4299      	cmp	r1, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x24c>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c82:	d22c      	bcs.n	8000cde <__udivmoddi4+0x29e>
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d92a      	bls.n	8000cde <__udivmoddi4+0x29e>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c94:	fb08 3311 	mls	r3, r8, r1, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb01 f307 	mul.w	r3, r1, r7
 8000ca0:	42a3      	cmp	r3, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x276>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cac:	d213      	bcs.n	8000cd6 <__udivmoddi4+0x296>
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	d911      	bls.n	8000cd6 <__udivmoddi4+0x296>
 8000cb2:	3902      	subs	r1, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	1ae4      	subs	r4, r4, r3
 8000cb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cbc:	e739      	b.n	8000b32 <__udivmoddi4+0xf2>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	e6f0      	b.n	8000aa4 <__udivmoddi4+0x64>
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e706      	b.n	8000ad4 <__udivmoddi4+0x94>
 8000cc6:	45c8      	cmp	r8, r9
 8000cc8:	d2ae      	bcs.n	8000c28 <__udivmoddi4+0x1e8>
 8000cca:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cce:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cd2:	3801      	subs	r0, #1
 8000cd4:	e7a8      	b.n	8000c28 <__udivmoddi4+0x1e8>
 8000cd6:	4631      	mov	r1, r6
 8000cd8:	e7ed      	b.n	8000cb6 <__udivmoddi4+0x276>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	e799      	b.n	8000c12 <__udivmoddi4+0x1d2>
 8000cde:	4630      	mov	r0, r6
 8000ce0:	e7d4      	b.n	8000c8c <__udivmoddi4+0x24c>
 8000ce2:	46d6      	mov	lr, sl
 8000ce4:	e77f      	b.n	8000be6 <__udivmoddi4+0x1a6>
 8000ce6:	4463      	add	r3, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e74d      	b.n	8000b88 <__udivmoddi4+0x148>
 8000cec:	4606      	mov	r6, r0
 8000cee:	4623      	mov	r3, r4
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	e70f      	b.n	8000b14 <__udivmoddi4+0xd4>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	e730      	b.n	8000b5c <__udivmoddi4+0x11c>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <HAL_ReadAS5600_I2Cx>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float HAL_ReadAS5600_I2Cx(I2C_HandleTypeDef hi2cX) // pulling 0.5 ms
{
 8000d00:	b084      	sub	sp, #16
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af04      	add	r7, sp, #16
 8000d08:	f107 0c10 	add.w	ip, r7, #16
 8000d0c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t regData[2];
  HAL_I2C_Mem_Read(&hi2cX, (I2C_AS5600 << 1) , AS5600_ANGLE_H	, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&regData , 2, 0x10000);
 8000d10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d14:	9302      	str	r3, [sp, #8]
 8000d16:	2302      	movs	r3, #2
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	2301      	movs	r3, #1
 8000d20:	220e      	movs	r2, #14
 8000d22:	216c      	movs	r1, #108	@ 0x6c
 8000d24:	f107 0010 	add.w	r0, r7, #16
 8000d28:	f002 fd00 	bl	800372c <HAL_I2C_Mem_Read>
  return ((float)(((uint16_t)regData[0]<<8 | (uint16_t)regData[1]) & (uint16_t)0xFFF))/4096*360;
 8000d2c:	793b      	ldrb	r3, [r7, #4]
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	797a      	ldrb	r2, [r7, #5]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d40:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000d60 <HAL_ReadAS5600_I2Cx+0x60>
 8000d44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d48:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000d64 <HAL_ReadAS5600_I2Cx+0x64>
 8000d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000d50:	eeb0 0a67 	vmov.f32	s0, s15
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d5c:	b004      	add	sp, #16
 8000d5e:	4770      	bx	lr
 8000d60:	45800000 	.word	0x45800000
 8000d64:	43b40000 	.word	0x43b40000

08000d68 <Motor_Init>:
	RightW.PWM[i] = RightW.PWM_Value;
  }

}
void Motor_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	  LeftW.hi2c = hi2c2;
 8000d6c:	4b69      	ldr	r3, [pc, #420]	@ (8000f14 <Motor_Init+0x1ac>)
 8000d6e:	4a6a      	ldr	r2, [pc, #424]	@ (8000f18 <Motor_Init+0x1b0>)
 8000d70:	334c      	adds	r3, #76	@ 0x4c
 8000d72:	4611      	mov	r1, r2
 8000d74:	2254      	movs	r2, #84	@ 0x54
 8000d76:	4618      	mov	r0, r3
 8000d78:	f005 f9ba 	bl	80060f0 <memcpy>
	  LeftW.htim = htim1;
 8000d7c:	4b65      	ldr	r3, [pc, #404]	@ (8000f14 <Motor_Init+0x1ac>)
 8000d7e:	4a67      	ldr	r2, [pc, #412]	@ (8000f1c <Motor_Init+0x1b4>)
 8000d80:	3304      	adds	r3, #4
 8000d82:	4611      	mov	r1, r2
 8000d84:	2248      	movs	r2, #72	@ 0x48
 8000d86:	4618      	mov	r0, r3
 8000d88:	f005 f9b2 	bl	80060f0 <memcpy>
	  LeftW.PWM_Channel = TIM_CHANNEL_1;
 8000d8c:	4b61      	ldr	r3, [pc, #388]	@ (8000f14 <Motor_Init+0x1ac>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
	  LeftW.PWM_Value = 0;
 8000d94:	4b5f      	ldr	r3, [pc, #380]	@ (8000f14 <Motor_Init+0x1ac>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
	  LeftW.GPIOx_INA = GPIOB;
 8000d9c:	4b5d      	ldr	r3, [pc, #372]	@ (8000f14 <Motor_Init+0x1ac>)
 8000d9e:	4a60      	ldr	r2, [pc, #384]	@ (8000f20 <Motor_Init+0x1b8>)
 8000da0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	  LeftW.GPIOx_INB = GPIOB;
 8000da4:	4b5b      	ldr	r3, [pc, #364]	@ (8000f14 <Motor_Init+0x1ac>)
 8000da6:	4a5e      	ldr	r2, [pc, #376]	@ (8000f20 <Motor_Init+0x1b8>)
 8000da8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	  LeftW.GPIO_Pin_INA = R_INA_Pin;
 8000dac:	4b59      	ldr	r3, [pc, #356]	@ (8000f14 <Motor_Init+0x1ac>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	  LeftW.GPIO_Pin_INB = R_INB_Pin;
 8000db4:	4b57      	ldr	r3, [pc, #348]	@ (8000f14 <Motor_Init+0x1ac>)
 8000db6:	2202      	movs	r2, #2
 8000db8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	  LeftW.PinState_INA    = GPIO_PIN_RESET;
 8000dbc:	4b55      	ldr	r3, [pc, #340]	@ (8000f14 <Motor_Init+0x1ac>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	  LeftW.PinState_INB    = GPIO_PIN_RESET;
 8000dc4:	4b53      	ldr	r3, [pc, #332]	@ (8000f14 <Motor_Init+0x1ac>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae

	  LeftW.PID = 100;
 8000dcc:	4b51      	ldr	r3, [pc, #324]	@ (8000f14 <Motor_Init+0x1ac>)
 8000dce:	4a55      	ldr	r2, [pc, #340]	@ (8000f24 <Motor_Init+0x1bc>)
 8000dd0:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180

	  HAL_TIM_PWM_Start(&LeftW.htim, LeftW.PWM_Channel);
 8000dd4:	4b4f      	ldr	r3, [pc, #316]	@ (8000f14 <Motor_Init+0x1ac>)
 8000dd6:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4852      	ldr	r0, [pc, #328]	@ (8000f28 <Motor_Init+0x1c0>)
 8000dde:	f003 ff99 	bl	8004d14 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel, LeftW.PWM_Value );
 8000de2:	4b4c      	ldr	r3, [pc, #304]	@ (8000f14 <Motor_Init+0x1ac>)
 8000de4:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d106      	bne.n	8000dfa <Motor_Init+0x92>
 8000dec:	4b49      	ldr	r3, [pc, #292]	@ (8000f14 <Motor_Init+0x1ac>)
 8000dee:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8000df2:	4b48      	ldr	r3, [pc, #288]	@ (8000f14 <Motor_Init+0x1ac>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000df8:	e020      	b.n	8000e3c <Motor_Init+0xd4>
 8000dfa:	4b46      	ldr	r3, [pc, #280]	@ (8000f14 <Motor_Init+0x1ac>)
 8000dfc:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d107      	bne.n	8000e14 <Motor_Init+0xac>
 8000e04:	4b43      	ldr	r3, [pc, #268]	@ (8000f14 <Motor_Init+0x1ac>)
 8000e06:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8000e0a:	4b42      	ldr	r3, [pc, #264]	@ (8000f14 <Motor_Init+0x1ac>)
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e12:	e013      	b.n	8000e3c <Motor_Init+0xd4>
 8000e14:	4b3f      	ldr	r3, [pc, #252]	@ (8000f14 <Motor_Init+0x1ac>)
 8000e16:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000e1a:	2b08      	cmp	r3, #8
 8000e1c:	d107      	bne.n	8000e2e <Motor_Init+0xc6>
 8000e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f14 <Motor_Init+0x1ac>)
 8000e20:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8000e24:	4b3b      	ldr	r3, [pc, #236]	@ (8000f14 <Motor_Init+0x1ac>)
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e2c:	e006      	b.n	8000e3c <Motor_Init+0xd4>
 8000e2e:	4b39      	ldr	r3, [pc, #228]	@ (8000f14 <Motor_Init+0x1ac>)
 8000e30:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8000e34:	4b37      	ldr	r3, [pc, #220]	@ (8000f14 <Motor_Init+0x1ac>)
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	6413      	str	r3, [r2, #64]	@ 0x40


	  RightW.hi2c = hi2c1;
 8000e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f2c <Motor_Init+0x1c4>)
 8000e3e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f30 <Motor_Init+0x1c8>)
 8000e40:	334c      	adds	r3, #76	@ 0x4c
 8000e42:	4611      	mov	r1, r2
 8000e44:	2254      	movs	r2, #84	@ 0x54
 8000e46:	4618      	mov	r0, r3
 8000e48:	f005 f952 	bl	80060f0 <memcpy>
	  RightW.htim = htim1;
 8000e4c:	4b37      	ldr	r3, [pc, #220]	@ (8000f2c <Motor_Init+0x1c4>)
 8000e4e:	4a33      	ldr	r2, [pc, #204]	@ (8000f1c <Motor_Init+0x1b4>)
 8000e50:	3304      	adds	r3, #4
 8000e52:	4611      	mov	r1, r2
 8000e54:	2248      	movs	r2, #72	@ 0x48
 8000e56:	4618      	mov	r0, r3
 8000e58:	f005 f94a 	bl	80060f0 <memcpy>
	  RightW.PWM_Channel = TIM_CHANNEL_4;
 8000e5c:	4b33      	ldr	r3, [pc, #204]	@ (8000f2c <Motor_Init+0x1c4>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
	  RightW.PWM_Value = 0;
 8000e64:	4b31      	ldr	r3, [pc, #196]	@ (8000f2c <Motor_Init+0x1c4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
	  RightW.GPIOx_INA = GPIOA;
 8000e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f2c <Motor_Init+0x1c4>)
 8000e6e:	4a31      	ldr	r2, [pc, #196]	@ (8000f34 <Motor_Init+0x1cc>)
 8000e70:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	  RightW.GPIOx_INB = GPIOA;
 8000e74:	4b2d      	ldr	r3, [pc, #180]	@ (8000f2c <Motor_Init+0x1c4>)
 8000e76:	4a2f      	ldr	r2, [pc, #188]	@ (8000f34 <Motor_Init+0x1cc>)
 8000e78:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	  RightW.GPIO_Pin_INA = L_INA_Pin;
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f2c <Motor_Init+0x1c4>)
 8000e7e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e82:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	  RightW.GPIO_Pin_INB = L_INB_Pin;
 8000e86:	4b29      	ldr	r3, [pc, #164]	@ (8000f2c <Motor_Init+0x1c4>)
 8000e88:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e8c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	  RightW.PinState_INA   = GPIO_PIN_RESET;
 8000e90:	4b26      	ldr	r3, [pc, #152]	@ (8000f2c <Motor_Init+0x1c4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	  RightW.PinState_INB   = GPIO_PIN_RESET;
 8000e98:	4b24      	ldr	r3, [pc, #144]	@ (8000f2c <Motor_Init+0x1c4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae

	  RightW.PID = 100;
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <Motor_Init+0x1c4>)
 8000ea2:	4a20      	ldr	r2, [pc, #128]	@ (8000f24 <Motor_Init+0x1bc>)
 8000ea4:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180

	  HAL_TIM_PWM_Start(&RightW.htim, RightW.PWM_Channel);
 8000ea8:	4b20      	ldr	r3, [pc, #128]	@ (8000f2c <Motor_Init+0x1c4>)
 8000eaa:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4821      	ldr	r0, [pc, #132]	@ (8000f38 <Motor_Init+0x1d0>)
 8000eb2:	f003 ff2f 	bl	8004d14 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <Motor_Init+0x1c4>)
 8000eb8:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d106      	bne.n	8000ece <Motor_Init+0x166>
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <Motor_Init+0x1c4>)
 8000ec2:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8000ec6:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <Motor_Init+0x1c4>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000ecc:	e020      	b.n	8000f10 <Motor_Init+0x1a8>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 8000ece:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <Motor_Init+0x1c4>)
 8000ed0:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d107      	bne.n	8000ee8 <Motor_Init+0x180>
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <Motor_Init+0x1c4>)
 8000eda:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <Motor_Init+0x1c4>)
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000ee6:	e013      	b.n	8000f10 <Motor_Init+0x1a8>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 8000ee8:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <Motor_Init+0x1c4>)
 8000eea:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000eee:	2b08      	cmp	r3, #8
 8000ef0:	d107      	bne.n	8000f02 <Motor_Init+0x19a>
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <Motor_Init+0x1c4>)
 8000ef4:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <Motor_Init+0x1c4>)
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000f00:	e006      	b.n	8000f10 <Motor_Init+0x1a8>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <Motor_Init+0x1c4>)
 8000f04:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <Motor_Init+0x1c4>)
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200002b0 	.word	0x200002b0
 8000f18:	20000128 	.word	0x20000128
 8000f1c:	200001d4 	.word	0x200001d4
 8000f20:	40020400 	.word	0x40020400
 8000f24:	42c80000 	.word	0x42c80000
 8000f28:	200002b4 	.word	0x200002b4
 8000f2c:	200004b0 	.word	0x200004b0
 8000f30:	200000d4 	.word	0x200000d4
 8000f34:	40020000 	.word	0x40020000
 8000f38:	200004b4 	.word	0x200004b4

08000f3c <SetDir_Speed>:

void SetDir_Speed(float Speed) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	ed87 0a01 	vstr	s0, [r7, #4]

	RightW.Target_speed = Speed;
 8000f46:	4a8f      	ldr	r2, [pc, #572]	@ (8001184 <SetDir_Speed+0x248>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
	LeftW.Target_speed = Speed;
 8000f4e:	4a8e      	ldr	r2, [pc, #568]	@ (8001188 <SetDir_Speed+0x24c>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

	RightW.PWM_Value = (int32_t) Speed;
 8000f56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f5e:	ee17 2a90 	vmov	r2, s15
 8000f62:	4b88      	ldr	r3, [pc, #544]	@ (8001184 <SetDir_Speed+0x248>)
 8000f64:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
	LeftW.PWM_Value = (int32_t) Speed;
 8000f68:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f70:	ee17 2a90 	vmov	r2, s15
 8000f74:	4b84      	ldr	r3, [pc, #528]	@ (8001188 <SetDir_Speed+0x24c>)
 8000f76:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

	if (LeftW.Target_speed > 0) {
 8000f7a:	4b83      	ldr	r3, [pc, #524]	@ (8001188 <SetDir_Speed+0x24c>)
 8000f7c:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8000f80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f88:	dd0a      	ble.n	8000fa0 <SetDir_Speed+0x64>
		LeftW.PinState_INA = GPIO_PIN_RESET;
 8000f8a:	4b7f      	ldr	r3, [pc, #508]	@ (8001188 <SetDir_Speed+0x24c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		LeftW.PinState_INB = GPIO_PIN_SET;
 8000f92:	4b7d      	ldr	r3, [pc, #500]	@ (8001188 <SetDir_Speed+0x24c>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		LeftW.Direction = WH_CW;
 8000f9a:	4b7b      	ldr	r3, [pc, #492]	@ (8001188 <SetDir_Speed+0x24c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
	};
	if (LeftW.Target_speed < 0) {
 8000fa0:	4b79      	ldr	r3, [pc, #484]	@ (8001188 <SetDir_Speed+0x24c>)
 8000fa2:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8000fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d50a      	bpl.n	8000fc6 <SetDir_Speed+0x8a>
		LeftW.PinState_INA = GPIO_PIN_SET;
 8000fb0:	4b75      	ldr	r3, [pc, #468]	@ (8001188 <SetDir_Speed+0x24c>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		LeftW.PinState_INB = GPIO_PIN_RESET;
 8000fb8:	4b73      	ldr	r3, [pc, #460]	@ (8001188 <SetDir_Speed+0x24c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		LeftW.Direction = WH_CCW;
 8000fc0:	4b71      	ldr	r3, [pc, #452]	@ (8001188 <SetDir_Speed+0x24c>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
	};

	if (LeftW.Target_speed == 0) {
 8000fc6:	4b70      	ldr	r3, [pc, #448]	@ (8001188 <SetDir_Speed+0x24c>)
 8000fc8:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8000fcc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd4:	d10a      	bne.n	8000fec <SetDir_Speed+0xb0>
		LeftW.PinState_INA = GPIO_PIN_RESET;
 8000fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8001188 <SetDir_Speed+0x24c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		LeftW.PinState_INB = GPIO_PIN_RESET;
 8000fde:	4b6a      	ldr	r3, [pc, #424]	@ (8001188 <SetDir_Speed+0x24c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		LeftW.Direction = WH_STOP;
 8000fe6:	4b68      	ldr	r3, [pc, #416]	@ (8001188 <SetDir_Speed+0x24c>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	701a      	strb	r2, [r3, #0]
	};
	HAL_GPIO_WritePin(LeftW.GPIOx_INA, LeftW.GPIO_Pin_INA, LeftW.PinState_INA);
 8000fec:	4b66      	ldr	r3, [pc, #408]	@ (8001188 <SetDir_Speed+0x24c>)
 8000fee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000ff2:	4a65      	ldr	r2, [pc, #404]	@ (8001188 <SetDir_Speed+0x24c>)
 8000ff4:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 8000ff8:	4a63      	ldr	r2, [pc, #396]	@ (8001188 <SetDir_Speed+0x24c>)
 8000ffa:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 fa1c 	bl	800343c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LeftW.GPIOx_INB, LeftW.GPIO_Pin_INB, LeftW.PinState_INB);
 8001004:	4b60      	ldr	r3, [pc, #384]	@ (8001188 <SetDir_Speed+0x24c>)
 8001006:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800100a:	4a5f      	ldr	r2, [pc, #380]	@ (8001188 <SetDir_Speed+0x24c>)
 800100c:	f8b2 10ac 	ldrh.w	r1, [r2, #172]	@ 0xac
 8001010:	4a5d      	ldr	r2, [pc, #372]	@ (8001188 <SetDir_Speed+0x24c>)
 8001012:	f892 20ae 	ldrb.w	r2, [r2, #174]	@ 0xae
 8001016:	4618      	mov	r0, r3
 8001018:	f002 fa10 	bl	800343c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel, LeftW.PWM_Value);
 800101c:	4b5a      	ldr	r3, [pc, #360]	@ (8001188 <SetDir_Speed+0x24c>)
 800101e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001022:	2b00      	cmp	r3, #0
 8001024:	d106      	bne.n	8001034 <SetDir_Speed+0xf8>
 8001026:	4b58      	ldr	r3, [pc, #352]	@ (8001188 <SetDir_Speed+0x24c>)
 8001028:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 800102c:	4b56      	ldr	r3, [pc, #344]	@ (8001188 <SetDir_Speed+0x24c>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	635a      	str	r2, [r3, #52]	@ 0x34
 8001032:	e020      	b.n	8001076 <SetDir_Speed+0x13a>
 8001034:	4b54      	ldr	r3, [pc, #336]	@ (8001188 <SetDir_Speed+0x24c>)
 8001036:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800103a:	2b04      	cmp	r3, #4
 800103c:	d107      	bne.n	800104e <SetDir_Speed+0x112>
 800103e:	4b52      	ldr	r3, [pc, #328]	@ (8001188 <SetDir_Speed+0x24c>)
 8001040:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001044:	4b50      	ldr	r3, [pc, #320]	@ (8001188 <SetDir_Speed+0x24c>)
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	6393      	str	r3, [r2, #56]	@ 0x38
 800104c:	e013      	b.n	8001076 <SetDir_Speed+0x13a>
 800104e:	4b4e      	ldr	r3, [pc, #312]	@ (8001188 <SetDir_Speed+0x24c>)
 8001050:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001054:	2b08      	cmp	r3, #8
 8001056:	d107      	bne.n	8001068 <SetDir_Speed+0x12c>
 8001058:	4b4b      	ldr	r3, [pc, #300]	@ (8001188 <SetDir_Speed+0x24c>)
 800105a:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 800105e:	4b4a      	ldr	r3, [pc, #296]	@ (8001188 <SetDir_Speed+0x24c>)
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001066:	e006      	b.n	8001076 <SetDir_Speed+0x13a>
 8001068:	4b47      	ldr	r3, [pc, #284]	@ (8001188 <SetDir_Speed+0x24c>)
 800106a:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 800106e:	4b46      	ldr	r3, [pc, #280]	@ (8001188 <SetDir_Speed+0x24c>)
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	6413      	str	r3, [r2, #64]	@ 0x40

	if (RightW.Target_speed > 0) {
 8001076:	4b43      	ldr	r3, [pc, #268]	@ (8001184 <SetDir_Speed+0x248>)
 8001078:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 800107c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001084:	dd0a      	ble.n	800109c <SetDir_Speed+0x160>
		RightW.PinState_INA = GPIO_PIN_SET;
 8001086:	4b3f      	ldr	r3, [pc, #252]	@ (8001184 <SetDir_Speed+0x248>)
 8001088:	2201      	movs	r2, #1
 800108a:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		RightW.PinState_INB = GPIO_PIN_RESET;
 800108e:	4b3d      	ldr	r3, [pc, #244]	@ (8001184 <SetDir_Speed+0x248>)
 8001090:	2200      	movs	r2, #0
 8001092:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		RightW.Direction = WH_CW;
 8001096:	4b3b      	ldr	r3, [pc, #236]	@ (8001184 <SetDir_Speed+0x248>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
	};
	if (RightW.Target_speed < 0) {
 800109c:	4b39      	ldr	r3, [pc, #228]	@ (8001184 <SetDir_Speed+0x248>)
 800109e:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 80010a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	d50a      	bpl.n	80010c2 <SetDir_Speed+0x186>
		RightW.PinState_INA = GPIO_PIN_RESET;
 80010ac:	4b35      	ldr	r3, [pc, #212]	@ (8001184 <SetDir_Speed+0x248>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		RightW.PinState_INB = GPIO_PIN_SET;
 80010b4:	4b33      	ldr	r3, [pc, #204]	@ (8001184 <SetDir_Speed+0x248>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		RightW.Direction = WH_CCW;
 80010bc:	4b31      	ldr	r3, [pc, #196]	@ (8001184 <SetDir_Speed+0x248>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
	};

	if (RightW.Target_speed == 0) {
 80010c2:	4b30      	ldr	r3, [pc, #192]	@ (8001184 <SetDir_Speed+0x248>)
 80010c4:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 80010c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d0:	d10e      	bne.n	80010f0 <SetDir_Speed+0x1b4>
		RightW.PinState_INA = GPIO_PIN_RESET;
 80010d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001184 <SetDir_Speed+0x248>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		RightW.PinState_INB = GPIO_PIN_RESET;
 80010da:	4b2a      	ldr	r3, [pc, #168]	@ (8001184 <SetDir_Speed+0x248>)
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		RightW.PWM_Value = 0;
 80010e2:	4b28      	ldr	r3, [pc, #160]	@ (8001184 <SetDir_Speed+0x248>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
		RightW.Direction = WH_STOP;
 80010ea:	4b26      	ldr	r3, [pc, #152]	@ (8001184 <SetDir_Speed+0x248>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	701a      	strb	r2, [r3, #0]

	};

	HAL_GPIO_WritePin(RightW.GPIOx_INA, RightW.GPIO_Pin_INA,
 80010f0:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <SetDir_Speed+0x248>)
 80010f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80010f6:	4a23      	ldr	r2, [pc, #140]	@ (8001184 <SetDir_Speed+0x248>)
 80010f8:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 80010fc:	4a21      	ldr	r2, [pc, #132]	@ (8001184 <SetDir_Speed+0x248>)
 80010fe:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 8001102:	4618      	mov	r0, r3
 8001104:	f002 f99a 	bl	800343c <HAL_GPIO_WritePin>
			RightW.PinState_INA);
	HAL_GPIO_WritePin(RightW.GPIOx_INB, RightW.GPIO_Pin_INB,
 8001108:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <SetDir_Speed+0x248>)
 800110a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800110e:	4a1d      	ldr	r2, [pc, #116]	@ (8001184 <SetDir_Speed+0x248>)
 8001110:	f8b2 10ac 	ldrh.w	r1, [r2, #172]	@ 0xac
 8001114:	4a1b      	ldr	r2, [pc, #108]	@ (8001184 <SetDir_Speed+0x248>)
 8001116:	f892 20ae 	ldrb.w	r2, [r2, #174]	@ 0xae
 800111a:	4618      	mov	r0, r3
 800111c:	f002 f98e 	bl	800343c <HAL_GPIO_WritePin>
			RightW.PinState_INB);

	__HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value);
 8001120:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <SetDir_Speed+0x248>)
 8001122:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001126:	2b00      	cmp	r3, #0
 8001128:	d106      	bne.n	8001138 <SetDir_Speed+0x1fc>
 800112a:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <SetDir_Speed+0x248>)
 800112c:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8001130:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <SetDir_Speed+0x248>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001136:	e020      	b.n	800117a <SetDir_Speed+0x23e>
	__HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value);
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <SetDir_Speed+0x248>)
 800113a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800113e:	2b04      	cmp	r3, #4
 8001140:	d107      	bne.n	8001152 <SetDir_Speed+0x216>
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <SetDir_Speed+0x248>)
 8001144:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001148:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <SetDir_Speed+0x248>)
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001150:	e013      	b.n	800117a <SetDir_Speed+0x23e>
	__HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value);
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <SetDir_Speed+0x248>)
 8001154:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001158:	2b08      	cmp	r3, #8
 800115a:	d107      	bne.n	800116c <SetDir_Speed+0x230>
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <SetDir_Speed+0x248>)
 800115e:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <SetDir_Speed+0x248>)
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800116a:	e006      	b.n	800117a <SetDir_Speed+0x23e>
	__HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value);
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <SetDir_Speed+0x248>)
 800116e:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001172:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <SetDir_Speed+0x248>)
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200004b0 	.word	0x200004b0
 8001188:	200002b0 	.word	0x200002b0

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001190:	f001 f900 	bl	8002394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f83c 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f000 fad0 	bl	800173c <MX_GPIO_Init>
  MX_DMA_Init();
 800119c:	f000 faae 	bl	80016fc <MX_DMA_Init>
  MX_I2C1_Init();
 80011a0:	f000 f8f6 	bl	8001390 <MX_I2C1_Init>
  MX_ADC1_Init();
 80011a4:	f000 f894 	bl	80012d0 <MX_ADC1_Init>
  MX_I2C2_Init();
 80011a8:	f000 f920 	bl	80013ec <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80011ac:	f000 fa7c 	bl	80016a8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80011b0:	f000 fa2c 	bl	800160c <MX_TIM2_Init>
  MX_TIM1_Init();
 80011b4:	f000 f97e 	bl	80014b4 <MX_TIM1_Init>
  MX_SPI2_Init();
 80011b8:	f000 f946 	bl	8001448 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80011bc:	4811      	ldr	r0, [pc, #68]	@ (8001204 <main+0x78>)
 80011be:	f003 fced 	bl	8004b9c <HAL_TIM_Base_Start_IT>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <main+0x40>
  {
    /* Starting Error */
    Error_Handler();
 80011c8:	f000 fe2c 	bl	8001e24 <Error_Handler>
  }

  Motor_Init();
 80011cc:	f7ff fdcc 	bl	8000d68 <Motor_Init>




  speedr =  0;
 80011d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <main+0x7c>)
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
  SetDir_Speed(speedr);
 80011d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <main+0x7c>)
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	eeb0 0a67 	vmov.f32	s0, s15
 80011e2:	f7ff feab 	bl	8000f3c <SetDir_Speed>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if (newval==1) {
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <main+0x80>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d1fb      	bne.n	80011e6 <main+0x5a>
		newval = 0;
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <main+0x80>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
		 SetDir_Speed(speedr);
 80011f4:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <main+0x7c>)
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	eeb0 0a67 	vmov.f32	s0, s15
 80011fe:	f7ff fe9d 	bl	8000f3c <SetDir_Speed>
	if (newval==1) {
 8001202:	e7f0      	b.n	80011e6 <main+0x5a>
 8001204:	2000021c 	.word	0x2000021c
 8001208:	200006b0 	.word	0x200006b0
 800120c:	200006b4 	.word	0x200006b4

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	@ 0x50
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	2230      	movs	r2, #48	@ 0x30
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f004 ff3a 	bl	8006098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	4b23      	ldr	r3, [pc, #140]	@ (80012c8 <SystemClock_Config+0xb8>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	4a22      	ldr	r2, [pc, #136]	@ (80012c8 <SystemClock_Config+0xb8>)
 800123e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001242:	6413      	str	r3, [r2, #64]	@ 0x40
 8001244:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <SystemClock_Config+0xb8>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <SystemClock_Config+0xbc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800125c:	4a1b      	ldr	r2, [pc, #108]	@ (80012cc <SystemClock_Config+0xbc>)
 800125e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <SystemClock_Config+0xbc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001270:	2302      	movs	r3, #2
 8001272:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001274:	2301      	movs	r3, #1
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001278:	2310      	movs	r3, #16
 800127a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800127c:	2300      	movs	r3, #0
 800127e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	4618      	mov	r0, r3
 8001286:	f002 ff59 	bl	800413c <HAL_RCC_OscConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001290:	f000 fdc8 	bl	8001e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001294:	230f      	movs	r3, #15
 8001296:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 f9bc 	bl	800462c <HAL_RCC_ClockConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012ba:	f000 fdb3 	bl	8001e24 <Error_Handler>
  }
}
 80012be:	bf00      	nop
 80012c0:	3750      	adds	r7, #80	@ 0x50
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40007000 	.word	0x40007000

080012d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012d6:	463b      	mov	r3, r7
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012e2:	4b28      	ldr	r3, [pc, #160]	@ (8001384 <MX_ADC1_Init+0xb4>)
 80012e4:	4a28      	ldr	r2, [pc, #160]	@ (8001388 <MX_ADC1_Init+0xb8>)
 80012e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012e8:	4b26      	ldr	r3, [pc, #152]	@ (8001384 <MX_ADC1_Init+0xb4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ee:	4b25      	ldr	r3, [pc, #148]	@ (8001384 <MX_ADC1_Init+0xb4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012f4:	4b23      	ldr	r3, [pc, #140]	@ (8001384 <MX_ADC1_Init+0xb4>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012fa:	4b22      	ldr	r3, [pc, #136]	@ (8001384 <MX_ADC1_Init+0xb4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001300:	4b20      	ldr	r3, [pc, #128]	@ (8001384 <MX_ADC1_Init+0xb4>)
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001308:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <MX_ADC1_Init+0xb4>)
 800130a:	2200      	movs	r2, #0
 800130c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800130e:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <MX_ADC1_Init+0xb4>)
 8001310:	4a1e      	ldr	r2, [pc, #120]	@ (800138c <MX_ADC1_Init+0xbc>)
 8001312:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001314:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <MX_ADC1_Init+0xb4>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800131a:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <MX_ADC1_Init+0xb4>)
 800131c:	2202      	movs	r2, #2
 800131e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001320:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <MX_ADC1_Init+0xb4>)
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001328:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <MX_ADC1_Init+0xb4>)
 800132a:	2201      	movs	r2, #1
 800132c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800132e:	4815      	ldr	r0, [pc, #84]	@ (8001384 <MX_ADC1_Init+0xb4>)
 8001330:	f001 f8a2 	bl	8002478 <HAL_ADC_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800133a:	f000 fd73 	bl	8001e24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001342:	2301      	movs	r3, #1
 8001344:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001346:	2303      	movs	r3, #3
 8001348:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	463b      	mov	r3, r7
 800134c:	4619      	mov	r1, r3
 800134e:	480d      	ldr	r0, [pc, #52]	@ (8001384 <MX_ADC1_Init+0xb4>)
 8001350:	f001 f8d6 	bl	8002500 <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800135a:	f000 fd63 	bl	8001e24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800135e:	2301      	movs	r3, #1
 8001360:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001362:	2302      	movs	r3, #2
 8001364:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001366:	463b      	mov	r3, r7
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	@ (8001384 <MX_ADC1_Init+0xb4>)
 800136c:	f001 f8c8 	bl	8002500 <HAL_ADC_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001376:	f000 fd55 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000002c 	.word	0x2000002c
 8001388:	40012000 	.word	0x40012000
 800138c:	0f000001 	.word	0x0f000001

08001390 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <MX_I2C1_Init+0x50>)
 8001396:	4a13      	ldr	r2, [pc, #76]	@ (80013e4 <MX_I2C1_Init+0x54>)
 8001398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_I2C1_Init+0x50>)
 800139c:	4a12      	ldr	r2, [pc, #72]	@ (80013e8 <MX_I2C1_Init+0x58>)
 800139e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ba:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013ce:	f002 f869 	bl	80034a4 <HAL_I2C_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013d8:	f000 fd24 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200000d4 	.word	0x200000d4
 80013e4:	40005400 	.word	0x40005400
 80013e8:	000186a0 	.word	0x000186a0

080013ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <MX_I2C2_Init+0x50>)
 80013f2:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <MX_I2C2_Init+0x54>)
 80013f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <MX_I2C2_Init+0x50>)
 80013f8:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <MX_I2C2_Init+0x58>)
 80013fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <MX_I2C2_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <MX_I2C2_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <MX_I2C2_Init+0x50>)
 800140a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800140e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001410:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <MX_I2C2_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MX_I2C2_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <MX_I2C2_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_I2C2_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <MX_I2C2_Init+0x50>)
 800142a:	f002 f83b 	bl	80034a4 <HAL_I2C_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001434:	f000 fcf6 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000128 	.word	0x20000128
 8001440:	40005800 	.word	0x40005800
 8001444:	000186a0 	.word	0x000186a0

08001448 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800144c:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <MX_SPI2_Init+0x64>)
 800144e:	4a18      	ldr	r2, [pc, #96]	@ (80014b0 <MX_SPI2_Init+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001452:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <MX_SPI2_Init+0x64>)
 8001454:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001458:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800145a:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <MX_SPI2_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <MX_SPI2_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_SPI2_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <MX_SPI2_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_SPI2_Init+0x64>)
 8001474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001478:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <MX_SPI2_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001480:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <MX_SPI2_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_SPI2_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800148c:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <MX_SPI2_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <MX_SPI2_Init+0x64>)
 8001494:	220a      	movs	r2, #10
 8001496:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	@ (80014ac <MX_SPI2_Init+0x64>)
 800149a:	f003 faa7 	bl	80049ec <HAL_SPI_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014a4:	f000 fcbe 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000017c 	.word	0x2000017c
 80014b0:	40003800 	.word	0x40003800

080014b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b096      	sub	sp, #88	@ 0x58
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2220      	movs	r2, #32
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 fdd3 	bl	8006098 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014f2:	4b44      	ldr	r3, [pc, #272]	@ (8001604 <MX_TIM1_Init+0x150>)
 80014f4:	4a44      	ldr	r2, [pc, #272]	@ (8001608 <MX_TIM1_Init+0x154>)
 80014f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014f8:	4b42      	ldr	r3, [pc, #264]	@ (8001604 <MX_TIM1_Init+0x150>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b41      	ldr	r3, [pc, #260]	@ (8001604 <MX_TIM1_Init+0x150>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001504:	4b3f      	ldr	r3, [pc, #252]	@ (8001604 <MX_TIM1_Init+0x150>)
 8001506:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800150a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b3d      	ldr	r3, [pc, #244]	@ (8001604 <MX_TIM1_Init+0x150>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001512:	4b3c      	ldr	r3, [pc, #240]	@ (8001604 <MX_TIM1_Init+0x150>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b3a      	ldr	r3, [pc, #232]	@ (8001604 <MX_TIM1_Init+0x150>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800151e:	4839      	ldr	r0, [pc, #228]	@ (8001604 <MX_TIM1_Init+0x150>)
 8001520:	f003 faed 	bl	8004afe <HAL_TIM_Base_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800152a:	f000 fc7b 	bl	8001e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001532:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001534:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001538:	4619      	mov	r1, r3
 800153a:	4832      	ldr	r0, [pc, #200]	@ (8001604 <MX_TIM1_Init+0x150>)
 800153c:	f003 fe4c 	bl	80051d8 <HAL_TIM_ConfigClockSource>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001546:	f000 fc6d 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800154a:	482e      	ldr	r0, [pc, #184]	@ (8001604 <MX_TIM1_Init+0x150>)
 800154c:	f003 fb88 	bl	8004c60 <HAL_TIM_PWM_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001556:	f000 fc65 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001562:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001566:	4619      	mov	r1, r3
 8001568:	4826      	ldr	r0, [pc, #152]	@ (8001604 <MX_TIM1_Init+0x150>)
 800156a:	f004 f9fd 	bl	8005968 <HAL_TIMEx_MasterConfigSynchronization>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001574:	f000 fc56 	bl	8001e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001578:	2360      	movs	r3, #96	@ 0x60
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001584:	2300      	movs	r3, #0
 8001586:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	4819      	ldr	r0, [pc, #100]	@ (8001604 <MX_TIM1_Init+0x150>)
 800159e:	f003 fd59 	bl	8005054 <HAL_TIM_PWM_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015a8:	f000 fc3c 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b0:	220c      	movs	r2, #12
 80015b2:	4619      	mov	r1, r3
 80015b4:	4813      	ldr	r0, [pc, #76]	@ (8001604 <MX_TIM1_Init+0x150>)
 80015b6:	f003 fd4d 	bl	8005054 <HAL_TIM_PWM_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80015c0:	f000 fc30 	bl	8001e24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4807      	ldr	r0, [pc, #28]	@ (8001604 <MX_TIM1_Init+0x150>)
 80015e8:	f004 fa2c 	bl	8005a44 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80015f2:	f000 fc17 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015f6:	4803      	ldr	r0, [pc, #12]	@ (8001604 <MX_TIM1_Init+0x150>)
 80015f8:	f000 fdca 	bl	8002190 <HAL_TIM_MspPostInit>

}
 80015fc:	bf00      	nop
 80015fe:	3758      	adds	r7, #88	@ 0x58
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200001d4 	.word	0x200001d4
 8001608:	40010000 	.word	0x40010000

0800160c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	463b      	mov	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001628:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <MX_TIM2_Init+0x98>)
 800162a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800162e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 8001630:	4b1c      	ldr	r3, [pc, #112]	@ (80016a4 <MX_TIM2_Init+0x98>)
 8001632:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001636:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <MX_TIM2_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800163e:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <MX_TIM2_Init+0x98>)
 8001640:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001644:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <MX_TIM2_Init+0x98>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <MX_TIM2_Init+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001652:	4814      	ldr	r0, [pc, #80]	@ (80016a4 <MX_TIM2_Init+0x98>)
 8001654:	f003 fa53 	bl	8004afe <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800165e:	f000 fbe1 	bl	8001e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001666:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001668:	f107 0308 	add.w	r3, r7, #8
 800166c:	4619      	mov	r1, r3
 800166e:	480d      	ldr	r0, [pc, #52]	@ (80016a4 <MX_TIM2_Init+0x98>)
 8001670:	f003 fdb2 	bl	80051d8 <HAL_TIM_ConfigClockSource>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800167a:	f000 fbd3 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001686:	463b      	mov	r3, r7
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	@ (80016a4 <MX_TIM2_Init+0x98>)
 800168c:	f004 f96c 	bl	8005968 <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001696:	f000 fbc5 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000021c 	.word	0x2000021c

080016a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	@ (80016f8 <MX_USART1_UART_Init+0x50>)
 80016b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016e0:	f004 fa16 	bl	8005b10 <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ea:	f000 fb9b 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000264 	.word	0x20000264
 80016f8:	40011000 	.word	0x40011000

080016fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <MX_DMA_Init+0x3c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a0b      	ldr	r2, [pc, #44]	@ (8001738 <MX_DMA_Init+0x3c>)
 800170c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <MX_DMA_Init+0x3c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2038      	movs	r0, #56	@ 0x38
 8001724:	f001 f9e5 	bl	8002af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001728:	2038      	movs	r0, #56	@ 0x38
 800172a:	f001 f9fe 	bl	8002b2a <HAL_NVIC_EnableIRQ>

}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	4b47      	ldr	r3, [pc, #284]	@ (8001874 <MX_GPIO_Init+0x138>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a46      	ldr	r2, [pc, #280]	@ (8001874 <MX_GPIO_Init+0x138>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b44      	ldr	r3, [pc, #272]	@ (8001874 <MX_GPIO_Init+0x138>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b40      	ldr	r3, [pc, #256]	@ (8001874 <MX_GPIO_Init+0x138>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a3f      	ldr	r2, [pc, #252]	@ (8001874 <MX_GPIO_Init+0x138>)
 8001778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b3d      	ldr	r3, [pc, #244]	@ (8001874 <MX_GPIO_Init+0x138>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	4b39      	ldr	r3, [pc, #228]	@ (8001874 <MX_GPIO_Init+0x138>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a38      	ldr	r2, [pc, #224]	@ (8001874 <MX_GPIO_Init+0x138>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b36      	ldr	r3, [pc, #216]	@ (8001874 <MX_GPIO_Init+0x138>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	4b32      	ldr	r3, [pc, #200]	@ (8001874 <MX_GPIO_Init+0x138>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a31      	ldr	r2, [pc, #196]	@ (8001874 <MX_GPIO_Init+0x138>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001874 <MX_GPIO_Init+0x138>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUELED_GPIO_Port, BLUELED_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017c8:	482b      	ldr	r0, [pc, #172]	@ (8001878 <MX_GPIO_Init+0x13c>)
 80017ca:	f001 fe37 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_INA_Pin|R_INB_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2103      	movs	r1, #3
 80017d2:	482a      	ldr	r0, [pc, #168]	@ (800187c <MX_GPIO_Init+0x140>)
 80017d4:	f001 fe32 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_INB_Pin|L_INA_Pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 80017de:	4828      	ldr	r0, [pc, #160]	@ (8001880 <MX_GPIO_Init+0x144>)
 80017e0:	f001 fe2c 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUELED_Pin */
  GPIO_InitStruct.Pin = BLUELED_Pin;
 80017e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUELED_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	481e      	ldr	r0, [pc, #120]	@ (8001878 <MX_GPIO_Init+0x13c>)
 80017fe:	f001 fc99 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001802:	2380      	movs	r3, #128	@ 0x80
 8001804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	481a      	ldr	r0, [pc, #104]	@ (8001880 <MX_GPIO_Init+0x144>)
 8001816:	f001 fc8d 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_INA_Pin R_INB_Pin */
  GPIO_InitStruct.Pin = R_INA_Pin|R_INB_Pin;
 800181a:	2303      	movs	r3, #3
 800181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	2301      	movs	r3, #1
 8001820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	4812      	ldr	r0, [pc, #72]	@ (800187c <MX_GPIO_Init+0x140>)
 8001832:	f001 fc7f 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_INB_Pin L_INA_Pin */
  GPIO_InitStruct.Pin = L_INB_Pin|L_INA_Pin;
 8001836:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800183a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	480c      	ldr	r0, [pc, #48]	@ (8001880 <MX_GPIO_Init+0x144>)
 8001850:	f001 fc70 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001854:	2310      	movs	r3, #16
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4619      	mov	r1, r3
 8001866:	4805      	ldr	r0, [pc, #20]	@ (800187c <MX_GPIO_Init+0x140>)
 8001868:	f001 fc64 	bl	8003134 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	@ 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	40020800 	.word	0x40020800
 800187c:	40020400 	.word	0x40020400
 8001880:	40020000 	.word	0x40020000

08001884 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001888:	b099      	sub	sp, #100	@ 0x64
 800188a:	af12      	add	r7, sp, #72	@ 0x48
 800188c:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800188e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001892:	48af      	ldr	r0, [pc, #700]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001894:	f001 fdeb 	bl	800346e <HAL_GPIO_TogglePin>


  for (uint8_t i=1;i<MAX_ANGLE_WHEEL_ARRAY;i++) {
 8001898:	2301      	movs	r3, #1
 800189a:	75fb      	strb	r3, [r7, #23]
 800189c:	e056      	b.n	800194c <HAL_TIM_PeriodElapsedCallback+0xc8>
    LeftW.angle[i-1]    = LeftW.angle[i];
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	7dfa      	ldrb	r2, [r7, #23]
 80018a2:	1e51      	subs	r1, r2, #1
 80018a4:	4aab      	ldr	r2, [pc, #684]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80018a6:	331c      	adds	r3, #28
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4413      	add	r3, r2
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	48a8      	ldr	r0, [pc, #672]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80018b2:	311c      	adds	r1, #28
 80018b4:	00c9      	lsls	r1, r1, #3
 80018b6:	4401      	add	r1, r0
 80018b8:	e9c1 2300 	strd	r2, r3, [r1]
    RightW.angle[i-1]   = RightW.angle[i];
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	7dfa      	ldrb	r2, [r7, #23]
 80018c0:	1e51      	subs	r1, r2, #1
 80018c2:	4aa5      	ldr	r2, [pc, #660]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80018c4:	331c      	adds	r3, #28
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	48a2      	ldr	r0, [pc, #648]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80018d0:	311c      	adds	r1, #28
 80018d2:	00c9      	lsls	r1, r1, #3
 80018d4:	4401      	add	r1, r0
 80018d6:	e9c1 2300 	strd	r2, r3, [r1]

    LeftW.time_ms_wheel[i-1] = LeftW.time_ms_wheel[i] ;
 80018da:	7dfb      	ldrb	r3, [r7, #23]
 80018dc:	7dfa      	ldrb	r2, [r7, #23]
 80018de:	1e51      	subs	r1, r2, #1
 80018e0:	4a9c      	ldr	r2, [pc, #624]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80018e2:	332c      	adds	r3, #44	@ 0x2c
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	489a      	ldr	r0, [pc, #616]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80018ec:	f101 032c 	add.w	r3, r1, #44	@ 0x2c
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4403      	add	r3, r0
 80018f4:	605a      	str	r2, [r3, #4]
    RightW.time_ms_wheel[i-1] = RightW.time_ms_wheel[i] ;
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
 80018f8:	7dfa      	ldrb	r2, [r7, #23]
 80018fa:	1e51      	subs	r1, r2, #1
 80018fc:	4a96      	ldr	r2, [pc, #600]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80018fe:	332c      	adds	r3, #44	@ 0x2c
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4894      	ldr	r0, [pc, #592]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001908:	f101 032c 	add.w	r3, r1, #44	@ 0x2c
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4403      	add	r3, r0
 8001910:	605a      	str	r2, [r3, #4]

    LeftW.speed[i-1] = LeftW.speed[i];
 8001912:	7dfa      	ldrb	r2, [r7, #23]
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	3b01      	subs	r3, #1
 8001918:	498e      	ldr	r1, [pc, #568]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800191a:	324c      	adds	r2, #76	@ 0x4c
 800191c:	0092      	lsls	r2, r2, #2
 800191e:	440a      	add	r2, r1
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	498c      	ldr	r1, [pc, #560]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001924:	334c      	adds	r3, #76	@ 0x4c
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	601a      	str	r2, [r3, #0]
    RightW.speed[i-1] = RightW.speed[i];
 800192c:	7dfa      	ldrb	r2, [r7, #23]
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	3b01      	subs	r3, #1
 8001932:	4989      	ldr	r1, [pc, #548]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001934:	324c      	adds	r2, #76	@ 0x4c
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	440a      	add	r2, r1
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	4986      	ldr	r1, [pc, #536]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800193e:	334c      	adds	r3, #76	@ 0x4c
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	601a      	str	r2, [r3, #0]
  for (uint8_t i=1;i<MAX_ANGLE_WHEEL_ARRAY;i++) {
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	3301      	adds	r3, #1
 800194a:	75fb      	strb	r3, [r7, #23]
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b09      	cmp	r3, #9
 8001950:	d9a5      	bls.n	800189e <HAL_TIM_PeriodElapsedCallback+0x1a>

  };

  RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1] = HAL_GetTick();
 8001952:	f000 fd85 	bl	8002460 <HAL_GetTick>
 8001956:	4603      	mov	r3, r0
 8001958:	4a7f      	ldr	r2, [pc, #508]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800195a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1]  = HAL_GetTick();
 800195e:	f000 fd7f 	bl	8002460 <HAL_GetTick>
 8001962:	4603      	mov	r3, r0
 8001964:	4a7b      	ldr	r2, [pc, #492]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001966:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  LeftW.angle[MAX_ANGLE_WHEEL_ARRAY-1]   = HAL_ReadAS5600_I2Cx(LeftW.hi2c);
 800196a:	4e7a      	ldr	r6, [pc, #488]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800196c:	4668      	mov	r0, sp
 800196e:	f106 035c 	add.w	r3, r6, #92	@ 0x5c
 8001972:	2244      	movs	r2, #68	@ 0x44
 8001974:	4619      	mov	r1, r3
 8001976:	f004 fbbb 	bl	80060f0 <memcpy>
 800197a:	f106 034c 	add.w	r3, r6, #76	@ 0x4c
 800197e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001980:	f7ff f9be 	bl	8000d00 <HAL_ReadAS5600_I2Cx>
 8001984:	ee10 3a10 	vmov	r3, s0
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fd87 	bl	800049c <__aeabi_f2d>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4970      	ldr	r1, [pc, #448]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001994:	e9c1 234a 	strd	r2, r3, [r1, #296]	@ 0x128
  RightW.angle[MAX_ANGLE_WHEEL_ARRAY-1]  = HAL_ReadAS5600_I2Cx(RightW.hi2c);
 8001998:	4e6f      	ldr	r6, [pc, #444]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800199a:	4668      	mov	r0, sp
 800199c:	f106 035c 	add.w	r3, r6, #92	@ 0x5c
 80019a0:	2244      	movs	r2, #68	@ 0x44
 80019a2:	4619      	mov	r1, r3
 80019a4:	f004 fba4 	bl	80060f0 <memcpy>
 80019a8:	f106 034c 	add.w	r3, r6, #76	@ 0x4c
 80019ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ae:	f7ff f9a7 	bl	8000d00 <HAL_ReadAS5600_I2Cx>
 80019b2:	ee10 3a10 	vmov	r3, s0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fd70 	bl	800049c <__aeabi_f2d>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4965      	ldr	r1, [pc, #404]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80019c2:	e9c1 234a 	strd	r2, r3, [r1, #296]	@ 0x128

  float tmplspeed = -((1000*(LeftW.angle[MAX_ANGLE_WHEEL_ARRAY-1]  - LeftW.angle[MAX_ANGLE_WHEEL_ARRAY-2]))  / (LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1] - LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-2]))/360*60;
 80019c6:	4b63      	ldr	r3, [pc, #396]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80019c8:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 80019cc:	4b61      	ldr	r3, [pc, #388]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80019ce:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 80019d2:	f7fe fc03 	bl	80001dc <__aeabi_dsub>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	4b5e      	ldr	r3, [pc, #376]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80019e4:	f7fe fdb2 	bl	800054c <__aeabi_dmul>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4690      	mov	r8, r2
 80019ee:	4699      	mov	r9, r3
 80019f0:	4b58      	ldr	r3, [pc, #352]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80019f2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80019f6:	4b57      	ldr	r3, [pc, #348]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80019f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd2a 	bl	8000458 <__aeabi_ui2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4640      	mov	r0, r8
 8001a0a:	4649      	mov	r1, r9
 8001a0c:	f7fe fec8 	bl	80007a0 <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4614      	mov	r4, r2
 8001a16:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b50      	ldr	r3, [pc, #320]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001a20:	4620      	mov	r0, r4
 8001a22:	4629      	mov	r1, r5
 8001a24:	f7fe febc 	bl	80007a0 <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4b4b      	ldr	r3, [pc, #300]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001a36:	f7fe fd89 	bl	800054c <__aeabi_dmul>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	f7fe ff95 	bl	8000970 <__aeabi_d2f>
 8001a46:	4603      	mov	r3, r0
 8001a48:	613b      	str	r3, [r7, #16]
  float tmprspeed = ((1000*(RightW.angle[MAX_ANGLE_WHEEL_ARRAY-1] - RightW.angle[MAX_ANGLE_WHEEL_ARRAY-2])) / (RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1] - RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-2]))/360*60;
 8001a4a:	4b43      	ldr	r3, [pc, #268]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001a4c:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 8001a50:	4b41      	ldr	r3, [pc, #260]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001a52:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 8001a56:	f7fe fbc1 	bl	80001dc <__aeabi_dsub>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	4b3d      	ldr	r3, [pc, #244]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001a68:	f7fe fd70 	bl	800054c <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4614      	mov	r4, r2
 8001a72:	461d      	mov	r5, r3
 8001a74:	4b38      	ldr	r3, [pc, #224]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001a76:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001a7a:	4b37      	ldr	r3, [pc, #220]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001a7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fce8 	bl	8000458 <__aeabi_ui2d>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	4629      	mov	r1, r5
 8001a90:	f7fe fe86 	bl	80007a0 <__aeabi_ddiv>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001aa2:	f7fe fe7d 	bl	80007a0 <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001ab4:	f7fe fd4a 	bl	800054c <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f7fe ff56 	bl	8000970 <__aeabi_d2f>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60fb      	str	r3, [r7, #12]

  if ((tmplspeed*LeftW.speed[MAX_ANGLE_WHEEL_ARRAY-2])>=0) {
 8001ac8:	4b22      	ldr	r3, [pc, #136]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001aca:	ed93 7a54 	vldr	s14, [r3, #336]	@ 0x150
 8001ace:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ade:	db27      	blt.n	8001b30 <HAL_TIM_PeriodElapsedCallback+0x2ac>
	  for (uint8_t i=1;i<MAX_ANGLE_WHEEL_ARRAY;i++) {
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	72fb      	strb	r3, [r7, #11]
 8001ae4:	e00f      	b.n	8001b06 <HAL_TIM_PeriodElapsedCallback+0x282>
	    LeftW.speed[i-1] =  LeftW.speed[i];
 8001ae6:	7afa      	ldrb	r2, [r7, #11]
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	4919      	ldr	r1, [pc, #100]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001aee:	324c      	adds	r2, #76	@ 0x4c
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	440a      	add	r2, r1
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	4917      	ldr	r1, [pc, #92]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001af8:	334c      	adds	r3, #76	@ 0x4c
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	601a      	str	r2, [r3, #0]
	  for (uint8_t i=1;i<MAX_ANGLE_WHEEL_ARRAY;i++) {
 8001b00:	7afb      	ldrb	r3, [r7, #11]
 8001b02:	3301      	adds	r3, #1
 8001b04:	72fb      	strb	r3, [r7, #11]
 8001b06:	7afb      	ldrb	r3, [r7, #11]
 8001b08:	2b09      	cmp	r3, #9
 8001b0a:	d9ec      	bls.n	8001ae6 <HAL_TIM_PeriodElapsedCallback+0x262>
	  };

	if (fabsf(tmplspeed)<1) {tmplspeed=0;};
 8001b0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b10:	eef0 7ae7 	vabs.f32	s15, s15
 8001b14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b20:	d502      	bpl.n	8001b28 <HAL_TIM_PeriodElapsedCallback+0x2a4>
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	613b      	str	r3, [r7, #16]
    LeftW.speed[MAX_ANGLE_WHEEL_ARRAY-1] = tmplspeed ;
 8001b28:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
  };

  if ((tmprspeed*RightW.speed[MAX_ANGLE_WHEEL_ARRAY-2])>=0) {
 8001b30:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b32:	ed93 7a54 	vldr	s14, [r3, #336]	@ 0x150
 8001b36:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	db34      	blt.n	8001bb2 <HAL_TIM_PeriodElapsedCallback+0x32e>
	  for (uint8_t i=1;i<MAX_ANGLE_WHEEL_ARRAY;i++) {
 8001b48:	2301      	movs	r3, #1
 8001b4a:	72bb      	strb	r3, [r7, #10]
 8001b4c:	e01c      	b.n	8001b88 <HAL_TIM_PeriodElapsedCallback+0x304>
 8001b4e:	bf00      	nop
 8001b50:	40020800 	.word	0x40020800
 8001b54:	200002b0 	.word	0x200002b0
 8001b58:	200004b0 	.word	0x200004b0
 8001b5c:	408f4000 	.word	0x408f4000
 8001b60:	40768000 	.word	0x40768000
 8001b64:	404e0000 	.word	0x404e0000
	    RightW.speed[i-1] = RightW.speed[i];
 8001b68:	7aba      	ldrb	r2, [r7, #10]
 8001b6a:	7abb      	ldrb	r3, [r7, #10]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	49ab      	ldr	r1, [pc, #684]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001b70:	324c      	adds	r2, #76	@ 0x4c
 8001b72:	0092      	lsls	r2, r2, #2
 8001b74:	440a      	add	r2, r1
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	49a8      	ldr	r1, [pc, #672]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001b7a:	334c      	adds	r3, #76	@ 0x4c
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	601a      	str	r2, [r3, #0]
	  for (uint8_t i=1;i<MAX_ANGLE_WHEEL_ARRAY;i++) {
 8001b82:	7abb      	ldrb	r3, [r7, #10]
 8001b84:	3301      	adds	r3, #1
 8001b86:	72bb      	strb	r3, [r7, #10]
 8001b88:	7abb      	ldrb	r3, [r7, #10]
 8001b8a:	2b09      	cmp	r3, #9
 8001b8c:	d9ec      	bls.n	8001b68 <HAL_TIM_PeriodElapsedCallback+0x2e4>
	  };
	if (fabsf(tmprspeed)<1) {tmprspeed=0;};
 8001b8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b92:	eef0 7ae7 	vabs.f32	s15, s15
 8001b96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	d502      	bpl.n	8001baa <HAL_TIM_PeriodElapsedCallback+0x326>
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
    RightW.speed[MAX_ANGLE_WHEEL_ARRAY-1] = tmprspeed ;
 8001baa:	4a9c      	ldr	r2, [pc, #624]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
  };


  LeftW.averspeed = 0;
 8001bb2:	4b9b      	ldr	r3, [pc, #620]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  RightW.averspeed = 0;
 8001bbc:	4b97      	ldr	r3, [pc, #604]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  for (uint8_t i=0;i<MAX_ANGLE_WHEEL_ARRAY-2;i++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	727b      	strb	r3, [r7, #9]
 8001bca:	e020      	b.n	8001c0e <HAL_TIM_PeriodElapsedCallback+0x38a>
	LeftW.averspeed  = LeftW.averspeed  + LeftW.speed[i];
 8001bcc:	4b94      	ldr	r3, [pc, #592]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001bce:	ed93 7a56 	vldr	s14, [r3, #344]	@ 0x158
 8001bd2:	7a7b      	ldrb	r3, [r7, #9]
 8001bd4:	4a92      	ldr	r2, [pc, #584]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001bd6:	334c      	adds	r3, #76	@ 0x4c
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	edd3 7a00 	vldr	s15, [r3]
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be4:	4b8e      	ldr	r3, [pc, #568]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001be6:	edc3 7a56 	vstr	s15, [r3, #344]	@ 0x158
	RightW.averspeed = RightW.averspeed + RightW.speed[i];
 8001bea:	4b8c      	ldr	r3, [pc, #560]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001bec:	ed93 7a56 	vldr	s14, [r3, #344]	@ 0x158
 8001bf0:	7a7b      	ldrb	r3, [r7, #9]
 8001bf2:	4a8a      	ldr	r2, [pc, #552]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001bf4:	334c      	adds	r3, #76	@ 0x4c
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c02:	4b86      	ldr	r3, [pc, #536]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001c04:	edc3 7a56 	vstr	s15, [r3, #344]	@ 0x158
  for (uint8_t i=0;i<MAX_ANGLE_WHEEL_ARRAY-2;i++) {
 8001c08:	7a7b      	ldrb	r3, [r7, #9]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	727b      	strb	r3, [r7, #9]
 8001c0e:	7a7b      	ldrb	r3, [r7, #9]
 8001c10:	2b07      	cmp	r3, #7
 8001c12:	d9db      	bls.n	8001bcc <HAL_TIM_PeriodElapsedCallback+0x348>
  };

  RightW.averspeed = RightW.averspeed  / (MAX_ANGLE_WHEEL_ARRAY-2);
 8001c14:	4b81      	ldr	r3, [pc, #516]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001c16:	ed93 7a56 	vldr	s14, [r3, #344]	@ 0x158
 8001c1a:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001c1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c22:	4b7e      	ldr	r3, [pc, #504]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001c24:	edc3 7a56 	vstr	s15, [r3, #344]	@ 0x158
  LeftW.averspeed  = LeftW.averspeed   / (MAX_ANGLE_WHEEL_ARRAY-2);
 8001c28:	4b7d      	ldr	r3, [pc, #500]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001c2a:	ed93 7a56 	vldr	s14, [r3, #344]	@ 0x158
 8001c2e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c36:	4b7a      	ldr	r3, [pc, #488]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001c38:	edc3 7a56 	vstr	s15, [r3, #344]	@ 0x158



  if (RightW.averspeed>10) {
 8001c3c:	4b77      	ldr	r3, [pc, #476]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001c3e:	edd3 7a56 	vldr	s15, [r3, #344]	@ 0x158
 8001c42:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	dc00      	bgt.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x3ce>





}
 8001c50:	e0de      	b.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0x58c>
  if (RightW.averspeed-LeftW.averspeed<0) {
 8001c52:	4b72      	ldr	r3, [pc, #456]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001c54:	ed93 7a56 	vldr	s14, [r3, #344]	@ 0x158
 8001c58:	4b71      	ldr	r3, [pc, #452]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001c5a:	edd3 7a56 	vldr	s15, [r3, #344]	@ 0x158
 8001c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	d568      	bpl.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x4ba>
	  RightW.PWM_Value = RightW.PWM_Value + 5;
 8001c6c:	4b6b      	ldr	r3, [pc, #428]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001c6e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001c72:	3305      	adds	r3, #5
 8001c74:	4a69      	ldr	r2, [pc, #420]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001c76:	f8c2 316c 	str.w	r3, [r2, #364]	@ 0x16c
		__HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value);
 8001c7a:	4b68      	ldr	r3, [pc, #416]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001c7c:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d106      	bne.n	8001c92 <HAL_TIM_PeriodElapsedCallback+0x40e>
 8001c84:	4b65      	ldr	r3, [pc, #404]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001c86:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8001c8a:	4b64      	ldr	r3, [pc, #400]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c90:	e020      	b.n	8001cd4 <HAL_TIM_PeriodElapsedCallback+0x450>
 8001c92:	4b62      	ldr	r3, [pc, #392]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001c94:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d107      	bne.n	8001cac <HAL_TIM_PeriodElapsedCallback+0x428>
 8001c9c:	4b5f      	ldr	r3, [pc, #380]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001c9e:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001ca2:	4b5e      	ldr	r3, [pc, #376]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	6393      	str	r3, [r2, #56]	@ 0x38
 8001caa:	e013      	b.n	8001cd4 <HAL_TIM_PeriodElapsedCallback+0x450>
 8001cac:	4b5b      	ldr	r3, [pc, #364]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001cae:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d107      	bne.n	8001cc6 <HAL_TIM_PeriodElapsedCallback+0x442>
 8001cb6:	4b59      	ldr	r3, [pc, #356]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001cb8:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001cbc:	4b57      	ldr	r3, [pc, #348]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001cc4:	e006      	b.n	8001cd4 <HAL_TIM_PeriodElapsedCallback+0x450>
 8001cc6:	4b55      	ldr	r3, [pc, #340]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001cc8:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001ccc:	4b53      	ldr	r3, [pc, #332]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	6413      	str	r3, [r2, #64]	@ 0x40
		  LeftW.PWM_Value = LeftW.PWM_Value - 5;
 8001cd4:	4b52      	ldr	r3, [pc, #328]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001cd6:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001cda:	3b05      	subs	r3, #5
 8001cdc:	4a50      	ldr	r2, [pc, #320]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001cde:	f8c2 316c 	str.w	r3, [r2, #364]	@ 0x16c
			__HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel, LeftW.PWM_Value);
 8001ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001ce4:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d106      	bne.n	8001cfa <HAL_TIM_PeriodElapsedCallback+0x476>
 8001cec:	4b4c      	ldr	r3, [pc, #304]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001cee:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8001cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001cf8:	e08a      	b.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0x58c>
			__HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel, LeftW.PWM_Value);
 8001cfa:	4b49      	ldr	r3, [pc, #292]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001cfc:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d107      	bne.n	8001d14 <HAL_TIM_PeriodElapsedCallback+0x490>
 8001d04:	4b46      	ldr	r3, [pc, #280]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001d06:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001d0a:	4b45      	ldr	r3, [pc, #276]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d12:	e07d      	b.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0x58c>
 8001d14:	4b42      	ldr	r3, [pc, #264]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001d16:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d107      	bne.n	8001d2e <HAL_TIM_PeriodElapsedCallback+0x4aa>
 8001d1e:	4b40      	ldr	r3, [pc, #256]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001d20:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001d24:	4b3e      	ldr	r3, [pc, #248]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d2c:	e070      	b.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0x58c>
 8001d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001d30:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001d34:	4b3a      	ldr	r3, [pc, #232]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001d3c:	e068      	b.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0x58c>
	  RightW.PWM_Value = RightW.PWM_Value - 5;
 8001d3e:	4b37      	ldr	r3, [pc, #220]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001d40:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001d44:	3b05      	subs	r3, #5
 8001d46:	4a35      	ldr	r2, [pc, #212]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001d48:	f8c2 316c 	str.w	r3, [r2, #364]	@ 0x16c
		__HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value);
 8001d4c:	4b33      	ldr	r3, [pc, #204]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001d4e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_TIM_PeriodElapsedCallback+0x4e0>
 8001d56:	4b31      	ldr	r3, [pc, #196]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001d58:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8001d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d62:	e020      	b.n	8001da6 <HAL_TIM_PeriodElapsedCallback+0x522>
 8001d64:	4b2d      	ldr	r3, [pc, #180]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001d66:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d107      	bne.n	8001d7e <HAL_TIM_PeriodElapsedCallback+0x4fa>
 8001d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001d70:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001d74:	4b29      	ldr	r3, [pc, #164]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d7c:	e013      	b.n	8001da6 <HAL_TIM_PeriodElapsedCallback+0x522>
 8001d7e:	4b27      	ldr	r3, [pc, #156]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001d80:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d107      	bne.n	8001d98 <HAL_TIM_PeriodElapsedCallback+0x514>
 8001d88:	4b24      	ldr	r3, [pc, #144]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001d8a:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001d8e:	4b23      	ldr	r3, [pc, #140]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d96:	e006      	b.n	8001da6 <HAL_TIM_PeriodElapsedCallback+0x522>
 8001d98:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001d9a:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	6413      	str	r3, [r2, #64]	@ 0x40
		  LeftW.PWM_Value = LeftW.PWM_Value + 5;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001da8:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001dac:	3305      	adds	r3, #5
 8001dae:	4a1c      	ldr	r2, [pc, #112]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001db0:	f8c2 316c 	str.w	r3, [r2, #364]	@ 0x16c
			__HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel, LeftW.PWM_Value);
 8001db4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001db6:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_TIM_PeriodElapsedCallback+0x548>
 8001dbe:	4b18      	ldr	r3, [pc, #96]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001dc0:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8001dc4:	4b16      	ldr	r3, [pc, #88]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001dca:	e021      	b.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0x58c>
			__HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel, LeftW.PWM_Value);
 8001dcc:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001dce:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d107      	bne.n	8001de6 <HAL_TIM_PeriodElapsedCallback+0x562>
 8001dd6:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001dd8:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001ddc:	4b10      	ldr	r3, [pc, #64]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001de4:	e014      	b.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0x58c>
			__HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel, LeftW.PWM_Value);
 8001de6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001de8:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d107      	bne.n	8001e00 <HAL_TIM_PeriodElapsedCallback+0x57c>
 8001df0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001df2:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001df6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001dfe:	e007      	b.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0x58c>
			__HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel, LeftW.PWM_Value);
 8001e00:	4b07      	ldr	r3, [pc, #28]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001e02:	f8d3 116c 	ldr.w	r1, [r3, #364]	@ 0x16c
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001e0e:	e7ff      	b.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0x58c>
 8001e10:	bf00      	nop
 8001e12:	371c      	adds	r7, #28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200004b0 	.word	0x200004b0
 8001e20:	200002b0 	.word	0x200002b0

08001e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e28:	b672      	cpsid	i
}
 8001e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <Error_Handler+0x8>

08001e30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e46:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4b09      	ldr	r3, [pc, #36]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	4a08      	ldr	r2, [pc, #32]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800

08001e80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	@ 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f58 <HAL_ADC_MspInit+0xd8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d156      	bne.n	8001f50 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f5c <HAL_ADC_MspInit+0xdc>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8001f5c <HAL_ADC_MspInit+0xdc>)
 8001eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f5c <HAL_ADC_MspInit+0xdc>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b26      	ldr	r3, [pc, #152]	@ (8001f5c <HAL_ADC_MspInit+0xdc>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a25      	ldr	r2, [pc, #148]	@ (8001f5c <HAL_ADC_MspInit+0xdc>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b23      	ldr	r3, [pc, #140]	@ (8001f5c <HAL_ADC_MspInit+0xdc>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eda:	2303      	movs	r3, #3
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	481c      	ldr	r0, [pc, #112]	@ (8001f60 <HAL_ADC_MspInit+0xe0>)
 8001eee:	f001 f921 	bl	8003134 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f64 <HAL_ADC_MspInit+0xe4>)
 8001ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f68 <HAL_ADC_MspInit+0xe8>)
 8001ef6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f64 <HAL_ADC_MspInit+0xe4>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001efe:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <HAL_ADC_MspInit+0xe4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f04:	4b17      	ldr	r3, [pc, #92]	@ (8001f64 <HAL_ADC_MspInit+0xe4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f0a:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <HAL_ADC_MspInit+0xe4>)
 8001f0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f12:	4b14      	ldr	r3, [pc, #80]	@ (8001f64 <HAL_ADC_MspInit+0xe4>)
 8001f14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f1a:	4b12      	ldr	r3, [pc, #72]	@ (8001f64 <HAL_ADC_MspInit+0xe4>)
 8001f1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <HAL_ADC_MspInit+0xe4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f28:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <HAL_ADC_MspInit+0xe4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <HAL_ADC_MspInit+0xe4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f34:	480b      	ldr	r0, [pc, #44]	@ (8001f64 <HAL_ADC_MspInit+0xe4>)
 8001f36:	f000 fe13 	bl	8002b60 <HAL_DMA_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001f40:	f7ff ff70 	bl	8001e24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a07      	ldr	r2, [pc, #28]	@ (8001f64 <HAL_ADC_MspInit+0xe4>)
 8001f48:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f4a:	4a06      	ldr	r2, [pc, #24]	@ (8001f64 <HAL_ADC_MspInit+0xe4>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f50:	bf00      	nop
 8001f52:	3728      	adds	r7, #40	@ 0x28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40012000 	.word	0x40012000
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40020000 	.word	0x40020000
 8001f64:	20000074 	.word	0x20000074
 8001f68:	40026410 	.word	0x40026410

08001f6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08c      	sub	sp, #48	@ 0x30
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a3b      	ldr	r2, [pc, #236]	@ (8002078 <HAL_I2C_MspInit+0x10c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d12d      	bne.n	8001fea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	4b3a      	ldr	r3, [pc, #232]	@ (800207c <HAL_I2C_MspInit+0x110>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a39      	ldr	r2, [pc, #228]	@ (800207c <HAL_I2C_MspInit+0x110>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b37      	ldr	r3, [pc, #220]	@ (800207c <HAL_I2C_MspInit+0x110>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001faa:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb0:	2312      	movs	r3, #18
 8001fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	482e      	ldr	r0, [pc, #184]	@ (8002080 <HAL_I2C_MspInit+0x114>)
 8001fc8:	f001 f8b4 	bl	8003134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800207c <HAL_I2C_MspInit+0x110>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	4a29      	ldr	r2, [pc, #164]	@ (800207c <HAL_I2C_MspInit+0x110>)
 8001fd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fdc:	4b27      	ldr	r3, [pc, #156]	@ (800207c <HAL_I2C_MspInit+0x110>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fe8:	e041      	b.n	800206e <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a25      	ldr	r2, [pc, #148]	@ (8002084 <HAL_I2C_MspInit+0x118>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d13c      	bne.n	800206e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	4b20      	ldr	r3, [pc, #128]	@ (800207c <HAL_I2C_MspInit+0x110>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800207c <HAL_I2C_MspInit+0x110>)
 8001ffe:	f043 0302 	orr.w	r3, r3, #2
 8002002:	6313      	str	r3, [r2, #48]	@ 0x30
 8002004:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <HAL_I2C_MspInit+0x110>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002010:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002016:	2312      	movs	r3, #18
 8002018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002022:	2304      	movs	r3, #4
 8002024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 031c 	add.w	r3, r7, #28
 800202a:	4619      	mov	r1, r3
 800202c:	4814      	ldr	r0, [pc, #80]	@ (8002080 <HAL_I2C_MspInit+0x114>)
 800202e:	f001 f881 	bl	8003134 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002032:	2308      	movs	r3, #8
 8002034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002036:	2312      	movs	r3, #18
 8002038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002042:	2309      	movs	r3, #9
 8002044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	480c      	ldr	r0, [pc, #48]	@ (8002080 <HAL_I2C_MspInit+0x114>)
 800204e:	f001 f871 	bl	8003134 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b09      	ldr	r3, [pc, #36]	@ (800207c <HAL_I2C_MspInit+0x110>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	4a08      	ldr	r2, [pc, #32]	@ (800207c <HAL_I2C_MspInit+0x110>)
 800205c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002060:	6413      	str	r3, [r2, #64]	@ 0x40
 8002062:	4b06      	ldr	r3, [pc, #24]	@ (800207c <HAL_I2C_MspInit+0x110>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
}
 800206e:	bf00      	nop
 8002070:	3730      	adds	r7, #48	@ 0x30
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40005400 	.word	0x40005400
 800207c:	40023800 	.word	0x40023800
 8002080:	40020400 	.word	0x40020400
 8002084:	40005800 	.word	0x40005800

08002088 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	@ 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a19      	ldr	r2, [pc, #100]	@ (800210c <HAL_SPI_MspInit+0x84>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d12c      	bne.n	8002104 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <HAL_SPI_MspInit+0x88>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	4a17      	ldr	r2, [pc, #92]	@ (8002110 <HAL_SPI_MspInit+0x88>)
 80020b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ba:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <HAL_SPI_MspInit+0x88>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <HAL_SPI_MspInit+0x88>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4a10      	ldr	r2, [pc, #64]	@ (8002110 <HAL_SPI_MspInit+0x88>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_SPI_MspInit+0x88>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80020e2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f0:	2303      	movs	r3, #3
 80020f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020f4:	2305      	movs	r3, #5
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4619      	mov	r1, r3
 80020fe:	4805      	ldr	r0, [pc, #20]	@ (8002114 <HAL_SPI_MspInit+0x8c>)
 8002100:	f001 f818 	bl	8003134 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002104:	bf00      	nop
 8002106:	3728      	adds	r7, #40	@ 0x28
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40003800 	.word	0x40003800
 8002110:	40023800 	.word	0x40023800
 8002114:	40020400 	.word	0x40020400

08002118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a18      	ldr	r2, [pc, #96]	@ (8002188 <HAL_TIM_Base_MspInit+0x70>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d10e      	bne.n	8002148 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b17      	ldr	r3, [pc, #92]	@ (800218c <HAL_TIM_Base_MspInit+0x74>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	4a16      	ldr	r2, [pc, #88]	@ (800218c <HAL_TIM_Base_MspInit+0x74>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6453      	str	r3, [r2, #68]	@ 0x44
 800213a:	4b14      	ldr	r3, [pc, #80]	@ (800218c <HAL_TIM_Base_MspInit+0x74>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002146:	e01a      	b.n	800217e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002150:	d115      	bne.n	800217e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	4b0d      	ldr	r3, [pc, #52]	@ (800218c <HAL_TIM_Base_MspInit+0x74>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	4a0c      	ldr	r2, [pc, #48]	@ (800218c <HAL_TIM_Base_MspInit+0x74>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6413      	str	r3, [r2, #64]	@ 0x40
 8002162:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <HAL_TIM_Base_MspInit+0x74>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2100      	movs	r1, #0
 8002172:	201c      	movs	r0, #28
 8002174:	f000 fcbd 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002178:	201c      	movs	r0, #28
 800217a:	f000 fcd6 	bl	8002b2a <HAL_NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40010000 	.word	0x40010000
 800218c:	40023800 	.word	0x40023800

08002190 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a12      	ldr	r2, [pc, #72]	@ (80021f8 <HAL_TIM_MspPostInit+0x68>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d11e      	bne.n	80021f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <HAL_TIM_MspPostInit+0x6c>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	4a10      	ldr	r2, [pc, #64]	@ (80021fc <HAL_TIM_MspPostInit+0x6c>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c2:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <HAL_TIM_MspPostInit+0x6c>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80021ce:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80021d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021dc:	2302      	movs	r3, #2
 80021de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021e0:	2301      	movs	r3, #1
 80021e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	4619      	mov	r1, r3
 80021ea:	4805      	ldr	r0, [pc, #20]	@ (8002200 <HAL_TIM_MspPostInit+0x70>)
 80021ec:	f000 ffa2 	bl	8003134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021f0:	bf00      	nop
 80021f2:	3720      	adds	r7, #32
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40010000 	.word	0x40010000
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020000 	.word	0x40020000

08002204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	@ 0x28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a19      	ldr	r2, [pc, #100]	@ (8002288 <HAL_UART_MspInit+0x84>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d12c      	bne.n	8002280 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	4b18      	ldr	r3, [pc, #96]	@ (800228c <HAL_UART_MspInit+0x88>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	4a17      	ldr	r2, [pc, #92]	@ (800228c <HAL_UART_MspInit+0x88>)
 8002230:	f043 0310 	orr.w	r3, r3, #16
 8002234:	6453      	str	r3, [r2, #68]	@ 0x44
 8002236:	4b15      	ldr	r3, [pc, #84]	@ (800228c <HAL_UART_MspInit+0x88>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b11      	ldr	r3, [pc, #68]	@ (800228c <HAL_UART_MspInit+0x88>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	4a10      	ldr	r2, [pc, #64]	@ (800228c <HAL_UART_MspInit+0x88>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6313      	str	r3, [r2, #48]	@ 0x30
 8002252:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <HAL_UART_MspInit+0x88>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800225e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002270:	2307      	movs	r3, #7
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4619      	mov	r1, r3
 800227a:	4805      	ldr	r0, [pc, #20]	@ (8002290 <HAL_UART_MspInit+0x8c>)
 800227c:	f000 ff5a 	bl	8003134 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002280:	bf00      	nop
 8002282:	3728      	adds	r7, #40	@ 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40011000 	.word	0x40011000
 800228c:	40023800 	.word	0x40023800
 8002290:	40020000 	.word	0x40020000

08002294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <NMI_Handler+0x4>

0800229c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <HardFault_Handler+0x4>

080022a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <MemManage_Handler+0x4>

080022ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <BusFault_Handler+0x4>

080022b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <UsageFault_Handler+0x4>

080022bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ea:	f000 f8a5 	bl	8002438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <TIM2_IRQHandler+0x10>)
 80022fa:	f002 fdbb 	bl	8004e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	2000021c 	.word	0x2000021c

08002308 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800230c:	4802      	ldr	r0, [pc, #8]	@ (8002318 <DMA2_Stream0_IRQHandler+0x10>)
 800230e:	f000 fcd5 	bl	8002cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000074 	.word	0x20000074

0800231c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002320:	4b06      	ldr	r3, [pc, #24]	@ (800233c <SystemInit+0x20>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002326:	4a05      	ldr	r2, [pc, #20]	@ (800233c <SystemInit+0x20>)
 8002328:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800232c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002340:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002378 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002344:	f7ff ffea 	bl	800231c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002348:	480c      	ldr	r0, [pc, #48]	@ (800237c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800234a:	490d      	ldr	r1, [pc, #52]	@ (8002380 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800234c:	4a0d      	ldr	r2, [pc, #52]	@ (8002384 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002350:	e002      	b.n	8002358 <LoopCopyDataInit>

08002352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002356:	3304      	adds	r3, #4

08002358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800235c:	d3f9      	bcc.n	8002352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800235e:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002360:	4c0a      	ldr	r4, [pc, #40]	@ (800238c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002364:	e001      	b.n	800236a <LoopFillZerobss>

08002366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002368:	3204      	adds	r2, #4

0800236a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800236c:	d3fb      	bcc.n	8002366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800236e:	f003 fe9b 	bl	80060a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002372:	f7fe ff0b 	bl	800118c <main>
  bx  lr    
 8002376:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002378:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800237c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002380:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002384:	08006154 	.word	0x08006154
  ldr r2, =_sbss
 8002388:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800238c:	200006bc 	.word	0x200006bc

08002390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002390:	e7fe      	b.n	8002390 <ADC_IRQHandler>
	...

08002394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002398:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <HAL_Init+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0d      	ldr	r2, [pc, #52]	@ (80023d4 <HAL_Init+0x40>)
 800239e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023a4:	4b0b      	ldr	r3, [pc, #44]	@ (80023d4 <HAL_Init+0x40>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0a      	ldr	r2, [pc, #40]	@ (80023d4 <HAL_Init+0x40>)
 80023aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b0:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <HAL_Init+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a07      	ldr	r2, [pc, #28]	@ (80023d4 <HAL_Init+0x40>)
 80023b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023bc:	2003      	movs	r0, #3
 80023be:	f000 fb8d 	bl	8002adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023c2:	200f      	movs	r0, #15
 80023c4:	f000 f808 	bl	80023d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c8:	f7ff fd32 	bl	8001e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023c00 	.word	0x40023c00

080023d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023e0:	4b12      	ldr	r3, [pc, #72]	@ (800242c <HAL_InitTick+0x54>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <HAL_InitTick+0x58>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fba5 	bl	8002b46 <HAL_SYSTICK_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e00e      	b.n	8002424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b0f      	cmp	r3, #15
 800240a:	d80a      	bhi.n	8002422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800240c:	2200      	movs	r2, #0
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
 8002414:	f000 fb6d 	bl	8002af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002418:	4a06      	ldr	r2, [pc, #24]	@ (8002434 <HAL_InitTick+0x5c>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e000      	b.n	8002424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000000 	.word	0x20000000
 8002430:	20000008 	.word	0x20000008
 8002434:	20000004 	.word	0x20000004

08002438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800243c:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_IncTick+0x20>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	4b06      	ldr	r3, [pc, #24]	@ (800245c <HAL_IncTick+0x24>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4413      	add	r3, r2
 8002448:	4a04      	ldr	r2, [pc, #16]	@ (800245c <HAL_IncTick+0x24>)
 800244a:	6013      	str	r3, [r2, #0]
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000008 	.word	0x20000008
 800245c:	200006b8 	.word	0x200006b8

08002460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return uwTick;
 8002464:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <HAL_GetTick+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	200006b8 	.word	0x200006b8

08002478 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e033      	b.n	80024f6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fcf2 	bl	8001e80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d118      	bne.n	80024e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024be:	f023 0302 	bic.w	r3, r3, #2
 80024c2:	f043 0202 	orr.w	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f93a 	bl	8002744 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80024e6:	e001      	b.n	80024ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x1c>
 8002518:	2302      	movs	r3, #2
 800251a:	e105      	b.n	8002728 <HAL_ADC_ConfigChannel+0x228>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b09      	cmp	r3, #9
 800252a:	d925      	bls.n	8002578 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68d9      	ldr	r1, [r3, #12]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	4613      	mov	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4413      	add	r3, r2
 8002540:	3b1e      	subs	r3, #30
 8002542:	2207      	movs	r2, #7
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43da      	mvns	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	400a      	ands	r2, r1
 8002550:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68d9      	ldr	r1, [r3, #12]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	4618      	mov	r0, r3
 8002564:	4603      	mov	r3, r0
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4403      	add	r3, r0
 800256a:	3b1e      	subs	r3, #30
 800256c:	409a      	lsls	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	e022      	b.n	80025be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6919      	ldr	r1, [r3, #16]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	2207      	movs	r2, #7
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43da      	mvns	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	400a      	ands	r2, r1
 800259a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6919      	ldr	r1, [r3, #16]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	4618      	mov	r0, r3
 80025ae:	4603      	mov	r3, r0
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4403      	add	r3, r0
 80025b4:	409a      	lsls	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d824      	bhi.n	8002610 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	3b05      	subs	r3, #5
 80025d8:	221f      	movs	r2, #31
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	400a      	ands	r2, r1
 80025e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	4618      	mov	r0, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3b05      	subs	r3, #5
 8002602:	fa00 f203 	lsl.w	r2, r0, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	635a      	str	r2, [r3, #52]	@ 0x34
 800260e:	e04c      	b.n	80026aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b0c      	cmp	r3, #12
 8002616:	d824      	bhi.n	8002662 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	3b23      	subs	r3, #35	@ 0x23
 800262a:	221f      	movs	r2, #31
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43da      	mvns	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	400a      	ands	r2, r1
 8002638:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	b29b      	uxth	r3, r3
 8002646:	4618      	mov	r0, r3
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	3b23      	subs	r3, #35	@ 0x23
 8002654:	fa00 f203 	lsl.w	r2, r0, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002660:	e023      	b.n	80026aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	3b41      	subs	r3, #65	@ 0x41
 8002674:	221f      	movs	r2, #31
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43da      	mvns	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	400a      	ands	r2, r1
 8002682:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	4618      	mov	r0, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	3b41      	subs	r3, #65	@ 0x41
 800269e:	fa00 f203 	lsl.w	r2, r0, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026aa:	4b22      	ldr	r3, [pc, #136]	@ (8002734 <HAL_ADC_ConfigChannel+0x234>)
 80026ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a21      	ldr	r2, [pc, #132]	@ (8002738 <HAL_ADC_ConfigChannel+0x238>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d109      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1cc>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b12      	cmp	r3, #18
 80026be:	d105      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a19      	ldr	r2, [pc, #100]	@ (8002738 <HAL_ADC_ConfigChannel+0x238>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d123      	bne.n	800271e <HAL_ADC_ConfigChannel+0x21e>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d003      	beq.n	80026e6 <HAL_ADC_ConfigChannel+0x1e6>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b11      	cmp	r3, #17
 80026e4:	d11b      	bne.n	800271e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d111      	bne.n	800271e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026fa:	4b10      	ldr	r3, [pc, #64]	@ (800273c <HAL_ADC_ConfigChannel+0x23c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a10      	ldr	r2, [pc, #64]	@ (8002740 <HAL_ADC_ConfigChannel+0x240>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	0c9a      	lsrs	r2, r3, #18
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002710:	e002      	b.n	8002718 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	3b01      	subs	r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f9      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	40012300 	.word	0x40012300
 8002738:	40012000 	.word	0x40012000
 800273c:	20000000 	.word	0x20000000
 8002740:	431bde83 	.word	0x431bde83

08002744 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800274c:	4b79      	ldr	r3, [pc, #484]	@ (8002934 <ADC_Init+0x1f0>)
 800274e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	431a      	orrs	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002778:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	021a      	lsls	r2, r3, #8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800279c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6899      	ldr	r1, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d6:	4a58      	ldr	r2, [pc, #352]	@ (8002938 <ADC_Init+0x1f4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d022      	beq.n	8002822 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800280c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6899      	ldr	r1, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	e00f      	b.n	8002842 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002830:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002840:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0202 	bic.w	r2, r2, #2
 8002850:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6899      	ldr	r1, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7e1b      	ldrb	r3, [r3, #24]
 800285c:	005a      	lsls	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01b      	beq.n	80028a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800287e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800288e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6859      	ldr	r1, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	3b01      	subs	r3, #1
 800289c:	035a      	lsls	r2, r3, #13
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	e007      	b.n	80028b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	051a      	lsls	r2, r3, #20
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6899      	ldr	r1, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028fa:	025a      	lsls	r2, r3, #9
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	029a      	lsls	r2, r3, #10
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	609a      	str	r2, [r3, #8]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	40012300 	.word	0x40012300
 8002938:	0f000001 	.word	0x0f000001

0800293c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800296c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296e:	4a04      	ldr	r2, [pc, #16]	@ (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	60d3      	str	r3, [r2, #12]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002988:	4b04      	ldr	r3, [pc, #16]	@ (800299c <__NVIC_GetPriorityGrouping+0x18>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	0a1b      	lsrs	r3, r3, #8
 800298e:	f003 0307 	and.w	r3, r3, #7
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	db0b      	blt.n	80029ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4907      	ldr	r1, [pc, #28]	@ (80029d8 <__NVIC_EnableIRQ+0x38>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2001      	movs	r0, #1
 80029c2:	fa00 f202 	lsl.w	r2, r0, r2
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000e100 	.word	0xe000e100

080029dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	db0a      	blt.n	8002a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	490c      	ldr	r1, [pc, #48]	@ (8002a28 <__NVIC_SetPriority+0x4c>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	440b      	add	r3, r1
 8002a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a04:	e00a      	b.n	8002a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4908      	ldr	r1, [pc, #32]	@ (8002a2c <__NVIC_SetPriority+0x50>)
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	3b04      	subs	r3, #4
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	440b      	add	r3, r1
 8002a1a:	761a      	strb	r2, [r3, #24]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000e100 	.word	0xe000e100
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	@ 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f1c3 0307 	rsb	r3, r3, #7
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	bf28      	it	cs
 8002a4e:	2304      	movcs	r3, #4
 8002a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d902      	bls.n	8002a60 <NVIC_EncodePriority+0x30>
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3b03      	subs	r3, #3
 8002a5e:	e000      	b.n	8002a62 <NVIC_EncodePriority+0x32>
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	401a      	ands	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43d9      	mvns	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a88:	4313      	orrs	r3, r2
         );
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3724      	adds	r7, #36	@ 0x24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aa8:	d301      	bcc.n	8002aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00f      	b.n	8002ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aae:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad8 <SysTick_Config+0x40>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ab6:	210f      	movs	r1, #15
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8002abc:	f7ff ff8e 	bl	80029dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <SysTick_Config+0x40>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac6:	4b04      	ldr	r3, [pc, #16]	@ (8002ad8 <SysTick_Config+0x40>)
 8002ac8:	2207      	movs	r2, #7
 8002aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	e000e010 	.word	0xe000e010

08002adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ff29 	bl	800293c <__NVIC_SetPriorityGrouping>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b086      	sub	sp, #24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b04:	f7ff ff3e 	bl	8002984 <__NVIC_GetPriorityGrouping>
 8002b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	6978      	ldr	r0, [r7, #20]
 8002b10:	f7ff ff8e 	bl	8002a30 <NVIC_EncodePriority>
 8002b14:	4602      	mov	r2, r0
 8002b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff5d 	bl	80029dc <__NVIC_SetPriority>
}
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff31 	bl	80029a0 <__NVIC_EnableIRQ>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ffa2 	bl	8002a98 <SysTick_Config>
 8002b54:	4603      	mov	r3, r0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b6c:	f7ff fc78 	bl	8002460 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e099      	b.n	8002cb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b9c:	e00f      	b.n	8002bbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b9e:	f7ff fc5f 	bl	8002460 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	d908      	bls.n	8002bbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e078      	b.n	8002cb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1e8      	bne.n	8002b9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4b38      	ldr	r3, [pc, #224]	@ (8002cb8 <HAL_DMA_Init+0x158>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d107      	bne.n	8002c28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c20:	4313      	orrs	r3, r2
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f023 0307 	bic.w	r3, r3, #7
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d117      	bne.n	8002c82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00e      	beq.n	8002c82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f9e9 	bl	800303c <DMA_CheckFifoParam>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2240      	movs	r2, #64	@ 0x40
 8002c74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e016      	b.n	8002cb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f9a0 	bl	8002fd0 <DMA_CalcBaseAndBitshift>
 8002c90:	4603      	mov	r3, r0
 8002c92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c98:	223f      	movs	r2, #63	@ 0x3f
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	f010803f 	.word	0xf010803f

08002cbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cc8:	4b8e      	ldr	r3, [pc, #568]	@ (8002f04 <HAL_DMA_IRQHandler+0x248>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a8e      	ldr	r2, [pc, #568]	@ (8002f08 <HAL_DMA_IRQHandler+0x24c>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0a9b      	lsrs	r3, r3, #10
 8002cd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01a      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0204 	bic.w	r2, r2, #4
 8002d0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d14:	2208      	movs	r2, #8
 8002d16:	409a      	lsls	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d012      	beq.n	8002d5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d56:	f043 0202 	orr.w	r2, r3, #2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d62:	2204      	movs	r2, #4
 8002d64:	409a      	lsls	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d012      	beq.n	8002d94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d80:	2204      	movs	r2, #4
 8002d82:	409a      	lsls	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8c:	f043 0204 	orr.w	r2, r3, #4
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d98:	2210      	movs	r2, #16
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d043      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d03c      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db6:	2210      	movs	r2, #16
 8002db8:	409a      	lsls	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d018      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d024      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4798      	blx	r3
 8002dea:	e01f      	b.n	8002e2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01b      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
 8002dfc:	e016      	b.n	8002e2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d107      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0208 	bic.w	r2, r2, #8
 8002e1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e30:	2220      	movs	r2, #32
 8002e32:	409a      	lsls	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 808f 	beq.w	8002f5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8087 	beq.w	8002f5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e52:	2220      	movs	r2, #32
 8002e54:	409a      	lsls	r2, r3
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b05      	cmp	r3, #5
 8002e64:	d136      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0216 	bic.w	r2, r2, #22
 8002e74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <HAL_DMA_IRQHandler+0x1da>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0208 	bic.w	r2, r2, #8
 8002ea4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eaa:	223f      	movs	r2, #63	@ 0x3f
 8002eac:	409a      	lsls	r2, r3
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d07e      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	4798      	blx	r3
        }
        return;
 8002ed2:	e079      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d01d      	beq.n	8002f1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10d      	bne.n	8002f0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d031      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
 8002f00:	e02c      	b.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
 8002f02:	bf00      	nop
 8002f04:	20000000 	.word	0x20000000
 8002f08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d023      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
 8002f1c:	e01e      	b.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10f      	bne.n	8002f4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0210 	bic.w	r2, r2, #16
 8002f3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d032      	beq.n	8002fca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d022      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2205      	movs	r2, #5
 8002f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d307      	bcc.n	8002fa4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f2      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x2cc>
 8002fa2:	e000      	b.n	8002fa6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fa4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4798      	blx	r3
 8002fc6:	e000      	b.n	8002fca <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fc8:	bf00      	nop
    }
  }
}
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3b10      	subs	r3, #16
 8002fe0:	4a14      	ldr	r2, [pc, #80]	@ (8003034 <DMA_CalcBaseAndBitshift+0x64>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fea:	4a13      	ldr	r2, [pc, #76]	@ (8003038 <DMA_CalcBaseAndBitshift+0x68>)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d909      	bls.n	8003012 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003006:	f023 0303 	bic.w	r3, r3, #3
 800300a:	1d1a      	adds	r2, r3, #4
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003010:	e007      	b.n	8003022 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	aaaaaaab 	.word	0xaaaaaaab
 8003038:	0800613c 	.word	0x0800613c

0800303c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d11f      	bne.n	8003096 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d856      	bhi.n	800310a <DMA_CheckFifoParam+0xce>
 800305c:	a201      	add	r2, pc, #4	@ (adr r2, 8003064 <DMA_CheckFifoParam+0x28>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003075 	.word	0x08003075
 8003068:	08003087 	.word	0x08003087
 800306c:	08003075 	.word	0x08003075
 8003070:	0800310b 	.word	0x0800310b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d046      	beq.n	800310e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003084:	e043      	b.n	800310e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800308e:	d140      	bne.n	8003112 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003094:	e03d      	b.n	8003112 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800309e:	d121      	bne.n	80030e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d837      	bhi.n	8003116 <DMA_CheckFifoParam+0xda>
 80030a6:	a201      	add	r2, pc, #4	@ (adr r2, 80030ac <DMA_CheckFifoParam+0x70>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030c3 	.word	0x080030c3
 80030b4:	080030bd 	.word	0x080030bd
 80030b8:	080030d5 	.word	0x080030d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	e030      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d025      	beq.n	800311a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d2:	e022      	b.n	800311a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030dc:	d11f      	bne.n	800311e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030e2:	e01c      	b.n	800311e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d903      	bls.n	80030f2 <DMA_CheckFifoParam+0xb6>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d003      	beq.n	80030f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030f0:	e018      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      break;
 80030f6:	e015      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00e      	beq.n	8003122 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      break;
 8003108:	e00b      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;
 800310a:	bf00      	nop
 800310c:	e00a      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 800310e:	bf00      	nop
 8003110:	e008      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 8003112:	bf00      	nop
 8003114:	e006      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 8003116:	bf00      	nop
 8003118:	e004      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 800311a:	bf00      	nop
 800311c:	e002      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;   
 800311e:	bf00      	nop
 8003120:	e000      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 8003122:	bf00      	nop
    }
  } 
  
  return status; 
 8003124:	7bfb      	ldrb	r3, [r7, #15]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop

08003134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	@ 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003146:	2300      	movs	r3, #0
 8003148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	e159      	b.n	8003404 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003150:	2201      	movs	r2, #1
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	429a      	cmp	r2, r3
 800316a:	f040 8148 	bne.w	80033fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d005      	beq.n	8003186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003182:	2b02      	cmp	r3, #2
 8003184:	d130      	bne.n	80031e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	2203      	movs	r2, #3
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031bc:	2201      	movs	r2, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 0201 	and.w	r2, r3, #1
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d017      	beq.n	8003224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	2203      	movs	r2, #3
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d123      	bne.n	8003278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	08da      	lsrs	r2, r3, #3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3208      	adds	r2, #8
 8003238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	220f      	movs	r2, #15
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	08da      	lsrs	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3208      	adds	r2, #8
 8003272:	69b9      	ldr	r1, [r7, #24]
 8003274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	2203      	movs	r2, #3
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0203 	and.w	r2, r3, #3
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80a2 	beq.w	80033fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4b57      	ldr	r3, [pc, #348]	@ (800341c <HAL_GPIO_Init+0x2e8>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	4a56      	ldr	r2, [pc, #344]	@ (800341c <HAL_GPIO_Init+0x2e8>)
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ca:	4b54      	ldr	r3, [pc, #336]	@ (800341c <HAL_GPIO_Init+0x2e8>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032d6:	4a52      	ldr	r2, [pc, #328]	@ (8003420 <HAL_GPIO_Init+0x2ec>)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	3302      	adds	r3, #2
 80032de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	220f      	movs	r2, #15
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a49      	ldr	r2, [pc, #292]	@ (8003424 <HAL_GPIO_Init+0x2f0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d019      	beq.n	8003336 <HAL_GPIO_Init+0x202>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a48      	ldr	r2, [pc, #288]	@ (8003428 <HAL_GPIO_Init+0x2f4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <HAL_GPIO_Init+0x1fe>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a47      	ldr	r2, [pc, #284]	@ (800342c <HAL_GPIO_Init+0x2f8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00d      	beq.n	800332e <HAL_GPIO_Init+0x1fa>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a46      	ldr	r2, [pc, #280]	@ (8003430 <HAL_GPIO_Init+0x2fc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <HAL_GPIO_Init+0x1f6>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a45      	ldr	r2, [pc, #276]	@ (8003434 <HAL_GPIO_Init+0x300>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d101      	bne.n	8003326 <HAL_GPIO_Init+0x1f2>
 8003322:	2304      	movs	r3, #4
 8003324:	e008      	b.n	8003338 <HAL_GPIO_Init+0x204>
 8003326:	2307      	movs	r3, #7
 8003328:	e006      	b.n	8003338 <HAL_GPIO_Init+0x204>
 800332a:	2303      	movs	r3, #3
 800332c:	e004      	b.n	8003338 <HAL_GPIO_Init+0x204>
 800332e:	2302      	movs	r3, #2
 8003330:	e002      	b.n	8003338 <HAL_GPIO_Init+0x204>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_GPIO_Init+0x204>
 8003336:	2300      	movs	r3, #0
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	f002 0203 	and.w	r2, r2, #3
 800333e:	0092      	lsls	r2, r2, #2
 8003340:	4093      	lsls	r3, r2
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003348:	4935      	ldr	r1, [pc, #212]	@ (8003420 <HAL_GPIO_Init+0x2ec>)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	3302      	adds	r3, #2
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003356:	4b38      	ldr	r3, [pc, #224]	@ (8003438 <HAL_GPIO_Init+0x304>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800337a:	4a2f      	ldr	r2, [pc, #188]	@ (8003438 <HAL_GPIO_Init+0x304>)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003380:	4b2d      	ldr	r3, [pc, #180]	@ (8003438 <HAL_GPIO_Init+0x304>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033a4:	4a24      	ldr	r2, [pc, #144]	@ (8003438 <HAL_GPIO_Init+0x304>)
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033aa:	4b23      	ldr	r3, [pc, #140]	@ (8003438 <HAL_GPIO_Init+0x304>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003438 <HAL_GPIO_Init+0x304>)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033d4:	4b18      	ldr	r3, [pc, #96]	@ (8003438 <HAL_GPIO_Init+0x304>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003438 <HAL_GPIO_Init+0x304>)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3301      	adds	r3, #1
 8003402:	61fb      	str	r3, [r7, #28]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	2b0f      	cmp	r3, #15
 8003408:	f67f aea2 	bls.w	8003150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	3724      	adds	r7, #36	@ 0x24
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	40013800 	.word	0x40013800
 8003424:	40020000 	.word	0x40020000
 8003428:	40020400 	.word	0x40020400
 800342c:	40020800 	.word	0x40020800
 8003430:	40020c00 	.word	0x40020c00
 8003434:	40021000 	.word	0x40021000
 8003438:	40013c00 	.word	0x40013c00

0800343c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
 8003448:	4613      	mov	r3, r2
 800344a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800344c:	787b      	ldrb	r3, [r7, #1]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003458:	e003      	b.n	8003462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800345a:	887b      	ldrh	r3, [r7, #2]
 800345c:	041a      	lsls	r2, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	619a      	str	r2, [r3, #24]
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003480:	887a      	ldrh	r2, [r7, #2]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4013      	ands	r3, r2
 8003486:	041a      	lsls	r2, r3, #16
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	43d9      	mvns	r1, r3
 800348c:	887b      	ldrh	r3, [r7, #2]
 800348e:	400b      	ands	r3, r1
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	619a      	str	r2, [r3, #24]
}
 8003496:	bf00      	nop
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e12b      	b.n	800370e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fe fd4e 	bl	8001f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2224      	movs	r2, #36	@ 0x24
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003506:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003508:	f001 fa48 	bl	800499c <HAL_RCC_GetPCLK1Freq>
 800350c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4a81      	ldr	r2, [pc, #516]	@ (8003718 <HAL_I2C_Init+0x274>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d807      	bhi.n	8003528 <HAL_I2C_Init+0x84>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a80      	ldr	r2, [pc, #512]	@ (800371c <HAL_I2C_Init+0x278>)
 800351c:	4293      	cmp	r3, r2
 800351e:	bf94      	ite	ls
 8003520:	2301      	movls	r3, #1
 8003522:	2300      	movhi	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	e006      	b.n	8003536 <HAL_I2C_Init+0x92>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4a7d      	ldr	r2, [pc, #500]	@ (8003720 <HAL_I2C_Init+0x27c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	bf94      	ite	ls
 8003530:	2301      	movls	r3, #1
 8003532:	2300      	movhi	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e0e7      	b.n	800370e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4a78      	ldr	r2, [pc, #480]	@ (8003724 <HAL_I2C_Init+0x280>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	0c9b      	lsrs	r3, r3, #18
 8003548:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4a6a      	ldr	r2, [pc, #424]	@ (8003718 <HAL_I2C_Init+0x274>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d802      	bhi.n	8003578 <HAL_I2C_Init+0xd4>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	3301      	adds	r3, #1
 8003576:	e009      	b.n	800358c <HAL_I2C_Init+0xe8>
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800357e:	fb02 f303 	mul.w	r3, r2, r3
 8003582:	4a69      	ldr	r2, [pc, #420]	@ (8003728 <HAL_I2C_Init+0x284>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	099b      	lsrs	r3, r3, #6
 800358a:	3301      	adds	r3, #1
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	430b      	orrs	r3, r1
 8003592:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800359e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	495c      	ldr	r1, [pc, #368]	@ (8003718 <HAL_I2C_Init+0x274>)
 80035a8:	428b      	cmp	r3, r1
 80035aa:	d819      	bhi.n	80035e0 <HAL_I2C_Init+0x13c>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1e59      	subs	r1, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ba:	1c59      	adds	r1, r3, #1
 80035bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035c0:	400b      	ands	r3, r1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_I2C_Init+0x138>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1e59      	subs	r1, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035d4:	3301      	adds	r3, #1
 80035d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035da:	e051      	b.n	8003680 <HAL_I2C_Init+0x1dc>
 80035dc:	2304      	movs	r3, #4
 80035de:	e04f      	b.n	8003680 <HAL_I2C_Init+0x1dc>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d111      	bne.n	800360c <HAL_I2C_Init+0x168>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1e58      	subs	r0, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6859      	ldr	r1, [r3, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	440b      	add	r3, r1
 80035f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035fa:	3301      	adds	r3, #1
 80035fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e012      	b.n	8003632 <HAL_I2C_Init+0x18e>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1e58      	subs	r0, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	0099      	lsls	r1, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003622:	3301      	adds	r3, #1
 8003624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf0c      	ite	eq
 800362c:	2301      	moveq	r3, #1
 800362e:	2300      	movne	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_I2C_Init+0x196>
 8003636:	2301      	movs	r3, #1
 8003638:	e022      	b.n	8003680 <HAL_I2C_Init+0x1dc>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10e      	bne.n	8003660 <HAL_I2C_Init+0x1bc>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1e58      	subs	r0, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6859      	ldr	r1, [r3, #4]
 800364a:	460b      	mov	r3, r1
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	440b      	add	r3, r1
 8003650:	fbb0 f3f3 	udiv	r3, r0, r3
 8003654:	3301      	adds	r3, #1
 8003656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800365e:	e00f      	b.n	8003680 <HAL_I2C_Init+0x1dc>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1e58      	subs	r0, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	0099      	lsls	r1, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	fbb0 f3f3 	udiv	r3, r0, r3
 8003676:	3301      	adds	r3, #1
 8003678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	6809      	ldr	r1, [r1, #0]
 8003684:	4313      	orrs	r3, r2
 8003686:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69da      	ldr	r2, [r3, #28]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6911      	ldr	r1, [r2, #16]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68d2      	ldr	r2, [r2, #12]
 80036ba:	4311      	orrs	r1, r2
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	430b      	orrs	r3, r1
 80036c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	000186a0 	.word	0x000186a0
 800371c:	001e847f 	.word	0x001e847f
 8003720:	003d08ff 	.word	0x003d08ff
 8003724:	431bde83 	.word	0x431bde83
 8003728:	10624dd3 	.word	0x10624dd3

0800372c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08c      	sub	sp, #48	@ 0x30
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	4608      	mov	r0, r1
 8003736:	4611      	mov	r1, r2
 8003738:	461a      	mov	r2, r3
 800373a:	4603      	mov	r3, r0
 800373c:	817b      	strh	r3, [r7, #10]
 800373e:	460b      	mov	r3, r1
 8003740:	813b      	strh	r3, [r7, #8]
 8003742:	4613      	mov	r3, r2
 8003744:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003746:	f7fe fe8b 	bl	8002460 <HAL_GetTick>
 800374a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b20      	cmp	r3, #32
 8003756:	f040 8214 	bne.w	8003b82 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	2319      	movs	r3, #25
 8003760:	2201      	movs	r2, #1
 8003762:	497b      	ldr	r1, [pc, #492]	@ (8003950 <HAL_I2C_Mem_Read+0x224>)
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fafb 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
 8003772:	e207      	b.n	8003b84 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_I2C_Mem_Read+0x56>
 800377e:	2302      	movs	r3, #2
 8003780:	e200      	b.n	8003b84 <HAL_I2C_Mem_Read+0x458>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d007      	beq.n	80037a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2222      	movs	r2, #34	@ 0x22
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2240      	movs	r2, #64	@ 0x40
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80037d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003954 <HAL_I2C_Mem_Read+0x228>)
 80037e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ea:	88f8      	ldrh	r0, [r7, #6]
 80037ec:	893a      	ldrh	r2, [r7, #8]
 80037ee:	8979      	ldrh	r1, [r7, #10]
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	4603      	mov	r3, r0
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f9c8 	bl	8003b90 <I2C_RequestMemoryRead>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e1bc      	b.n	8003b84 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380e:	2b00      	cmp	r3, #0
 8003810:	d113      	bne.n	800383a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003812:	2300      	movs	r3, #0
 8003814:	623b      	str	r3, [r7, #32]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	623b      	str	r3, [r7, #32]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	623b      	str	r3, [r7, #32]
 8003826:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e190      	b.n	8003b5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383e:	2b01      	cmp	r3, #1
 8003840:	d11b      	bne.n	800387a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003850:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e170      	b.n	8003b5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387e:	2b02      	cmp	r3, #2
 8003880:	d11b      	bne.n	80038ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003890:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a2:	2300      	movs	r3, #0
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	e150      	b.n	8003b5c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038d0:	e144      	b.n	8003b5c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	f200 80f1 	bhi.w	8003abe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d123      	bne.n	800392c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fb9b 	bl	8004024 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e145      	b.n	8003b84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800392a:	e117      	b.n	8003b5c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003930:	2b02      	cmp	r3, #2
 8003932:	d14e      	bne.n	80039d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800393a:	2200      	movs	r2, #0
 800393c:	4906      	ldr	r1, [pc, #24]	@ (8003958 <HAL_I2C_Mem_Read+0x22c>)
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fa0e 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e11a      	b.n	8003b84 <HAL_I2C_Mem_Read+0x458>
 800394e:	bf00      	nop
 8003950:	00100002 	.word	0x00100002
 8003954:	ffff0000 	.word	0xffff0000
 8003958:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800396a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039d0:	e0c4      	b.n	8003b5c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d8:	2200      	movs	r2, #0
 80039da:	496c      	ldr	r1, [pc, #432]	@ (8003b8c <HAL_I2C_Mem_Read+0x460>)
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f9bf 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0cb      	b.n	8003b84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a34:	2200      	movs	r2, #0
 8003a36:	4955      	ldr	r1, [pc, #340]	@ (8003b8c <HAL_I2C_Mem_Read+0x460>)
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f991 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e09d      	b.n	8003b84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003abc:	e04e      	b.n	8003b5c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 faae 	bl	8004024 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e058      	b.n	8003b84 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d124      	bne.n	8003b5c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d107      	bne.n	8003b2a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b28:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f47f aeb6 	bne.w	80038d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e000      	b.n	8003b84 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003b82:	2302      	movs	r3, #2
  }
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3728      	adds	r7, #40	@ 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	00010004 	.word	0x00010004

08003b90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	4608      	mov	r0, r1
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	817b      	strh	r3, [r7, #10]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	813b      	strh	r3, [r7, #8]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bb8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f8c2 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00d      	beq.n	8003bfe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf0:	d103      	bne.n	8003bfa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bf8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e0aa      	b.n	8003d54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bfe:	897b      	ldrh	r3, [r7, #10]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	6a3a      	ldr	r2, [r7, #32]
 8003c12:	4952      	ldr	r1, [pc, #328]	@ (8003d5c <I2C_RequestMemoryRead+0x1cc>)
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f91d 	bl	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e097      	b.n	8003d54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3c:	6a39      	ldr	r1, [r7, #32]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f9a8 	bl	8003f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00d      	beq.n	8003c66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d107      	bne.n	8003c62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e076      	b.n	8003d54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d105      	bne.n	8003c78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c6c:	893b      	ldrh	r3, [r7, #8]
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	611a      	str	r2, [r3, #16]
 8003c76:	e021      	b.n	8003cbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c78:	893b      	ldrh	r3, [r7, #8]
 8003c7a:	0a1b      	lsrs	r3, r3, #8
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c88:	6a39      	ldr	r1, [r7, #32]
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f982 	bl	8003f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00d      	beq.n	8003cb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d107      	bne.n	8003cae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e050      	b.n	8003d54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cb2:	893b      	ldrh	r3, [r7, #8]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cbe:	6a39      	ldr	r1, [r7, #32]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f967 	bl	8003f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00d      	beq.n	8003ce8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d107      	bne.n	8003ce4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e035      	b.n	8003d54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 f82b 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00d      	beq.n	8003d2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d1e:	d103      	bne.n	8003d28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e013      	b.n	8003d54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d2c:	897b      	ldrh	r3, [r7, #10]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	6a3a      	ldr	r2, [r7, #32]
 8003d40:	4906      	ldr	r1, [pc, #24]	@ (8003d5c <I2C_RequestMemoryRead+0x1cc>)
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f886 	bl	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	00010002 	.word	0x00010002

08003d60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d70:	e048      	b.n	8003e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d78:	d044      	beq.n	8003e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fe fb71 	bl	8002460 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d139      	bne.n	8003e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	0c1b      	lsrs	r3, r3, #16
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d10d      	bne.n	8003db6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	43da      	mvns	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4013      	ands	r3, r2
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	e00c      	b.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	43da      	mvns	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d116      	bne.n	8003e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e023      	b.n	8003e4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	0c1b      	lsrs	r3, r3, #16
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d10d      	bne.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	43da      	mvns	r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	e00c      	b.n	8003e44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	43da      	mvns	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4013      	ands	r3, r2
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d093      	beq.n	8003d72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e62:	e071      	b.n	8003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e72:	d123      	bne.n	8003ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	f043 0204 	orr.w	r2, r3, #4
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e067      	b.n	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d041      	beq.n	8003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec4:	f7fe facc 	bl	8002460 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d302      	bcc.n	8003eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d136      	bne.n	8003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	0c1b      	lsrs	r3, r3, #16
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d10c      	bne.n	8003efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	43da      	mvns	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bf14      	ite	ne
 8003ef6:	2301      	movne	r3, #1
 8003ef8:	2300      	moveq	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	e00b      	b.n	8003f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	43da      	mvns	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bf14      	ite	ne
 8003f10:	2301      	movne	r3, #1
 8003f12:	2300      	moveq	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d016      	beq.n	8003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e021      	b.n	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	0c1b      	lsrs	r3, r3, #16
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d10c      	bne.n	8003f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	43da      	mvns	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	e00b      	b.n	8003f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	43da      	mvns	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4013      	ands	r3, r2
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bf14      	ite	ne
 8003f7e:	2301      	movne	r3, #1
 8003f80:	2300      	moveq	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f47f af6d 	bne.w	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fa0:	e034      	b.n	800400c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f89b 	bl	80040de <I2C_IsAcknowledgeFailed>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e034      	b.n	800401c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d028      	beq.n	800400c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fba:	f7fe fa51 	bl	8002460 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d302      	bcc.n	8003fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d11d      	bne.n	800400c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fda:	2b80      	cmp	r3, #128	@ 0x80
 8003fdc:	d016      	beq.n	800400c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	f043 0220 	orr.w	r2, r3, #32
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e007      	b.n	800401c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004016:	2b80      	cmp	r3, #128	@ 0x80
 8004018:	d1c3      	bne.n	8003fa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004030:	e049      	b.n	80040c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b10      	cmp	r3, #16
 800403e:	d119      	bne.n	8004074 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0210 	mvn.w	r2, #16
 8004048:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e030      	b.n	80040d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004074:	f7fe f9f4 	bl	8002460 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d11d      	bne.n	80040c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004094:	2b40      	cmp	r3, #64	@ 0x40
 8004096:	d016      	beq.n	80040c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	f043 0220 	orr.w	r2, r3, #32
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e007      	b.n	80040d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d0:	2b40      	cmp	r3, #64	@ 0x40
 80040d2:	d1ae      	bne.n	8004032 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f4:	d11b      	bne.n	800412e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	f043 0204 	orr.w	r2, r3, #4
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e267      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d075      	beq.n	8004246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800415a:	4b88      	ldr	r3, [pc, #544]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b04      	cmp	r3, #4
 8004164:	d00c      	beq.n	8004180 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004166:	4b85      	ldr	r3, [pc, #532]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800416e:	2b08      	cmp	r3, #8
 8004170:	d112      	bne.n	8004198 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004172:	4b82      	ldr	r3, [pc, #520]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800417a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800417e:	d10b      	bne.n	8004198 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004180:	4b7e      	ldr	r3, [pc, #504]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d05b      	beq.n	8004244 <HAL_RCC_OscConfig+0x108>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d157      	bne.n	8004244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e242      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a0:	d106      	bne.n	80041b0 <HAL_RCC_OscConfig+0x74>
 80041a2:	4b76      	ldr	r3, [pc, #472]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a75      	ldr	r2, [pc, #468]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e01d      	b.n	80041ec <HAL_RCC_OscConfig+0xb0>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x98>
 80041ba:	4b70      	ldr	r3, [pc, #448]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a6f      	ldr	r2, [pc, #444]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	4b6d      	ldr	r3, [pc, #436]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a6c      	ldr	r2, [pc, #432]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e00b      	b.n	80041ec <HAL_RCC_OscConfig+0xb0>
 80041d4:	4b69      	ldr	r3, [pc, #420]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a68      	ldr	r2, [pc, #416]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4b66      	ldr	r3, [pc, #408]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a65      	ldr	r2, [pc, #404]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d013      	beq.n	800421c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fe f934 	bl	8002460 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041fc:	f7fe f930 	bl	8002460 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	@ 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e207      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420e:	4b5b      	ldr	r3, [pc, #364]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0xc0>
 800421a:	e014      	b.n	8004246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fe f920 	bl	8002460 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004224:	f7fe f91c 	bl	8002460 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	@ 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e1f3      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004236:	4b51      	ldr	r3, [pc, #324]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0xe8>
 8004242:	e000      	b.n	8004246 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d063      	beq.n	800431a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004252:	4b4a      	ldr	r3, [pc, #296]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800425e:	4b47      	ldr	r3, [pc, #284]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004266:	2b08      	cmp	r3, #8
 8004268:	d11c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800426a:	4b44      	ldr	r3, [pc, #272]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d116      	bne.n	80042a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004276:	4b41      	ldr	r3, [pc, #260]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_RCC_OscConfig+0x152>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d001      	beq.n	800428e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e1c7      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428e:	4b3b      	ldr	r3, [pc, #236]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4937      	ldr	r1, [pc, #220]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a2:	e03a      	b.n	800431a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d020      	beq.n	80042ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042ac:	4b34      	ldr	r3, [pc, #208]	@ (8004380 <HAL_RCC_OscConfig+0x244>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fe f8d5 	bl	8002460 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ba:	f7fe f8d1 	bl	8002460 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e1a8      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042cc:	4b2b      	ldr	r3, [pc, #172]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d8:	4b28      	ldr	r3, [pc, #160]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4925      	ldr	r1, [pc, #148]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	600b      	str	r3, [r1, #0]
 80042ec:	e015      	b.n	800431a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ee:	4b24      	ldr	r3, [pc, #144]	@ (8004380 <HAL_RCC_OscConfig+0x244>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fe f8b4 	bl	8002460 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042fc:	f7fe f8b0 	bl	8002460 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e187      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800430e:	4b1b      	ldr	r3, [pc, #108]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d036      	beq.n	8004394 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d016      	beq.n	800435c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800432e:	4b15      	ldr	r3, [pc, #84]	@ (8004384 <HAL_RCC_OscConfig+0x248>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fe f894 	bl	8002460 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800433c:	f7fe f890 	bl	8002460 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e167      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434e:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x200>
 800435a:	e01b      	b.n	8004394 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800435c:	4b09      	ldr	r3, [pc, #36]	@ (8004384 <HAL_RCC_OscConfig+0x248>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004362:	f7fe f87d 	bl	8002460 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004368:	e00e      	b.n	8004388 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436a:	f7fe f879 	bl	8002460 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d907      	bls.n	8004388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e150      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
 800437c:	40023800 	.word	0x40023800
 8004380:	42470000 	.word	0x42470000
 8004384:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004388:	4b88      	ldr	r3, [pc, #544]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800438a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1ea      	bne.n	800436a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8097 	beq.w	80044d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a2:	2300      	movs	r3, #0
 80043a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a6:	4b81      	ldr	r3, [pc, #516]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10f      	bne.n	80043d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	4b7d      	ldr	r3, [pc, #500]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	4a7c      	ldr	r2, [pc, #496]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80043bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80043c2:	4b7a      	ldr	r3, [pc, #488]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ce:	2301      	movs	r3, #1
 80043d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d2:	4b77      	ldr	r3, [pc, #476]	@ (80045b0 <HAL_RCC_OscConfig+0x474>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d118      	bne.n	8004410 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043de:	4b74      	ldr	r3, [pc, #464]	@ (80045b0 <HAL_RCC_OscConfig+0x474>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a73      	ldr	r2, [pc, #460]	@ (80045b0 <HAL_RCC_OscConfig+0x474>)
 80043e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ea:	f7fe f839 	bl	8002460 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f2:	f7fe f835 	bl	8002460 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e10c      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004404:	4b6a      	ldr	r3, [pc, #424]	@ (80045b0 <HAL_RCC_OscConfig+0x474>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d106      	bne.n	8004426 <HAL_RCC_OscConfig+0x2ea>
 8004418:	4b64      	ldr	r3, [pc, #400]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441c:	4a63      	ldr	r2, [pc, #396]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	6713      	str	r3, [r2, #112]	@ 0x70
 8004424:	e01c      	b.n	8004460 <HAL_RCC_OscConfig+0x324>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2b05      	cmp	r3, #5
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0x30c>
 800442e:	4b5f      	ldr	r3, [pc, #380]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004432:	4a5e      	ldr	r2, [pc, #376]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004434:	f043 0304 	orr.w	r3, r3, #4
 8004438:	6713      	str	r3, [r2, #112]	@ 0x70
 800443a:	4b5c      	ldr	r3, [pc, #368]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443e:	4a5b      	ldr	r2, [pc, #364]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	6713      	str	r3, [r2, #112]	@ 0x70
 8004446:	e00b      	b.n	8004460 <HAL_RCC_OscConfig+0x324>
 8004448:	4b58      	ldr	r3, [pc, #352]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444c:	4a57      	ldr	r2, [pc, #348]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	6713      	str	r3, [r2, #112]	@ 0x70
 8004454:	4b55      	ldr	r3, [pc, #340]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004458:	4a54      	ldr	r2, [pc, #336]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800445a:	f023 0304 	bic.w	r3, r3, #4
 800445e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d015      	beq.n	8004494 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004468:	f7fd fffa 	bl	8002460 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446e:	e00a      	b.n	8004486 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004470:	f7fd fff6 	bl	8002460 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e0cb      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004486:	4b49      	ldr	r3, [pc, #292]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ee      	beq.n	8004470 <HAL_RCC_OscConfig+0x334>
 8004492:	e014      	b.n	80044be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004494:	f7fd ffe4 	bl	8002460 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fd ffe0 	bl	8002460 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e0b5      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b2:	4b3e      	ldr	r3, [pc, #248]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1ee      	bne.n	800449c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044be:	7dfb      	ldrb	r3, [r7, #23]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d105      	bne.n	80044d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c4:	4b39      	ldr	r3, [pc, #228]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	4a38      	ldr	r2, [pc, #224]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80044ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80a1 	beq.w	800461c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044da:	4b34      	ldr	r3, [pc, #208]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d05c      	beq.n	80045a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d141      	bne.n	8004572 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ee:	4b31      	ldr	r3, [pc, #196]	@ (80045b4 <HAL_RCC_OscConfig+0x478>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fd ffb4 	bl	8002460 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044fc:	f7fd ffb0 	bl	8002460 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e087      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450e:	4b27      	ldr	r3, [pc, #156]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69da      	ldr	r2, [r3, #28]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	019b      	lsls	r3, r3, #6
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004530:	085b      	lsrs	r3, r3, #1
 8004532:	3b01      	subs	r3, #1
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	061b      	lsls	r3, r3, #24
 800453e:	491b      	ldr	r1, [pc, #108]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004540:	4313      	orrs	r3, r2
 8004542:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004544:	4b1b      	ldr	r3, [pc, #108]	@ (80045b4 <HAL_RCC_OscConfig+0x478>)
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454a:	f7fd ff89 	bl	8002460 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004552:	f7fd ff85 	bl	8002460 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e05c      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004564:	4b11      	ldr	r3, [pc, #68]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x416>
 8004570:	e054      	b.n	800461c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004572:	4b10      	ldr	r3, [pc, #64]	@ (80045b4 <HAL_RCC_OscConfig+0x478>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fd ff72 	bl	8002460 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004580:	f7fd ff6e 	bl	8002460 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e045      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004592:	4b06      	ldr	r3, [pc, #24]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x444>
 800459e:	e03d      	b.n	800461c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d107      	bne.n	80045b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e038      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40007000 	.word	0x40007000
 80045b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004628 <HAL_RCC_OscConfig+0x4ec>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d028      	beq.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d121      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045de:	429a      	cmp	r2, r3
 80045e0:	d11a      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045e8:	4013      	ands	r3, r2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d111      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	3b01      	subs	r3, #1
 8004602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d107      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40023800 	.word	0x40023800

0800462c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0cc      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004640:	4b68      	ldr	r3, [pc, #416]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d90c      	bls.n	8004668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464e:	4b65      	ldr	r3, [pc, #404]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004656:	4b63      	ldr	r3, [pc, #396]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d001      	beq.n	8004668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0b8      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d020      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004680:	4b59      	ldr	r3, [pc, #356]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	4a58      	ldr	r2, [pc, #352]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800468a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004698:	4b53      	ldr	r3, [pc, #332]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	4a52      	ldr	r2, [pc, #328]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046a4:	4b50      	ldr	r3, [pc, #320]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	494d      	ldr	r1, [pc, #308]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d044      	beq.n	800474c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	4b47      	ldr	r3, [pc, #284]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d119      	bne.n	800470a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e07f      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d003      	beq.n	80046ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ea:	4b3f      	ldr	r3, [pc, #252]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d109      	bne.n	800470a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e06f      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fa:	4b3b      	ldr	r3, [pc, #236]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e067      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800470a:	4b37      	ldr	r3, [pc, #220]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f023 0203 	bic.w	r2, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	4934      	ldr	r1, [pc, #208]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	4313      	orrs	r3, r2
 800471a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800471c:	f7fd fea0 	bl	8002460 <HAL_GetTick>
 8004720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004722:	e00a      	b.n	800473a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004724:	f7fd fe9c 	bl	8002460 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e04f      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473a:	4b2b      	ldr	r3, [pc, #172]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 020c 	and.w	r2, r3, #12
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	429a      	cmp	r2, r3
 800474a:	d1eb      	bne.n	8004724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800474c:	4b25      	ldr	r3, [pc, #148]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d20c      	bcs.n	8004774 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475a:	4b22      	ldr	r3, [pc, #136]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b20      	ldr	r3, [pc, #128]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e032      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004780:	4b19      	ldr	r3, [pc, #100]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4916      	ldr	r1, [pc, #88]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d009      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800479e:	4b12      	ldr	r3, [pc, #72]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	490e      	ldr	r1, [pc, #56]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047b2:	f000 f821 	bl	80047f8 <HAL_RCC_GetSysClockFreq>
 80047b6:	4602      	mov	r2, r0
 80047b8:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	091b      	lsrs	r3, r3, #4
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	490a      	ldr	r1, [pc, #40]	@ (80047ec <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	5ccb      	ldrb	r3, [r1, r3]
 80047c6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ca:	4a09      	ldr	r2, [pc, #36]	@ (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ce:	4b09      	ldr	r3, [pc, #36]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fd fe00 	bl	80023d8 <HAL_InitTick>

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40023c00 	.word	0x40023c00
 80047e8:	40023800 	.word	0x40023800
 80047ec:	08006124 	.word	0x08006124
 80047f0:	20000000 	.word	0x20000000
 80047f4:	20000004 	.word	0x20000004

080047f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047fc:	b090      	sub	sp, #64	@ 0x40
 80047fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	637b      	str	r3, [r7, #52]	@ 0x34
 8004804:	2300      	movs	r3, #0
 8004806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004808:	2300      	movs	r3, #0
 800480a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004810:	4b59      	ldr	r3, [pc, #356]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 030c 	and.w	r3, r3, #12
 8004818:	2b08      	cmp	r3, #8
 800481a:	d00d      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0x40>
 800481c:	2b08      	cmp	r3, #8
 800481e:	f200 80a1 	bhi.w	8004964 <HAL_RCC_GetSysClockFreq+0x16c>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_RCC_GetSysClockFreq+0x34>
 8004826:	2b04      	cmp	r3, #4
 8004828:	d003      	beq.n	8004832 <HAL_RCC_GetSysClockFreq+0x3a>
 800482a:	e09b      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800482c:	4b53      	ldr	r3, [pc, #332]	@ (800497c <HAL_RCC_GetSysClockFreq+0x184>)
 800482e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004830:	e09b      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004832:	4b53      	ldr	r3, [pc, #332]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x188>)
 8004834:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004836:	e098      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004838:	4b4f      	ldr	r3, [pc, #316]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004840:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004842:	4b4d      	ldr	r3, [pc, #308]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d028      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484e:	4b4a      	ldr	r3, [pc, #296]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	099b      	lsrs	r3, r3, #6
 8004854:	2200      	movs	r2, #0
 8004856:	623b      	str	r3, [r7, #32]
 8004858:	627a      	str	r2, [r7, #36]	@ 0x24
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004860:	2100      	movs	r1, #0
 8004862:	4b47      	ldr	r3, [pc, #284]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x188>)
 8004864:	fb03 f201 	mul.w	r2, r3, r1
 8004868:	2300      	movs	r3, #0
 800486a:	fb00 f303 	mul.w	r3, r0, r3
 800486e:	4413      	add	r3, r2
 8004870:	4a43      	ldr	r2, [pc, #268]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x188>)
 8004872:	fba0 1202 	umull	r1, r2, r0, r2
 8004876:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004878:	460a      	mov	r2, r1
 800487a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800487c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800487e:	4413      	add	r3, r2
 8004880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004884:	2200      	movs	r2, #0
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	61fa      	str	r2, [r7, #28]
 800488a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800488e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004892:	f7fc f8bd 	bl	8000a10 <__aeabi_uldivmod>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4613      	mov	r3, r2
 800489c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800489e:	e053      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a0:	4b35      	ldr	r3, [pc, #212]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	099b      	lsrs	r3, r3, #6
 80048a6:	2200      	movs	r2, #0
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	617a      	str	r2, [r7, #20]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048b2:	f04f 0b00 	mov.w	fp, #0
 80048b6:	4652      	mov	r2, sl
 80048b8:	465b      	mov	r3, fp
 80048ba:	f04f 0000 	mov.w	r0, #0
 80048be:	f04f 0100 	mov.w	r1, #0
 80048c2:	0159      	lsls	r1, r3, #5
 80048c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048c8:	0150      	lsls	r0, r2, #5
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	ebb2 080a 	subs.w	r8, r2, sl
 80048d2:	eb63 090b 	sbc.w	r9, r3, fp
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80048ea:	ebb2 0408 	subs.w	r4, r2, r8
 80048ee:	eb63 0509 	sbc.w	r5, r3, r9
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	00eb      	lsls	r3, r5, #3
 80048fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004900:	00e2      	lsls	r2, r4, #3
 8004902:	4614      	mov	r4, r2
 8004904:	461d      	mov	r5, r3
 8004906:	eb14 030a 	adds.w	r3, r4, sl
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	eb45 030b 	adc.w	r3, r5, fp
 8004910:	607b      	str	r3, [r7, #4]
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800491e:	4629      	mov	r1, r5
 8004920:	028b      	lsls	r3, r1, #10
 8004922:	4621      	mov	r1, r4
 8004924:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004928:	4621      	mov	r1, r4
 800492a:	028a      	lsls	r2, r1, #10
 800492c:	4610      	mov	r0, r2
 800492e:	4619      	mov	r1, r3
 8004930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004932:	2200      	movs	r2, #0
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	60fa      	str	r2, [r7, #12]
 8004938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800493c:	f7fc f868 	bl	8000a10 <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4613      	mov	r3, r2
 8004946:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004948:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	3301      	adds	r3, #1
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004958:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004962:	e002      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004964:	4b05      	ldr	r3, [pc, #20]	@ (800497c <HAL_RCC_GetSysClockFreq+0x184>)
 8004966:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800496a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800496c:	4618      	mov	r0, r3
 800496e:	3740      	adds	r7, #64	@ 0x40
 8004970:	46bd      	mov	sp, r7
 8004972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800
 800497c:	00f42400 	.word	0x00f42400
 8004980:	017d7840 	.word	0x017d7840

08004984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004988:	4b03      	ldr	r3, [pc, #12]	@ (8004998 <HAL_RCC_GetHCLKFreq+0x14>)
 800498a:	681b      	ldr	r3, [r3, #0]
}
 800498c:	4618      	mov	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000000 	.word	0x20000000

0800499c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049a0:	f7ff fff0 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 80049a4:	4602      	mov	r2, r0
 80049a6:	4b05      	ldr	r3, [pc, #20]	@ (80049bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	0a9b      	lsrs	r3, r3, #10
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	4903      	ldr	r1, [pc, #12]	@ (80049c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049b2:	5ccb      	ldrb	r3, [r1, r3]
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40023800 	.word	0x40023800
 80049c0:	08006134 	.word	0x08006134

080049c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049c8:	f7ff ffdc 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	0b5b      	lsrs	r3, r3, #13
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4903      	ldr	r1, [pc, #12]	@ (80049e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40023800 	.word	0x40023800
 80049e8:	08006134 	.word	0x08006134

080049ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e07b      	b.n	8004af6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d108      	bne.n	8004a18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a0e:	d009      	beq.n	8004a24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	61da      	str	r2, [r3, #28]
 8004a16:	e005      	b.n	8004a24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fd fb22 	bl	8002088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa8:	ea42 0103 	orr.w	r1, r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	0c1b      	lsrs	r3, r3, #16
 8004ac2:	f003 0104 	and.w	r1, r3, #4
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aca:	f003 0210 	and.w	r2, r3, #16
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ae4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e041      	b.n	8004b94 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fd faf7 	bl	8002118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	f000 fc3b 	bl	80053b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d001      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e044      	b.n	8004c3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8004c4c <HAL_TIM_Base_Start_IT+0xb0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d018      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0x6c>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bde:	d013      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0x6c>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1a      	ldr	r2, [pc, #104]	@ (8004c50 <HAL_TIM_Base_Start_IT+0xb4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00e      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0x6c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a19      	ldr	r2, [pc, #100]	@ (8004c54 <HAL_TIM_Base_Start_IT+0xb8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d009      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0x6c>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a17      	ldr	r2, [pc, #92]	@ (8004c58 <HAL_TIM_Base_Start_IT+0xbc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d004      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0x6c>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a16      	ldr	r2, [pc, #88]	@ (8004c5c <HAL_TIM_Base_Start_IT+0xc0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d111      	bne.n	8004c2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b06      	cmp	r3, #6
 8004c18:	d010      	beq.n	8004c3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0201 	orr.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c2a:	e007      	b.n	8004c3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40010000 	.word	0x40010000
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40000800 	.word	0x40000800
 8004c58:	40000c00 	.word	0x40000c00
 8004c5c:	40014000 	.word	0x40014000

08004c60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e041      	b.n	8004cf6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f839 	bl	8004cfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f000 fb8a 	bl	80053b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d109      	bne.n	8004d38 <HAL_TIM_PWM_Start+0x24>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	e022      	b.n	8004d7e <HAL_TIM_PWM_Start+0x6a>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d109      	bne.n	8004d52 <HAL_TIM_PWM_Start+0x3e>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	bf14      	ite	ne
 8004d4a:	2301      	movne	r3, #1
 8004d4c:	2300      	moveq	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	e015      	b.n	8004d7e <HAL_TIM_PWM_Start+0x6a>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d109      	bne.n	8004d6c <HAL_TIM_PWM_Start+0x58>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	bf14      	ite	ne
 8004d64:	2301      	movne	r3, #1
 8004d66:	2300      	moveq	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	e008      	b.n	8004d7e <HAL_TIM_PWM_Start+0x6a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e068      	b.n	8004e58 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d104      	bne.n	8004d96 <HAL_TIM_PWM_Start+0x82>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d94:	e013      	b.n	8004dbe <HAL_TIM_PWM_Start+0xaa>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIM_PWM_Start+0x92>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004da4:	e00b      	b.n	8004dbe <HAL_TIM_PWM_Start+0xaa>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_PWM_Start+0xa2>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004db4:	e003      	b.n	8004dbe <HAL_TIM_PWM_Start+0xaa>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	6839      	ldr	r1, [r7, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fda8 	bl	800591c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a23      	ldr	r2, [pc, #140]	@ (8004e60 <HAL_TIM_PWM_Start+0x14c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d107      	bne.n	8004de6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004de4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1d      	ldr	r2, [pc, #116]	@ (8004e60 <HAL_TIM_PWM_Start+0x14c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d018      	beq.n	8004e22 <HAL_TIM_PWM_Start+0x10e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df8:	d013      	beq.n	8004e22 <HAL_TIM_PWM_Start+0x10e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a19      	ldr	r2, [pc, #100]	@ (8004e64 <HAL_TIM_PWM_Start+0x150>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00e      	beq.n	8004e22 <HAL_TIM_PWM_Start+0x10e>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a17      	ldr	r2, [pc, #92]	@ (8004e68 <HAL_TIM_PWM_Start+0x154>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d009      	beq.n	8004e22 <HAL_TIM_PWM_Start+0x10e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a16      	ldr	r2, [pc, #88]	@ (8004e6c <HAL_TIM_PWM_Start+0x158>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d004      	beq.n	8004e22 <HAL_TIM_PWM_Start+0x10e>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a14      	ldr	r2, [pc, #80]	@ (8004e70 <HAL_TIM_PWM_Start+0x15c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d111      	bne.n	8004e46 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b06      	cmp	r3, #6
 8004e32:	d010      	beq.n	8004e56 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e44:	e007      	b.n	8004e56 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0201 	orr.w	r2, r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40010000 	.word	0x40010000
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40000800 	.word	0x40000800
 8004e6c:	40000c00 	.word	0x40000c00
 8004e70:	40014000 	.word	0x40014000

08004e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d020      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01b      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0202 	mvn.w	r2, #2
 8004ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fa5b 	bl	800537a <HAL_TIM_IC_CaptureCallback>
 8004ec4:	e005      	b.n	8004ed2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fa4d 	bl	8005366 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fa5e 	bl	800538e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d020      	beq.n	8004f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01b      	beq.n	8004f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0204 	mvn.w	r2, #4
 8004ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa35 	bl	800537a <HAL_TIM_IC_CaptureCallback>
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa27 	bl	8005366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fa38 	bl	800538e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d020      	beq.n	8004f70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01b      	beq.n	8004f70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0208 	mvn.w	r2, #8
 8004f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2204      	movs	r2, #4
 8004f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa0f 	bl	800537a <HAL_TIM_IC_CaptureCallback>
 8004f5c:	e005      	b.n	8004f6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa01 	bl	8005366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fa12 	bl	800538e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d020      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01b      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0210 	mvn.w	r2, #16
 8004f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2208      	movs	r2, #8
 8004f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f9e9 	bl	800537a <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e005      	b.n	8004fb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f9db 	bl	8005366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f9ec 	bl	800538e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00c      	beq.n	8004fe0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d007      	beq.n	8004fe0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0201 	mvn.w	r2, #1
 8004fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fc fc52 	bl	8001884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00c      	beq.n	8005004 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fd7c 	bl	8005afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00c      	beq.n	8005028 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d007      	beq.n	8005028 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f9bd 	bl	80053a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00c      	beq.n	800504c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0220 	mvn.w	r2, #32
 8005044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fd4e 	bl	8005ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800506e:	2302      	movs	r3, #2
 8005070:	e0ae      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b0c      	cmp	r3, #12
 800507e:	f200 809f 	bhi.w	80051c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005082:	a201      	add	r2, pc, #4	@ (adr r2, 8005088 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	080050bd 	.word	0x080050bd
 800508c:	080051c1 	.word	0x080051c1
 8005090:	080051c1 	.word	0x080051c1
 8005094:	080051c1 	.word	0x080051c1
 8005098:	080050fd 	.word	0x080050fd
 800509c:	080051c1 	.word	0x080051c1
 80050a0:	080051c1 	.word	0x080051c1
 80050a4:	080051c1 	.word	0x080051c1
 80050a8:	0800513f 	.word	0x0800513f
 80050ac:	080051c1 	.word	0x080051c1
 80050b0:	080051c1 	.word	0x080051c1
 80050b4:	080051c1 	.word	0x080051c1
 80050b8:	0800517f 	.word	0x0800517f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fa04 	bl	80054d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0208 	orr.w	r2, r2, #8
 80050d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0204 	bic.w	r2, r2, #4
 80050e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6999      	ldr	r1, [r3, #24]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	619a      	str	r2, [r3, #24]
      break;
 80050fa:	e064      	b.n	80051c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fa4a 	bl	800559c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699a      	ldr	r2, [r3, #24]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6999      	ldr	r1, [r3, #24]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	021a      	lsls	r2, r3, #8
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	619a      	str	r2, [r3, #24]
      break;
 800513c:	e043      	b.n	80051c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fa95 	bl	8005674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69da      	ldr	r2, [r3, #28]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0208 	orr.w	r2, r2, #8
 8005158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0204 	bic.w	r2, r2, #4
 8005168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69d9      	ldr	r1, [r3, #28]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	61da      	str	r2, [r3, #28]
      break;
 800517c:	e023      	b.n	80051c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	4618      	mov	r0, r3
 8005186:	f000 fadf 	bl	8005748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69da      	ldr	r2, [r3, #28]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69d9      	ldr	r1, [r3, #28]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	021a      	lsls	r2, r3, #8
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	61da      	str	r2, [r3, #28]
      break;
 80051be:	e002      	b.n	80051c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	75fb      	strb	r3, [r7, #23]
      break;
 80051c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_TIM_ConfigClockSource+0x1c>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e0b4      	b.n	800535e <HAL_TIM_ConfigClockSource+0x186>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800521a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800522c:	d03e      	beq.n	80052ac <HAL_TIM_ConfigClockSource+0xd4>
 800522e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005232:	f200 8087 	bhi.w	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 8005236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800523a:	f000 8086 	beq.w	800534a <HAL_TIM_ConfigClockSource+0x172>
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005242:	d87f      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 8005244:	2b70      	cmp	r3, #112	@ 0x70
 8005246:	d01a      	beq.n	800527e <HAL_TIM_ConfigClockSource+0xa6>
 8005248:	2b70      	cmp	r3, #112	@ 0x70
 800524a:	d87b      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 800524c:	2b60      	cmp	r3, #96	@ 0x60
 800524e:	d050      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005250:	2b60      	cmp	r3, #96	@ 0x60
 8005252:	d877      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 8005254:	2b50      	cmp	r3, #80	@ 0x50
 8005256:	d03c      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005258:	2b50      	cmp	r3, #80	@ 0x50
 800525a:	d873      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 800525c:	2b40      	cmp	r3, #64	@ 0x40
 800525e:	d058      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0x13a>
 8005260:	2b40      	cmp	r3, #64	@ 0x40
 8005262:	d86f      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 8005264:	2b30      	cmp	r3, #48	@ 0x30
 8005266:	d064      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0x15a>
 8005268:	2b30      	cmp	r3, #48	@ 0x30
 800526a:	d86b      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 800526c:	2b20      	cmp	r3, #32
 800526e:	d060      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0x15a>
 8005270:	2b20      	cmp	r3, #32
 8005272:	d867      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 8005274:	2b00      	cmp	r3, #0
 8005276:	d05c      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0x15a>
 8005278:	2b10      	cmp	r3, #16
 800527a:	d05a      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0x15a>
 800527c:	e062      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800528e:	f000 fb25 	bl	80058dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	609a      	str	r2, [r3, #8]
      break;
 80052aa:	e04f      	b.n	800534c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052bc:	f000 fb0e 	bl	80058dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052ce:	609a      	str	r2, [r3, #8]
      break;
 80052d0:	e03c      	b.n	800534c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052de:	461a      	mov	r2, r3
 80052e0:	f000 fa82 	bl	80057e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2150      	movs	r1, #80	@ 0x50
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fadb 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 80052f0:	e02c      	b.n	800534c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052fe:	461a      	mov	r2, r3
 8005300:	f000 faa1 	bl	8005846 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2160      	movs	r1, #96	@ 0x60
 800530a:	4618      	mov	r0, r3
 800530c:	f000 facb 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 8005310:	e01c      	b.n	800534c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800531e:	461a      	mov	r2, r3
 8005320:	f000 fa62 	bl	80057e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2140      	movs	r1, #64	@ 0x40
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fabb 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 8005330:	e00c      	b.n	800534c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4619      	mov	r1, r3
 800533c:	4610      	mov	r0, r2
 800533e:	f000 fab2 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 8005342:	e003      	b.n	800534c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	73fb      	strb	r3, [r7, #15]
      break;
 8005348:	e000      	b.n	800534c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800534a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800535c:	7bfb      	ldrb	r3, [r7, #15]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a3a      	ldr	r2, [pc, #232]	@ (80054b4 <TIM_Base_SetConfig+0xfc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d00f      	beq.n	80053f0 <TIM_Base_SetConfig+0x38>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d6:	d00b      	beq.n	80053f0 <TIM_Base_SetConfig+0x38>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a37      	ldr	r2, [pc, #220]	@ (80054b8 <TIM_Base_SetConfig+0x100>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d007      	beq.n	80053f0 <TIM_Base_SetConfig+0x38>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a36      	ldr	r2, [pc, #216]	@ (80054bc <TIM_Base_SetConfig+0x104>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_Base_SetConfig+0x38>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a35      	ldr	r2, [pc, #212]	@ (80054c0 <TIM_Base_SetConfig+0x108>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d108      	bne.n	8005402 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a2b      	ldr	r2, [pc, #172]	@ (80054b4 <TIM_Base_SetConfig+0xfc>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d01b      	beq.n	8005442 <TIM_Base_SetConfig+0x8a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005410:	d017      	beq.n	8005442 <TIM_Base_SetConfig+0x8a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a28      	ldr	r2, [pc, #160]	@ (80054b8 <TIM_Base_SetConfig+0x100>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d013      	beq.n	8005442 <TIM_Base_SetConfig+0x8a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a27      	ldr	r2, [pc, #156]	@ (80054bc <TIM_Base_SetConfig+0x104>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00f      	beq.n	8005442 <TIM_Base_SetConfig+0x8a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a26      	ldr	r2, [pc, #152]	@ (80054c0 <TIM_Base_SetConfig+0x108>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00b      	beq.n	8005442 <TIM_Base_SetConfig+0x8a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a25      	ldr	r2, [pc, #148]	@ (80054c4 <TIM_Base_SetConfig+0x10c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d007      	beq.n	8005442 <TIM_Base_SetConfig+0x8a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a24      	ldr	r2, [pc, #144]	@ (80054c8 <TIM_Base_SetConfig+0x110>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d003      	beq.n	8005442 <TIM_Base_SetConfig+0x8a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a23      	ldr	r2, [pc, #140]	@ (80054cc <TIM_Base_SetConfig+0x114>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d108      	bne.n	8005454 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a0e      	ldr	r2, [pc, #56]	@ (80054b4 <TIM_Base_SetConfig+0xfc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d103      	bne.n	8005488 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b01      	cmp	r3, #1
 8005498:	d105      	bne.n	80054a6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f023 0201 	bic.w	r2, r3, #1
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	611a      	str	r2, [r3, #16]
  }
}
 80054a6:	bf00      	nop
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40010000 	.word	0x40010000
 80054b8:	40000400 	.word	0x40000400
 80054bc:	40000800 	.word	0x40000800
 80054c0:	40000c00 	.word	0x40000c00
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40014400 	.word	0x40014400
 80054cc:	40014800 	.word	0x40014800

080054d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	f023 0201 	bic.w	r2, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0303 	bic.w	r3, r3, #3
 8005506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f023 0302 	bic.w	r3, r3, #2
 8005518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a1c      	ldr	r2, [pc, #112]	@ (8005598 <TIM_OC1_SetConfig+0xc8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d10c      	bne.n	8005546 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f023 0308 	bic.w	r3, r3, #8
 8005532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f023 0304 	bic.w	r3, r3, #4
 8005544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a13      	ldr	r2, [pc, #76]	@ (8005598 <TIM_OC1_SetConfig+0xc8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d111      	bne.n	8005572 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800555c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	621a      	str	r2, [r3, #32]
}
 800558c:	bf00      	nop
 800558e:	371c      	adds	r7, #28
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	40010000 	.word	0x40010000

0800559c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	f023 0210 	bic.w	r2, r3, #16
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	021b      	lsls	r3, r3, #8
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f023 0320 	bic.w	r3, r3, #32
 80055e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005670 <TIM_OC2_SetConfig+0xd4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d10d      	bne.n	8005618 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005616:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a15      	ldr	r2, [pc, #84]	@ (8005670 <TIM_OC2_SetConfig+0xd4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d113      	bne.n	8005648 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005626:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800562e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40010000 	.word	0x40010000

08005674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005744 <TIM_OC3_SetConfig+0xd0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d10d      	bne.n	80056ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a14      	ldr	r2, [pc, #80]	@ (8005744 <TIM_OC3_SetConfig+0xd0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d113      	bne.n	800571e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	621a      	str	r2, [r3, #32]
}
 8005738:	bf00      	nop
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	40010000 	.word	0x40010000

08005748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800577e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	021b      	lsls	r3, r3, #8
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	031b      	lsls	r3, r3, #12
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a10      	ldr	r2, [pc, #64]	@ (80057e4 <TIM_OC4_SetConfig+0x9c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d109      	bne.n	80057bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	019b      	lsls	r3, r3, #6
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40010000 	.word	0x40010000

080057e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f023 0201 	bic.w	r2, r3, #1
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f023 030a 	bic.w	r3, r3, #10
 8005824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005846:	b480      	push	{r7}
 8005848:	b087      	sub	sp, #28
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	f023 0210 	bic.w	r2, r3, #16
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005870:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	031b      	lsls	r3, r3, #12
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005882:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	621a      	str	r2, [r3, #32]
}
 800589a:	bf00      	nop
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f043 0307 	orr.w	r3, r3, #7
 80058c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	609a      	str	r2, [r3, #8]
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	021a      	lsls	r2, r3, #8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	431a      	orrs	r2, r3
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4313      	orrs	r3, r2
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	609a      	str	r2, [r3, #8]
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f003 031f 	and.w	r3, r3, #31
 800592e:	2201      	movs	r2, #1
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a1a      	ldr	r2, [r3, #32]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	43db      	mvns	r3, r3
 800593e:	401a      	ands	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a1a      	ldr	r2, [r3, #32]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	fa01 f303 	lsl.w	r3, r1, r3
 8005954:	431a      	orrs	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	621a      	str	r2, [r3, #32]
}
 800595a:	bf00      	nop
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800597c:	2302      	movs	r3, #2
 800597e:	e050      	b.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a1c      	ldr	r2, [pc, #112]	@ (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d018      	beq.n	80059f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059cc:	d013      	beq.n	80059f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a18      	ldr	r2, [pc, #96]	@ (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00e      	beq.n	80059f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a16      	ldr	r2, [pc, #88]	@ (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d009      	beq.n	80059f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a15      	ldr	r2, [pc, #84]	@ (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d004      	beq.n	80059f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a13      	ldr	r2, [pc, #76]	@ (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d10c      	bne.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40010000 	.word	0x40010000
 8005a34:	40000400 	.word	0x40000400
 8005a38:	40000800 	.word	0x40000800
 8005a3c:	40000c00 	.word	0x40000c00
 8005a40:	40014000 	.word	0x40014000

08005a44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e03d      	b.n	8005adc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e042      	b.n	8005ba8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fc fb64 	bl	8002204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2224      	movs	r2, #36	@ 0x24
 8005b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f82b 	bl	8005bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695a      	ldr	r2, [r3, #20]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bb4:	b0c0      	sub	sp, #256	@ 0x100
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bcc:	68d9      	ldr	r1, [r3, #12]
 8005bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	ea40 0301 	orr.w	r3, r0, r1
 8005bd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c08:	f021 010c 	bic.w	r1, r1, #12
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c16:	430b      	orrs	r3, r1
 8005c18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2a:	6999      	ldr	r1, [r3, #24]
 8005c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	ea40 0301 	orr.w	r3, r0, r1
 8005c36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b8f      	ldr	r3, [pc, #572]	@ (8005e7c <UART_SetConfig+0x2cc>)
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d005      	beq.n	8005c50 <UART_SetConfig+0xa0>
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4b8d      	ldr	r3, [pc, #564]	@ (8005e80 <UART_SetConfig+0x2d0>)
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d104      	bne.n	8005c5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c50:	f7fe feb8 	bl	80049c4 <HAL_RCC_GetPCLK2Freq>
 8005c54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c58:	e003      	b.n	8005c62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c5a:	f7fe fe9f 	bl	800499c <HAL_RCC_GetPCLK1Freq>
 8005c5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c6c:	f040 810c 	bne.w	8005e88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c82:	4622      	mov	r2, r4
 8005c84:	462b      	mov	r3, r5
 8005c86:	1891      	adds	r1, r2, r2
 8005c88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c8a:	415b      	adcs	r3, r3
 8005c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c92:	4621      	mov	r1, r4
 8005c94:	eb12 0801 	adds.w	r8, r2, r1
 8005c98:	4629      	mov	r1, r5
 8005c9a:	eb43 0901 	adc.w	r9, r3, r1
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cb2:	4690      	mov	r8, r2
 8005cb4:	4699      	mov	r9, r3
 8005cb6:	4623      	mov	r3, r4
 8005cb8:	eb18 0303 	adds.w	r3, r8, r3
 8005cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005cc0:	462b      	mov	r3, r5
 8005cc2:	eb49 0303 	adc.w	r3, r9, r3
 8005cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005cda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cde:	460b      	mov	r3, r1
 8005ce0:	18db      	adds	r3, r3, r3
 8005ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	eb42 0303 	adc.w	r3, r2, r3
 8005cea:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005cf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005cf4:	f7fa fe8c 	bl	8000a10 <__aeabi_uldivmod>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4b61      	ldr	r3, [pc, #388]	@ (8005e84 <UART_SetConfig+0x2d4>)
 8005cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	011c      	lsls	r4, r3, #4
 8005d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d18:	4642      	mov	r2, r8
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	1891      	adds	r1, r2, r2
 8005d1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d20:	415b      	adcs	r3, r3
 8005d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d28:	4641      	mov	r1, r8
 8005d2a:	eb12 0a01 	adds.w	sl, r2, r1
 8005d2e:	4649      	mov	r1, r9
 8005d30:	eb43 0b01 	adc.w	fp, r3, r1
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d48:	4692      	mov	sl, r2
 8005d4a:	469b      	mov	fp, r3
 8005d4c:	4643      	mov	r3, r8
 8005d4e:	eb1a 0303 	adds.w	r3, sl, r3
 8005d52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d56:	464b      	mov	r3, r9
 8005d58:	eb4b 0303 	adc.w	r3, fp, r3
 8005d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d74:	460b      	mov	r3, r1
 8005d76:	18db      	adds	r3, r3, r3
 8005d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	eb42 0303 	adc.w	r3, r2, r3
 8005d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d8a:	f7fa fe41 	bl	8000a10 <__aeabi_uldivmod>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	4b3b      	ldr	r3, [pc, #236]	@ (8005e84 <UART_SetConfig+0x2d4>)
 8005d96:	fba3 2301 	umull	r2, r3, r3, r1
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	2264      	movs	r2, #100	@ 0x64
 8005d9e:	fb02 f303 	mul.w	r3, r2, r3
 8005da2:	1acb      	subs	r3, r1, r3
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005daa:	4b36      	ldr	r3, [pc, #216]	@ (8005e84 <UART_SetConfig+0x2d4>)
 8005dac:	fba3 2302 	umull	r2, r3, r3, r2
 8005db0:	095b      	lsrs	r3, r3, #5
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005db8:	441c      	add	r4, r3
 8005dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005dc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005dcc:	4642      	mov	r2, r8
 8005dce:	464b      	mov	r3, r9
 8005dd0:	1891      	adds	r1, r2, r2
 8005dd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005dd4:	415b      	adcs	r3, r3
 8005dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ddc:	4641      	mov	r1, r8
 8005dde:	1851      	adds	r1, r2, r1
 8005de0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005de2:	4649      	mov	r1, r9
 8005de4:	414b      	adcs	r3, r1
 8005de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005df4:	4659      	mov	r1, fp
 8005df6:	00cb      	lsls	r3, r1, #3
 8005df8:	4651      	mov	r1, sl
 8005dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dfe:	4651      	mov	r1, sl
 8005e00:	00ca      	lsls	r2, r1, #3
 8005e02:	4610      	mov	r0, r2
 8005e04:	4619      	mov	r1, r3
 8005e06:	4603      	mov	r3, r0
 8005e08:	4642      	mov	r2, r8
 8005e0a:	189b      	adds	r3, r3, r2
 8005e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e10:	464b      	mov	r3, r9
 8005e12:	460a      	mov	r2, r1
 8005e14:	eb42 0303 	adc.w	r3, r2, r3
 8005e18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e30:	460b      	mov	r3, r1
 8005e32:	18db      	adds	r3, r3, r3
 8005e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e36:	4613      	mov	r3, r2
 8005e38:	eb42 0303 	adc.w	r3, r2, r3
 8005e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e46:	f7fa fde3 	bl	8000a10 <__aeabi_uldivmod>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e84 <UART_SetConfig+0x2d4>)
 8005e50:	fba3 1302 	umull	r1, r3, r3, r2
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	2164      	movs	r1, #100	@ 0x64
 8005e58:	fb01 f303 	mul.w	r3, r1, r3
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	3332      	adds	r3, #50	@ 0x32
 8005e62:	4a08      	ldr	r2, [pc, #32]	@ (8005e84 <UART_SetConfig+0x2d4>)
 8005e64:	fba2 2303 	umull	r2, r3, r2, r3
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	f003 0207 	and.w	r2, r3, #7
 8005e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4422      	add	r2, r4
 8005e76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e78:	e106      	b.n	8006088 <UART_SetConfig+0x4d8>
 8005e7a:	bf00      	nop
 8005e7c:	40011000 	.word	0x40011000
 8005e80:	40011400 	.word	0x40011400
 8005e84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e9a:	4642      	mov	r2, r8
 8005e9c:	464b      	mov	r3, r9
 8005e9e:	1891      	adds	r1, r2, r2
 8005ea0:	6239      	str	r1, [r7, #32]
 8005ea2:	415b      	adcs	r3, r3
 8005ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005eaa:	4641      	mov	r1, r8
 8005eac:	1854      	adds	r4, r2, r1
 8005eae:	4649      	mov	r1, r9
 8005eb0:	eb43 0501 	adc.w	r5, r3, r1
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	f04f 0300 	mov.w	r3, #0
 8005ebc:	00eb      	lsls	r3, r5, #3
 8005ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ec2:	00e2      	lsls	r2, r4, #3
 8005ec4:	4614      	mov	r4, r2
 8005ec6:	461d      	mov	r5, r3
 8005ec8:	4643      	mov	r3, r8
 8005eca:	18e3      	adds	r3, r4, r3
 8005ecc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ed0:	464b      	mov	r3, r9
 8005ed2:	eb45 0303 	adc.w	r3, r5, r3
 8005ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ee6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	008b      	lsls	r3, r1, #2
 8005efa:	4621      	mov	r1, r4
 8005efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f00:	4621      	mov	r1, r4
 8005f02:	008a      	lsls	r2, r1, #2
 8005f04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f08:	f7fa fd82 	bl	8000a10 <__aeabi_uldivmod>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4b60      	ldr	r3, [pc, #384]	@ (8006094 <UART_SetConfig+0x4e4>)
 8005f12:	fba3 2302 	umull	r2, r3, r3, r2
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	011c      	lsls	r4, r3, #4
 8005f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	464b      	mov	r3, r9
 8005f30:	1891      	adds	r1, r2, r2
 8005f32:	61b9      	str	r1, [r7, #24]
 8005f34:	415b      	adcs	r3, r3
 8005f36:	61fb      	str	r3, [r7, #28]
 8005f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	1851      	adds	r1, r2, r1
 8005f40:	6139      	str	r1, [r7, #16]
 8005f42:	4649      	mov	r1, r9
 8005f44:	414b      	adcs	r3, r1
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f54:	4659      	mov	r1, fp
 8005f56:	00cb      	lsls	r3, r1, #3
 8005f58:	4651      	mov	r1, sl
 8005f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f5e:	4651      	mov	r1, sl
 8005f60:	00ca      	lsls	r2, r1, #3
 8005f62:	4610      	mov	r0, r2
 8005f64:	4619      	mov	r1, r3
 8005f66:	4603      	mov	r3, r0
 8005f68:	4642      	mov	r2, r8
 8005f6a:	189b      	adds	r3, r3, r2
 8005f6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f70:	464b      	mov	r3, r9
 8005f72:	460a      	mov	r2, r1
 8005f74:	eb42 0303 	adc.w	r3, r2, r3
 8005f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	f04f 0300 	mov.w	r3, #0
 8005f90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f94:	4649      	mov	r1, r9
 8005f96:	008b      	lsls	r3, r1, #2
 8005f98:	4641      	mov	r1, r8
 8005f9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f9e:	4641      	mov	r1, r8
 8005fa0:	008a      	lsls	r2, r1, #2
 8005fa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005fa6:	f7fa fd33 	bl	8000a10 <__aeabi_uldivmod>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4611      	mov	r1, r2
 8005fb0:	4b38      	ldr	r3, [pc, #224]	@ (8006094 <UART_SetConfig+0x4e4>)
 8005fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	2264      	movs	r2, #100	@ 0x64
 8005fba:	fb02 f303 	mul.w	r3, r2, r3
 8005fbe:	1acb      	subs	r3, r1, r3
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	3332      	adds	r3, #50	@ 0x32
 8005fc4:	4a33      	ldr	r2, [pc, #204]	@ (8006094 <UART_SetConfig+0x4e4>)
 8005fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fd0:	441c      	add	r4, r3
 8005fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fda:	677a      	str	r2, [r7, #116]	@ 0x74
 8005fdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	1891      	adds	r1, r2, r2
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	415b      	adcs	r3, r3
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	1851      	adds	r1, r2, r1
 8005ff4:	6039      	str	r1, [r7, #0]
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	414b      	adcs	r3, r1
 8005ffa:	607b      	str	r3, [r7, #4]
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006008:	4659      	mov	r1, fp
 800600a:	00cb      	lsls	r3, r1, #3
 800600c:	4651      	mov	r1, sl
 800600e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006012:	4651      	mov	r1, sl
 8006014:	00ca      	lsls	r2, r1, #3
 8006016:	4610      	mov	r0, r2
 8006018:	4619      	mov	r1, r3
 800601a:	4603      	mov	r3, r0
 800601c:	4642      	mov	r2, r8
 800601e:	189b      	adds	r3, r3, r2
 8006020:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006022:	464b      	mov	r3, r9
 8006024:	460a      	mov	r2, r1
 8006026:	eb42 0303 	adc.w	r3, r2, r3
 800602a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	663b      	str	r3, [r7, #96]	@ 0x60
 8006036:	667a      	str	r2, [r7, #100]	@ 0x64
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006044:	4649      	mov	r1, r9
 8006046:	008b      	lsls	r3, r1, #2
 8006048:	4641      	mov	r1, r8
 800604a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800604e:	4641      	mov	r1, r8
 8006050:	008a      	lsls	r2, r1, #2
 8006052:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006056:	f7fa fcdb 	bl	8000a10 <__aeabi_uldivmod>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4b0d      	ldr	r3, [pc, #52]	@ (8006094 <UART_SetConfig+0x4e4>)
 8006060:	fba3 1302 	umull	r1, r3, r3, r2
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	2164      	movs	r1, #100	@ 0x64
 8006068:	fb01 f303 	mul.w	r3, r1, r3
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	3332      	adds	r3, #50	@ 0x32
 8006072:	4a08      	ldr	r2, [pc, #32]	@ (8006094 <UART_SetConfig+0x4e4>)
 8006074:	fba2 2303 	umull	r2, r3, r2, r3
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	f003 020f 	and.w	r2, r3, #15
 800607e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4422      	add	r2, r4
 8006086:	609a      	str	r2, [r3, #8]
}
 8006088:	bf00      	nop
 800608a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800608e:	46bd      	mov	sp, r7
 8006090:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006094:	51eb851f 	.word	0x51eb851f

08006098 <memset>:
 8006098:	4402      	add	r2, r0
 800609a:	4603      	mov	r3, r0
 800609c:	4293      	cmp	r3, r2
 800609e:	d100      	bne.n	80060a2 <memset+0xa>
 80060a0:	4770      	bx	lr
 80060a2:	f803 1b01 	strb.w	r1, [r3], #1
 80060a6:	e7f9      	b.n	800609c <memset+0x4>

080060a8 <__libc_init_array>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	4d0d      	ldr	r5, [pc, #52]	@ (80060e0 <__libc_init_array+0x38>)
 80060ac:	4c0d      	ldr	r4, [pc, #52]	@ (80060e4 <__libc_init_array+0x3c>)
 80060ae:	1b64      	subs	r4, r4, r5
 80060b0:	10a4      	asrs	r4, r4, #2
 80060b2:	2600      	movs	r6, #0
 80060b4:	42a6      	cmp	r6, r4
 80060b6:	d109      	bne.n	80060cc <__libc_init_array+0x24>
 80060b8:	4d0b      	ldr	r5, [pc, #44]	@ (80060e8 <__libc_init_array+0x40>)
 80060ba:	4c0c      	ldr	r4, [pc, #48]	@ (80060ec <__libc_init_array+0x44>)
 80060bc:	f000 f826 	bl	800610c <_init>
 80060c0:	1b64      	subs	r4, r4, r5
 80060c2:	10a4      	asrs	r4, r4, #2
 80060c4:	2600      	movs	r6, #0
 80060c6:	42a6      	cmp	r6, r4
 80060c8:	d105      	bne.n	80060d6 <__libc_init_array+0x2e>
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d0:	4798      	blx	r3
 80060d2:	3601      	adds	r6, #1
 80060d4:	e7ee      	b.n	80060b4 <__libc_init_array+0xc>
 80060d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060da:	4798      	blx	r3
 80060dc:	3601      	adds	r6, #1
 80060de:	e7f2      	b.n	80060c6 <__libc_init_array+0x1e>
 80060e0:	0800614c 	.word	0x0800614c
 80060e4:	0800614c 	.word	0x0800614c
 80060e8:	0800614c 	.word	0x0800614c
 80060ec:	08006150 	.word	0x08006150

080060f0 <memcpy>:
 80060f0:	440a      	add	r2, r1
 80060f2:	4291      	cmp	r1, r2
 80060f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80060f8:	d100      	bne.n	80060fc <memcpy+0xc>
 80060fa:	4770      	bx	lr
 80060fc:	b510      	push	{r4, lr}
 80060fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006106:	4291      	cmp	r1, r2
 8006108:	d1f9      	bne.n	80060fe <memcpy+0xe>
 800610a:	bd10      	pop	{r4, pc}

0800610c <_init>:
 800610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610e:	bf00      	nop
 8006110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006112:	bc08      	pop	{r3}
 8006114:	469e      	mov	lr, r3
 8006116:	4770      	bx	lr

08006118 <_fini>:
 8006118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611a:	bf00      	nop
 800611c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611e:	bc08      	pop	{r3}
 8006120:	469e      	mov	lr, r3
 8006122:	4770      	bx	lr
