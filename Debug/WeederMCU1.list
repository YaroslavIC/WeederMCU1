
WeederMCU1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065d8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006770  08006770  00007770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006790  08006790  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006790  08006790  00007790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006798  08006798  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006798  08006798  00007798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800679c  0800679c  0000779c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080067a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006fc  20000010  080067ac  00008010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  080067ac  0000870c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001298d  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002472  00000000  00000000  0001a9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  0001ce40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4a  00000000  00000000  0001e038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fc7  00000000  00000000  0001ee82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001586c  00000000  00000000  00036e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d5ee  00000000  00000000  0004c6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9ca3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005038  00000000  00000000  000e9ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000eed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006758 	.word	0x08006758

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08006758 	.word	0x08006758

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b96a 	b.w	8000e60 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	460c      	mov	r4, r1
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d14e      	bne.n	8000c4e <__udivmoddi4+0xaa>
 8000bb0:	4694      	mov	ip, r2
 8000bb2:	458c      	cmp	ip, r1
 8000bb4:	4686      	mov	lr, r0
 8000bb6:	fab2 f282 	clz	r2, r2
 8000bba:	d962      	bls.n	8000c82 <__udivmoddi4+0xde>
 8000bbc:	b14a      	cbz	r2, 8000bd2 <__udivmoddi4+0x2e>
 8000bbe:	f1c2 0320 	rsb	r3, r2, #32
 8000bc2:	4091      	lsls	r1, r2
 8000bc4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bcc:	4319      	orrs	r1, r3
 8000bce:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd6:	fa1f f68c 	uxth.w	r6, ip
 8000bda:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be2:	fb07 1114 	mls	r1, r7, r4, r1
 8000be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bea:	fb04 f106 	mul.w	r1, r4, r6
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x64>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bfa:	f080 8112 	bcs.w	8000e22 <__udivmoddi4+0x27e>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 810f 	bls.w	8000e22 <__udivmoddi4+0x27e>
 8000c04:	3c02      	subs	r4, #2
 8000c06:	4463      	add	r3, ip
 8000c08:	1a59      	subs	r1, r3, r1
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c12:	fb07 1110 	mls	r1, r7, r0, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb00 f606 	mul.w	r6, r0, r6
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x94>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c2a:	f080 80fc 	bcs.w	8000e26 <__udivmoddi4+0x282>
 8000c2e:	429e      	cmp	r6, r3
 8000c30:	f240 80f9 	bls.w	8000e26 <__udivmoddi4+0x282>
 8000c34:	4463      	add	r3, ip
 8000c36:	3802      	subs	r0, #2
 8000c38:	1b9b      	subs	r3, r3, r6
 8000c3a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c3e:	2100      	movs	r1, #0
 8000c40:	b11d      	cbz	r5, 8000c4a <__udivmoddi4+0xa6>
 8000c42:	40d3      	lsrs	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	e9c5 3200 	strd	r3, r2, [r5]
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d905      	bls.n	8000c5e <__udivmoddi4+0xba>
 8000c52:	b10d      	cbz	r5, 8000c58 <__udivmoddi4+0xb4>
 8000c54:	e9c5 0100 	strd	r0, r1, [r5]
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e7f5      	b.n	8000c4a <__udivmoddi4+0xa6>
 8000c5e:	fab3 f183 	clz	r1, r3
 8000c62:	2900      	cmp	r1, #0
 8000c64:	d146      	bne.n	8000cf4 <__udivmoddi4+0x150>
 8000c66:	42a3      	cmp	r3, r4
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0xcc>
 8000c6a:	4290      	cmp	r0, r2
 8000c6c:	f0c0 80f0 	bcc.w	8000e50 <__udivmoddi4+0x2ac>
 8000c70:	1a86      	subs	r6, r0, r2
 8000c72:	eb64 0303 	sbc.w	r3, r4, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	2d00      	cmp	r5, #0
 8000c7a:	d0e6      	beq.n	8000c4a <__udivmoddi4+0xa6>
 8000c7c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c80:	e7e3      	b.n	8000c4a <__udivmoddi4+0xa6>
 8000c82:	2a00      	cmp	r2, #0
 8000c84:	f040 8090 	bne.w	8000da8 <__udivmoddi4+0x204>
 8000c88:	eba1 040c 	sub.w	r4, r1, ip
 8000c8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c90:	fa1f f78c 	uxth.w	r7, ip
 8000c94:	2101      	movs	r1, #1
 8000c96:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c9e:	fb08 4416 	mls	r4, r8, r6, r4
 8000ca2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ca6:	fb07 f006 	mul.w	r0, r7, r6
 8000caa:	4298      	cmp	r0, r3
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x11c>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x11a>
 8000cb8:	4298      	cmp	r0, r3
 8000cba:	f200 80cd 	bhi.w	8000e58 <__udivmoddi4+0x2b4>
 8000cbe:	4626      	mov	r6, r4
 8000cc0:	1a1c      	subs	r4, r3, r0
 8000cc2:	fa1f f38e 	uxth.w	r3, lr
 8000cc6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cca:	fb08 4410 	mls	r4, r8, r0, r4
 8000cce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd2:	fb00 f707 	mul.w	r7, r0, r7
 8000cd6:	429f      	cmp	r7, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x148>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x146>
 8000ce4:	429f      	cmp	r7, r3
 8000ce6:	f200 80b0 	bhi.w	8000e4a <__udivmoddi4+0x2a6>
 8000cea:	4620      	mov	r0, r4
 8000cec:	1bdb      	subs	r3, r3, r7
 8000cee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf2:	e7a5      	b.n	8000c40 <__udivmoddi4+0x9c>
 8000cf4:	f1c1 0620 	rsb	r6, r1, #32
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000cfe:	431f      	orrs	r7, r3
 8000d00:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d04:	fa04 f301 	lsl.w	r3, r4, r1
 8000d08:	ea43 030c 	orr.w	r3, r3, ip
 8000d0c:	40f4      	lsrs	r4, r6
 8000d0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d12:	0c38      	lsrs	r0, r7, #16
 8000d14:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d18:	fbb4 fef0 	udiv	lr, r4, r0
 8000d1c:	fa1f fc87 	uxth.w	ip, r7
 8000d20:	fb00 441e 	mls	r4, r0, lr, r4
 8000d24:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d28:	fb0e f90c 	mul.w	r9, lr, ip
 8000d2c:	45a1      	cmp	r9, r4
 8000d2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x1a6>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d3a:	f080 8084 	bcs.w	8000e46 <__udivmoddi4+0x2a2>
 8000d3e:	45a1      	cmp	r9, r4
 8000d40:	f240 8081 	bls.w	8000e46 <__udivmoddi4+0x2a2>
 8000d44:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d48:	443c      	add	r4, r7
 8000d4a:	eba4 0409 	sub.w	r4, r4, r9
 8000d4e:	fa1f f983 	uxth.w	r9, r3
 8000d52:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d56:	fb00 4413 	mls	r4, r0, r3, r4
 8000d5a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d62:	45a4      	cmp	ip, r4
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x1d2>
 8000d66:	193c      	adds	r4, r7, r4
 8000d68:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d6c:	d267      	bcs.n	8000e3e <__udivmoddi4+0x29a>
 8000d6e:	45a4      	cmp	ip, r4
 8000d70:	d965      	bls.n	8000e3e <__udivmoddi4+0x29a>
 8000d72:	3b02      	subs	r3, #2
 8000d74:	443c      	add	r4, r7
 8000d76:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d7a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d7e:	eba4 040c 	sub.w	r4, r4, ip
 8000d82:	429c      	cmp	r4, r3
 8000d84:	46ce      	mov	lr, r9
 8000d86:	469c      	mov	ip, r3
 8000d88:	d351      	bcc.n	8000e2e <__udivmoddi4+0x28a>
 8000d8a:	d04e      	beq.n	8000e2a <__udivmoddi4+0x286>
 8000d8c:	b155      	cbz	r5, 8000da4 <__udivmoddi4+0x200>
 8000d8e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d92:	eb64 040c 	sbc.w	r4, r4, ip
 8000d96:	fa04 f606 	lsl.w	r6, r4, r6
 8000d9a:	40cb      	lsrs	r3, r1
 8000d9c:	431e      	orrs	r6, r3
 8000d9e:	40cc      	lsrs	r4, r1
 8000da0:	e9c5 6400 	strd	r6, r4, [r5]
 8000da4:	2100      	movs	r1, #0
 8000da6:	e750      	b.n	8000c4a <__udivmoddi4+0xa6>
 8000da8:	f1c2 0320 	rsb	r3, r2, #32
 8000dac:	fa20 f103 	lsr.w	r1, r0, r3
 8000db0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db4:	fa24 f303 	lsr.w	r3, r4, r3
 8000db8:	4094      	lsls	r4, r2
 8000dba:	430c      	orrs	r4, r1
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd0:	0c23      	lsrs	r3, r4, #16
 8000dd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd6:	fb00 f107 	mul.w	r1, r0, r7
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x24c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000de6:	d22c      	bcs.n	8000e42 <__udivmoddi4+0x29e>
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d92a      	bls.n	8000e42 <__udivmoddi4+0x29e>
 8000dec:	3802      	subs	r0, #2
 8000dee:	4463      	add	r3, ip
 8000df0:	1a5b      	subs	r3, r3, r1
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e00:	fb01 f307 	mul.w	r3, r1, r7
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x276>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e10:	d213      	bcs.n	8000e3a <__udivmoddi4+0x296>
 8000e12:	42a3      	cmp	r3, r4
 8000e14:	d911      	bls.n	8000e3a <__udivmoddi4+0x296>
 8000e16:	3902      	subs	r1, #2
 8000e18:	4464      	add	r4, ip
 8000e1a:	1ae4      	subs	r4, r4, r3
 8000e1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e20:	e739      	b.n	8000c96 <__udivmoddi4+0xf2>
 8000e22:	4604      	mov	r4, r0
 8000e24:	e6f0      	b.n	8000c08 <__udivmoddi4+0x64>
 8000e26:	4608      	mov	r0, r1
 8000e28:	e706      	b.n	8000c38 <__udivmoddi4+0x94>
 8000e2a:	45c8      	cmp	r8, r9
 8000e2c:	d2ae      	bcs.n	8000d8c <__udivmoddi4+0x1e8>
 8000e2e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e32:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e36:	3801      	subs	r0, #1
 8000e38:	e7a8      	b.n	8000d8c <__udivmoddi4+0x1e8>
 8000e3a:	4631      	mov	r1, r6
 8000e3c:	e7ed      	b.n	8000e1a <__udivmoddi4+0x276>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	e799      	b.n	8000d76 <__udivmoddi4+0x1d2>
 8000e42:	4630      	mov	r0, r6
 8000e44:	e7d4      	b.n	8000df0 <__udivmoddi4+0x24c>
 8000e46:	46d6      	mov	lr, sl
 8000e48:	e77f      	b.n	8000d4a <__udivmoddi4+0x1a6>
 8000e4a:	4463      	add	r3, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e74d      	b.n	8000cec <__udivmoddi4+0x148>
 8000e50:	4606      	mov	r6, r0
 8000e52:	4623      	mov	r3, r4
 8000e54:	4608      	mov	r0, r1
 8000e56:	e70f      	b.n	8000c78 <__udivmoddi4+0xd4>
 8000e58:	3e02      	subs	r6, #2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	e730      	b.n	8000cc0 <__udivmoddi4+0x11c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <HAL_ReadAS5600_I2Cx>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float HAL_ReadAS5600_I2Cx(I2C_HandleTypeDef hi2cX) // pulling 0.5 ms
{
 8000e64:	b084      	sub	sp, #16
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af04      	add	r7, sp, #16
 8000e6c:	f107 0c10 	add.w	ip, r7, #16
 8000e70:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t regData[2];
  HAL_I2C_Mem_Read(&hi2cX, (I2C_AS5600 << 1) , AS5600_ANGLE_H	, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&regData , 2, 0x10000);
 8000e74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2301      	movs	r3, #1
 8000e84:	220e      	movs	r2, #14
 8000e86:	216c      	movs	r1, #108	@ 0x6c
 8000e88:	f107 0010 	add.w	r0, r7, #16
 8000e8c:	f002 ff74 	bl	8003d78 <HAL_I2C_Mem_Read>
  return ((float)(((uint16_t)regData[0]<<8 | (uint16_t)regData[1]) & (uint16_t)0xFFF))/4096*360;
 8000e90:	793b      	ldrb	r3, [r7, #4]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	797a      	ldrb	r2, [r7, #5]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e9c:	ee07 3a90 	vmov	s15, r3
 8000ea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea4:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000ec4 <HAL_ReadAS5600_I2Cx+0x60>
 8000ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eac:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000ec8 <HAL_ReadAS5600_I2Cx+0x64>
 8000eb0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ec0:	b004      	add	sp, #16
 8000ec2:	4770      	bx	lr
 8000ec4:	45800000 	.word	0x45800000
 8000ec8:	43b40000 	.word	0x43b40000

08000ecc <Motor_Init>:
	RightW.PWM[i] = RightW.PWM_Value;
  }

}
void Motor_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	  LeftW.hi2c = hi2c2;
 8000ed0:	4b69      	ldr	r3, [pc, #420]	@ (8001078 <Motor_Init+0x1ac>)
 8000ed2:	4a6a      	ldr	r2, [pc, #424]	@ (800107c <Motor_Init+0x1b0>)
 8000ed4:	334c      	adds	r3, #76	@ 0x4c
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	2254      	movs	r2, #84	@ 0x54
 8000eda:	4618      	mov	r0, r3
 8000edc:	f005 fc2e 	bl	800673c <memcpy>
	  LeftW.htim = htim1;
 8000ee0:	4b65      	ldr	r3, [pc, #404]	@ (8001078 <Motor_Init+0x1ac>)
 8000ee2:	4a67      	ldr	r2, [pc, #412]	@ (8001080 <Motor_Init+0x1b4>)
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	2248      	movs	r2, #72	@ 0x48
 8000eea:	4618      	mov	r0, r3
 8000eec:	f005 fc26 	bl	800673c <memcpy>
	  LeftW.PWM_Channel = TIM_CHANNEL_1;
 8000ef0:	4b61      	ldr	r3, [pc, #388]	@ (8001078 <Motor_Init+0x1ac>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	  LeftW.PWM_Value = 0;
 8000ef8:	4b5f      	ldr	r3, [pc, #380]	@ (8001078 <Motor_Init+0x1ac>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	  LeftW.GPIOx_INA = GPIOB;
 8000f00:	4b5d      	ldr	r3, [pc, #372]	@ (8001078 <Motor_Init+0x1ac>)
 8000f02:	4a60      	ldr	r2, [pc, #384]	@ (8001084 <Motor_Init+0x1b8>)
 8000f04:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	  LeftW.GPIOx_INB = GPIOB;
 8000f08:	4b5b      	ldr	r3, [pc, #364]	@ (8001078 <Motor_Init+0x1ac>)
 8000f0a:	4a5e      	ldr	r2, [pc, #376]	@ (8001084 <Motor_Init+0x1b8>)
 8000f0c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	  LeftW.GPIO_Pin_INA = R_INA_Pin;
 8000f10:	4b59      	ldr	r3, [pc, #356]	@ (8001078 <Motor_Init+0x1ac>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	  LeftW.GPIO_Pin_INB = R_INB_Pin;
 8000f18:	4b57      	ldr	r3, [pc, #348]	@ (8001078 <Motor_Init+0x1ac>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	  LeftW.PinState_INA    = GPIO_PIN_RESET;
 8000f20:	4b55      	ldr	r3, [pc, #340]	@ (8001078 <Motor_Init+0x1ac>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	  LeftW.PinState_INB    = GPIO_PIN_RESET;
 8000f28:	4b53      	ldr	r3, [pc, #332]	@ (8001078 <Motor_Init+0x1ac>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae

	  LeftW.PID = 100;
 8000f30:	4b51      	ldr	r3, [pc, #324]	@ (8001078 <Motor_Init+0x1ac>)
 8000f32:	4a55      	ldr	r2, [pc, #340]	@ (8001088 <Motor_Init+0x1bc>)
 8000f34:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8

	  HAL_TIM_PWM_Start(&LeftW.htim, LeftW.PWM_Channel);
 8000f38:	4b4f      	ldr	r3, [pc, #316]	@ (8001078 <Motor_Init+0x1ac>)
 8000f3a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4852      	ldr	r0, [pc, #328]	@ (800108c <Motor_Init+0x1c0>)
 8000f42:	f004 fa0d 	bl	8005360 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel, LeftW.PWM_Value );
 8000f46:	4b4c      	ldr	r3, [pc, #304]	@ (8001078 <Motor_Init+0x1ac>)
 8000f48:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d106      	bne.n	8000f5e <Motor_Init+0x92>
 8000f50:	4b49      	ldr	r3, [pc, #292]	@ (8001078 <Motor_Init+0x1ac>)
 8000f52:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 8000f56:	4b48      	ldr	r3, [pc, #288]	@ (8001078 <Motor_Init+0x1ac>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f5c:	e020      	b.n	8000fa0 <Motor_Init+0xd4>
 8000f5e:	4b46      	ldr	r3, [pc, #280]	@ (8001078 <Motor_Init+0x1ac>)
 8000f60:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d107      	bne.n	8000f78 <Motor_Init+0xac>
 8000f68:	4b43      	ldr	r3, [pc, #268]	@ (8001078 <Motor_Init+0x1ac>)
 8000f6a:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 8000f6e:	4b42      	ldr	r3, [pc, #264]	@ (8001078 <Motor_Init+0x1ac>)
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f76:	e013      	b.n	8000fa0 <Motor_Init+0xd4>
 8000f78:	4b3f      	ldr	r3, [pc, #252]	@ (8001078 <Motor_Init+0x1ac>)
 8000f7a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8000f7e:	2b08      	cmp	r3, #8
 8000f80:	d107      	bne.n	8000f92 <Motor_Init+0xc6>
 8000f82:	4b3d      	ldr	r3, [pc, #244]	@ (8001078 <Motor_Init+0x1ac>)
 8000f84:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 8000f88:	4b3b      	ldr	r3, [pc, #236]	@ (8001078 <Motor_Init+0x1ac>)
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f90:	e006      	b.n	8000fa0 <Motor_Init+0xd4>
 8000f92:	4b39      	ldr	r3, [pc, #228]	@ (8001078 <Motor_Init+0x1ac>)
 8000f94:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 8000f98:	4b37      	ldr	r3, [pc, #220]	@ (8001078 <Motor_Init+0x1ac>)
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	6413      	str	r3, [r2, #64]	@ 0x40


	  RightW.hi2c = hi2c1;
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	@ (8001090 <Motor_Init+0x1c4>)
 8000fa2:	4a3c      	ldr	r2, [pc, #240]	@ (8001094 <Motor_Init+0x1c8>)
 8000fa4:	334c      	adds	r3, #76	@ 0x4c
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	2254      	movs	r2, #84	@ 0x54
 8000faa:	4618      	mov	r0, r3
 8000fac:	f005 fbc6 	bl	800673c <memcpy>
	  RightW.htim = htim1;
 8000fb0:	4b37      	ldr	r3, [pc, #220]	@ (8001090 <Motor_Init+0x1c4>)
 8000fb2:	4a33      	ldr	r2, [pc, #204]	@ (8001080 <Motor_Init+0x1b4>)
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	2248      	movs	r2, #72	@ 0x48
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f005 fbbe 	bl	800673c <memcpy>
	  RightW.PWM_Channel = TIM_CHANNEL_4;
 8000fc0:	4b33      	ldr	r3, [pc, #204]	@ (8001090 <Motor_Init+0x1c4>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	  RightW.PWM_Value = 0;
 8000fc8:	4b31      	ldr	r3, [pc, #196]	@ (8001090 <Motor_Init+0x1c4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	  RightW.GPIOx_INA = GPIOA;
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001090 <Motor_Init+0x1c4>)
 8000fd2:	4a31      	ldr	r2, [pc, #196]	@ (8001098 <Motor_Init+0x1cc>)
 8000fd4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	  RightW.GPIOx_INB = GPIOA;
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <Motor_Init+0x1c4>)
 8000fda:	4a2f      	ldr	r2, [pc, #188]	@ (8001098 <Motor_Init+0x1cc>)
 8000fdc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	  RightW.GPIO_Pin_INA = L_INA_Pin;
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8001090 <Motor_Init+0x1c4>)
 8000fe2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fe6:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	  RightW.GPIO_Pin_INB = L_INB_Pin;
 8000fea:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <Motor_Init+0x1c4>)
 8000fec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ff0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	  RightW.PinState_INA   = GPIO_PIN_RESET;
 8000ff4:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <Motor_Init+0x1c4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	  RightW.PinState_INB   = GPIO_PIN_RESET;
 8000ffc:	4b24      	ldr	r3, [pc, #144]	@ (8001090 <Motor_Init+0x1c4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae

	  RightW.PID = 100;
 8001004:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <Motor_Init+0x1c4>)
 8001006:	4a20      	ldr	r2, [pc, #128]	@ (8001088 <Motor_Init+0x1bc>)
 8001008:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8

	  HAL_TIM_PWM_Start(&RightW.htim, RightW.PWM_Channel);
 800100c:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <Motor_Init+0x1c4>)
 800100e:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8001012:	4619      	mov	r1, r3
 8001014:	4821      	ldr	r0, [pc, #132]	@ (800109c <Motor_Init+0x1d0>)
 8001016:	f004 f9a3 	bl	8005360 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 800101a:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <Motor_Init+0x1c4>)
 800101c:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8001020:	2b00      	cmp	r3, #0
 8001022:	d106      	bne.n	8001032 <Motor_Init+0x166>
 8001024:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <Motor_Init+0x1c4>)
 8001026:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 800102a:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <Motor_Init+0x1c4>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001030:	e020      	b.n	8001074 <Motor_Init+0x1a8>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 8001032:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <Motor_Init+0x1c4>)
 8001034:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8001038:	2b04      	cmp	r3, #4
 800103a:	d107      	bne.n	800104c <Motor_Init+0x180>
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <Motor_Init+0x1c4>)
 800103e:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <Motor_Init+0x1c4>)
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800104a:	e013      	b.n	8001074 <Motor_Init+0x1a8>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 800104c:	4b10      	ldr	r3, [pc, #64]	@ (8001090 <Motor_Init+0x1c4>)
 800104e:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8001052:	2b08      	cmp	r3, #8
 8001054:	d107      	bne.n	8001066 <Motor_Init+0x19a>
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <Motor_Init+0x1c4>)
 8001058:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <Motor_Init+0x1c4>)
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001064:	e006      	b.n	8001074 <Motor_Init+0x1a8>
	  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 8001066:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <Motor_Init+0x1c4>)
 8001068:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <Motor_Init+0x1c4>)
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200002b0 	.word	0x200002b0
 800107c:	20000128 	.word	0x20000128
 8001080:	200001d4 	.word	0x200001d4
 8001084:	40020400 	.word	0x40020400
 8001088:	42c80000 	.word	0x42c80000
 800108c:	200002b4 	.word	0x200002b4
 8001090:	200004d8 	.word	0x200004d8
 8001094:	200000d4 	.word	0x200000d4
 8001098:	40020000 	.word	0x40020000
 800109c:	200004dc 	.word	0x200004dc

080010a0 <SetDir_Speed>:

void SetDir_Speed(float Speed)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	ed87 0a01 	vstr	s0, [r7, #4]

  RightW.Target_speed = Speed;
 80010aa:	4a41      	ldr	r2, [pc, #260]	@ (80011b0 <SetDir_Speed+0x110>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
  LeftW.Target_speed  = Speed;
 80010b2:	4a40      	ldr	r2, [pc, #256]	@ (80011b4 <SetDir_Speed+0x114>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  if (Speed==0) {
 80010ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80010be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c6:	d108      	bne.n	80010da <SetDir_Speed+0x3a>
    LeftW.PWM_Value  = 00;
 80010c8:	4b3a      	ldr	r3, [pc, #232]	@ (80011b4 <SetDir_Speed+0x114>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
    RightW.PWM_Value = 00;
 80010d0:	4b37      	ldr	r3, [pc, #220]	@ (80011b0 <SetDir_Speed+0x110>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
 80010d8:	e009      	b.n	80010ee <SetDir_Speed+0x4e>
  } else {
    LeftW.PWM_Value  = 10000;
 80010da:	4b36      	ldr	r3, [pc, #216]	@ (80011b4 <SetDir_Speed+0x114>)
 80010dc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80010e0:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
    RightW.PWM_Value = 10000;
 80010e4:	4b32      	ldr	r3, [pc, #200]	@ (80011b0 <SetDir_Speed+0x110>)
 80010e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80010ea:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
  }

  __HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel, LeftW.PWM_Value );
 80010ee:	4b31      	ldr	r3, [pc, #196]	@ (80011b4 <SetDir_Speed+0x114>)
 80010f0:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d106      	bne.n	8001106 <SetDir_Speed+0x66>
 80010f8:	4b2e      	ldr	r3, [pc, #184]	@ (80011b4 <SetDir_Speed+0x114>)
 80010fa:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 80010fe:	4b2d      	ldr	r3, [pc, #180]	@ (80011b4 <SetDir_Speed+0x114>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	635a      	str	r2, [r3, #52]	@ 0x34
 8001104:	e020      	b.n	8001148 <SetDir_Speed+0xa8>
 8001106:	4b2b      	ldr	r3, [pc, #172]	@ (80011b4 <SetDir_Speed+0x114>)
 8001108:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800110c:	2b04      	cmp	r3, #4
 800110e:	d107      	bne.n	8001120 <SetDir_Speed+0x80>
 8001110:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <SetDir_Speed+0x114>)
 8001112:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 8001116:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <SetDir_Speed+0x114>)
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	6393      	str	r3, [r2, #56]	@ 0x38
 800111e:	e013      	b.n	8001148 <SetDir_Speed+0xa8>
 8001120:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <SetDir_Speed+0x114>)
 8001122:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8001126:	2b08      	cmp	r3, #8
 8001128:	d107      	bne.n	800113a <SetDir_Speed+0x9a>
 800112a:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <SetDir_Speed+0x114>)
 800112c:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 8001130:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <SetDir_Speed+0x114>)
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001138:	e006      	b.n	8001148 <SetDir_Speed+0xa8>
 800113a:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <SetDir_Speed+0x114>)
 800113c:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 8001140:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <SetDir_Speed+0x114>)
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	6413      	str	r3, [r2, #64]	@ 0x40
  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 8001148:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <SetDir_Speed+0x110>)
 800114a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800114e:	2b00      	cmp	r3, #0
 8001150:	d106      	bne.n	8001160 <SetDir_Speed+0xc0>
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <SetDir_Speed+0x110>)
 8001154:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 8001158:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <SetDir_Speed+0x110>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	635a      	str	r2, [r3, #52]	@ 0x34

}
 800115e:	e020      	b.n	80011a2 <SetDir_Speed+0x102>
  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 8001160:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <SetDir_Speed+0x110>)
 8001162:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8001166:	2b04      	cmp	r3, #4
 8001168:	d107      	bne.n	800117a <SetDir_Speed+0xda>
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <SetDir_Speed+0x110>)
 800116c:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <SetDir_Speed+0x110>)
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001178:	e013      	b.n	80011a2 <SetDir_Speed+0x102>
  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <SetDir_Speed+0x110>)
 800117c:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8001180:	2b08      	cmp	r3, #8
 8001182:	d107      	bne.n	8001194 <SetDir_Speed+0xf4>
 8001184:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <SetDir_Speed+0x110>)
 8001186:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <SetDir_Speed+0x110>)
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	460b      	mov	r3, r1
 8001190:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001192:	e006      	b.n	80011a2 <SetDir_Speed+0x102>
  __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <SetDir_Speed+0x110>)
 8001196:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 800119a:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <SetDir_Speed+0x110>)
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200004d8 	.word	0x200004d8
 80011b4:	200002b0 	.word	0x200002b0

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011bc:	f001 fbec 	bl	8002998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c0:	f000 f840 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c4:	f000 fad4 	bl	8001770 <MX_GPIO_Init>
  MX_DMA_Init();
 80011c8:	f000 fab2 	bl	8001730 <MX_DMA_Init>
  MX_I2C1_Init();
 80011cc:	f000 f8fa 	bl	80013c4 <MX_I2C1_Init>
  MX_ADC1_Init();
 80011d0:	f000 f898 	bl	8001304 <MX_ADC1_Init>
  MX_I2C2_Init();
 80011d4:	f000 f924 	bl	8001420 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80011d8:	f000 fa80 	bl	80016dc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80011dc:	f000 fa30 	bl	8001640 <MX_TIM2_Init>
  MX_TIM1_Init();
 80011e0:	f000 f982 	bl	80014e8 <MX_TIM1_Init>
  MX_SPI2_Init();
 80011e4:	f000 f94a 	bl	800147c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80011e8:	4813      	ldr	r0, [pc, #76]	@ (8001238 <main+0x80>)
 80011ea:	f003 fffd 	bl	80051e8 <HAL_TIM_Base_Start_IT>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <main+0x40>
  {
    /* Starting Error */
    Error_Handler();
 80011f4:	f001 f918 	bl	8002428 <Error_Handler>
  }

  Motor_Init();
 80011f8:	f7ff fe68 	bl	8000ecc <Motor_Init>




  speedr =  0;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <main+0x84>)
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
  SetDir_Speed(speedr);
 8001204:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <main+0x84>)
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	eeb0 0a67 	vmov.f32	s0, s15
 800120e:	f7ff ff47 	bl	80010a0 <SetDir_Speed>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if (newval==1) {
 8001212:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <main+0x88>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d109      	bne.n	800122e <main+0x76>
		newval = 0;
 800121a:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <main+0x88>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
		 SetDir_Speed(speedr);
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <main+0x84>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	eeb0 0a67 	vmov.f32	s0, s15
 800122a:	f7ff ff39 	bl	80010a0 <SetDir_Speed>
	}

      HAL_Delay(100);
 800122e:	2064      	movs	r0, #100	@ 0x64
 8001230:	f001 fc24 	bl	8002a7c <HAL_Delay>
	if (newval==1) {
 8001234:	e7ed      	b.n	8001212 <main+0x5a>
 8001236:	bf00      	nop
 8001238:	2000021c 	.word	0x2000021c
 800123c:	20000700 	.word	0x20000700
 8001240:	20000704 	.word	0x20000704

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	@ 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	2230      	movs	r2, #48	@ 0x30
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f005 fa46 	bl	80066e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <SystemClock_Config+0xb8>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	4a22      	ldr	r2, [pc, #136]	@ (80012fc <SystemClock_Config+0xb8>)
 8001272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	@ 0x40
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <SystemClock_Config+0xb8>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <SystemClock_Config+0xbc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001290:	4a1b      	ldr	r2, [pc, #108]	@ (8001300 <SystemClock_Config+0xbc>)
 8001292:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <SystemClock_Config+0xbc>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a4:	2302      	movs	r3, #2
 80012a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a8:	2301      	movs	r3, #1
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ac:	2310      	movs	r3, #16
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b4:	f107 0320 	add.w	r3, r7, #32
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 fa65 	bl	8004788 <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012c4:	f001 f8b0 	bl	8002428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c8:	230f      	movs	r3, #15
 80012ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 fcc8 	bl	8004c78 <HAL_RCC_ClockConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012ee:	f001 f89b 	bl	8002428 <Error_Handler>
  }
}
 80012f2:	bf00      	nop
 80012f4:	3750      	adds	r7, #80	@ 0x50
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	40007000 	.word	0x40007000

08001304 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800130a:	463b      	mov	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001316:	4b28      	ldr	r3, [pc, #160]	@ (80013b8 <MX_ADC1_Init+0xb4>)
 8001318:	4a28      	ldr	r2, [pc, #160]	@ (80013bc <MX_ADC1_Init+0xb8>)
 800131a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800131c:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <MX_ADC1_Init+0xb4>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001322:	4b25      	ldr	r3, [pc, #148]	@ (80013b8 <MX_ADC1_Init+0xb4>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001328:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <MX_ADC1_Init+0xb4>)
 800132a:	2201      	movs	r2, #1
 800132c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800132e:	4b22      	ldr	r3, [pc, #136]	@ (80013b8 <MX_ADC1_Init+0xb4>)
 8001330:	2200      	movs	r2, #0
 8001332:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001334:	4b20      	ldr	r3, [pc, #128]	@ (80013b8 <MX_ADC1_Init+0xb4>)
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800133c:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <MX_ADC1_Init+0xb4>)
 800133e:	2200      	movs	r2, #0
 8001340:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001342:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <MX_ADC1_Init+0xb4>)
 8001344:	4a1e      	ldr	r2, [pc, #120]	@ (80013c0 <MX_ADC1_Init+0xbc>)
 8001346:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001348:	4b1b      	ldr	r3, [pc, #108]	@ (80013b8 <MX_ADC1_Init+0xb4>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800134e:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <MX_ADC1_Init+0xb4>)
 8001350:	2202      	movs	r2, #2
 8001352:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001354:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <MX_ADC1_Init+0xb4>)
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800135c:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <MX_ADC1_Init+0xb4>)
 800135e:	2201      	movs	r2, #1
 8001360:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001362:	4815      	ldr	r0, [pc, #84]	@ (80013b8 <MX_ADC1_Init+0xb4>)
 8001364:	f001 fbae 	bl	8002ac4 <HAL_ADC_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800136e:	f001 f85b 	bl	8002428 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001376:	2301      	movs	r3, #1
 8001378:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800137a:	2303      	movs	r3, #3
 800137c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	480d      	ldr	r0, [pc, #52]	@ (80013b8 <MX_ADC1_Init+0xb4>)
 8001384:	f001 fbe2 	bl	8002b4c <HAL_ADC_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800138e:	f001 f84b 	bl	8002428 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001392:	2301      	movs	r3, #1
 8001394:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001396:	2302      	movs	r3, #2
 8001398:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139a:	463b      	mov	r3, r7
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	@ (80013b8 <MX_ADC1_Init+0xb4>)
 80013a0:	f001 fbd4 	bl	8002b4c <HAL_ADC_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80013aa:	f001 f83d 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000002c 	.word	0x2000002c
 80013bc:	40012000 	.word	0x40012000
 80013c0:	0f000001 	.word	0x0f000001

080013c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <MX_I2C1_Init+0x50>)
 80013ca:	4a13      	ldr	r2, [pc, #76]	@ (8001418 <MX_I2C1_Init+0x54>)
 80013cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ce:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <MX_I2C1_Init+0x50>)
 80013d0:	4a12      	ldr	r2, [pc, #72]	@ (800141c <MX_I2C1_Init+0x58>)
 80013d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <MX_I2C1_Init+0x50>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013da:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <MX_I2C1_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <MX_I2C1_Init+0x50>)
 80013e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <MX_I2C1_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <MX_I2C1_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f4:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <MX_I2C1_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <MX_I2C1_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	@ (8001414 <MX_I2C1_Init+0x50>)
 8001402:	f002 fb75 	bl	8003af0 <HAL_I2C_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800140c:	f001 f80c 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200000d4 	.word	0x200000d4
 8001418:	40005400 	.word	0x40005400
 800141c:	000186a0 	.word	0x000186a0

08001420 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <MX_I2C2_Init+0x50>)
 8001426:	4a13      	ldr	r2, [pc, #76]	@ (8001474 <MX_I2C2_Init+0x54>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <MX_I2C2_Init+0x50>)
 800142c:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <MX_I2C2_Init+0x58>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001430:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <MX_I2C2_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001436:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <MX_I2C2_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_I2C2_Init+0x50>)
 800143e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001442:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <MX_I2C2_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_I2C2_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001450:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <MX_I2C2_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MX_I2C2_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <MX_I2C2_Init+0x50>)
 800145e:	f002 fb47 	bl	8003af0 <HAL_I2C_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001468:	f000 ffde 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000128 	.word	0x20000128
 8001474:	40005800 	.word	0x40005800
 8001478:	000186a0 	.word	0x000186a0

0800147c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <MX_SPI2_Init+0x64>)
 8001482:	4a18      	ldr	r2, [pc, #96]	@ (80014e4 <MX_SPI2_Init+0x68>)
 8001484:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001486:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <MX_SPI2_Init+0x64>)
 8001488:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800148c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <MX_SPI2_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <MX_SPI2_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_SPI2_Init+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_SPI2_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_SPI2_Init+0x64>)
 80014a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_SPI2_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <MX_SPI2_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_SPI2_Init+0x64>)
 80014bc:	2200      	movs	r2, #0
 80014be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014c0:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <MX_SPI2_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_SPI2_Init+0x64>)
 80014c8:	220a      	movs	r2, #10
 80014ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <MX_SPI2_Init+0x64>)
 80014ce:	f003 fdb3 	bl	8005038 <HAL_SPI_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014d8:	f000 ffa6 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000017c 	.word	0x2000017c
 80014e4:	40003800 	.word	0x40003800

080014e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b096      	sub	sp, #88	@ 0x58
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2220      	movs	r2, #32
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f005 f8df 	bl	80066e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001526:	4b44      	ldr	r3, [pc, #272]	@ (8001638 <MX_TIM1_Init+0x150>)
 8001528:	4a44      	ldr	r2, [pc, #272]	@ (800163c <MX_TIM1_Init+0x154>)
 800152a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800152c:	4b42      	ldr	r3, [pc, #264]	@ (8001638 <MX_TIM1_Init+0x150>)
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b41      	ldr	r3, [pc, #260]	@ (8001638 <MX_TIM1_Init+0x150>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001538:	4b3f      	ldr	r3, [pc, #252]	@ (8001638 <MX_TIM1_Init+0x150>)
 800153a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800153e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b3d      	ldr	r3, [pc, #244]	@ (8001638 <MX_TIM1_Init+0x150>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001546:	4b3c      	ldr	r3, [pc, #240]	@ (8001638 <MX_TIM1_Init+0x150>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b3a      	ldr	r3, [pc, #232]	@ (8001638 <MX_TIM1_Init+0x150>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001552:	4839      	ldr	r0, [pc, #228]	@ (8001638 <MX_TIM1_Init+0x150>)
 8001554:	f003 fdf9 	bl	800514a <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800155e:	f000 ff63 	bl	8002428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001562:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001566:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001568:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800156c:	4619      	mov	r1, r3
 800156e:	4832      	ldr	r0, [pc, #200]	@ (8001638 <MX_TIM1_Init+0x150>)
 8001570:	f004 f958 	bl	8005824 <HAL_TIM_ConfigClockSource>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800157a:	f000 ff55 	bl	8002428 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800157e:	482e      	ldr	r0, [pc, #184]	@ (8001638 <MX_TIM1_Init+0x150>)
 8001580:	f003 fe94 	bl	80052ac <HAL_TIM_PWM_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800158a:	f000 ff4d 	bl	8002428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001596:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800159a:	4619      	mov	r1, r3
 800159c:	4826      	ldr	r0, [pc, #152]	@ (8001638 <MX_TIM1_Init+0x150>)
 800159e:	f004 fd09 	bl	8005fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015a8:	f000 ff3e 	bl	8002428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ac:	2360      	movs	r3, #96	@ 0x60
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4819      	ldr	r0, [pc, #100]	@ (8001638 <MX_TIM1_Init+0x150>)
 80015d2:	f004 f865 	bl	80056a0 <HAL_TIM_PWM_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015dc:	f000 ff24 	bl	8002428 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e4:	220c      	movs	r2, #12
 80015e6:	4619      	mov	r1, r3
 80015e8:	4813      	ldr	r0, [pc, #76]	@ (8001638 <MX_TIM1_Init+0x150>)
 80015ea:	f004 f859 	bl	80056a0 <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80015f4:	f000 ff18 	bl	8002428 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800160c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001610:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4807      	ldr	r0, [pc, #28]	@ (8001638 <MX_TIM1_Init+0x150>)
 800161c:	f004 fd38 	bl	8006090 <HAL_TIMEx_ConfigBreakDeadTime>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001626:	f000 feff 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800162a:	4803      	ldr	r0, [pc, #12]	@ (8001638 <MX_TIM1_Init+0x150>)
 800162c:	f001 f8b2 	bl	8002794 <HAL_TIM_MspPostInit>

}
 8001630:	bf00      	nop
 8001632:	3758      	adds	r7, #88	@ 0x58
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200001d4 	.word	0x200001d4
 800163c:	40010000 	.word	0x40010000

08001640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001654:	463b      	mov	r3, r7
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800165c:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <MX_TIM2_Init+0x98>)
 800165e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001662:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 8001664:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <MX_TIM2_Init+0x98>)
 8001666:	f240 623f 	movw	r2, #1599	@ 0x63f
 800166a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <MX_TIM2_Init+0x98>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001672:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <MX_TIM2_Init+0x98>)
 8001674:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001678:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <MX_TIM2_Init+0x98>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <MX_TIM2_Init+0x98>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001686:	4814      	ldr	r0, [pc, #80]	@ (80016d8 <MX_TIM2_Init+0x98>)
 8001688:	f003 fd5f 	bl	800514a <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001692:	f000 fec9 	bl	8002428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800169a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	4619      	mov	r1, r3
 80016a2:	480d      	ldr	r0, [pc, #52]	@ (80016d8 <MX_TIM2_Init+0x98>)
 80016a4:	f004 f8be 	bl	8005824 <HAL_TIM_ConfigClockSource>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016ae:	f000 febb 	bl	8002428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ba:	463b      	mov	r3, r7
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	@ (80016d8 <MX_TIM2_Init+0x98>)
 80016c0:	f004 fc78 	bl	8005fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016ca:	f000 fead 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000021c 	.word	0x2000021c

080016dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <MX_USART1_UART_Init+0x4c>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	@ (800172c <MX_USART1_UART_Init+0x50>)
 80016e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <MX_USART1_UART_Init+0x4c>)
 80016e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <MX_USART1_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MX_USART1_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <MX_USART1_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <MX_USART1_UART_Init+0x4c>)
 8001702:	220c      	movs	r2, #12
 8001704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <MX_USART1_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <MX_USART1_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_USART1_UART_Init+0x4c>)
 8001714:	f004 fd22 	bl	800615c <HAL_UART_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800171e:	f000 fe83 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000264 	.word	0x20000264
 800172c:	40011000 	.word	0x40011000

08001730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <MX_DMA_Init+0x3c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a0b      	ldr	r2, [pc, #44]	@ (800176c <MX_DMA_Init+0x3c>)
 8001740:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_DMA_Init+0x3c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	2038      	movs	r0, #56	@ 0x38
 8001758:	f001 fcf1 	bl	800313e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800175c:	2038      	movs	r0, #56	@ 0x38
 800175e:	f001 fd0a 	bl	8003176 <HAL_NVIC_EnableIRQ>

}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800

08001770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	@ 0x28
 8001774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b47      	ldr	r3, [pc, #284]	@ (80018a8 <MX_GPIO_Init+0x138>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a46      	ldr	r2, [pc, #280]	@ (80018a8 <MX_GPIO_Init+0x138>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b44      	ldr	r3, [pc, #272]	@ (80018a8 <MX_GPIO_Init+0x138>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b40      	ldr	r3, [pc, #256]	@ (80018a8 <MX_GPIO_Init+0x138>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a3f      	ldr	r2, [pc, #252]	@ (80018a8 <MX_GPIO_Init+0x138>)
 80017ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b3d      	ldr	r3, [pc, #244]	@ (80018a8 <MX_GPIO_Init+0x138>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b39      	ldr	r3, [pc, #228]	@ (80018a8 <MX_GPIO_Init+0x138>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a38      	ldr	r2, [pc, #224]	@ (80018a8 <MX_GPIO_Init+0x138>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b36      	ldr	r3, [pc, #216]	@ (80018a8 <MX_GPIO_Init+0x138>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	4b32      	ldr	r3, [pc, #200]	@ (80018a8 <MX_GPIO_Init+0x138>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a31      	ldr	r2, [pc, #196]	@ (80018a8 <MX_GPIO_Init+0x138>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b2f      	ldr	r3, [pc, #188]	@ (80018a8 <MX_GPIO_Init+0x138>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUELED_GPIO_Port, BLUELED_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017fc:	482b      	ldr	r0, [pc, #172]	@ (80018ac <MX_GPIO_Init+0x13c>)
 80017fe:	f002 f943 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_INA_Pin|R_INB_Pin, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	2103      	movs	r1, #3
 8001806:	482a      	ldr	r0, [pc, #168]	@ (80018b0 <MX_GPIO_Init+0x140>)
 8001808:	f002 f93e 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_INB_Pin|L_INA_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001812:	4828      	ldr	r0, [pc, #160]	@ (80018b4 <MX_GPIO_Init+0x144>)
 8001814:	f002 f938 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUELED_Pin */
  GPIO_InitStruct.Pin = BLUELED_Pin;
 8001818:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	2301      	movs	r3, #1
 8001820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUELED_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	481e      	ldr	r0, [pc, #120]	@ (80018ac <MX_GPIO_Init+0x13c>)
 8001832:	f001 ffa5 	bl	8003780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	481a      	ldr	r0, [pc, #104]	@ (80018b4 <MX_GPIO_Init+0x144>)
 800184a:	f001 ff99 	bl	8003780 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_INA_Pin R_INB_Pin */
  GPIO_InitStruct.Pin = R_INA_Pin|R_INB_Pin;
 800184e:	2303      	movs	r3, #3
 8001850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001852:	2301      	movs	r3, #1
 8001854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	4812      	ldr	r0, [pc, #72]	@ (80018b0 <MX_GPIO_Init+0x140>)
 8001866:	f001 ff8b 	bl	8003780 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_INB_Pin L_INA_Pin */
  GPIO_InitStruct.Pin = L_INB_Pin|L_INA_Pin;
 800186a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001870:	2301      	movs	r3, #1
 8001872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	480c      	ldr	r0, [pc, #48]	@ (80018b4 <MX_GPIO_Init+0x144>)
 8001884:	f001 ff7c 	bl	8003780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001888:	2310      	movs	r3, #16
 800188a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <MX_GPIO_Init+0x140>)
 800189c:	f001 ff70 	bl	8003780 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	@ 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020000 	.word	0x40020000

080018b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80018b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018bc:	b097      	sub	sp, #92	@ 0x5c
 80018be:	af12      	add	r7, sp, #72	@ 0x48
 80018c0:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80018c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018c6:	489c      	ldr	r0, [pc, #624]	@ (8001b38 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80018c8:	f002 f8f7 	bl	8003aba <HAL_GPIO_TogglePin>


  for (uint8_t i=1;i<MAX_ANGLE_WHEEL_ARRAY;i++) {
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e06c      	b.n	80019ac <HAL_TIM_PeriodElapsedCallback+0xf4>
    LeftW.angle[i-1]    = LeftW.angle[i];
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	1e51      	subs	r1, r2, #1
 80018d8:	4a98      	ldr	r2, [pc, #608]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80018da:	331c      	adds	r3, #28
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4413      	add	r3, r2
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	4895      	ldr	r0, [pc, #596]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80018e6:	311c      	adds	r1, #28
 80018e8:	00c9      	lsls	r1, r1, #3
 80018ea:	4401      	add	r1, r0
 80018ec:	e9c1 2300 	strd	r2, r3, [r1]
    RightW.angle[i-1]   = RightW.angle[i];
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	1e51      	subs	r1, r2, #1
 80018f6:	4a92      	ldr	r2, [pc, #584]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80018f8:	331c      	adds	r3, #28
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4413      	add	r3, r2
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	488f      	ldr	r0, [pc, #572]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001904:	311c      	adds	r1, #28
 8001906:	00c9      	lsls	r1, r1, #3
 8001908:	4401      	add	r1, r0
 800190a:	e9c1 2300 	strd	r2, r3, [r1]
    LeftW.time_ms_wheel[i-1] = LeftW.time_ms_wheel[i] ;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	1e51      	subs	r1, r2, #1
 8001914:	4a89      	ldr	r2, [pc, #548]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001916:	332c      	adds	r3, #44	@ 0x2c
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	4887      	ldr	r0, [pc, #540]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001920:	f101 032c 	add.w	r3, r1, #44	@ 0x2c
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4403      	add	r3, r0
 8001928:	605a      	str	r2, [r3, #4]
    RightW.time_ms_wheel[i-1] = RightW.time_ms_wheel[i] ;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	1e51      	subs	r1, r2, #1
 8001930:	4a83      	ldr	r2, [pc, #524]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001932:	332c      	adds	r3, #44	@ 0x2c
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	4881      	ldr	r0, [pc, #516]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800193c:	f101 032c 	add.w	r3, r1, #44	@ 0x2c
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4403      	add	r3, r0
 8001944:	605a      	str	r2, [r3, #4]

    LeftW.speed[i-1] = LeftW.speed[i];
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	3b01      	subs	r3, #1
 800194c:	497b      	ldr	r1, [pc, #492]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800194e:	324c      	adds	r2, #76	@ 0x4c
 8001950:	0092      	lsls	r2, r2, #2
 8001952:	440a      	add	r2, r1
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	4979      	ldr	r1, [pc, #484]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001958:	334c      	adds	r3, #76	@ 0x4c
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	601a      	str	r2, [r3, #0]
    RightW.speed[i-1] = RightW.speed[i];
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	3b01      	subs	r3, #1
 8001966:	4976      	ldr	r1, [pc, #472]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001968:	324c      	adds	r2, #76	@ 0x4c
 800196a:	0092      	lsls	r2, r2, #2
 800196c:	440a      	add	r2, r1
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	4973      	ldr	r1, [pc, #460]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001972:	334c      	adds	r3, #76	@ 0x4c
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	601a      	str	r2, [r3, #0]

    LeftW.quadrant[i-1] = LeftW.quadrant[i];
 800197a:	7bfa      	ldrb	r2, [r7, #15]
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	3b01      	subs	r3, #1
 8001980:	496e      	ldr	r1, [pc, #440]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001982:	3256      	adds	r2, #86	@ 0x56
 8001984:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001988:	496c      	ldr	r1, [pc, #432]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800198a:	3356      	adds	r3, #86	@ 0x56
 800198c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    RightW.quadrant[i-1] = RightW.quadrant[i];
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	3b01      	subs	r3, #1
 8001996:	496a      	ldr	r1, [pc, #424]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001998:	3256      	adds	r2, #86	@ 0x56
 800199a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800199e:	4968      	ldr	r1, [pc, #416]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80019a0:	3356      	adds	r3, #86	@ 0x56
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (uint8_t i=1;i<MAX_ANGLE_WHEEL_ARRAY;i++) {
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	3301      	adds	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	2b09      	cmp	r3, #9
 80019b0:	d98f      	bls.n	80018d2 <HAL_TIM_PeriodElapsedCallback+0x1a>

  };

  RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1] = HAL_GetTick();
 80019b2:	f001 f857 	bl	8002a64 <HAL_GetTick>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4a61      	ldr	r2, [pc, #388]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80019ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1]  = HAL_GetTick();
 80019be:	f001 f851 	bl	8002a64 <HAL_GetTick>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4a5d      	ldr	r2, [pc, #372]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80019c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  LeftW.angle[MAX_ANGLE_WHEEL_ARRAY-1]   = HAL_ReadAS5600_I2Cx(LeftW.hi2c);
 80019ca:	4e5c      	ldr	r6, [pc, #368]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80019cc:	4668      	mov	r0, sp
 80019ce:	f106 035c 	add.w	r3, r6, #92	@ 0x5c
 80019d2:	2244      	movs	r2, #68	@ 0x44
 80019d4:	4619      	mov	r1, r3
 80019d6:	f004 feb1 	bl	800673c <memcpy>
 80019da:	f106 034c 	add.w	r3, r6, #76	@ 0x4c
 80019de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e0:	f7ff fa40 	bl	8000e64 <HAL_ReadAS5600_I2Cx>
 80019e4:	ee10 3a10 	vmov	r3, s0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fd59 	bl	80004a0 <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4952      	ldr	r1, [pc, #328]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80019f4:	e9c1 234a 	strd	r2, r3, [r1, #296]	@ 0x128
  RightW.angle[MAX_ANGLE_WHEEL_ARRAY-1]  = HAL_ReadAS5600_I2Cx(RightW.hi2c);
 80019f8:	4e51      	ldr	r6, [pc, #324]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80019fa:	4668      	mov	r0, sp
 80019fc:	f106 035c 	add.w	r3, r6, #92	@ 0x5c
 8001a00:	2244      	movs	r2, #68	@ 0x44
 8001a02:	4619      	mov	r1, r3
 8001a04:	f004 fe9a 	bl	800673c <memcpy>
 8001a08:	f106 034c 	add.w	r3, r6, #76	@ 0x4c
 8001a0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a0e:	f7ff fa29 	bl	8000e64 <HAL_ReadAS5600_I2Cx>
 8001a12:	ee10 3a10 	vmov	r3, s0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd42 	bl	80004a0 <__aeabi_f2d>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4947      	ldr	r1, [pc, #284]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001a22:	e9c1 234a 	strd	r2, r3, [r1, #296]	@ 0x128


  LeftW.quadrant[MAX_ANGLE_WHEEL_ARRAY-1] =   (int) (LeftW.angle[MAX_ANGLE_WHEEL_ARRAY-1] / 90);
 8001a26:	4b45      	ldr	r3, [pc, #276]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001a28:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	4b44      	ldr	r3, [pc, #272]	@ (8001b44 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001a32:	f7fe feb7 	bl	80007a4 <__aeabi_ddiv>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff f821 	bl	8000a84 <__aeabi_d2iz>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4a3d      	ldr	r2, [pc, #244]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001a46:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c
  RightW.quadrant[MAX_ANGLE_WHEEL_ARRAY-1] = (int)(RightW.angle[MAX_ANGLE_WHEEL_ARRAY-1]/90);
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001a4c:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	4b3b      	ldr	r3, [pc, #236]	@ (8001b44 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001a56:	f7fe fea5 	bl	80007a4 <__aeabi_ddiv>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	f7ff f80f 	bl	8000a84 <__aeabi_d2iz>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4a35      	ldr	r2, [pc, #212]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001a6a:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c


  if (RightW.averspeed>=0) {
 8001a6e:	4b34      	ldr	r3, [pc, #208]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001a70:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 8001a74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7c:	f2c0 80ab 	blt.w	8001bd6 <HAL_TIM_PeriodElapsedCallback+0x31e>
	if ((RightW.quadrant[MAX_ANGLE_WHEEL_ARRAY-2]==3) && (RightW.quadrant[MAX_ANGLE_WHEEL_ARRAY-1]==0)) {
 8001a80:	4b2f      	ldr	r3, [pc, #188]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001a82:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d164      	bne.n	8001b54 <HAL_TIM_PeriodElapsedCallback+0x29c>
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001a8c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d15f      	bne.n	8001b54 <HAL_TIM_PeriodElapsedCallback+0x29c>
      RightW.speed[MAX_ANGLE_WHEEL_ARRAY-1] = ((1000*((RightW.angle[MAX_ANGLE_WHEEL_ARRAY-1]+360) - RightW.angle[MAX_ANGLE_WHEEL_ARRAY-2])) / (RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1] - RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-2]))/360*60;
 8001a94:	4b2a      	ldr	r3, [pc, #168]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001a96:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b48 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001aa0:	f7fe fba0 	bl	80001e4 <__adddf3>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001aae:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 8001ab2:	f7fe fb95 	bl	80001e0 <__aeabi_dsub>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	4b22      	ldr	r3, [pc, #136]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001ac4:	f7fe fd44 	bl	8000550 <__aeabi_dmul>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4692      	mov	sl, r2
 8001ace:	469b      	mov	fp, r3
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001ad2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001ad8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fcbc 	bl	800045c <__aeabi_ui2d>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4650      	mov	r0, sl
 8001aea:	4659      	mov	r1, fp
 8001aec:	f7fe fe5a 	bl	80007a4 <__aeabi_ddiv>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001afe:	f7fe fe51 	bl	80007a4 <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001b10:	f7fe fd1e 	bl	8000550 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7fe ffda 	bl	8000ad4 <__aeabi_d2f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4a07      	ldr	r2, [pc, #28]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001b24:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
      RightW.turns++;
 8001b28:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001b2a:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4a03      	ldr	r2, [pc, #12]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001b32:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
 8001b36:	e04e      	b.n	8001bd6 <HAL_TIM_PeriodElapsedCallback+0x31e>
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	200002b0 	.word	0x200002b0
 8001b40:	200004d8 	.word	0x200004d8
 8001b44:	40568000 	.word	0x40568000
 8001b48:	40768000 	.word	0x40768000
 8001b4c:	408f4000 	.word	0x408f4000
 8001b50:	404e0000 	.word	0x404e0000
    } else {
      RightW.speed[MAX_ANGLE_WHEEL_ARRAY-1] = ((1000*(RightW.angle[MAX_ANGLE_WHEEL_ARRAY-1] - RightW.angle[MAX_ANGLE_WHEEL_ARRAY-2])) / (RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1] - RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-2]))/360*60;
 8001b54:	4ba7      	ldr	r3, [pc, #668]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001b56:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 8001b5a:	4ba6      	ldr	r3, [pc, #664]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001b5c:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 8001b60:	f7fe fb3e 	bl	80001e0 <__aeabi_dsub>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	4ba1      	ldr	r3, [pc, #644]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8001b72:	f7fe fced 	bl	8000550 <__aeabi_dmul>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4692      	mov	sl, r2
 8001b7c:	469b      	mov	fp, r3
 8001b7e:	4b9d      	ldr	r3, [pc, #628]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001b80:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001b84:	4b9b      	ldr	r3, [pc, #620]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001b86:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fc65 	bl	800045c <__aeabi_ui2d>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4650      	mov	r0, sl
 8001b98:	4659      	mov	r1, fp
 8001b9a:	f7fe fe03 	bl	80007a4 <__aeabi_ddiv>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b94      	ldr	r3, [pc, #592]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x544>)
 8001bac:	f7fe fdfa 	bl	80007a4 <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	4b90      	ldr	r3, [pc, #576]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8001bbe:	f7fe fcc7 	bl	8000550 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7fe ff83 	bl	8000ad4 <__aeabi_d2f>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a88      	ldr	r2, [pc, #544]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001bd2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
    };
  };

   if (RightW.averspeed<0) {
 8001bd6:	4b87      	ldr	r3, [pc, #540]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001bd8:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 8001bdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be4:	f140 80a0 	bpl.w	8001d28 <HAL_TIM_PeriodElapsedCallback+0x470>
	if ((RightW.quadrant[MAX_ANGLE_WHEEL_ARRAY-2]==0) && (RightW.quadrant[MAX_ANGLE_WHEEL_ARRAY-1]==3)) {
 8001be8:	4b82      	ldr	r3, [pc, #520]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001bea:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d159      	bne.n	8001ca6 <HAL_TIM_PeriodElapsedCallback+0x3ee>
 8001bf2:	4b80      	ldr	r3, [pc, #512]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001bf4:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d154      	bne.n	8001ca6 <HAL_TIM_PeriodElapsedCallback+0x3ee>
      RightW.speed[MAX_ANGLE_WHEEL_ARRAY-1] = -((1000*(((360-RightW.angle[MAX_ANGLE_WHEEL_ARRAY-1])) + RightW.angle[MAX_ANGLE_WHEEL_ARRAY-2])) / (RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1] - RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-2]))/360*60;
 8001bfc:	4b7d      	ldr	r3, [pc, #500]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001bfe:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	@ 0x128
 8001c02:	f04f 0000 	mov.w	r0, #0
 8001c06:	497d      	ldr	r1, [pc, #500]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x544>)
 8001c08:	f7fe faea 	bl	80001e0 <__aeabi_dsub>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	4b77      	ldr	r3, [pc, #476]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001c16:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 8001c1a:	f7fe fae3 	bl	80001e4 <__adddf3>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	4b73      	ldr	r3, [pc, #460]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8001c2c:	f7fe fc90 	bl	8000550 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4692      	mov	sl, r2
 8001c36:	469b      	mov	fp, r3
 8001c38:	4b6e      	ldr	r3, [pc, #440]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001c3a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001c3e:	4b6d      	ldr	r3, [pc, #436]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001c40:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc08 	bl	800045c <__aeabi_ui2d>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4650      	mov	r0, sl
 8001c52:	4659      	mov	r1, fp
 8001c54:	f7fe fda6 	bl	80007a4 <__aeabi_ddiv>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4690      	mov	r8, r2
 8001c5e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	4b65      	ldr	r3, [pc, #404]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x544>)
 8001c68:	4640      	mov	r0, r8
 8001c6a:	4649      	mov	r1, r9
 8001c6c:	f7fe fd9a 	bl	80007a4 <__aeabi_ddiv>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b60      	ldr	r3, [pc, #384]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8001c7e:	f7fe fc67 	bl	8000550 <__aeabi_dmul>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ff23 	bl	8000ad4 <__aeabi_d2f>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a58      	ldr	r2, [pc, #352]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001c92:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
      RightW.turns++;
 8001c96:	4b57      	ldr	r3, [pc, #348]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001c98:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	4a55      	ldr	r2, [pc, #340]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001ca0:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
 8001ca4:	e040      	b.n	8001d28 <HAL_TIM_PeriodElapsedCallback+0x470>
    } else {
      RightW.speed[MAX_ANGLE_WHEEL_ARRAY-1] = ((1000*(RightW.angle[MAX_ANGLE_WHEEL_ARRAY-1] - RightW.angle[MAX_ANGLE_WHEEL_ARRAY-2])) / (RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1] - RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-2]))/360*60;
 8001ca6:	4b53      	ldr	r3, [pc, #332]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001ca8:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 8001cac:	4b51      	ldr	r3, [pc, #324]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001cae:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 8001cb2:	f7fe fa95 	bl	80001e0 <__aeabi_dsub>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	4b4d      	ldr	r3, [pc, #308]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8001cc4:	f7fe fc44 	bl	8000550 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4690      	mov	r8, r2
 8001cce:	4699      	mov	r9, r3
 8001cd0:	4b48      	ldr	r3, [pc, #288]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001cd2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001cd6:	4b47      	ldr	r3, [pc, #284]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001cd8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fbbc 	bl	800045c <__aeabi_ui2d>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4640      	mov	r0, r8
 8001cea:	4649      	mov	r1, r9
 8001cec:	f7fe fd5a 	bl	80007a4 <__aeabi_ddiv>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x544>)
 8001cfe:	f7fe fd51 	bl	80007a4 <__aeabi_ddiv>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8001d10:	f7fe fc1e 	bl	8000550 <__aeabi_dmul>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f7fe feda 	bl	8000ad4 <__aeabi_d2f>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4a34      	ldr	r2, [pc, #208]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001d24:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
    };
  };



   if (LeftW.averspeed>=0) {
 8001d28:	4b36      	ldr	r3, [pc, #216]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8001d2a:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 8001d2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	f2c0 80a8 	blt.w	8001e8a <HAL_TIM_PeriodElapsedCallback+0x5d2>
 	if ((LeftW.quadrant[MAX_ANGLE_WHEEL_ARRAY-2]==3) && (LeftW.quadrant[MAX_ANGLE_WHEEL_ARRAY-1]==0)) {
 8001d3a:	4b32      	ldr	r3, [pc, #200]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8001d3c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d161      	bne.n	8001e08 <HAL_TIM_PeriodElapsedCallback+0x550>
 8001d44:	4b2f      	ldr	r3, [pc, #188]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8001d46:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d15c      	bne.n	8001e08 <HAL_TIM_PeriodElapsedCallback+0x550>
       LeftW.speed[MAX_ANGLE_WHEEL_ARRAY-1] = ((1000*((LeftW.angle[MAX_ANGLE_WHEEL_ARRAY-1]+360) - LeftW.angle[MAX_ANGLE_WHEEL_ARRAY-2])) / (LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1] - LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-2]))/360*60;
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8001d50:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	4b28      	ldr	r3, [pc, #160]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x544>)
 8001d5a:	f7fe fa43 	bl	80001e4 <__adddf3>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	4b27      	ldr	r3, [pc, #156]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8001d68:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 8001d6c:	f7fe fa38 	bl	80001e0 <__aeabi_dsub>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8001d7e:	f7fe fbe7 	bl	8000550 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4690      	mov	r8, r2
 8001d88:	4699      	mov	r9, r3
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8001d8c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001d90:	4b1c      	ldr	r3, [pc, #112]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8001d92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fb5f 	bl	800045c <__aeabi_ui2d>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4640      	mov	r0, r8
 8001da4:	4649      	mov	r1, r9
 8001da6:	f7fe fcfd 	bl	80007a4 <__aeabi_ddiv>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x544>)
 8001db8:	f7fe fcf4 	bl	80007a4 <__aeabi_ddiv>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8001dca:	f7fe fbc1 	bl	8000550 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f7fe fe7d 	bl	8000ad4 <__aeabi_d2f>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4a09      	ldr	r2, [pc, #36]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8001dde:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
       LeftW.turns++;
 8001de2:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8001de4:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8001de8:	3301      	adds	r3, #1
 8001dea:	4a06      	ldr	r2, [pc, #24]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8001dec:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
 8001df0:	e04b      	b.n	8001e8a <HAL_TIM_PeriodElapsedCallback+0x5d2>
 8001df2:	bf00      	nop
 8001df4:	200004d8 	.word	0x200004d8
 8001df8:	408f4000 	.word	0x408f4000
 8001dfc:	40768000 	.word	0x40768000
 8001e00:	404e0000 	.word	0x404e0000
 8001e04:	200002b0 	.word	0x200002b0
     } else {
       LeftW.speed[MAX_ANGLE_WHEEL_ARRAY-1] = ((1000*(LeftW.angle[MAX_ANGLE_WHEEL_ARRAY-1] - LeftW.angle[MAX_ANGLE_WHEEL_ARRAY-2])) / (LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1] - LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-2]))/360*60;
 8001e08:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001e0a:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 8001e0e:	4b7a      	ldr	r3, [pc, #488]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001e10:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 8001e14:	f7fe f9e4 	bl	80001e0 <__aeabi_dsub>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b75      	ldr	r3, [pc, #468]	@ (8001ffc <HAL_TIM_PeriodElapsedCallback+0x744>)
 8001e26:	f7fe fb93 	bl	8000550 <__aeabi_dmul>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4690      	mov	r8, r2
 8001e30:	4699      	mov	r9, r3
 8001e32:	4b71      	ldr	r3, [pc, #452]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001e34:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001e38:	4b6f      	ldr	r3, [pc, #444]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001e3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb0b 	bl	800045c <__aeabi_ui2d>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4640      	mov	r0, r8
 8001e4c:	4649      	mov	r1, r9
 8001e4e:	f7fe fca9 	bl	80007a4 <__aeabi_ddiv>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	4b68      	ldr	r3, [pc, #416]	@ (8002000 <HAL_TIM_PeriodElapsedCallback+0x748>)
 8001e60:	f7fe fca0 	bl	80007a4 <__aeabi_ddiv>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	4b64      	ldr	r3, [pc, #400]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8001e72:	f7fe fb6d 	bl	8000550 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe fe29 	bl	8000ad4 <__aeabi_d2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4a5c      	ldr	r2, [pc, #368]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001e86:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
     };
   };

    if (LeftW.averspeed<0) {
 8001e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001e8c:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 8001e90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e98:	f140 80a0 	bpl.w	8001fdc <HAL_TIM_PeriodElapsedCallback+0x724>
 	if ((LeftW.quadrant[MAX_ANGLE_WHEEL_ARRAY-2]==0) && (LeftW.quadrant[MAX_ANGLE_WHEEL_ARRAY-1]==3)) {
 8001e9c:	4b56      	ldr	r3, [pc, #344]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001e9e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d159      	bne.n	8001f5a <HAL_TIM_PeriodElapsedCallback+0x6a2>
 8001ea6:	4b54      	ldr	r3, [pc, #336]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001ea8:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d154      	bne.n	8001f5a <HAL_TIM_PeriodElapsedCallback+0x6a2>
       LeftW.speed[MAX_ANGLE_WHEEL_ARRAY-1] = -((1000*(((360-LeftW.angle[MAX_ANGLE_WHEEL_ARRAY-1])) + LeftW.angle[MAX_ANGLE_WHEEL_ARRAY-2])) / (LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1] - LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-2]))/360*60;
 8001eb0:	4b51      	ldr	r3, [pc, #324]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001eb2:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	@ 0x128
 8001eb6:	f04f 0000 	mov.w	r0, #0
 8001eba:	4951      	ldr	r1, [pc, #324]	@ (8002000 <HAL_TIM_PeriodElapsedCallback+0x748>)
 8001ebc:	f7fe f990 	bl	80001e0 <__aeabi_dsub>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001eca:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 8001ece:	f7fe f989 	bl	80001e4 <__adddf3>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	4b47      	ldr	r3, [pc, #284]	@ (8001ffc <HAL_TIM_PeriodElapsedCallback+0x744>)
 8001ee0:	f7fe fb36 	bl	8000550 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4690      	mov	r8, r2
 8001eea:	4699      	mov	r9, r3
 8001eec:	4b42      	ldr	r3, [pc, #264]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001eee:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001ef2:	4b41      	ldr	r3, [pc, #260]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001ef4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe faae 	bl	800045c <__aeabi_ui2d>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4640      	mov	r0, r8
 8001f06:	4649      	mov	r1, r9
 8001f08:	f7fe fc4c 	bl	80007a4 <__aeabi_ddiv>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4614      	mov	r4, r2
 8001f12:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	4b39      	ldr	r3, [pc, #228]	@ (8002000 <HAL_TIM_PeriodElapsedCallback+0x748>)
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	4629      	mov	r1, r5
 8001f20:	f7fe fc40 	bl	80007a4 <__aeabi_ddiv>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b34      	ldr	r3, [pc, #208]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8001f32:	f7fe fb0d 	bl	8000550 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7fe fdc9 	bl	8000ad4 <__aeabi_d2f>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001f46:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
       LeftW.turns++;
 8001f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001f4c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8001f50:	3301      	adds	r3, #1
 8001f52:	4a29      	ldr	r2, [pc, #164]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001f54:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
 8001f58:	e040      	b.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x724>
     } else {
       LeftW.speed[MAX_ANGLE_WHEEL_ARRAY-1] = ((1000*(LeftW.angle[MAX_ANGLE_WHEEL_ARRAY-1] - LeftW.angle[MAX_ANGLE_WHEEL_ARRAY-2])) / (LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1] - LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-2]))/360*60;
 8001f5a:	4b27      	ldr	r3, [pc, #156]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001f5c:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 8001f60:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001f62:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 8001f66:	f7fe f93b 	bl	80001e0 <__aeabi_dsub>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	4b21      	ldr	r3, [pc, #132]	@ (8001ffc <HAL_TIM_PeriodElapsedCallback+0x744>)
 8001f78:	f7fe faea 	bl	8000550 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4614      	mov	r4, r2
 8001f82:	461d      	mov	r5, r3
 8001f84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001f86:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001f8c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fa62 	bl	800045c <__aeabi_ui2d>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	f7fe fc00 	bl	80007a4 <__aeabi_ddiv>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <HAL_TIM_PeriodElapsedCallback+0x748>)
 8001fb2:	f7fe fbf7 	bl	80007a4 <__aeabi_ddiv>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8001fc4:	f7fe fac4 	bl	8000550 <__aeabi_dmul>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f7fe fd80 	bl	8000ad4 <__aeabi_d2f>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4a08      	ldr	r2, [pc, #32]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001fd8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
     };
   };



  LeftW.averspeed = 0;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
  RightW.averspeed = 0;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180

  for (uint8_t i=0;i<MAX_ANGLE_WHEEL_ARRAY-2;i++) {
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73bb      	strb	r3, [r7, #14]
 8001ff4:	e02b      	b.n	800204e <HAL_TIM_PeriodElapsedCallback+0x796>
 8001ff6:	bf00      	nop
 8001ff8:	200002b0 	.word	0x200002b0
 8001ffc:	408f4000 	.word	0x408f4000
 8002000:	40768000 	.word	0x40768000
 8002004:	404e0000 	.word	0x404e0000
 8002008:	200004d8 	.word	0x200004d8
	LeftW.averspeed  = LeftW.averspeed + LeftW.speed[i];
 800200c:	4b88      	ldr	r3, [pc, #544]	@ (8002230 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800200e:	ed93 7a60 	vldr	s14, [r3, #384]	@ 0x180
 8002012:	7bbb      	ldrb	r3, [r7, #14]
 8002014:	4a86      	ldr	r2, [pc, #536]	@ (8002230 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8002016:	334c      	adds	r3, #76	@ 0x4c
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	edd3 7a00 	vldr	s15, [r3]
 8002020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002024:	4b82      	ldr	r3, [pc, #520]	@ (8002230 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8002026:	edc3 7a60 	vstr	s15, [r3, #384]	@ 0x180
	RightW.averspeed = RightW.averspeed + RightW.speed[i];
 800202a:	4b82      	ldr	r3, [pc, #520]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800202c:	ed93 7a60 	vldr	s14, [r3, #384]	@ 0x180
 8002030:	7bbb      	ldrb	r3, [r7, #14]
 8002032:	4a80      	ldr	r2, [pc, #512]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002034:	334c      	adds	r3, #76	@ 0x4c
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002042:	4b7c      	ldr	r3, [pc, #496]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002044:	edc3 7a60 	vstr	s15, [r3, #384]	@ 0x180
  for (uint8_t i=0;i<MAX_ANGLE_WHEEL_ARRAY-2;i++) {
 8002048:	7bbb      	ldrb	r3, [r7, #14]
 800204a:	3301      	adds	r3, #1
 800204c:	73bb      	strb	r3, [r7, #14]
 800204e:	7bbb      	ldrb	r3, [r7, #14]
 8002050:	2b07      	cmp	r3, #7
 8002052:	d9db      	bls.n	800200c <HAL_TIM_PeriodElapsedCallback+0x754>
  };

  RightW.averspeed = RightW.averspeed  / (MAX_ANGLE_WHEEL_ARRAY-2);
 8002054:	4b77      	ldr	r3, [pc, #476]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002056:	ed93 7a60 	vldr	s14, [r3, #384]	@ 0x180
 800205a:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800205e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002062:	4b74      	ldr	r3, [pc, #464]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002064:	edc3 7a60 	vstr	s15, [r3, #384]	@ 0x180
  LeftW.averspeed = LeftW.averspeed / (MAX_ANGLE_WHEEL_ARRAY-2);
 8002068:	4b71      	ldr	r3, [pc, #452]	@ (8002230 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800206a:	ed93 7a60 	vldr	s14, [r3, #384]	@ 0x180
 800206e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002076:	4b6e      	ldr	r3, [pc, #440]	@ (8002230 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8002078:	edc3 7a60 	vstr	s15, [r3, #384]	@ 0x180





  if  ((RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1] - RightW.speed_priortime) >  1000) {
 800207c:	4b6d      	ldr	r3, [pc, #436]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800207e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8002082:	4b6c      	ldr	r3, [pc, #432]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002084:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800208e:	f240 80e0 	bls.w	8002252 <HAL_TIM_PeriodElapsedCallback+0x99a>

	    if (RightW.Target_speed>0) {
 8002092:	4b68      	ldr	r3, [pc, #416]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002094:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8002098:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a0:	dd0a      	ble.n	80020b8 <HAL_TIM_PeriodElapsedCallback+0x800>
		  RightW.PinState_INA = GPIO_PIN_SET;
 80020a2:	4b64      	ldr	r3, [pc, #400]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		  RightW.PinState_INB = GPIO_PIN_RESET;
 80020aa:	4b62      	ldr	r3, [pc, #392]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		  RightW.Direction = WH_CW;
 80020b2:	4b60      	ldr	r3, [pc, #384]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
	    };
		if (RightW.Target_speed<0) {
 80020b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80020ba:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 80020be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c6:	d50a      	bpl.n	80020de <HAL_TIM_PeriodElapsedCallback+0x826>
		  RightW.PinState_INA = GPIO_PIN_RESET;
 80020c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		  RightW.PinState_INB = GPIO_PIN_SET;
 80020d0:	4b58      	ldr	r3, [pc, #352]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		  RightW.Direction = WH_CCW;
 80020d8:	4b56      	ldr	r3, [pc, #344]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
		};

		if (RightW.Target_speed==0) {
 80020de:	4b55      	ldr	r3, [pc, #340]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80020e0:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 80020e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ec:	d10e      	bne.n	800210c <HAL_TIM_PeriodElapsedCallback+0x854>
		  RightW.PinState_INA = GPIO_PIN_RESET;
 80020ee:	4b51      	ldr	r3, [pc, #324]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		  RightW.PinState_INB = GPIO_PIN_RESET;
 80020f6:	4b4f      	ldr	r3, [pc, #316]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
		  RightW.PWM_Value = 0;
 80020fe:	4b4d      	ldr	r3, [pc, #308]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002100:	2200      	movs	r2, #0
 8002102:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
		  RightW.Direction = WH_STOP;
 8002106:	4b4b      	ldr	r3, [pc, #300]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002108:	2202      	movs	r2, #2
 800210a:	701a      	strb	r2, [r3, #0]
		};


	HAL_GPIO_WritePin(RightW.GPIOx_INA,RightW.GPIO_Pin_INA, RightW.PinState_INA);
 800210c:	4b49      	ldr	r3, [pc, #292]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800210e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002112:	4a48      	ldr	r2, [pc, #288]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002114:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 8002118:	4a46      	ldr	r2, [pc, #280]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800211a:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 800211e:	4618      	mov	r0, r3
 8002120:	f001 fcb2 	bl	8003a88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RightW.GPIOx_INB,RightW.GPIO_Pin_INB, RightW.PinState_INB);
 8002124:	4b43      	ldr	r3, [pc, #268]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002126:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800212a:	4a42      	ldr	r2, [pc, #264]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800212c:	f8b2 10ac 	ldrh.w	r1, [r2, #172]	@ 0xac
 8002130:	4a40      	ldr	r2, [pc, #256]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002132:	f892 20ae 	ldrb.w	r2, [r2, #174]	@ 0xae
 8002136:	4618      	mov	r0, r3
 8002138:	f001 fca6 	bl	8003a88 <HAL_GPIO_WritePin>

	RightW.delta_speed = fabsf(RightW.Target_speed) - fabsf(RightW.averspeed);
 800213c:	4b3d      	ldr	r3, [pc, #244]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800213e:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8002142:	eeb0 7ae7 	vabs.f32	s14, s15
 8002146:	4b3b      	ldr	r3, [pc, #236]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002148:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 800214c:	eef0 7ae7 	vabs.f32	s15, s15
 8002150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002154:	4b37      	ldr	r3, [pc, #220]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002156:	edc3 7a69 	vstr	s15, [r3, #420]	@ 0x1a4

	if (fabsf(RightW.delta_speed)>0.1) {
 800215a:	4b36      	ldr	r3, [pc, #216]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800215c:	edd3 7a69 	vldr	s15, [r3, #420]	@ 0x1a4
 8002160:	eef0 7ae7 	vabs.f32	s15, s15
 8002164:	ee17 0a90 	vmov	r0, s15
 8002168:	f7fe f99a 	bl	80004a0 <__aeabi_f2d>
 800216c:	a32e      	add	r3, pc, #184	@ (adr r3, 8002228 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002172:	f7fe fc7d 	bl	8000a70 <__aeabi_dcmpgt>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d064      	beq.n	8002246 <HAL_TIM_PeriodElapsedCallback+0x98e>
	  RightW.delta_PWM = (int)(RightW.delta_speed * RightW.PID);
 800217c:	4b2d      	ldr	r3, [pc, #180]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800217e:	ed93 7a69 	vldr	s14, [r3, #420]	@ 0x1a4
 8002182:	4b2c      	ldr	r3, [pc, #176]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002184:	edd3 7a6a 	vldr	s15, [r3, #424]	@ 0x1a8
 8002188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002190:	ee17 2a90 	vmov	r2, s15
 8002194:	4b27      	ldr	r3, [pc, #156]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002196:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
  	  RightW.PWM_Value =  RightW.PWM_Value + RightW.delta_PWM  ;
 800219a:	4b26      	ldr	r3, [pc, #152]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800219c:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 80021a0:	4b24      	ldr	r3, [pc, #144]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80021a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80021a6:	4413      	add	r3, r2
 80021a8:	4a22      	ldr	r2, [pc, #136]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80021aa:	f8c2 3194 	str.w	r3, [r2, #404]	@ 0x194

      if (RightW.PWM_Value > 50000) {RightW.PWM_Value = 50000;};
 80021ae:	4b21      	ldr	r3, [pc, #132]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80021b0:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80021b4:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80021b8:	4293      	cmp	r3, r2
 80021ba:	dd04      	ble.n	80021c6 <HAL_TIM_PeriodElapsedCallback+0x90e>
 80021bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80021be:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80021c2:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
      if  (RightW.PWM_Value < 00) {RightW.PWM_Value = 0; };
 80021c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80021c8:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	da03      	bge.n	80021d8 <HAL_TIM_PeriodElapsedCallback+0x920>
 80021d0:	4b18      	ldr	r3, [pc, #96]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194

      __HAL_TIM_SET_COMPARE(&RightW.htim, RightW.PWM_Channel, RightW.PWM_Value );
 80021d8:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80021da:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d106      	bne.n	80021f0 <HAL_TIM_PeriodElapsedCallback+0x938>
 80021e2:	4b14      	ldr	r3, [pc, #80]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80021e4:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 80021e8:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80021ee:	e02a      	b.n	8002246 <HAL_TIM_PeriodElapsedCallback+0x98e>
 80021f0:	4b10      	ldr	r3, [pc, #64]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80021f2:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d107      	bne.n	800220a <HAL_TIM_PeriodElapsedCallback+0x952>
 80021fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80021fc:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 8002200:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	6393      	str	r3, [r2, #56]	@ 0x38
 8002208:	e01d      	b.n	8002246 <HAL_TIM_PeriodElapsedCallback+0x98e>
 800220a:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800220c:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002210:	2b08      	cmp	r3, #8
 8002212:	d111      	bne.n	8002238 <HAL_TIM_PeriodElapsedCallback+0x980>
 8002214:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8002216:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	460b      	mov	r3, r1
 8002220:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002222:	e010      	b.n	8002246 <HAL_TIM_PeriodElapsedCallback+0x98e>
 8002224:	f3af 8000 	nop.w
 8002228:	9999999a 	.word	0x9999999a
 800222c:	3fb99999 	.word	0x3fb99999
 8002230:	200002b0 	.word	0x200002b0
 8002234:	200004d8 	.word	0x200004d8
 8002238:	4b79      	ldr	r3, [pc, #484]	@ (8002420 <HAL_TIM_PeriodElapsedCallback+0xb68>)
 800223a:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 800223e:	4b78      	ldr	r3, [pc, #480]	@ (8002420 <HAL_TIM_PeriodElapsedCallback+0xb68>)
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	6413      	str	r3, [r2, #64]	@ 0x40
	};

    RightW.speed_priortime  = RightW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1];
 8002246:	4b76      	ldr	r3, [pc, #472]	@ (8002420 <HAL_TIM_PeriodElapsedCallback+0xb68>)
 8002248:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800224c:	4a74      	ldr	r2, [pc, #464]	@ (8002420 <HAL_TIM_PeriodElapsedCallback+0xb68>)
 800224e:	f8c2 319c 	str.w	r3, [r2, #412]	@ 0x19c
  };




  if  ((LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1] - LeftW.speed_priortime) >  1000) {
 8002252:	4b74      	ldr	r3, [pc, #464]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8002254:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8002258:	4b72      	ldr	r3, [pc, #456]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 800225a:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002264:	f240 80d2 	bls.w	800240c <HAL_TIM_PeriodElapsedCallback+0xb54>

    if (LeftW.Target_speed>0) {
 8002268:	4b6e      	ldr	r3, [pc, #440]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 800226a:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 800226e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	dd0a      	ble.n	800228e <HAL_TIM_PeriodElapsedCallback+0x9d6>
	  LeftW.PinState_INA = GPIO_PIN_SET;
 8002278:	4b6a      	ldr	r3, [pc, #424]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 800227a:	2201      	movs	r2, #1
 800227c:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	  LeftW.PinState_INB = GPIO_PIN_RESET;
 8002280:	4b68      	ldr	r3, [pc, #416]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8002282:	2200      	movs	r2, #0
 8002284:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	  LeftW.Direction = WH_CW;
 8002288:	4b66      	ldr	r3, [pc, #408]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
    };
	if (LeftW.Target_speed<0) {
 800228e:	4b65      	ldr	r3, [pc, #404]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8002290:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8002294:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229c:	d50a      	bpl.n	80022b4 <HAL_TIM_PeriodElapsedCallback+0x9fc>
	  LeftW.PinState_INA = GPIO_PIN_RESET;
 800229e:	4b61      	ldr	r3, [pc, #388]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	  LeftW.PinState_INB = GPIO_PIN_SET;
 80022a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	  LeftW.Direction = WH_CCW;
 80022ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
	};

	if (LeftW.Target_speed==0) {
 80022b4:	4b5b      	ldr	r3, [pc, #364]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80022b6:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 80022ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c2:	d10a      	bne.n	80022da <HAL_TIM_PeriodElapsedCallback+0xa22>
	  LeftW.PinState_INA = GPIO_PIN_RESET;
 80022c4:	4b57      	ldr	r3, [pc, #348]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	  LeftW.PinState_INB = GPIO_PIN_RESET;
 80022cc:	4b55      	ldr	r3, [pc, #340]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	  LeftW.Direction = WH_STOP;
 80022d4:	4b53      	ldr	r3, [pc, #332]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80022d6:	2202      	movs	r2, #2
 80022d8:	701a      	strb	r2, [r3, #0]
	};


	HAL_GPIO_WritePin(LeftW.GPIOx_INA,LeftW.GPIO_Pin_INA, LeftW.PinState_INA);
 80022da:	4b52      	ldr	r3, [pc, #328]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80022dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80022e0:	4a50      	ldr	r2, [pc, #320]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80022e2:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 80022e6:	4a4f      	ldr	r2, [pc, #316]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80022e8:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 80022ec:	4618      	mov	r0, r3
 80022ee:	f001 fbcb 	bl	8003a88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LeftW.GPIOx_INB,LeftW.GPIO_Pin_INB, LeftW.PinState_INB);
 80022f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80022f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80022f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80022fa:	f8b2 10ac 	ldrh.w	r1, [r2, #172]	@ 0xac
 80022fe:	4a49      	ldr	r2, [pc, #292]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8002300:	f892 20ae 	ldrb.w	r2, [r2, #174]	@ 0xae
 8002304:	4618      	mov	r0, r3
 8002306:	f001 fbbf 	bl	8003a88 <HAL_GPIO_WritePin>

	LeftW.delta_speed = fabsf(LeftW.Target_speed) - fabsf(LeftW.averspeed);
 800230a:	4b46      	ldr	r3, [pc, #280]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 800230c:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8002310:	eeb0 7ae7 	vabs.f32	s14, s15
 8002314:	4b43      	ldr	r3, [pc, #268]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8002316:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 800231a:	eef0 7ae7 	vabs.f32	s15, s15
 800231e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002322:	4b40      	ldr	r3, [pc, #256]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8002324:	edc3 7a69 	vstr	s15, [r3, #420]	@ 0x1a4

	if (fabsf(LeftW.delta_speed)>0.01) {
 8002328:	4b3e      	ldr	r3, [pc, #248]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 800232a:	edd3 7a69 	vldr	s15, [r3, #420]	@ 0x1a4
 800232e:	eef0 7ae7 	vabs.f32	s15, s15
 8002332:	ee17 0a90 	vmov	r0, s15
 8002336:	f7fe f8b3 	bl	80004a0 <__aeabi_f2d>
 800233a:	a337      	add	r3, pc, #220	@ (adr r3, 8002418 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	f7fe fb96 	bl	8000a70 <__aeabi_dcmpgt>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d05a      	beq.n	8002400 <HAL_TIM_PeriodElapsedCallback+0xb48>
	  LeftW.delta_PWM = (int)(LeftW.delta_speed * LeftW.PID);
 800234a:	4b36      	ldr	r3, [pc, #216]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 800234c:	ed93 7a69 	vldr	s14, [r3, #420]	@ 0x1a4
 8002350:	4b34      	ldr	r3, [pc, #208]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8002352:	edd3 7a6a 	vldr	s15, [r3, #424]	@ 0x1a8
 8002356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800235e:	ee17 2a90 	vmov	r2, s15
 8002362:	4b30      	ldr	r3, [pc, #192]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8002364:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
  	  LeftW.PWM_Value =  LeftW.PWM_Value + LeftW.delta_PWM  ;
 8002368:	4b2e      	ldr	r3, [pc, #184]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 800236a:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 800236e:	4b2d      	ldr	r3, [pc, #180]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8002370:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8002374:	4413      	add	r3, r2
 8002376:	4a2b      	ldr	r2, [pc, #172]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8002378:	f8c2 3194 	str.w	r3, [r2, #404]	@ 0x194

      if (LeftW.PWM_Value > 50000) {LeftW.PWM_Value = 50000;};
 800237c:	4b29      	ldr	r3, [pc, #164]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 800237e:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8002382:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8002386:	4293      	cmp	r3, r2
 8002388:	dd04      	ble.n	8002394 <HAL_TIM_PeriodElapsedCallback+0xadc>
 800238a:	4b26      	ldr	r3, [pc, #152]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 800238c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8002390:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
      if  (LeftW.PWM_Value < 00) {LeftW.PWM_Value = 0; };
 8002394:	4b23      	ldr	r3, [pc, #140]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8002396:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800239a:	2b00      	cmp	r3, #0
 800239c:	da03      	bge.n	80023a6 <HAL_TIM_PeriodElapsedCallback+0xaee>
 800239e:	4b21      	ldr	r3, [pc, #132]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194

      __HAL_TIM_SET_COMPARE(&LeftW.htim, LeftW.PWM_Channel, LeftW.PWM_Value );
 80023a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80023a8:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d106      	bne.n	80023be <HAL_TIM_PeriodElapsedCallback+0xb06>
 80023b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80023b2:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 80023b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80023bc:	e020      	b.n	8002400 <HAL_TIM_PeriodElapsedCallback+0xb48>
 80023be:	4b19      	ldr	r3, [pc, #100]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80023c0:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d107      	bne.n	80023d8 <HAL_TIM_PeriodElapsedCallback+0xb20>
 80023c8:	4b16      	ldr	r3, [pc, #88]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80023ca:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 80023ce:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	460b      	mov	r3, r1
 80023d4:	6393      	str	r3, [r2, #56]	@ 0x38
 80023d6:	e013      	b.n	8002400 <HAL_TIM_PeriodElapsedCallback+0xb48>
 80023d8:	4b12      	ldr	r3, [pc, #72]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80023da:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d107      	bne.n	80023f2 <HAL_TIM_PeriodElapsedCallback+0xb3a>
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80023e4:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 80023e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80023f0:	e006      	b.n	8002400 <HAL_TIM_PeriodElapsedCallback+0xb48>
 80023f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80023f4:	f8d3 1194 	ldr.w	r1, [r3, #404]	@ 0x194
 80023f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	6413      	str	r3, [r2, #64]	@ 0x40
	};

    LeftW.speed_priortime  = LeftW.time_ms_wheel[MAX_ANGLE_WHEEL_ARRAY-1];
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8002402:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002406:	4a07      	ldr	r2, [pc, #28]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8002408:	f8c2 319c 	str.w	r3, [r2, #412]	@ 0x19c
  };


}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002416:	bf00      	nop
 8002418:	47ae147b 	.word	0x47ae147b
 800241c:	3f847ae1 	.word	0x3f847ae1
 8002420:	200004d8 	.word	0x200004d8
 8002424:	200002b0 	.word	0x200002b0

08002428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800242c:	b672      	cpsid	i
}
 800242e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <Error_Handler+0x8>

08002434 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <HAL_MspInit+0x4c>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002442:	4a0f      	ldr	r2, [pc, #60]	@ (8002480 <HAL_MspInit+0x4c>)
 8002444:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002448:	6453      	str	r3, [r2, #68]	@ 0x44
 800244a:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <HAL_MspInit+0x4c>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002452:	607b      	str	r3, [r7, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <HAL_MspInit+0x4c>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	4a08      	ldr	r2, [pc, #32]	@ (8002480 <HAL_MspInit+0x4c>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002464:	6413      	str	r3, [r2, #64]	@ 0x40
 8002466:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <HAL_MspInit+0x4c>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800

08002484 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	@ 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a2e      	ldr	r2, [pc, #184]	@ (800255c <HAL_ADC_MspInit+0xd8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d156      	bne.n	8002554 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002560 <HAL_ADC_MspInit+0xdc>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002560 <HAL_ADC_MspInit+0xdc>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002560 <HAL_ADC_MspInit+0xdc>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	4b26      	ldr	r3, [pc, #152]	@ (8002560 <HAL_ADC_MspInit+0xdc>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	4a25      	ldr	r2, [pc, #148]	@ (8002560 <HAL_ADC_MspInit+0xdc>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d2:	4b23      	ldr	r3, [pc, #140]	@ (8002560 <HAL_ADC_MspInit+0xdc>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024de:	2303      	movs	r3, #3
 80024e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e2:	2303      	movs	r3, #3
 80024e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	4619      	mov	r1, r3
 80024f0:	481c      	ldr	r0, [pc, #112]	@ (8002564 <HAL_ADC_MspInit+0xe0>)
 80024f2:	f001 f945 	bl	8003780 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80024f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002568 <HAL_ADC_MspInit+0xe4>)
 80024f8:	4a1c      	ldr	r2, [pc, #112]	@ (800256c <HAL_ADC_MspInit+0xe8>)
 80024fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80024fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002568 <HAL_ADC_MspInit+0xe4>)
 80024fe:	2200      	movs	r2, #0
 8002500:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002502:	4b19      	ldr	r3, [pc, #100]	@ (8002568 <HAL_ADC_MspInit+0xe4>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002508:	4b17      	ldr	r3, [pc, #92]	@ (8002568 <HAL_ADC_MspInit+0xe4>)
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <HAL_ADC_MspInit+0xe4>)
 8002510:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002514:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002516:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <HAL_ADC_MspInit+0xe4>)
 8002518:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800251c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800251e:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <HAL_ADC_MspInit+0xe4>)
 8002520:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002524:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002526:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <HAL_ADC_MspInit+0xe4>)
 8002528:	2200      	movs	r2, #0
 800252a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800252c:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <HAL_ADC_MspInit+0xe4>)
 800252e:	2200      	movs	r2, #0
 8002530:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002532:	4b0d      	ldr	r3, [pc, #52]	@ (8002568 <HAL_ADC_MspInit+0xe4>)
 8002534:	2200      	movs	r2, #0
 8002536:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002538:	480b      	ldr	r0, [pc, #44]	@ (8002568 <HAL_ADC_MspInit+0xe4>)
 800253a:	f000 fe37 	bl	80031ac <HAL_DMA_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002544:	f7ff ff70 	bl	8002428 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a07      	ldr	r2, [pc, #28]	@ (8002568 <HAL_ADC_MspInit+0xe4>)
 800254c:	639a      	str	r2, [r3, #56]	@ 0x38
 800254e:	4a06      	ldr	r2, [pc, #24]	@ (8002568 <HAL_ADC_MspInit+0xe4>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002554:	bf00      	nop
 8002556:	3728      	adds	r7, #40	@ 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40012000 	.word	0x40012000
 8002560:	40023800 	.word	0x40023800
 8002564:	40020000 	.word	0x40020000
 8002568:	20000074 	.word	0x20000074
 800256c:	40026410 	.word	0x40026410

08002570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08c      	sub	sp, #48	@ 0x30
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 031c 	add.w	r3, r7, #28
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a3b      	ldr	r2, [pc, #236]	@ (800267c <HAL_I2C_MspInit+0x10c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d12d      	bne.n	80025ee <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	4b3a      	ldr	r3, [pc, #232]	@ (8002680 <HAL_I2C_MspInit+0x110>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	4a39      	ldr	r2, [pc, #228]	@ (8002680 <HAL_I2C_MspInit+0x110>)
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a2:	4b37      	ldr	r3, [pc, #220]	@ (8002680 <HAL_I2C_MspInit+0x110>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	61bb      	str	r3, [r7, #24]
 80025ac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80025ae:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80025b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b4:	2312      	movs	r3, #18
 80025b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025bc:	2303      	movs	r3, #3
 80025be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025c0:	2304      	movs	r3, #4
 80025c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c4:	f107 031c 	add.w	r3, r7, #28
 80025c8:	4619      	mov	r1, r3
 80025ca:	482e      	ldr	r0, [pc, #184]	@ (8002684 <HAL_I2C_MspInit+0x114>)
 80025cc:	f001 f8d8 	bl	8003780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002680 <HAL_I2C_MspInit+0x110>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	4a29      	ldr	r2, [pc, #164]	@ (8002680 <HAL_I2C_MspInit+0x110>)
 80025da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025de:	6413      	str	r3, [r2, #64]	@ 0x40
 80025e0:	4b27      	ldr	r3, [pc, #156]	@ (8002680 <HAL_I2C_MspInit+0x110>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80025ec:	e041      	b.n	8002672 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a25      	ldr	r2, [pc, #148]	@ (8002688 <HAL_I2C_MspInit+0x118>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d13c      	bne.n	8002672 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f8:	2300      	movs	r3, #0
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	4b20      	ldr	r3, [pc, #128]	@ (8002680 <HAL_I2C_MspInit+0x110>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	4a1f      	ldr	r2, [pc, #124]	@ (8002680 <HAL_I2C_MspInit+0x110>)
 8002602:	f043 0302 	orr.w	r3, r3, #2
 8002606:	6313      	str	r3, [r2, #48]	@ 0x30
 8002608:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <HAL_I2C_MspInit+0x110>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002614:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800261a:	2312      	movs	r3, #18
 800261c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002622:	2303      	movs	r3, #3
 8002624:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002626:	2304      	movs	r3, #4
 8002628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262a:	f107 031c 	add.w	r3, r7, #28
 800262e:	4619      	mov	r1, r3
 8002630:	4814      	ldr	r0, [pc, #80]	@ (8002684 <HAL_I2C_MspInit+0x114>)
 8002632:	f001 f8a5 	bl	8003780 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002636:	2308      	movs	r3, #8
 8002638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800263a:	2312      	movs	r3, #18
 800263c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002642:	2303      	movs	r3, #3
 8002644:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002646:	2309      	movs	r3, #9
 8002648:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	4619      	mov	r1, r3
 8002650:	480c      	ldr	r0, [pc, #48]	@ (8002684 <HAL_I2C_MspInit+0x114>)
 8002652:	f001 f895 	bl	8003780 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <HAL_I2C_MspInit+0x110>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	4a08      	ldr	r2, [pc, #32]	@ (8002680 <HAL_I2C_MspInit+0x110>)
 8002660:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002664:	6413      	str	r3, [r2, #64]	@ 0x40
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_I2C_MspInit+0x110>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
}
 8002672:	bf00      	nop
 8002674:	3730      	adds	r7, #48	@ 0x30
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40005400 	.word	0x40005400
 8002680:	40023800 	.word	0x40023800
 8002684:	40020400 	.word	0x40020400
 8002688:	40005800 	.word	0x40005800

0800268c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	@ 0x28
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a19      	ldr	r2, [pc, #100]	@ (8002710 <HAL_SPI_MspInit+0x84>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d12c      	bne.n	8002708 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <HAL_SPI_MspInit+0x88>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	4a17      	ldr	r2, [pc, #92]	@ (8002714 <HAL_SPI_MspInit+0x88>)
 80026b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <HAL_SPI_MspInit+0x88>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <HAL_SPI_MspInit+0x88>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	4a10      	ldr	r2, [pc, #64]	@ (8002714 <HAL_SPI_MspInit+0x88>)
 80026d4:	f043 0302 	orr.w	r3, r3, #2
 80026d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026da:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <HAL_SPI_MspInit+0x88>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80026e6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80026ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	2302      	movs	r3, #2
 80026ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f4:	2303      	movs	r3, #3
 80026f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026f8:	2305      	movs	r3, #5
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	4619      	mov	r1, r3
 8002702:	4805      	ldr	r0, [pc, #20]	@ (8002718 <HAL_SPI_MspInit+0x8c>)
 8002704:	f001 f83c 	bl	8003780 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002708:	bf00      	nop
 800270a:	3728      	adds	r7, #40	@ 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40003800 	.word	0x40003800
 8002714:	40023800 	.word	0x40023800
 8002718:	40020400 	.word	0x40020400

0800271c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a18      	ldr	r2, [pc, #96]	@ (800278c <HAL_TIM_Base_MspInit+0x70>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10e      	bne.n	800274c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	4b17      	ldr	r3, [pc, #92]	@ (8002790 <HAL_TIM_Base_MspInit+0x74>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002736:	4a16      	ldr	r2, [pc, #88]	@ (8002790 <HAL_TIM_Base_MspInit+0x74>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6453      	str	r3, [r2, #68]	@ 0x44
 800273e:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <HAL_TIM_Base_MspInit+0x74>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800274a:	e01a      	b.n	8002782 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002754:	d115      	bne.n	8002782 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	4b0d      	ldr	r3, [pc, #52]	@ (8002790 <HAL_TIM_Base_MspInit+0x74>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	4a0c      	ldr	r2, [pc, #48]	@ (8002790 <HAL_TIM_Base_MspInit+0x74>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6413      	str	r3, [r2, #64]	@ 0x40
 8002766:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <HAL_TIM_Base_MspInit+0x74>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	201c      	movs	r0, #28
 8002778:	f000 fce1 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800277c:	201c      	movs	r0, #28
 800277e:	f000 fcfa 	bl	8003176 <HAL_NVIC_EnableIRQ>
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40010000 	.word	0x40010000
 8002790:	40023800 	.word	0x40023800

08002794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 030c 	add.w	r3, r7, #12
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a12      	ldr	r2, [pc, #72]	@ (80027fc <HAL_TIM_MspPostInit+0x68>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d11e      	bne.n	80027f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	4b11      	ldr	r3, [pc, #68]	@ (8002800 <HAL_TIM_MspPostInit+0x6c>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	4a10      	ldr	r2, [pc, #64]	@ (8002800 <HAL_TIM_MspPostInit+0x6c>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002800 <HAL_TIM_MspPostInit+0x6c>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80027d2:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80027d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	2302      	movs	r3, #2
 80027da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e0:	2302      	movs	r3, #2
 80027e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027e4:	2301      	movs	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	4619      	mov	r1, r3
 80027ee:	4805      	ldr	r0, [pc, #20]	@ (8002804 <HAL_TIM_MspPostInit+0x70>)
 80027f0:	f000 ffc6 	bl	8003780 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027f4:	bf00      	nop
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40010000 	.word	0x40010000
 8002800:	40023800 	.word	0x40023800
 8002804:	40020000 	.word	0x40020000

08002808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	@ 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a19      	ldr	r2, [pc, #100]	@ (800288c <HAL_UART_MspInit+0x84>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12c      	bne.n	8002884 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	4b18      	ldr	r3, [pc, #96]	@ (8002890 <HAL_UART_MspInit+0x88>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	4a17      	ldr	r2, [pc, #92]	@ (8002890 <HAL_UART_MspInit+0x88>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	6453      	str	r3, [r2, #68]	@ 0x44
 800283a:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <HAL_UART_MspInit+0x88>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <HAL_UART_MspInit+0x88>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	4a10      	ldr	r2, [pc, #64]	@ (8002890 <HAL_UART_MspInit+0x88>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	@ 0x30
 8002856:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <HAL_UART_MspInit+0x88>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002862:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002874:	2307      	movs	r3, #7
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	4619      	mov	r1, r3
 800287e:	4805      	ldr	r0, [pc, #20]	@ (8002894 <HAL_UART_MspInit+0x8c>)
 8002880:	f000 ff7e 	bl	8003780 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002884:	bf00      	nop
 8002886:	3728      	adds	r7, #40	@ 0x28
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40011000 	.word	0x40011000
 8002890:	40023800 	.word	0x40023800
 8002894:	40020000 	.word	0x40020000

08002898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <NMI_Handler+0x4>

080028a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028a4:	bf00      	nop
 80028a6:	e7fd      	b.n	80028a4 <HardFault_Handler+0x4>

080028a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028ac:	bf00      	nop
 80028ae:	e7fd      	b.n	80028ac <MemManage_Handler+0x4>

080028b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b4:	bf00      	nop
 80028b6:	e7fd      	b.n	80028b4 <BusFault_Handler+0x4>

080028b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028bc:	bf00      	nop
 80028be:	e7fd      	b.n	80028bc <UsageFault_Handler+0x4>

080028c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ee:	f000 f8a5 	bl	8002a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028fc:	4802      	ldr	r0, [pc, #8]	@ (8002908 <TIM2_IRQHandler+0x10>)
 80028fe:	f002 fddf 	bl	80054c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	2000021c 	.word	0x2000021c

0800290c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002910:	4802      	ldr	r0, [pc, #8]	@ (800291c <DMA2_Stream0_IRQHandler+0x10>)
 8002912:	f000 fcf9 	bl	8003308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000074 	.word	0x20000074

08002920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002924:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <SystemInit+0x20>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	4a05      	ldr	r2, [pc, #20]	@ (8002940 <SystemInit+0x20>)
 800292c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800297c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002948:	f7ff ffea 	bl	8002920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800294c:	480c      	ldr	r0, [pc, #48]	@ (8002980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800294e:	490d      	ldr	r1, [pc, #52]	@ (8002984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002950:	4a0d      	ldr	r2, [pc, #52]	@ (8002988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002954:	e002      	b.n	800295c <LoopCopyDataInit>

08002956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800295a:	3304      	adds	r3, #4

0800295c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800295c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800295e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002960:	d3f9      	bcc.n	8002956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002962:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002964:	4c0a      	ldr	r4, [pc, #40]	@ (8002990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002968:	e001      	b.n	800296e <LoopFillZerobss>

0800296a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800296a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800296c:	3204      	adds	r2, #4

0800296e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800296e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002970:	d3fb      	bcc.n	800296a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002972:	f003 febf 	bl	80066f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002976:	f7fe fc1f 	bl	80011b8 <main>
  bx  lr    
 800297a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800297c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002984:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002988:	080067a0 	.word	0x080067a0
  ldr r2, =_sbss
 800298c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002990:	2000070c 	.word	0x2000070c

08002994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002994:	e7fe      	b.n	8002994 <ADC_IRQHandler>
	...

08002998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800299c:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <HAL_Init+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0d      	ldr	r2, [pc, #52]	@ (80029d8 <HAL_Init+0x40>)
 80029a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029a8:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <HAL_Init+0x40>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <HAL_Init+0x40>)
 80029ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b4:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <HAL_Init+0x40>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a07      	ldr	r2, [pc, #28]	@ (80029d8 <HAL_Init+0x40>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c0:	2003      	movs	r0, #3
 80029c2:	f000 fbb1 	bl	8003128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029c6:	200f      	movs	r0, #15
 80029c8:	f000 f808 	bl	80029dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029cc:	f7ff fd32 	bl	8002434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023c00 	.word	0x40023c00

080029dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e4:	4b12      	ldr	r3, [pc, #72]	@ (8002a30 <HAL_InitTick+0x54>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <HAL_InitTick+0x58>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fbc9 	bl	8003192 <HAL_SYSTICK_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00e      	b.n	8002a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b0f      	cmp	r3, #15
 8002a0e:	d80a      	bhi.n	8002a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a10:	2200      	movs	r2, #0
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f000 fb91 	bl	800313e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a1c:	4a06      	ldr	r2, [pc, #24]	@ (8002a38 <HAL_InitTick+0x5c>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000000 	.word	0x20000000
 8002a34:	20000008 	.word	0x20000008
 8002a38:	20000004 	.word	0x20000004

08002a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a40:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <HAL_IncTick+0x20>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_IncTick+0x24>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <HAL_IncTick+0x24>)
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000008 	.word	0x20000008
 8002a60:	20000708 	.word	0x20000708

08002a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return uwTick;
 8002a68:	4b03      	ldr	r3, [pc, #12]	@ (8002a78 <HAL_GetTick+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000708 	.word	0x20000708

08002a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7ff ffee 	bl	8002a64 <HAL_GetTick>
 8002a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d005      	beq.n	8002aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <HAL_Delay+0x44>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aa2:	bf00      	nop
 8002aa4:	f7ff ffde 	bl	8002a64 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d8f7      	bhi.n	8002aa4 <HAL_Delay+0x28>
  {
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000008 	.word	0x20000008

08002ac4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e033      	b.n	8002b42 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff fcce 	bl	8002484 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d118      	bne.n	8002b34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b0a:	f023 0302 	bic.w	r3, r3, #2
 8002b0e:	f043 0202 	orr.w	r2, r3, #2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f93a 	bl	8002d90 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	f023 0303 	bic.w	r3, r3, #3
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b32:	e001      	b.n	8002b38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x1c>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e105      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x228>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b09      	cmp	r3, #9
 8002b76:	d925      	bls.n	8002bc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68d9      	ldr	r1, [r3, #12]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3b1e      	subs	r3, #30
 8002b8e:	2207      	movs	r2, #7
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43da      	mvns	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	400a      	ands	r2, r1
 8002b9c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68d9      	ldr	r1, [r3, #12]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4403      	add	r3, r0
 8002bb6:	3b1e      	subs	r3, #30
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	e022      	b.n	8002c0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6919      	ldr	r1, [r3, #16]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	2207      	movs	r2, #7
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	400a      	ands	r2, r1
 8002be6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6919      	ldr	r1, [r3, #16]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4403      	add	r3, r0
 8002c00:	409a      	lsls	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d824      	bhi.n	8002c5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	3b05      	subs	r3, #5
 8002c24:	221f      	movs	r2, #31
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	400a      	ands	r2, r1
 8002c32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	4618      	mov	r0, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3b05      	subs	r3, #5
 8002c4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c5a:	e04c      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d824      	bhi.n	8002cae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	3b23      	subs	r3, #35	@ 0x23
 8002c76:	221f      	movs	r2, #31
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	400a      	ands	r2, r1
 8002c84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	4618      	mov	r0, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3b23      	subs	r3, #35	@ 0x23
 8002ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cac:	e023      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3b41      	subs	r3, #65	@ 0x41
 8002cc0:	221f      	movs	r2, #31
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	400a      	ands	r2, r1
 8002cce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	4618      	mov	r0, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3b41      	subs	r3, #65	@ 0x41
 8002cea:	fa00 f203 	lsl.w	r2, r0, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cf6:	4b22      	ldr	r3, [pc, #136]	@ (8002d80 <HAL_ADC_ConfigChannel+0x234>)
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a21      	ldr	r2, [pc, #132]	@ (8002d84 <HAL_ADC_ConfigChannel+0x238>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d109      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x1cc>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b12      	cmp	r3, #18
 8002d0a:	d105      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a19      	ldr	r2, [pc, #100]	@ (8002d84 <HAL_ADC_ConfigChannel+0x238>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d123      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x21e>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d003      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0x1e6>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b11      	cmp	r3, #17
 8002d30:	d11b      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b10      	cmp	r3, #16
 8002d44:	d111      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d46:	4b10      	ldr	r3, [pc, #64]	@ (8002d88 <HAL_ADC_ConfigChannel+0x23c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a10      	ldr	r2, [pc, #64]	@ (8002d8c <HAL_ADC_ConfigChannel+0x240>)
 8002d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d50:	0c9a      	lsrs	r2, r3, #18
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d5c:	e002      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f9      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40012300 	.word	0x40012300
 8002d84:	40012000 	.word	0x40012000
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	431bde83 	.word	0x431bde83

08002d90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d98:	4b79      	ldr	r3, [pc, #484]	@ (8002f80 <ADC_Init+0x1f0>)
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	431a      	orrs	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	021a      	lsls	r2, r3, #8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002de8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6899      	ldr	r1, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e22:	4a58      	ldr	r2, [pc, #352]	@ (8002f84 <ADC_Init+0x1f4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d022      	beq.n	8002e6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6899      	ldr	r1, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6899      	ldr	r1, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	e00f      	b.n	8002e8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e8c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0202 	bic.w	r2, r2, #2
 8002e9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6899      	ldr	r1, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7e1b      	ldrb	r3, [r3, #24]
 8002ea8:	005a      	lsls	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01b      	beq.n	8002ef4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002eda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6859      	ldr	r1, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	035a      	lsls	r2, r3, #13
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	e007      	b.n	8002f04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f02:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	051a      	lsls	r2, r3, #20
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6899      	ldr	r1, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f46:	025a      	lsls	r2, r3, #9
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6899      	ldr	r1, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	029a      	lsls	r2, r3, #10
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	609a      	str	r2, [r3, #8]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	40012300 	.word	0x40012300
 8002f84:	0f000001 	.word	0x0f000001

08002f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f98:	4b0c      	ldr	r3, [pc, #48]	@ (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fba:	4a04      	ldr	r2, [pc, #16]	@ (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	60d3      	str	r3, [r2, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd4:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 0307 	and.w	r3, r3, #7
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	db0b      	blt.n	8003016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	f003 021f 	and.w	r2, r3, #31
 8003004:	4907      	ldr	r1, [pc, #28]	@ (8003024 <__NVIC_EnableIRQ+0x38>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2001      	movs	r0, #1
 800300e:	fa00 f202 	lsl.w	r2, r0, r2
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	e000e100 	.word	0xe000e100

08003028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003038:	2b00      	cmp	r3, #0
 800303a:	db0a      	blt.n	8003052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	b2da      	uxtb	r2, r3
 8003040:	490c      	ldr	r1, [pc, #48]	@ (8003074 <__NVIC_SetPriority+0x4c>)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	440b      	add	r3, r1
 800304c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003050:	e00a      	b.n	8003068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4908      	ldr	r1, [pc, #32]	@ (8003078 <__NVIC_SetPriority+0x50>)
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	3b04      	subs	r3, #4
 8003060:	0112      	lsls	r2, r2, #4
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	440b      	add	r3, r1
 8003066:	761a      	strb	r2, [r3, #24]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000e100 	.word	0xe000e100
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	@ 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f1c3 0307 	rsb	r3, r3, #7
 8003096:	2b04      	cmp	r3, #4
 8003098:	bf28      	it	cs
 800309a:	2304      	movcs	r3, #4
 800309c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d902      	bls.n	80030ac <NVIC_EncodePriority+0x30>
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3b03      	subs	r3, #3
 80030aa:	e000      	b.n	80030ae <NVIC_EncodePriority+0x32>
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	f04f 32ff 	mov.w	r2, #4294967295
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	401a      	ands	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c4:	f04f 31ff 	mov.w	r1, #4294967295
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	43d9      	mvns	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	4313      	orrs	r3, r2
         );
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	@ 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f4:	d301      	bcc.n	80030fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00f      	b.n	800311a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003124 <SysTick_Config+0x40>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003102:	210f      	movs	r1, #15
 8003104:	f04f 30ff 	mov.w	r0, #4294967295
 8003108:	f7ff ff8e 	bl	8003028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <SysTick_Config+0x40>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003112:	4b04      	ldr	r3, [pc, #16]	@ (8003124 <SysTick_Config+0x40>)
 8003114:	2207      	movs	r2, #7
 8003116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	e000e010 	.word	0xe000e010

08003128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ff29 	bl	8002f88 <__NVIC_SetPriorityGrouping>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003150:	f7ff ff3e 	bl	8002fd0 <__NVIC_GetPriorityGrouping>
 8003154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	6978      	ldr	r0, [r7, #20]
 800315c:	f7ff ff8e 	bl	800307c <NVIC_EncodePriority>
 8003160:	4602      	mov	r2, r0
 8003162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff5d 	bl	8003028 <__NVIC_SetPriority>
}
 800316e:	bf00      	nop
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	4603      	mov	r3, r0
 800317e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff31 	bl	8002fec <__NVIC_EnableIRQ>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff ffa2 	bl	80030e4 <SysTick_Config>
 80031a0:	4603      	mov	r3, r0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031b8:	f7ff fc54 	bl	8002a64 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e099      	b.n	80032fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e8:	e00f      	b.n	800320a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ea:	f7ff fc3b 	bl	8002a64 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d908      	bls.n	800320a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2203      	movs	r2, #3
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e078      	b.n	80032fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e8      	bne.n	80031ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4b38      	ldr	r3, [pc, #224]	@ (8003304 <HAL_DMA_Init+0x158>)
 8003224:	4013      	ands	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003236:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003242:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	2b04      	cmp	r3, #4
 8003262:	d107      	bne.n	8003274 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	4313      	orrs	r3, r2
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f023 0307 	bic.w	r3, r3, #7
 800328a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	2b04      	cmp	r3, #4
 800329c:	d117      	bne.n	80032ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00e      	beq.n	80032ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f9e9 	bl	8003688 <DMA_CheckFifoParam>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2240      	movs	r2, #64	@ 0x40
 80032c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80032ca:	2301      	movs	r3, #1
 80032cc:	e016      	b.n	80032fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f9a0 	bl	800361c <DMA_CalcBaseAndBitshift>
 80032dc:	4603      	mov	r3, r0
 80032de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e4:	223f      	movs	r2, #63	@ 0x3f
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	f010803f 	.word	0xf010803f

08003308 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003314:	4b8e      	ldr	r3, [pc, #568]	@ (8003550 <HAL_DMA_IRQHandler+0x248>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a8e      	ldr	r2, [pc, #568]	@ (8003554 <HAL_DMA_IRQHandler+0x24c>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	0a9b      	lsrs	r3, r3, #10
 8003320:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003326:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003332:	2208      	movs	r2, #8
 8003334:	409a      	lsls	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d01a      	beq.n	8003374 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0204 	bic.w	r2, r2, #4
 800335a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003360:	2208      	movs	r2, #8
 8003362:	409a      	lsls	r2, r3
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336c:	f043 0201 	orr.w	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003378:	2201      	movs	r2, #1
 800337a:	409a      	lsls	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d012      	beq.n	80033aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003396:	2201      	movs	r2, #1
 8003398:	409a      	lsls	r2, r3
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	f043 0202 	orr.w	r2, r3, #2
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ae:	2204      	movs	r2, #4
 80033b0:	409a      	lsls	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d012      	beq.n	80033e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00b      	beq.n	80033e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033cc:	2204      	movs	r2, #4
 80033ce:	409a      	lsls	r2, r3
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d8:	f043 0204 	orr.w	r2, r3, #4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e4:	2210      	movs	r2, #16
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d043      	beq.n	8003478 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d03c      	beq.n	8003478 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003402:	2210      	movs	r2, #16
 8003404:	409a      	lsls	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d018      	beq.n	800344a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d108      	bne.n	8003438 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d024      	beq.n	8003478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	4798      	blx	r3
 8003436:	e01f      	b.n	8003478 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01b      	beq.n	8003478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
 8003448:	e016      	b.n	8003478 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d107      	bne.n	8003468 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0208 	bic.w	r2, r2, #8
 8003466:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347c:	2220      	movs	r2, #32
 800347e:	409a      	lsls	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4013      	ands	r3, r2
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 808f 	beq.w	80035a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 8087 	beq.w	80035a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349e:	2220      	movs	r2, #32
 80034a0:	409a      	lsls	r2, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d136      	bne.n	8003520 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0216 	bic.w	r2, r2, #22
 80034c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <HAL_DMA_IRQHandler+0x1da>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0208 	bic.w	r2, r2, #8
 80034f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f6:	223f      	movs	r2, #63	@ 0x3f
 80034f8:	409a      	lsls	r2, r3
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003512:	2b00      	cmp	r3, #0
 8003514:	d07e      	beq.n	8003614 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
        }
        return;
 800351e:	e079      	b.n	8003614 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d01d      	beq.n	800356a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10d      	bne.n	8003558 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003540:	2b00      	cmp	r3, #0
 8003542:	d031      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
 800354c:	e02c      	b.n	80035a8 <HAL_DMA_IRQHandler+0x2a0>
 800354e:	bf00      	nop
 8003550:	20000000 	.word	0x20000000
 8003554:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d023      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
 8003568:	e01e      	b.n	80035a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10f      	bne.n	8003598 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0210 	bic.w	r2, r2, #16
 8003586:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d032      	beq.n	8003616 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d022      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2205      	movs	r2, #5
 80035c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	3301      	adds	r3, #1
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d307      	bcc.n	80035f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f2      	bne.n	80035d4 <HAL_DMA_IRQHandler+0x2cc>
 80035ee:	e000      	b.n	80035f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
 8003612:	e000      	b.n	8003616 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003614:	bf00      	nop
    }
  }
}
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	3b10      	subs	r3, #16
 800362c:	4a14      	ldr	r2, [pc, #80]	@ (8003680 <DMA_CalcBaseAndBitshift+0x64>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	091b      	lsrs	r3, r3, #4
 8003634:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003636:	4a13      	ldr	r2, [pc, #76]	@ (8003684 <DMA_CalcBaseAndBitshift+0x68>)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b03      	cmp	r3, #3
 8003648:	d909      	bls.n	800365e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003652:	f023 0303 	bic.w	r3, r3, #3
 8003656:	1d1a      	adds	r2, r3, #4
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	659a      	str	r2, [r3, #88]	@ 0x58
 800365c:	e007      	b.n	800366e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003666:	f023 0303 	bic.w	r3, r3, #3
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	aaaaaaab 	.word	0xaaaaaaab
 8003684:	08006788 	.word	0x08006788

08003688 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d11f      	bne.n	80036e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d856      	bhi.n	8003756 <DMA_CheckFifoParam+0xce>
 80036a8:	a201      	add	r2, pc, #4	@ (adr r2, 80036b0 <DMA_CheckFifoParam+0x28>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	080036c1 	.word	0x080036c1
 80036b4:	080036d3 	.word	0x080036d3
 80036b8:	080036c1 	.word	0x080036c1
 80036bc:	08003757 	.word	0x08003757
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d046      	beq.n	800375a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d0:	e043      	b.n	800375a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036da:	d140      	bne.n	800375e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e0:	e03d      	b.n	800375e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ea:	d121      	bne.n	8003730 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d837      	bhi.n	8003762 <DMA_CheckFifoParam+0xda>
 80036f2:	a201      	add	r2, pc, #4	@ (adr r2, 80036f8 <DMA_CheckFifoParam+0x70>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	08003709 	.word	0x08003709
 80036fc:	0800370f 	.word	0x0800370f
 8003700:	08003709 	.word	0x08003709
 8003704:	08003721 	.word	0x08003721
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
      break;
 800370c:	e030      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003712:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d025      	beq.n	8003766 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800371e:	e022      	b.n	8003766 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003728:	d11f      	bne.n	800376a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800372e:	e01c      	b.n	800376a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d903      	bls.n	800373e <DMA_CheckFifoParam+0xb6>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d003      	beq.n	8003744 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800373c:	e018      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
      break;
 8003742:	e015      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003748:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00e      	beq.n	800376e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
      break;
 8003754:	e00b      	b.n	800376e <DMA_CheckFifoParam+0xe6>
      break;
 8003756:	bf00      	nop
 8003758:	e00a      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      break;
 800375a:	bf00      	nop
 800375c:	e008      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      break;
 800375e:	bf00      	nop
 8003760:	e006      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      break;
 8003762:	bf00      	nop
 8003764:	e004      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      break;
 8003766:	bf00      	nop
 8003768:	e002      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      break;   
 800376a:	bf00      	nop
 800376c:	e000      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      break;
 800376e:	bf00      	nop
    }
  } 
  
  return status; 
 8003770:	7bfb      	ldrb	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop

08003780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	@ 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003792:	2300      	movs	r3, #0
 8003794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	e159      	b.n	8003a50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800379c:	2201      	movs	r2, #1
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	f040 8148 	bne.w	8003a4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d005      	beq.n	80037d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d130      	bne.n	8003834 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	2203      	movs	r2, #3
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4013      	ands	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003808:	2201      	movs	r2, #1
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 0201 	and.w	r2, r3, #1
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b03      	cmp	r3, #3
 800383e:	d017      	beq.n	8003870 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	2203      	movs	r2, #3
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d123      	bne.n	80038c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	08da      	lsrs	r2, r3, #3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3208      	adds	r2, #8
 8003884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003888:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	220f      	movs	r2, #15
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	08da      	lsrs	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3208      	adds	r2, #8
 80038be:	69b9      	ldr	r1, [r7, #24]
 80038c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	2203      	movs	r2, #3
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 0203 	and.w	r2, r3, #3
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80a2 	beq.w	8003a4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	4b57      	ldr	r3, [pc, #348]	@ (8003a68 <HAL_GPIO_Init+0x2e8>)
 800390c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390e:	4a56      	ldr	r2, [pc, #344]	@ (8003a68 <HAL_GPIO_Init+0x2e8>)
 8003910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003914:	6453      	str	r3, [r2, #68]	@ 0x44
 8003916:	4b54      	ldr	r3, [pc, #336]	@ (8003a68 <HAL_GPIO_Init+0x2e8>)
 8003918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003922:	4a52      	ldr	r2, [pc, #328]	@ (8003a6c <HAL_GPIO_Init+0x2ec>)
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	3302      	adds	r3, #2
 800392a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	220f      	movs	r2, #15
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a49      	ldr	r2, [pc, #292]	@ (8003a70 <HAL_GPIO_Init+0x2f0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d019      	beq.n	8003982 <HAL_GPIO_Init+0x202>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a48      	ldr	r2, [pc, #288]	@ (8003a74 <HAL_GPIO_Init+0x2f4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d013      	beq.n	800397e <HAL_GPIO_Init+0x1fe>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a47      	ldr	r2, [pc, #284]	@ (8003a78 <HAL_GPIO_Init+0x2f8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00d      	beq.n	800397a <HAL_GPIO_Init+0x1fa>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a46      	ldr	r2, [pc, #280]	@ (8003a7c <HAL_GPIO_Init+0x2fc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d007      	beq.n	8003976 <HAL_GPIO_Init+0x1f6>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a45      	ldr	r2, [pc, #276]	@ (8003a80 <HAL_GPIO_Init+0x300>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d101      	bne.n	8003972 <HAL_GPIO_Init+0x1f2>
 800396e:	2304      	movs	r3, #4
 8003970:	e008      	b.n	8003984 <HAL_GPIO_Init+0x204>
 8003972:	2307      	movs	r3, #7
 8003974:	e006      	b.n	8003984 <HAL_GPIO_Init+0x204>
 8003976:	2303      	movs	r3, #3
 8003978:	e004      	b.n	8003984 <HAL_GPIO_Init+0x204>
 800397a:	2302      	movs	r3, #2
 800397c:	e002      	b.n	8003984 <HAL_GPIO_Init+0x204>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <HAL_GPIO_Init+0x204>
 8003982:	2300      	movs	r3, #0
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	f002 0203 	and.w	r2, r2, #3
 800398a:	0092      	lsls	r2, r2, #2
 800398c:	4093      	lsls	r3, r2
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003994:	4935      	ldr	r1, [pc, #212]	@ (8003a6c <HAL_GPIO_Init+0x2ec>)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	089b      	lsrs	r3, r3, #2
 800399a:	3302      	adds	r3, #2
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039a2:	4b38      	ldr	r3, [pc, #224]	@ (8003a84 <HAL_GPIO_Init+0x304>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	43db      	mvns	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039c6:	4a2f      	ldr	r2, [pc, #188]	@ (8003a84 <HAL_GPIO_Init+0x304>)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003a84 <HAL_GPIO_Init+0x304>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4013      	ands	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039f0:	4a24      	ldr	r2, [pc, #144]	@ (8003a84 <HAL_GPIO_Init+0x304>)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039f6:	4b23      	ldr	r3, [pc, #140]	@ (8003a84 <HAL_GPIO_Init+0x304>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a84 <HAL_GPIO_Init+0x304>)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a20:	4b18      	ldr	r3, [pc, #96]	@ (8003a84 <HAL_GPIO_Init+0x304>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a44:	4a0f      	ldr	r2, [pc, #60]	@ (8003a84 <HAL_GPIO_Init+0x304>)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	61fb      	str	r3, [r7, #28]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b0f      	cmp	r3, #15
 8003a54:	f67f aea2 	bls.w	800379c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	3724      	adds	r7, #36	@ 0x24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40013800 	.word	0x40013800
 8003a70:	40020000 	.word	0x40020000
 8003a74:	40020400 	.word	0x40020400
 8003a78:	40020800 	.word	0x40020800
 8003a7c:	40020c00 	.word	0x40020c00
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40013c00 	.word	0x40013c00

08003a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	807b      	strh	r3, [r7, #2]
 8003a94:	4613      	mov	r3, r2
 8003a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a98:	787b      	ldrb	r3, [r7, #1]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a9e:	887a      	ldrh	r2, [r7, #2]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003aa4:	e003      	b.n	8003aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aa6:	887b      	ldrh	r3, [r7, #2]
 8003aa8:	041a      	lsls	r2, r3, #16
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	619a      	str	r2, [r3, #24]
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003acc:	887a      	ldrh	r2, [r7, #2]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	041a      	lsls	r2, r3, #16
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	43d9      	mvns	r1, r3
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	400b      	ands	r3, r1
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	619a      	str	r2, [r3, #24]
}
 8003ae2:	bf00      	nop
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e12b      	b.n	8003d5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fe fd2a 	bl	8002570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2224      	movs	r2, #36	@ 0x24
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0201 	bic.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b54:	f001 fa48 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 8003b58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4a81      	ldr	r2, [pc, #516]	@ (8003d64 <HAL_I2C_Init+0x274>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d807      	bhi.n	8003b74 <HAL_I2C_Init+0x84>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4a80      	ldr	r2, [pc, #512]	@ (8003d68 <HAL_I2C_Init+0x278>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	bf94      	ite	ls
 8003b6c:	2301      	movls	r3, #1
 8003b6e:	2300      	movhi	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	e006      	b.n	8003b82 <HAL_I2C_Init+0x92>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a7d      	ldr	r2, [pc, #500]	@ (8003d6c <HAL_I2C_Init+0x27c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	bf94      	ite	ls
 8003b7c:	2301      	movls	r3, #1
 8003b7e:	2300      	movhi	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e0e7      	b.n	8003d5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a78      	ldr	r2, [pc, #480]	@ (8003d70 <HAL_I2C_Init+0x280>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	0c9b      	lsrs	r3, r3, #18
 8003b94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4a6a      	ldr	r2, [pc, #424]	@ (8003d64 <HAL_I2C_Init+0x274>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d802      	bhi.n	8003bc4 <HAL_I2C_Init+0xd4>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	e009      	b.n	8003bd8 <HAL_I2C_Init+0xe8>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	4a69      	ldr	r2, [pc, #420]	@ (8003d74 <HAL_I2C_Init+0x284>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	099b      	lsrs	r3, r3, #6
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	495c      	ldr	r1, [pc, #368]	@ (8003d64 <HAL_I2C_Init+0x274>)
 8003bf4:	428b      	cmp	r3, r1
 8003bf6:	d819      	bhi.n	8003c2c <HAL_I2C_Init+0x13c>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1e59      	subs	r1, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c06:	1c59      	adds	r1, r3, #1
 8003c08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c0c:	400b      	ands	r3, r1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_I2C_Init+0x138>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1e59      	subs	r1, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c20:	3301      	adds	r3, #1
 8003c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c26:	e051      	b.n	8003ccc <HAL_I2C_Init+0x1dc>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	e04f      	b.n	8003ccc <HAL_I2C_Init+0x1dc>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d111      	bne.n	8003c58 <HAL_I2C_Init+0x168>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1e58      	subs	r0, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	440b      	add	r3, r1
 8003c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c46:	3301      	adds	r3, #1
 8003c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	e012      	b.n	8003c7e <HAL_I2C_Init+0x18e>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1e58      	subs	r0, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	0099      	lsls	r1, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf0c      	ite	eq
 8003c78:	2301      	moveq	r3, #1
 8003c7a:	2300      	movne	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Init+0x196>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e022      	b.n	8003ccc <HAL_I2C_Init+0x1dc>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10e      	bne.n	8003cac <HAL_I2C_Init+0x1bc>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1e58      	subs	r0, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6859      	ldr	r1, [r3, #4]
 8003c96:	460b      	mov	r3, r1
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	440b      	add	r3, r1
 8003c9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003caa:	e00f      	b.n	8003ccc <HAL_I2C_Init+0x1dc>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	1e58      	subs	r0, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	0099      	lsls	r1, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	6809      	ldr	r1, [r1, #0]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69da      	ldr	r2, [r3, #28]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003cfa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6911      	ldr	r1, [r2, #16]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68d2      	ldr	r2, [r2, #12]
 8003d06:	4311      	orrs	r1, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	000186a0 	.word	0x000186a0
 8003d68:	001e847f 	.word	0x001e847f
 8003d6c:	003d08ff 	.word	0x003d08ff
 8003d70:	431bde83 	.word	0x431bde83
 8003d74:	10624dd3 	.word	0x10624dd3

08003d78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08c      	sub	sp, #48	@ 0x30
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	4608      	mov	r0, r1
 8003d82:	4611      	mov	r1, r2
 8003d84:	461a      	mov	r2, r3
 8003d86:	4603      	mov	r3, r0
 8003d88:	817b      	strh	r3, [r7, #10]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	813b      	strh	r3, [r7, #8]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d92:	f7fe fe67 	bl	8002a64 <HAL_GetTick>
 8003d96:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	f040 8214 	bne.w	80041ce <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	2319      	movs	r3, #25
 8003dac:	2201      	movs	r2, #1
 8003dae:	497b      	ldr	r1, [pc, #492]	@ (8003f9c <HAL_I2C_Mem_Read+0x224>)
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fafb 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e207      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_I2C_Mem_Read+0x56>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e200      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d007      	beq.n	8003df4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2222      	movs	r2, #34	@ 0x22
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2240      	movs	r2, #64	@ 0x40
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003e24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a5b      	ldr	r2, [pc, #364]	@ (8003fa0 <HAL_I2C_Mem_Read+0x228>)
 8003e34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e36:	88f8      	ldrh	r0, [r7, #6]
 8003e38:	893a      	ldrh	r2, [r7, #8]
 8003e3a:	8979      	ldrh	r1, [r7, #10]
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	9301      	str	r3, [sp, #4]
 8003e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	4603      	mov	r3, r0
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f9c8 	bl	80041dc <I2C_RequestMemoryRead>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e1bc      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d113      	bne.n	8003e86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	623b      	str	r3, [r7, #32]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	623b      	str	r3, [r7, #32]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	623b      	str	r3, [r7, #32]
 8003e72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e190      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d11b      	bne.n	8003ec6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e170      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d11b      	bne.n	8003f06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003edc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	e150      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f1c:	e144      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	f200 80f1 	bhi.w	800410a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d123      	bne.n	8003f78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fb9b 	bl	8004670 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e145      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f76:	e117      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d14e      	bne.n	800401e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f86:	2200      	movs	r2, #0
 8003f88:	4906      	ldr	r1, [pc, #24]	@ (8003fa4 <HAL_I2C_Mem_Read+0x22c>)
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 fa0e 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e11a      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
 8003f9a:	bf00      	nop
 8003f9c:	00100002 	.word	0x00100002
 8003fa0:	ffff0000 	.word	0xffff0000
 8003fa4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800401c:	e0c4      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004024:	2200      	movs	r2, #0
 8004026:	496c      	ldr	r1, [pc, #432]	@ (80041d8 <HAL_I2C_Mem_Read+0x460>)
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f9bf 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0cb      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004080:	2200      	movs	r2, #0
 8004082:	4955      	ldr	r1, [pc, #340]	@ (80041d8 <HAL_I2C_Mem_Read+0x460>)
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f991 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e09d      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004108:	e04e      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800410c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 faae 	bl	8004670 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e058      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b04      	cmp	r3, #4
 800415c:	d124      	bne.n	80041a8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004162:	2b03      	cmp	r3, #3
 8004164:	d107      	bne.n	8004176 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004174:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f47f aeb6 	bne.w	8003f1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e000      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
  }
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3728      	adds	r7, #40	@ 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	00010004 	.word	0x00010004

080041dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	4608      	mov	r0, r1
 80041e6:	4611      	mov	r1, r2
 80041e8:	461a      	mov	r2, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	817b      	strh	r3, [r7, #10]
 80041ee:	460b      	mov	r3, r1
 80041f0:	813b      	strh	r3, [r7, #8]
 80041f2:	4613      	mov	r3, r2
 80041f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004204:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004214:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	2200      	movs	r2, #0
 800421e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f8c2 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00d      	beq.n	800424a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800423c:	d103      	bne.n	8004246 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004244:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e0aa      	b.n	80043a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800424a:	897b      	ldrh	r3, [r7, #10]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	461a      	mov	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004258:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	6a3a      	ldr	r2, [r7, #32]
 800425e:	4952      	ldr	r1, [pc, #328]	@ (80043a8 <I2C_RequestMemoryRead+0x1cc>)
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f91d 	bl	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e097      	b.n	80043a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004288:	6a39      	ldr	r1, [r7, #32]
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f9a8 	bl	80045e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00d      	beq.n	80042b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429a:	2b04      	cmp	r3, #4
 800429c:	d107      	bne.n	80042ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e076      	b.n	80043a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d105      	bne.n	80042c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042b8:	893b      	ldrh	r3, [r7, #8]
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	611a      	str	r2, [r3, #16]
 80042c2:	e021      	b.n	8004308 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042c4:	893b      	ldrh	r3, [r7, #8]
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d4:	6a39      	ldr	r1, [r7, #32]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f982 	bl	80045e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00d      	beq.n	80042fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d107      	bne.n	80042fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e050      	b.n	80043a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042fe:	893b      	ldrh	r3, [r7, #8]
 8004300:	b2da      	uxtb	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800430a:	6a39      	ldr	r1, [r7, #32]
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f967 	bl	80045e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00d      	beq.n	8004334 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	2b04      	cmp	r3, #4
 800431e:	d107      	bne.n	8004330 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800432e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e035      	b.n	80043a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004342:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	2200      	movs	r2, #0
 800434c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f82b 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00d      	beq.n	8004378 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436a:	d103      	bne.n	8004374 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004372:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e013      	b.n	80043a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004378:	897b      	ldrh	r3, [r7, #10]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	b2da      	uxtb	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	6a3a      	ldr	r2, [r7, #32]
 800438c:	4906      	ldr	r1, [pc, #24]	@ (80043a8 <I2C_RequestMemoryRead+0x1cc>)
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f886 	bl	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	00010002 	.word	0x00010002

080043ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043bc:	e048      	b.n	8004450 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d044      	beq.n	8004450 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c6:	f7fe fb4d 	bl	8002a64 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d139      	bne.n	8004450 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	0c1b      	lsrs	r3, r3, #16
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d10d      	bne.n	8004402 <I2C_WaitOnFlagUntilTimeout+0x56>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	43da      	mvns	r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4013      	ands	r3, r2
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	e00c      	b.n	800441c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	43da      	mvns	r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	4013      	ands	r3, r2
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf0c      	ite	eq
 8004414:	2301      	moveq	r3, #1
 8004416:	2300      	movne	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	429a      	cmp	r2, r3
 8004420:	d116      	bne.n	8004450 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443c:	f043 0220 	orr.w	r2, r3, #32
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e023      	b.n	8004498 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	0c1b      	lsrs	r3, r3, #16
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b01      	cmp	r3, #1
 8004458:	d10d      	bne.n	8004476 <I2C_WaitOnFlagUntilTimeout+0xca>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	43da      	mvns	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	e00c      	b.n	8004490 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	43da      	mvns	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4013      	ands	r3, r2
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	429a      	cmp	r2, r3
 8004494:	d093      	beq.n	80043be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ae:	e071      	b.n	8004594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044be:	d123      	bne.n	8004508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	f043 0204 	orr.w	r2, r3, #4
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e067      	b.n	80045d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450e:	d041      	beq.n	8004594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004510:	f7fe faa8 	bl	8002a64 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	429a      	cmp	r2, r3
 800451e:	d302      	bcc.n	8004526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d136      	bne.n	8004594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d10c      	bne.n	800454a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	43da      	mvns	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4013      	ands	r3, r2
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	bf14      	ite	ne
 8004542:	2301      	movne	r3, #1
 8004544:	2300      	moveq	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	e00b      	b.n	8004562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	43da      	mvns	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4013      	ands	r3, r2
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	bf14      	ite	ne
 800455c:	2301      	movne	r3, #1
 800455e:	2300      	moveq	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e021      	b.n	80045d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	0c1b      	lsrs	r3, r3, #16
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10c      	bne.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	43da      	mvns	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4013      	ands	r3, r2
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	bf14      	ite	ne
 80045b0:	2301      	movne	r3, #1
 80045b2:	2300      	moveq	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	e00b      	b.n	80045d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4013      	ands	r3, r2
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf14      	ite	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	2300      	moveq	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f47f af6d 	bne.w	80044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ec:	e034      	b.n	8004658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f89b 	bl	800472a <I2C_IsAcknowledgeFailed>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e034      	b.n	8004668 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d028      	beq.n	8004658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004606:	f7fe fa2d 	bl	8002a64 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	429a      	cmp	r2, r3
 8004614:	d302      	bcc.n	800461c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d11d      	bne.n	8004658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004626:	2b80      	cmp	r3, #128	@ 0x80
 8004628:	d016      	beq.n	8004658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004644:	f043 0220 	orr.w	r2, r3, #32
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e007      	b.n	8004668 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004662:	2b80      	cmp	r3, #128	@ 0x80
 8004664:	d1c3      	bne.n	80045ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800467c:	e049      	b.n	8004712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b10      	cmp	r3, #16
 800468a:	d119      	bne.n	80046c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0210 	mvn.w	r2, #16
 8004694:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e030      	b.n	8004722 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c0:	f7fe f9d0 	bl	8002a64 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d302      	bcc.n	80046d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d11d      	bne.n	8004712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e0:	2b40      	cmp	r3, #64	@ 0x40
 80046e2:	d016      	beq.n	8004712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	f043 0220 	orr.w	r2, r3, #32
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e007      	b.n	8004722 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471c:	2b40      	cmp	r3, #64	@ 0x40
 800471e:	d1ae      	bne.n	800467e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004740:	d11b      	bne.n	800477a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800474a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	f043 0204 	orr.w	r2, r3, #4
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e267      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d075      	beq.n	8004892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047a6:	4b88      	ldr	r3, [pc, #544]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d00c      	beq.n	80047cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047b2:	4b85      	ldr	r3, [pc, #532]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d112      	bne.n	80047e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047be:	4b82      	ldr	r3, [pc, #520]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047ca:	d10b      	bne.n	80047e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047cc:	4b7e      	ldr	r3, [pc, #504]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05b      	beq.n	8004890 <HAL_RCC_OscConfig+0x108>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d157      	bne.n	8004890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e242      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ec:	d106      	bne.n	80047fc <HAL_RCC_OscConfig+0x74>
 80047ee:	4b76      	ldr	r3, [pc, #472]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a75      	ldr	r2, [pc, #468]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 80047f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e01d      	b.n	8004838 <HAL_RCC_OscConfig+0xb0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x98>
 8004806:	4b70      	ldr	r3, [pc, #448]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a6f      	ldr	r2, [pc, #444]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 800480c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	4b6d      	ldr	r3, [pc, #436]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a6c      	ldr	r2, [pc, #432]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 8004818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0xb0>
 8004820:	4b69      	ldr	r3, [pc, #420]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a68      	ldr	r2, [pc, #416]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 8004826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4b66      	ldr	r3, [pc, #408]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a65      	ldr	r2, [pc, #404]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 8004832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d013      	beq.n	8004868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7fe f910 	bl	8002a64 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004848:	f7fe f90c 	bl	8002a64 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	@ 0x64
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e207      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485a:	4b5b      	ldr	r3, [pc, #364]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0xc0>
 8004866:	e014      	b.n	8004892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fe f8fc 	bl	8002a64 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004870:	f7fe f8f8 	bl	8002a64 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	@ 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e1f3      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004882:	4b51      	ldr	r3, [pc, #324]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0xe8>
 800488e:	e000      	b.n	8004892 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d063      	beq.n	8004966 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800489e:	4b4a      	ldr	r3, [pc, #296]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00b      	beq.n	80048c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048aa:	4b47      	ldr	r3, [pc, #284]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d11c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b6:	4b44      	ldr	r3, [pc, #272]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d116      	bne.n	80048f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048c2:	4b41      	ldr	r3, [pc, #260]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_RCC_OscConfig+0x152>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d001      	beq.n	80048da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e1c7      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048da:	4b3b      	ldr	r3, [pc, #236]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4937      	ldr	r1, [pc, #220]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ee:	e03a      	b.n	8004966 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d020      	beq.n	800493a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f8:	4b34      	ldr	r3, [pc, #208]	@ (80049cc <HAL_RCC_OscConfig+0x244>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fe:	f7fe f8b1 	bl	8002a64 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004906:	f7fe f8ad 	bl	8002a64 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e1a8      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004918:	4b2b      	ldr	r3, [pc, #172]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004924:	4b28      	ldr	r3, [pc, #160]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4925      	ldr	r1, [pc, #148]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 8004934:	4313      	orrs	r3, r2
 8004936:	600b      	str	r3, [r1, #0]
 8004938:	e015      	b.n	8004966 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800493a:	4b24      	ldr	r3, [pc, #144]	@ (80049cc <HAL_RCC_OscConfig+0x244>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fe f890 	bl	8002a64 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004948:	f7fe f88c 	bl	8002a64 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e187      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495a:	4b1b      	ldr	r3, [pc, #108]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d036      	beq.n	80049e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d016      	beq.n	80049a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800497a:	4b15      	ldr	r3, [pc, #84]	@ (80049d0 <HAL_RCC_OscConfig+0x248>)
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004980:	f7fe f870 	bl	8002a64 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004988:	f7fe f86c 	bl	8002a64 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e167      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499a:	4b0b      	ldr	r3, [pc, #44]	@ (80049c8 <HAL_RCC_OscConfig+0x240>)
 800499c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x200>
 80049a6:	e01b      	b.n	80049e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a8:	4b09      	ldr	r3, [pc, #36]	@ (80049d0 <HAL_RCC_OscConfig+0x248>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ae:	f7fe f859 	bl	8002a64 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b4:	e00e      	b.n	80049d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b6:	f7fe f855 	bl	8002a64 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d907      	bls.n	80049d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e150      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
 80049c8:	40023800 	.word	0x40023800
 80049cc:	42470000 	.word	0x42470000
 80049d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d4:	4b88      	ldr	r3, [pc, #544]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 80049d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ea      	bne.n	80049b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8097 	beq.w	8004b1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ee:	2300      	movs	r3, #0
 80049f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049f2:	4b81      	ldr	r3, [pc, #516]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10f      	bne.n	8004a1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	4b7d      	ldr	r3, [pc, #500]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a06:	4a7c      	ldr	r2, [pc, #496]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a0e:	4b7a      	ldr	r3, [pc, #488]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1e:	4b77      	ldr	r3, [pc, #476]	@ (8004bfc <HAL_RCC_OscConfig+0x474>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d118      	bne.n	8004a5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a2a:	4b74      	ldr	r3, [pc, #464]	@ (8004bfc <HAL_RCC_OscConfig+0x474>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a73      	ldr	r2, [pc, #460]	@ (8004bfc <HAL_RCC_OscConfig+0x474>)
 8004a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a36:	f7fe f815 	bl	8002a64 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3e:	f7fe f811 	bl	8002a64 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e10c      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a50:	4b6a      	ldr	r3, [pc, #424]	@ (8004bfc <HAL_RCC_OscConfig+0x474>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d106      	bne.n	8004a72 <HAL_RCC_OscConfig+0x2ea>
 8004a64:	4b64      	ldr	r3, [pc, #400]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a68:	4a63      	ldr	r2, [pc, #396]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a70:	e01c      	b.n	8004aac <HAL_RCC_OscConfig+0x324>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b05      	cmp	r3, #5
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x30c>
 8004a7a:	4b5f      	ldr	r3, [pc, #380]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7e:	4a5e      	ldr	r2, [pc, #376]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004a80:	f043 0304 	orr.w	r3, r3, #4
 8004a84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a86:	4b5c      	ldr	r3, [pc, #368]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8a:	4a5b      	ldr	r2, [pc, #364]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a92:	e00b      	b.n	8004aac <HAL_RCC_OscConfig+0x324>
 8004a94:	4b58      	ldr	r3, [pc, #352]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a98:	4a57      	ldr	r2, [pc, #348]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aa0:	4b55      	ldr	r3, [pc, #340]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa4:	4a54      	ldr	r2, [pc, #336]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004aa6:	f023 0304 	bic.w	r3, r3, #4
 8004aaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d015      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab4:	f7fd ffd6 	bl	8002a64 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004abc:	f7fd ffd2 	bl	8002a64 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e0cb      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad2:	4b49      	ldr	r3, [pc, #292]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0ee      	beq.n	8004abc <HAL_RCC_OscConfig+0x334>
 8004ade:	e014      	b.n	8004b0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae0:	f7fd ffc0 	bl	8002a64 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae8:	f7fd ffbc 	bl	8002a64 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e0b5      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004afe:	4b3e      	ldr	r3, [pc, #248]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1ee      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d105      	bne.n	8004b1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b10:	4b39      	ldr	r3, [pc, #228]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	4a38      	ldr	r2, [pc, #224]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004b16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 80a1 	beq.w	8004c68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b26:	4b34      	ldr	r3, [pc, #208]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d05c      	beq.n	8004bec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d141      	bne.n	8004bbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3a:	4b31      	ldr	r3, [pc, #196]	@ (8004c00 <HAL_RCC_OscConfig+0x478>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b40:	f7fd ff90 	bl	8002a64 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b48:	f7fd ff8c 	bl	8002a64 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e087      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5a:	4b27      	ldr	r3, [pc, #156]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69da      	ldr	r2, [r3, #28]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b74:	019b      	lsls	r3, r3, #6
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	085b      	lsrs	r3, r3, #1
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	041b      	lsls	r3, r3, #16
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b88:	061b      	lsls	r3, r3, #24
 8004b8a:	491b      	ldr	r1, [pc, #108]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b90:	4b1b      	ldr	r3, [pc, #108]	@ (8004c00 <HAL_RCC_OscConfig+0x478>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b96:	f7fd ff65 	bl	8002a64 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b9e:	f7fd ff61 	bl	8002a64 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e05c      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb0:	4b11      	ldr	r3, [pc, #68]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <HAL_RCC_OscConfig+0x416>
 8004bbc:	e054      	b.n	8004c68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbe:	4b10      	ldr	r3, [pc, #64]	@ (8004c00 <HAL_RCC_OscConfig+0x478>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fd ff4e 	bl	8002a64 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bcc:	f7fd ff4a 	bl	8002a64 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e045      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bde:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <HAL_RCC_OscConfig+0x470>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0x444>
 8004bea:	e03d      	b.n	8004c68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d107      	bne.n	8004c04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e038      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	40007000 	.word	0x40007000
 8004c00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c04:	4b1b      	ldr	r3, [pc, #108]	@ (8004c74 <HAL_RCC_OscConfig+0x4ec>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d028      	beq.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d121      	bne.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d11a      	bne.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c34:	4013      	ands	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d111      	bne.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d107      	bne.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40023800 	.word	0x40023800

08004c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0cc      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c8c:	4b68      	ldr	r3, [pc, #416]	@ (8004e30 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d90c      	bls.n	8004cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9a:	4b65      	ldr	r3, [pc, #404]	@ (8004e30 <HAL_RCC_ClockConfig+0x1b8>)
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca2:	4b63      	ldr	r3, [pc, #396]	@ (8004e30 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d001      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0b8      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d020      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ccc:	4b59      	ldr	r3, [pc, #356]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	4a58      	ldr	r2, [pc, #352]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ce4:	4b53      	ldr	r3, [pc, #332]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4a52      	ldr	r2, [pc, #328]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cf0:	4b50      	ldr	r3, [pc, #320]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	494d      	ldr	r1, [pc, #308]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d044      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d107      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d16:	4b47      	ldr	r3, [pc, #284]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d119      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e07f      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d003      	beq.n	8004d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d107      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d36:	4b3f      	ldr	r3, [pc, #252]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d109      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e06f      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d46:	4b3b      	ldr	r3, [pc, #236]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e067      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d56:	4b37      	ldr	r3, [pc, #220]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f023 0203 	bic.w	r2, r3, #3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	4934      	ldr	r1, [pc, #208]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d68:	f7fd fe7c 	bl	8002a64 <HAL_GetTick>
 8004d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6e:	e00a      	b.n	8004d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d70:	f7fd fe78 	bl	8002a64 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e04f      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d86:	4b2b      	ldr	r3, [pc, #172]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 020c 	and.w	r2, r3, #12
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d1eb      	bne.n	8004d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d98:	4b25      	ldr	r3, [pc, #148]	@ (8004e30 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d20c      	bcs.n	8004dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da6:	4b22      	ldr	r3, [pc, #136]	@ (8004e30 <HAL_RCC_ClockConfig+0x1b8>)
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dae:	4b20      	ldr	r3, [pc, #128]	@ (8004e30 <HAL_RCC_ClockConfig+0x1b8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d001      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e032      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dcc:	4b19      	ldr	r3, [pc, #100]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4916      	ldr	r1, [pc, #88]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dea:	4b12      	ldr	r3, [pc, #72]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	490e      	ldr	r1, [pc, #56]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dfe:	f000 f821 	bl	8004e44 <HAL_RCC_GetSysClockFreq>
 8004e02:	4602      	mov	r2, r0
 8004e04:	4b0b      	ldr	r3, [pc, #44]	@ (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	091b      	lsrs	r3, r3, #4
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	490a      	ldr	r1, [pc, #40]	@ (8004e38 <HAL_RCC_ClockConfig+0x1c0>)
 8004e10:	5ccb      	ldrb	r3, [r1, r3]
 8004e12:	fa22 f303 	lsr.w	r3, r2, r3
 8004e16:	4a09      	ldr	r2, [pc, #36]	@ (8004e3c <HAL_RCC_ClockConfig+0x1c4>)
 8004e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e1a:	4b09      	ldr	r3, [pc, #36]	@ (8004e40 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fd fddc 	bl	80029dc <HAL_InitTick>

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40023c00 	.word	0x40023c00
 8004e34:	40023800 	.word	0x40023800
 8004e38:	08006770 	.word	0x08006770
 8004e3c:	20000000 	.word	0x20000000
 8004e40:	20000004 	.word	0x20000004

08004e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e48:	b090      	sub	sp, #64	@ 0x40
 8004e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e50:	2300      	movs	r3, #0
 8004e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e54:	2300      	movs	r3, #0
 8004e56:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e5c:	4b59      	ldr	r3, [pc, #356]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 030c 	and.w	r3, r3, #12
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d00d      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0x40>
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	f200 80a1 	bhi.w	8004fb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_RCC_GetSysClockFreq+0x34>
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d003      	beq.n	8004e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e76:	e09b      	b.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e78:	4b53      	ldr	r3, [pc, #332]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004e7c:	e09b      	b.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e7e:	4b53      	ldr	r3, [pc, #332]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x188>)
 8004e80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e82:	e098      	b.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e84:	4b4f      	ldr	r3, [pc, #316]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e8e:	4b4d      	ldr	r3, [pc, #308]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d028      	beq.n	8004eec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	099b      	lsrs	r3, r3, #6
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	623b      	str	r3, [r7, #32]
 8004ea4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004eac:	2100      	movs	r1, #0
 8004eae:	4b47      	ldr	r3, [pc, #284]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x188>)
 8004eb0:	fb03 f201 	mul.w	r2, r3, r1
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	fb00 f303 	mul.w	r3, r0, r3
 8004eba:	4413      	add	r3, r2
 8004ebc:	4a43      	ldr	r2, [pc, #268]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x188>)
 8004ebe:	fba0 1202 	umull	r1, r2, r0, r2
 8004ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ec4:	460a      	mov	r2, r1
 8004ec6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004ec8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eca:	4413      	add	r3, r2
 8004ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	61bb      	str	r3, [r7, #24]
 8004ed4:	61fa      	str	r2, [r7, #28]
 8004ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004ede:	f7fb fe49 	bl	8000b74 <__aeabi_uldivmod>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eea:	e053      	b.n	8004f94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eec:	4b35      	ldr	r3, [pc, #212]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	099b      	lsrs	r3, r3, #6
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	617a      	str	r2, [r7, #20]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004efe:	f04f 0b00 	mov.w	fp, #0
 8004f02:	4652      	mov	r2, sl
 8004f04:	465b      	mov	r3, fp
 8004f06:	f04f 0000 	mov.w	r0, #0
 8004f0a:	f04f 0100 	mov.w	r1, #0
 8004f0e:	0159      	lsls	r1, r3, #5
 8004f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f14:	0150      	lsls	r0, r2, #5
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	ebb2 080a 	subs.w	r8, r2, sl
 8004f1e:	eb63 090b 	sbc.w	r9, r3, fp
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f36:	ebb2 0408 	subs.w	r4, r2, r8
 8004f3a:	eb63 0509 	sbc.w	r5, r3, r9
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	00eb      	lsls	r3, r5, #3
 8004f48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f4c:	00e2      	lsls	r2, r4, #3
 8004f4e:	4614      	mov	r4, r2
 8004f50:	461d      	mov	r5, r3
 8004f52:	eb14 030a 	adds.w	r3, r4, sl
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	eb45 030b 	adc.w	r3, r5, fp
 8004f5c:	607b      	str	r3, [r7, #4]
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	028b      	lsls	r3, r1, #10
 8004f6e:	4621      	mov	r1, r4
 8004f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f74:	4621      	mov	r1, r4
 8004f76:	028a      	lsls	r2, r1, #10
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f7e:	2200      	movs	r2, #0
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	60fa      	str	r2, [r7, #12]
 8004f84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f88:	f7fb fdf4 	bl	8000b74 <__aeabi_uldivmod>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4613      	mov	r3, r2
 8004f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f94:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004fa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fae:	e002      	b.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fb0:	4b05      	ldr	r3, [pc, #20]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3740      	adds	r7, #64	@ 0x40
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	00f42400 	.word	0x00f42400
 8004fcc:	017d7840 	.word	0x017d7840

08004fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fd4:	4b03      	ldr	r3, [pc, #12]	@ (8004fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20000000 	.word	0x20000000

08004fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fec:	f7ff fff0 	bl	8004fd0 <HAL_RCC_GetHCLKFreq>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	4b05      	ldr	r3, [pc, #20]	@ (8005008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	0a9b      	lsrs	r3, r3, #10
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	4903      	ldr	r1, [pc, #12]	@ (800500c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ffe:	5ccb      	ldrb	r3, [r1, r3]
 8005000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005004:	4618      	mov	r0, r3
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40023800 	.word	0x40023800
 800500c:	08006780 	.word	0x08006780

08005010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005014:	f7ff ffdc 	bl	8004fd0 <HAL_RCC_GetHCLKFreq>
 8005018:	4602      	mov	r2, r0
 800501a:	4b05      	ldr	r3, [pc, #20]	@ (8005030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	0b5b      	lsrs	r3, r3, #13
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	4903      	ldr	r1, [pc, #12]	@ (8005034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005026:	5ccb      	ldrb	r3, [r1, r3]
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800502c:	4618      	mov	r0, r3
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40023800 	.word	0x40023800
 8005034:	08006780 	.word	0x08006780

08005038 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e07b      	b.n	8005142 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	2b00      	cmp	r3, #0
 8005050:	d108      	bne.n	8005064 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800505a:	d009      	beq.n	8005070 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	61da      	str	r2, [r3, #28]
 8005062:	e005      	b.n	8005070 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fd fafe 	bl	800268c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f4:	ea42 0103 	orr.w	r1, r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	f003 0104 	and.w	r1, r3, #4
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005116:	f003 0210 	and.w	r2, r3, #16
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005130:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e041      	b.n	80051e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7fd fad3 	bl	800271c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3304      	adds	r3, #4
 8005186:	4619      	mov	r1, r3
 8005188:	4610      	mov	r0, r2
 800518a:	f000 fc3b 	bl	8005a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d001      	beq.n	8005200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e044      	b.n	800528a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1e      	ldr	r2, [pc, #120]	@ (8005298 <HAL_TIM_Base_Start_IT+0xb0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d018      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x6c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522a:	d013      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x6c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1a      	ldr	r2, [pc, #104]	@ (800529c <HAL_TIM_Base_Start_IT+0xb4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x6c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a19      	ldr	r2, [pc, #100]	@ (80052a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d009      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x6c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a17      	ldr	r2, [pc, #92]	@ (80052a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x6c>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a16      	ldr	r2, [pc, #88]	@ (80052a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d111      	bne.n	8005278 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b06      	cmp	r3, #6
 8005264:	d010      	beq.n	8005288 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0201 	orr.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005276:	e007      	b.n	8005288 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40014000 	.word	0x40014000

080052ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e041      	b.n	8005342 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f839 	bl	800534a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3304      	adds	r3, #4
 80052e8:	4619      	mov	r1, r3
 80052ea:	4610      	mov	r0, r2
 80052ec:	f000 fb8a 	bl	8005a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d109      	bne.n	8005384 <HAL_TIM_PWM_Start+0x24>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	bf14      	ite	ne
 800537c:	2301      	movne	r3, #1
 800537e:	2300      	moveq	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	e022      	b.n	80053ca <HAL_TIM_PWM_Start+0x6a>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b04      	cmp	r3, #4
 8005388:	d109      	bne.n	800539e <HAL_TIM_PWM_Start+0x3e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b01      	cmp	r3, #1
 8005394:	bf14      	ite	ne
 8005396:	2301      	movne	r3, #1
 8005398:	2300      	moveq	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	e015      	b.n	80053ca <HAL_TIM_PWM_Start+0x6a>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d109      	bne.n	80053b8 <HAL_TIM_PWM_Start+0x58>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	bf14      	ite	ne
 80053b0:	2301      	movne	r3, #1
 80053b2:	2300      	moveq	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	e008      	b.n	80053ca <HAL_TIM_PWM_Start+0x6a>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	bf14      	ite	ne
 80053c4:	2301      	movne	r3, #1
 80053c6:	2300      	moveq	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e068      	b.n	80054a4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <HAL_TIM_PWM_Start+0x82>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053e0:	e013      	b.n	800540a <HAL_TIM_PWM_Start+0xaa>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d104      	bne.n	80053f2 <HAL_TIM_PWM_Start+0x92>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053f0:	e00b      	b.n	800540a <HAL_TIM_PWM_Start+0xaa>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d104      	bne.n	8005402 <HAL_TIM_PWM_Start+0xa2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005400:	e003      	b.n	800540a <HAL_TIM_PWM_Start+0xaa>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2202      	movs	r2, #2
 8005406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2201      	movs	r2, #1
 8005410:	6839      	ldr	r1, [r7, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fda8 	bl	8005f68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a23      	ldr	r2, [pc, #140]	@ (80054ac <HAL_TIM_PWM_Start+0x14c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d107      	bne.n	8005432 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005430:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1d      	ldr	r2, [pc, #116]	@ (80054ac <HAL_TIM_PWM_Start+0x14c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d018      	beq.n	800546e <HAL_TIM_PWM_Start+0x10e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005444:	d013      	beq.n	800546e <HAL_TIM_PWM_Start+0x10e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a19      	ldr	r2, [pc, #100]	@ (80054b0 <HAL_TIM_PWM_Start+0x150>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00e      	beq.n	800546e <HAL_TIM_PWM_Start+0x10e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a17      	ldr	r2, [pc, #92]	@ (80054b4 <HAL_TIM_PWM_Start+0x154>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d009      	beq.n	800546e <HAL_TIM_PWM_Start+0x10e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a16      	ldr	r2, [pc, #88]	@ (80054b8 <HAL_TIM_PWM_Start+0x158>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d004      	beq.n	800546e <HAL_TIM_PWM_Start+0x10e>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a14      	ldr	r2, [pc, #80]	@ (80054bc <HAL_TIM_PWM_Start+0x15c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d111      	bne.n	8005492 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b06      	cmp	r3, #6
 800547e:	d010      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0201 	orr.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005490:	e007      	b.n	80054a2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0201 	orr.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40000400 	.word	0x40000400
 80054b4:	40000800 	.word	0x40000800
 80054b8:	40000c00 	.word	0x40000c00
 80054bc:	40014000 	.word	0x40014000

080054c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d020      	beq.n	8005524 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01b      	beq.n	8005524 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0202 	mvn.w	r2, #2
 80054f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fa5b 	bl	80059c6 <HAL_TIM_IC_CaptureCallback>
 8005510:	e005      	b.n	800551e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa4d 	bl	80059b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fa5e 	bl	80059da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b00      	cmp	r3, #0
 800552c:	d020      	beq.n	8005570 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01b      	beq.n	8005570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0204 	mvn.w	r2, #4
 8005540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2202      	movs	r2, #2
 8005546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fa35 	bl	80059c6 <HAL_TIM_IC_CaptureCallback>
 800555c:	e005      	b.n	800556a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fa27 	bl	80059b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fa38 	bl	80059da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d020      	beq.n	80055bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01b      	beq.n	80055bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0208 	mvn.w	r2, #8
 800558c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2204      	movs	r2, #4
 8005592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fa0f 	bl	80059c6 <HAL_TIM_IC_CaptureCallback>
 80055a8:	e005      	b.n	80055b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fa01 	bl	80059b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fa12 	bl	80059da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d020      	beq.n	8005608 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01b      	beq.n	8005608 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0210 	mvn.w	r2, #16
 80055d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2208      	movs	r2, #8
 80055de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9e9 	bl	80059c6 <HAL_TIM_IC_CaptureCallback>
 80055f4:	e005      	b.n	8005602 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f9db 	bl	80059b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f9ec 	bl	80059da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00c      	beq.n	800562c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d007      	beq.n	800562c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0201 	mvn.w	r2, #1
 8005624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fc f946 	bl	80018b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00c      	beq.n	8005650 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fd7c 	bl	8006148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00c      	beq.n	8005674 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800566c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f9bd 	bl	80059ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00c      	beq.n	8005698 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b00      	cmp	r3, #0
 8005686:	d007      	beq.n	8005698 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0220 	mvn.w	r2, #32
 8005690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fd4e 	bl	8006134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e0ae      	b.n	800581c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b0c      	cmp	r3, #12
 80056ca:	f200 809f 	bhi.w	800580c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056ce:	a201      	add	r2, pc, #4	@ (adr r2, 80056d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d4:	08005709 	.word	0x08005709
 80056d8:	0800580d 	.word	0x0800580d
 80056dc:	0800580d 	.word	0x0800580d
 80056e0:	0800580d 	.word	0x0800580d
 80056e4:	08005749 	.word	0x08005749
 80056e8:	0800580d 	.word	0x0800580d
 80056ec:	0800580d 	.word	0x0800580d
 80056f0:	0800580d 	.word	0x0800580d
 80056f4:	0800578b 	.word	0x0800578b
 80056f8:	0800580d 	.word	0x0800580d
 80056fc:	0800580d 	.word	0x0800580d
 8005700:	0800580d 	.word	0x0800580d
 8005704:	080057cb 	.word	0x080057cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fa04 	bl	8005b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0208 	orr.w	r2, r2, #8
 8005722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0204 	bic.w	r2, r2, #4
 8005732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6999      	ldr	r1, [r3, #24]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	619a      	str	r2, [r3, #24]
      break;
 8005746:	e064      	b.n	8005812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fa4a 	bl	8005be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6999      	ldr	r1, [r3, #24]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	021a      	lsls	r2, r3, #8
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	619a      	str	r2, [r3, #24]
      break;
 8005788:	e043      	b.n	8005812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fa95 	bl	8005cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0208 	orr.w	r2, r2, #8
 80057a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69da      	ldr	r2, [r3, #28]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0204 	bic.w	r2, r2, #4
 80057b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69d9      	ldr	r1, [r3, #28]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	61da      	str	r2, [r3, #28]
      break;
 80057c8:	e023      	b.n	8005812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68b9      	ldr	r1, [r7, #8]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fadf 	bl	8005d94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69d9      	ldr	r1, [r3, #28]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	021a      	lsls	r2, r3, #8
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	61da      	str	r2, [r3, #28]
      break;
 800580a:	e002      	b.n	8005812 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	75fb      	strb	r3, [r7, #23]
      break;
 8005810:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800581a:	7dfb      	ldrb	r3, [r7, #23]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_TIM_ConfigClockSource+0x1c>
 800583c:	2302      	movs	r3, #2
 800583e:	e0b4      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x186>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800585e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005878:	d03e      	beq.n	80058f8 <HAL_TIM_ConfigClockSource+0xd4>
 800587a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800587e:	f200 8087 	bhi.w	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 8005882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005886:	f000 8086 	beq.w	8005996 <HAL_TIM_ConfigClockSource+0x172>
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800588e:	d87f      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 8005890:	2b70      	cmp	r3, #112	@ 0x70
 8005892:	d01a      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0xa6>
 8005894:	2b70      	cmp	r3, #112	@ 0x70
 8005896:	d87b      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 8005898:	2b60      	cmp	r3, #96	@ 0x60
 800589a:	d050      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x11a>
 800589c:	2b60      	cmp	r3, #96	@ 0x60
 800589e:	d877      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058a0:	2b50      	cmp	r3, #80	@ 0x50
 80058a2:	d03c      	beq.n	800591e <HAL_TIM_ConfigClockSource+0xfa>
 80058a4:	2b50      	cmp	r3, #80	@ 0x50
 80058a6:	d873      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058a8:	2b40      	cmp	r3, #64	@ 0x40
 80058aa:	d058      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x13a>
 80058ac:	2b40      	cmp	r3, #64	@ 0x40
 80058ae:	d86f      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058b0:	2b30      	cmp	r3, #48	@ 0x30
 80058b2:	d064      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058b4:	2b30      	cmp	r3, #48	@ 0x30
 80058b6:	d86b      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d060      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d867      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d05c      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d05a      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058c8:	e062      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058da:	f000 fb25 	bl	8005f28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	609a      	str	r2, [r3, #8]
      break;
 80058f6:	e04f      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005908:	f000 fb0e 	bl	8005f28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800591a:	609a      	str	r2, [r3, #8]
      break;
 800591c:	e03c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800592a:	461a      	mov	r2, r3
 800592c:	f000 fa82 	bl	8005e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2150      	movs	r1, #80	@ 0x50
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fadb 	bl	8005ef2 <TIM_ITRx_SetConfig>
      break;
 800593c:	e02c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800594a:	461a      	mov	r2, r3
 800594c:	f000 faa1 	bl	8005e92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2160      	movs	r1, #96	@ 0x60
 8005956:	4618      	mov	r0, r3
 8005958:	f000 facb 	bl	8005ef2 <TIM_ITRx_SetConfig>
      break;
 800595c:	e01c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800596a:	461a      	mov	r2, r3
 800596c:	f000 fa62 	bl	8005e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2140      	movs	r1, #64	@ 0x40
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fabb 	bl	8005ef2 <TIM_ITRx_SetConfig>
      break;
 800597c:	e00c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f000 fab2 	bl	8005ef2 <TIM_ITRx_SetConfig>
      break;
 800598e:	e003      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
      break;
 8005994:	e000      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
	...

08005a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a3a      	ldr	r2, [pc, #232]	@ (8005b00 <TIM_Base_SetConfig+0xfc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00f      	beq.n	8005a3c <TIM_Base_SetConfig+0x38>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a22:	d00b      	beq.n	8005a3c <TIM_Base_SetConfig+0x38>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a37      	ldr	r2, [pc, #220]	@ (8005b04 <TIM_Base_SetConfig+0x100>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d007      	beq.n	8005a3c <TIM_Base_SetConfig+0x38>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a36      	ldr	r2, [pc, #216]	@ (8005b08 <TIM_Base_SetConfig+0x104>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d003      	beq.n	8005a3c <TIM_Base_SetConfig+0x38>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a35      	ldr	r2, [pc, #212]	@ (8005b0c <TIM_Base_SetConfig+0x108>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d108      	bne.n	8005a4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a2b      	ldr	r2, [pc, #172]	@ (8005b00 <TIM_Base_SetConfig+0xfc>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d01b      	beq.n	8005a8e <TIM_Base_SetConfig+0x8a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a5c:	d017      	beq.n	8005a8e <TIM_Base_SetConfig+0x8a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a28      	ldr	r2, [pc, #160]	@ (8005b04 <TIM_Base_SetConfig+0x100>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d013      	beq.n	8005a8e <TIM_Base_SetConfig+0x8a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a27      	ldr	r2, [pc, #156]	@ (8005b08 <TIM_Base_SetConfig+0x104>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00f      	beq.n	8005a8e <TIM_Base_SetConfig+0x8a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a26      	ldr	r2, [pc, #152]	@ (8005b0c <TIM_Base_SetConfig+0x108>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00b      	beq.n	8005a8e <TIM_Base_SetConfig+0x8a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a25      	ldr	r2, [pc, #148]	@ (8005b10 <TIM_Base_SetConfig+0x10c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d007      	beq.n	8005a8e <TIM_Base_SetConfig+0x8a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a24      	ldr	r2, [pc, #144]	@ (8005b14 <TIM_Base_SetConfig+0x110>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <TIM_Base_SetConfig+0x8a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a23      	ldr	r2, [pc, #140]	@ (8005b18 <TIM_Base_SetConfig+0x114>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d108      	bne.n	8005aa0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8005b00 <TIM_Base_SetConfig+0xfc>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d103      	bne.n	8005ad4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d105      	bne.n	8005af2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f023 0201 	bic.w	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	611a      	str	r2, [r3, #16]
  }
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40010000 	.word	0x40010000
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40000c00 	.word	0x40000c00
 8005b10:	40014000 	.word	0x40014000
 8005b14:	40014400 	.word	0x40014400
 8005b18:	40014800 	.word	0x40014800

08005b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	f023 0201 	bic.w	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f023 0302 	bic.w	r3, r3, #2
 8005b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a1c      	ldr	r2, [pc, #112]	@ (8005be4 <TIM_OC1_SetConfig+0xc8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d10c      	bne.n	8005b92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f023 0308 	bic.w	r3, r3, #8
 8005b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f023 0304 	bic.w	r3, r3, #4
 8005b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a13      	ldr	r2, [pc, #76]	@ (8005be4 <TIM_OC1_SetConfig+0xc8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d111      	bne.n	8005bbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	621a      	str	r2, [r3, #32]
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	40010000 	.word	0x40010000

08005be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	f023 0210 	bic.w	r2, r3, #16
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 0320 	bic.w	r3, r3, #32
 8005c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a1e      	ldr	r2, [pc, #120]	@ (8005cbc <TIM_OC2_SetConfig+0xd4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d10d      	bne.n	8005c64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a15      	ldr	r2, [pc, #84]	@ (8005cbc <TIM_OC2_SetConfig+0xd4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d113      	bne.n	8005c94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40010000 	.word	0x40010000

08005cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	021b      	lsls	r3, r3, #8
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a1d      	ldr	r2, [pc, #116]	@ (8005d90 <TIM_OC3_SetConfig+0xd0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d10d      	bne.n	8005d3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a14      	ldr	r2, [pc, #80]	@ (8005d90 <TIM_OC3_SetConfig+0xd0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d113      	bne.n	8005d6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	621a      	str	r2, [r3, #32]
}
 8005d84:	bf00      	nop
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40010000 	.word	0x40010000

08005d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	031b      	lsls	r3, r3, #12
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a10      	ldr	r2, [pc, #64]	@ (8005e30 <TIM_OC4_SetConfig+0x9c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d109      	bne.n	8005e08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	019b      	lsls	r3, r3, #6
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	621a      	str	r2, [r3, #32]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40010000 	.word	0x40010000

08005e34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f023 0201 	bic.w	r2, r3, #1
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f023 030a 	bic.w	r3, r3, #10
 8005e70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	621a      	str	r2, [r3, #32]
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b087      	sub	sp, #28
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	f023 0210 	bic.w	r2, r3, #16
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	031b      	lsls	r3, r3, #12
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ece:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	621a      	str	r2, [r3, #32]
}
 8005ee6:	bf00      	nop
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f043 0307 	orr.w	r3, r3, #7
 8005f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	609a      	str	r2, [r3, #8]
}
 8005f1c:	bf00      	nop
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	021a      	lsls	r2, r3, #8
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	609a      	str	r2, [r3, #8]
}
 8005f5c:	bf00      	nop
 8005f5e:	371c      	adds	r7, #28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f003 031f 	and.w	r3, r3, #31
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a1a      	ldr	r2, [r3, #32]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	43db      	mvns	r3, r3
 8005f8a:	401a      	ands	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a1a      	ldr	r2, [r3, #32]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	621a      	str	r2, [r3, #32]
}
 8005fa6:	bf00      	nop
 8005fa8:	371c      	adds	r7, #28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
	...

08005fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e050      	b.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a1c      	ldr	r2, [pc, #112]	@ (800607c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d018      	beq.n	8006042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006018:	d013      	beq.n	8006042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a18      	ldr	r2, [pc, #96]	@ (8006080 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d00e      	beq.n	8006042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a16      	ldr	r2, [pc, #88]	@ (8006084 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d009      	beq.n	8006042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a15      	ldr	r2, [pc, #84]	@ (8006088 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d004      	beq.n	8006042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a13      	ldr	r2, [pc, #76]	@ (800608c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d10c      	bne.n	800605c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006048:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	4313      	orrs	r3, r2
 8006052:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	40010000 	.word	0x40010000
 8006080:	40000400 	.word	0x40000400
 8006084:	40000800 	.word	0x40000800
 8006088:	40000c00 	.word	0x40000c00
 800608c:	40014000 	.word	0x40014000

08006090 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e03d      	b.n	8006128 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e042      	b.n	80061f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fc fb40 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2224      	movs	r2, #36	@ 0x24
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800619e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f82b 	bl	80061fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695a      	ldr	r2, [r3, #20]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2220      	movs	r2, #32
 80061e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006200:	b0c0      	sub	sp, #256	@ 0x100
 8006202:	af00      	add	r7, sp, #0
 8006204:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006218:	68d9      	ldr	r1, [r3, #12]
 800621a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	ea40 0301 	orr.w	r3, r0, r1
 8006224:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	431a      	orrs	r2, r3
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	431a      	orrs	r2, r3
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	4313      	orrs	r3, r2
 8006244:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006254:	f021 010c 	bic.w	r1, r1, #12
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006262:	430b      	orrs	r3, r1
 8006264:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006276:	6999      	ldr	r1, [r3, #24]
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	ea40 0301 	orr.w	r3, r0, r1
 8006282:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	4b8f      	ldr	r3, [pc, #572]	@ (80064c8 <UART_SetConfig+0x2cc>)
 800628c:	429a      	cmp	r2, r3
 800628e:	d005      	beq.n	800629c <UART_SetConfig+0xa0>
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4b8d      	ldr	r3, [pc, #564]	@ (80064cc <UART_SetConfig+0x2d0>)
 8006298:	429a      	cmp	r2, r3
 800629a:	d104      	bne.n	80062a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800629c:	f7fe feb8 	bl	8005010 <HAL_RCC_GetPCLK2Freq>
 80062a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80062a4:	e003      	b.n	80062ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062a6:	f7fe fe9f 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 80062aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062b8:	f040 810c 	bne.w	80064d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062c0:	2200      	movs	r2, #0
 80062c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80062ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80062ce:	4622      	mov	r2, r4
 80062d0:	462b      	mov	r3, r5
 80062d2:	1891      	adds	r1, r2, r2
 80062d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80062d6:	415b      	adcs	r3, r3
 80062d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80062de:	4621      	mov	r1, r4
 80062e0:	eb12 0801 	adds.w	r8, r2, r1
 80062e4:	4629      	mov	r1, r5
 80062e6:	eb43 0901 	adc.w	r9, r3, r1
 80062ea:	f04f 0200 	mov.w	r2, #0
 80062ee:	f04f 0300 	mov.w	r3, #0
 80062f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062fe:	4690      	mov	r8, r2
 8006300:	4699      	mov	r9, r3
 8006302:	4623      	mov	r3, r4
 8006304:	eb18 0303 	adds.w	r3, r8, r3
 8006308:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800630c:	462b      	mov	r3, r5
 800630e:	eb49 0303 	adc.w	r3, r9, r3
 8006312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006322:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006326:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800632a:	460b      	mov	r3, r1
 800632c:	18db      	adds	r3, r3, r3
 800632e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006330:	4613      	mov	r3, r2
 8006332:	eb42 0303 	adc.w	r3, r2, r3
 8006336:	657b      	str	r3, [r7, #84]	@ 0x54
 8006338:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800633c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006340:	f7fa fc18 	bl	8000b74 <__aeabi_uldivmod>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4b61      	ldr	r3, [pc, #388]	@ (80064d0 <UART_SetConfig+0x2d4>)
 800634a:	fba3 2302 	umull	r2, r3, r3, r2
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	011c      	lsls	r4, r3, #4
 8006352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006356:	2200      	movs	r2, #0
 8006358:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800635c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006360:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006364:	4642      	mov	r2, r8
 8006366:	464b      	mov	r3, r9
 8006368:	1891      	adds	r1, r2, r2
 800636a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800636c:	415b      	adcs	r3, r3
 800636e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006370:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006374:	4641      	mov	r1, r8
 8006376:	eb12 0a01 	adds.w	sl, r2, r1
 800637a:	4649      	mov	r1, r9
 800637c:	eb43 0b01 	adc.w	fp, r3, r1
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800638c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006394:	4692      	mov	sl, r2
 8006396:	469b      	mov	fp, r3
 8006398:	4643      	mov	r3, r8
 800639a:	eb1a 0303 	adds.w	r3, sl, r3
 800639e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063a2:	464b      	mov	r3, r9
 80063a4:	eb4b 0303 	adc.w	r3, fp, r3
 80063a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80063bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80063c0:	460b      	mov	r3, r1
 80063c2:	18db      	adds	r3, r3, r3
 80063c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80063c6:	4613      	mov	r3, r2
 80063c8:	eb42 0303 	adc.w	r3, r2, r3
 80063cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80063ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80063d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80063d6:	f7fa fbcd 	bl	8000b74 <__aeabi_uldivmod>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	4611      	mov	r1, r2
 80063e0:	4b3b      	ldr	r3, [pc, #236]	@ (80064d0 <UART_SetConfig+0x2d4>)
 80063e2:	fba3 2301 	umull	r2, r3, r3, r1
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	2264      	movs	r2, #100	@ 0x64
 80063ea:	fb02 f303 	mul.w	r3, r2, r3
 80063ee:	1acb      	subs	r3, r1, r3
 80063f0:	00db      	lsls	r3, r3, #3
 80063f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80063f6:	4b36      	ldr	r3, [pc, #216]	@ (80064d0 <UART_SetConfig+0x2d4>)
 80063f8:	fba3 2302 	umull	r2, r3, r3, r2
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006404:	441c      	add	r4, r3
 8006406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800640a:	2200      	movs	r2, #0
 800640c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006410:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006414:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006418:	4642      	mov	r2, r8
 800641a:	464b      	mov	r3, r9
 800641c:	1891      	adds	r1, r2, r2
 800641e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006420:	415b      	adcs	r3, r3
 8006422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006424:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006428:	4641      	mov	r1, r8
 800642a:	1851      	adds	r1, r2, r1
 800642c:	6339      	str	r1, [r7, #48]	@ 0x30
 800642e:	4649      	mov	r1, r9
 8006430:	414b      	adcs	r3, r1
 8006432:	637b      	str	r3, [r7, #52]	@ 0x34
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	f04f 0300 	mov.w	r3, #0
 800643c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006440:	4659      	mov	r1, fp
 8006442:	00cb      	lsls	r3, r1, #3
 8006444:	4651      	mov	r1, sl
 8006446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800644a:	4651      	mov	r1, sl
 800644c:	00ca      	lsls	r2, r1, #3
 800644e:	4610      	mov	r0, r2
 8006450:	4619      	mov	r1, r3
 8006452:	4603      	mov	r3, r0
 8006454:	4642      	mov	r2, r8
 8006456:	189b      	adds	r3, r3, r2
 8006458:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800645c:	464b      	mov	r3, r9
 800645e:	460a      	mov	r2, r1
 8006460:	eb42 0303 	adc.w	r3, r2, r3
 8006464:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006474:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006478:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800647c:	460b      	mov	r3, r1
 800647e:	18db      	adds	r3, r3, r3
 8006480:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006482:	4613      	mov	r3, r2
 8006484:	eb42 0303 	adc.w	r3, r2, r3
 8006488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800648a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800648e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006492:	f7fa fb6f 	bl	8000b74 <__aeabi_uldivmod>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4b0d      	ldr	r3, [pc, #52]	@ (80064d0 <UART_SetConfig+0x2d4>)
 800649c:	fba3 1302 	umull	r1, r3, r3, r2
 80064a0:	095b      	lsrs	r3, r3, #5
 80064a2:	2164      	movs	r1, #100	@ 0x64
 80064a4:	fb01 f303 	mul.w	r3, r1, r3
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	3332      	adds	r3, #50	@ 0x32
 80064ae:	4a08      	ldr	r2, [pc, #32]	@ (80064d0 <UART_SetConfig+0x2d4>)
 80064b0:	fba2 2303 	umull	r2, r3, r2, r3
 80064b4:	095b      	lsrs	r3, r3, #5
 80064b6:	f003 0207 	and.w	r2, r3, #7
 80064ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4422      	add	r2, r4
 80064c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064c4:	e106      	b.n	80066d4 <UART_SetConfig+0x4d8>
 80064c6:	bf00      	nop
 80064c8:	40011000 	.word	0x40011000
 80064cc:	40011400 	.word	0x40011400
 80064d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064d8:	2200      	movs	r2, #0
 80064da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80064e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80064e6:	4642      	mov	r2, r8
 80064e8:	464b      	mov	r3, r9
 80064ea:	1891      	adds	r1, r2, r2
 80064ec:	6239      	str	r1, [r7, #32]
 80064ee:	415b      	adcs	r3, r3
 80064f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064f6:	4641      	mov	r1, r8
 80064f8:	1854      	adds	r4, r2, r1
 80064fa:	4649      	mov	r1, r9
 80064fc:	eb43 0501 	adc.w	r5, r3, r1
 8006500:	f04f 0200 	mov.w	r2, #0
 8006504:	f04f 0300 	mov.w	r3, #0
 8006508:	00eb      	lsls	r3, r5, #3
 800650a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800650e:	00e2      	lsls	r2, r4, #3
 8006510:	4614      	mov	r4, r2
 8006512:	461d      	mov	r5, r3
 8006514:	4643      	mov	r3, r8
 8006516:	18e3      	adds	r3, r4, r3
 8006518:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800651c:	464b      	mov	r3, r9
 800651e:	eb45 0303 	adc.w	r3, r5, r3
 8006522:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006532:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	f04f 0300 	mov.w	r3, #0
 800653e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006542:	4629      	mov	r1, r5
 8006544:	008b      	lsls	r3, r1, #2
 8006546:	4621      	mov	r1, r4
 8006548:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800654c:	4621      	mov	r1, r4
 800654e:	008a      	lsls	r2, r1, #2
 8006550:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006554:	f7fa fb0e 	bl	8000b74 <__aeabi_uldivmod>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4b60      	ldr	r3, [pc, #384]	@ (80066e0 <UART_SetConfig+0x4e4>)
 800655e:	fba3 2302 	umull	r2, r3, r3, r2
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	011c      	lsls	r4, r3, #4
 8006566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800656a:	2200      	movs	r2, #0
 800656c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006570:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006574:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006578:	4642      	mov	r2, r8
 800657a:	464b      	mov	r3, r9
 800657c:	1891      	adds	r1, r2, r2
 800657e:	61b9      	str	r1, [r7, #24]
 8006580:	415b      	adcs	r3, r3
 8006582:	61fb      	str	r3, [r7, #28]
 8006584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006588:	4641      	mov	r1, r8
 800658a:	1851      	adds	r1, r2, r1
 800658c:	6139      	str	r1, [r7, #16]
 800658e:	4649      	mov	r1, r9
 8006590:	414b      	adcs	r3, r1
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	f04f 0200 	mov.w	r2, #0
 8006598:	f04f 0300 	mov.w	r3, #0
 800659c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065a0:	4659      	mov	r1, fp
 80065a2:	00cb      	lsls	r3, r1, #3
 80065a4:	4651      	mov	r1, sl
 80065a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065aa:	4651      	mov	r1, sl
 80065ac:	00ca      	lsls	r2, r1, #3
 80065ae:	4610      	mov	r0, r2
 80065b0:	4619      	mov	r1, r3
 80065b2:	4603      	mov	r3, r0
 80065b4:	4642      	mov	r2, r8
 80065b6:	189b      	adds	r3, r3, r2
 80065b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065bc:	464b      	mov	r3, r9
 80065be:	460a      	mov	r2, r1
 80065c0:	eb42 0303 	adc.w	r3, r2, r3
 80065c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	f04f 0300 	mov.w	r3, #0
 80065dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80065e0:	4649      	mov	r1, r9
 80065e2:	008b      	lsls	r3, r1, #2
 80065e4:	4641      	mov	r1, r8
 80065e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065ea:	4641      	mov	r1, r8
 80065ec:	008a      	lsls	r2, r1, #2
 80065ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80065f2:	f7fa fabf 	bl	8000b74 <__aeabi_uldivmod>
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	4611      	mov	r1, r2
 80065fc:	4b38      	ldr	r3, [pc, #224]	@ (80066e0 <UART_SetConfig+0x4e4>)
 80065fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	2264      	movs	r2, #100	@ 0x64
 8006606:	fb02 f303 	mul.w	r3, r2, r3
 800660a:	1acb      	subs	r3, r1, r3
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	3332      	adds	r3, #50	@ 0x32
 8006610:	4a33      	ldr	r2, [pc, #204]	@ (80066e0 <UART_SetConfig+0x4e4>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800661c:	441c      	add	r4, r3
 800661e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006622:	2200      	movs	r2, #0
 8006624:	673b      	str	r3, [r7, #112]	@ 0x70
 8006626:	677a      	str	r2, [r7, #116]	@ 0x74
 8006628:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800662c:	4642      	mov	r2, r8
 800662e:	464b      	mov	r3, r9
 8006630:	1891      	adds	r1, r2, r2
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	415b      	adcs	r3, r3
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800663c:	4641      	mov	r1, r8
 800663e:	1851      	adds	r1, r2, r1
 8006640:	6039      	str	r1, [r7, #0]
 8006642:	4649      	mov	r1, r9
 8006644:	414b      	adcs	r3, r1
 8006646:	607b      	str	r3, [r7, #4]
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006654:	4659      	mov	r1, fp
 8006656:	00cb      	lsls	r3, r1, #3
 8006658:	4651      	mov	r1, sl
 800665a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800665e:	4651      	mov	r1, sl
 8006660:	00ca      	lsls	r2, r1, #3
 8006662:	4610      	mov	r0, r2
 8006664:	4619      	mov	r1, r3
 8006666:	4603      	mov	r3, r0
 8006668:	4642      	mov	r2, r8
 800666a:	189b      	adds	r3, r3, r2
 800666c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800666e:	464b      	mov	r3, r9
 8006670:	460a      	mov	r2, r1
 8006672:	eb42 0303 	adc.w	r3, r2, r3
 8006676:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	663b      	str	r3, [r7, #96]	@ 0x60
 8006682:	667a      	str	r2, [r7, #100]	@ 0x64
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	f04f 0300 	mov.w	r3, #0
 800668c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006690:	4649      	mov	r1, r9
 8006692:	008b      	lsls	r3, r1, #2
 8006694:	4641      	mov	r1, r8
 8006696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800669a:	4641      	mov	r1, r8
 800669c:	008a      	lsls	r2, r1, #2
 800669e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80066a2:	f7fa fa67 	bl	8000b74 <__aeabi_uldivmod>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	4b0d      	ldr	r3, [pc, #52]	@ (80066e0 <UART_SetConfig+0x4e4>)
 80066ac:	fba3 1302 	umull	r1, r3, r3, r2
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	2164      	movs	r1, #100	@ 0x64
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	3332      	adds	r3, #50	@ 0x32
 80066be:	4a08      	ldr	r2, [pc, #32]	@ (80066e0 <UART_SetConfig+0x4e4>)
 80066c0:	fba2 2303 	umull	r2, r3, r2, r3
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	f003 020f 	and.w	r2, r3, #15
 80066ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4422      	add	r2, r4
 80066d2:	609a      	str	r2, [r3, #8]
}
 80066d4:	bf00      	nop
 80066d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80066da:	46bd      	mov	sp, r7
 80066dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066e0:	51eb851f 	.word	0x51eb851f

080066e4 <memset>:
 80066e4:	4402      	add	r2, r0
 80066e6:	4603      	mov	r3, r0
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d100      	bne.n	80066ee <memset+0xa>
 80066ec:	4770      	bx	lr
 80066ee:	f803 1b01 	strb.w	r1, [r3], #1
 80066f2:	e7f9      	b.n	80066e8 <memset+0x4>

080066f4 <__libc_init_array>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	4d0d      	ldr	r5, [pc, #52]	@ (800672c <__libc_init_array+0x38>)
 80066f8:	4c0d      	ldr	r4, [pc, #52]	@ (8006730 <__libc_init_array+0x3c>)
 80066fa:	1b64      	subs	r4, r4, r5
 80066fc:	10a4      	asrs	r4, r4, #2
 80066fe:	2600      	movs	r6, #0
 8006700:	42a6      	cmp	r6, r4
 8006702:	d109      	bne.n	8006718 <__libc_init_array+0x24>
 8006704:	4d0b      	ldr	r5, [pc, #44]	@ (8006734 <__libc_init_array+0x40>)
 8006706:	4c0c      	ldr	r4, [pc, #48]	@ (8006738 <__libc_init_array+0x44>)
 8006708:	f000 f826 	bl	8006758 <_init>
 800670c:	1b64      	subs	r4, r4, r5
 800670e:	10a4      	asrs	r4, r4, #2
 8006710:	2600      	movs	r6, #0
 8006712:	42a6      	cmp	r6, r4
 8006714:	d105      	bne.n	8006722 <__libc_init_array+0x2e>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	f855 3b04 	ldr.w	r3, [r5], #4
 800671c:	4798      	blx	r3
 800671e:	3601      	adds	r6, #1
 8006720:	e7ee      	b.n	8006700 <__libc_init_array+0xc>
 8006722:	f855 3b04 	ldr.w	r3, [r5], #4
 8006726:	4798      	blx	r3
 8006728:	3601      	adds	r6, #1
 800672a:	e7f2      	b.n	8006712 <__libc_init_array+0x1e>
 800672c:	08006798 	.word	0x08006798
 8006730:	08006798 	.word	0x08006798
 8006734:	08006798 	.word	0x08006798
 8006738:	0800679c 	.word	0x0800679c

0800673c <memcpy>:
 800673c:	440a      	add	r2, r1
 800673e:	4291      	cmp	r1, r2
 8006740:	f100 33ff 	add.w	r3, r0, #4294967295
 8006744:	d100      	bne.n	8006748 <memcpy+0xc>
 8006746:	4770      	bx	lr
 8006748:	b510      	push	{r4, lr}
 800674a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800674e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006752:	4291      	cmp	r1, r2
 8006754:	d1f9      	bne.n	800674a <memcpy+0xe>
 8006756:	bd10      	pop	{r4, pc}

08006758 <_init>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	bf00      	nop
 800675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675e:	bc08      	pop	{r3}
 8006760:	469e      	mov	lr, r3
 8006762:	4770      	bx	lr

08006764 <_fini>:
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	bf00      	nop
 8006768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676a:	bc08      	pop	{r3}
 800676c:	469e      	mov	lr, r3
 800676e:	4770      	bx	lr
